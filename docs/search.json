[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "CS&SS 508",
    "section": "",
    "text": "Instructor:\nVictoria (Vic) Sass\n\n\nLecture:\nTuesdays 4:30 - 5:20pm\n\n\n\nLab AA:\nTuesdays 5:30 - 6:20pm\n\n\n\nLab AB:\nThursdays 4:30 - 5:20pm\n\n\n\n\n\nOffice Hours:\nThursdays 2-4pm (on Zoom; link on Canvas)"
  },
  {
    "objectID": "Homework/homework.html",
    "href": "Homework/homework.html",
    "title": "Overview",
    "section": "",
    "text": "This page contains general instructions for assignments/peer reviews. For homework-specific instructions, deadlines, and templates, go to the specific assignment listed on the left.\n\nAll assignments should be created using Quarto and uploaded to Canvas as both html and qmd files. Your document should be pleasant for a peer to look at and follow all instructions. Use sections for organization, label figures/tables, and use code chunks (e.g., echo, results).\n\nPeer Review:\nYou are required to both grade and provide feedback on a peer’s homework each week. Reading/evaluating the work of others is useful and important! Good programmers realize that most problems have been solved by others; the trick is figuring out how to apply existing code to new problems. You will develop this skill by reading others' code, evaluating their approach to problems, providing suggestions, and pointing out when you learned something new. Good peer reviews give constructive, polite, and insightful comments, are specific and concise, use the grading rubric below, and point out what you learned from their code. Poor peer reviews are impolite or unprofessional, are generic (i.e., could be applied to anyone's homework), or fail to provide useful suggestions.\n\n\nRubric Students Use to Grade Assignments:\n\n0: Didn't turn anything in\n1: Turned in but low effort, ignoring many directions (less than 50% of assignment completed correctly)\n2: Decent effort, followed directions with some minor issues (50-80% of assignment completed correctly)\n3: Nailed it (&gt;80% of assignment completed correctly)\n\n\nRubric Instructor Uses to Grade Peer Review:\n\n0: Didn’t follow all of the instructions below.\n1: Peer review was at least one paragraph long, mentions any and all key issues from the assignment, and points out at least one thing positive in your peer’s work (and hopefully more!).\n\n\nWhen to Contact the Instructor:\nA number of situations may warrant contacting the instructor:\n\nIf you believe you have received an unfair peer review, you can resubmit your homework for evaluation by the instructor. The assignment will be regraded, which may result in a higher, same, or lower grade.\nIf you wish for more feedback on a particular part of the homework, you can ask the instructor for additional explanation without resubmitting during lab or over email.\nIf you receive no feedback, the instructor will provide gentle peer review on request."
  },
  {
    "objectID": "Homework/HW1/homework1.html",
    "href": "Homework/HW1/homework1.html",
    "title": "Homework 1",
    "section": "",
    "text": "Instructions\nWrite up a .Rmd file showing some exploratory analyses of the Swiss fertility data. Upload both the .Rmd file and the .html file to Canvas. You must upload both for credit.\nMix in-line R calculations, R output, and plots with text describing the relationships you see. Include at least two plots. You must use in-line R calculations at least once (e.g. functions like nrow(), mean(), sd(), cor(), median(), min()) and may not hard-code any numbers referenced in your text.\nYour document should be pleasant for a peer to look at, with some organization using sections or lists, and all plots labeled clearly. Use chunk options echo and results to limit the code/output you show in the .html. Discussion of specific values should be summarized in sentences in your text – not as printed code and output – and rounded so as not to be absurdly precise (e.g. round x with round(x, 2)).\n\n\nTemplates\nraw qmd file\nrendered html file\n\n\nExamples\nraw qmd file\nrendered html file\n\n\nHomework Due Date\n\n\nPeer Review Due Date"
  },
  {
    "objectID": "Homework/HW1/CSSS508_HW1_Template.html",
    "href": "Homework/HW1/CSSS508_HW1_Template.html",
    "title": "Homework 1",
    "section": "",
    "text": "This basic R markdown file has some text, inline code, and code chunks!"
  },
  {
    "objectID": "Homework/HW1/CSSS508_HW1_Template.html#code-chunks",
    "href": "Homework/HW1/CSSS508_HW1_Template.html#code-chunks",
    "title": "Homework 1",
    "section": "Code Chunks",
    "text": "Code Chunks\n\nset.seed(1)\nnorm &lt;- rnorm(100)\nhist(x = norm, \n     xlab = \"X Axis Name\", \n     ylab = \"Count\", \n     main = \"Histogram of 100 observations from a Standard Normal\")"
  },
  {
    "objectID": "Homework/HW1/CSSS508_HW1_Template.html#text-and-inline-text",
    "href": "Homework/HW1/CSSS508_HW1_Template.html#text-and-inline-text",
    "title": "Homework 1",
    "section": "Text and Inline Text",
    "text": "Text and Inline Text\nThe sample mean of the data plotted above (rounded to 3 decimal points) is 0.109 and the variance is 0.807.\nWhat’s the relationship between standard deviation and variance?\n\\[ \\text{Standard Deviation}(X) = \\sqrt{\\text{Variance}(X)} \\]\nThe standard deviation of the data plotted above is 0.898."
  },
  {
    "objectID": "syllabus.html",
    "href": "syllabus.html",
    "title": "Syllabus",
    "section": "",
    "text": "This syllabus is subject to change. All changes will be announced both in class and on this page.\n\nCourse Info:\nInstructor: Victoria Sass\nLecture: Tuesday 4:30-5:20pm (Gowen 201)\n• Lab AA Tuesday 5:30-6:20pm (Savery 117)\n• Lab AB Thursday 4:30-520pm (Savery 117)\nOffice Hours: Tuesdays 9-10am, 3-4pm (Zoom - link on Canvas)\n\n\nOverview and Learning Objectives:\nThis course is intended to give students a foundational understanding of programming in the statistical language R. This knowledge is intended to be broadly useful wherever you encounter data in your education and career. General topics we will focus on include:\n\nExploring data with graphics and summaries\nCleaning and preparing data for analyses\nLinking data sets together\nOrganizing projects and creating reproducible research\n\nBy the end of this course you should feel confident approaching any data you encounter in the future. We will cover almost no statistics, however it is the intention that this course will leave you prepared to progress in CS&SS or STAT courses with the ability to focus on statistics instead of coding. Additionally, the basic concepts you learn will be applicable to other programming languages and research in general, such as logic and algorithmic thinking.\n\n\nStructure:\nThis course has a primary lecture session, a lab session, and office hours:\n\nLecture (in-person; 50 minutes): On Tuesdays, I will lead a collaborative session on a specific topic to help you learn fundamental skills, concepts, and principles for learning R. The content from lecture each week will be the basis of the homework assignment due the following week.\nLab (in-person; 50 minutes): On Tuesdays and Thursdays, we will meet in the CSSCR lab for an interactive session where we will practice the skills from lecture. Students will work with each other to learn and practice key skills in R, but I will be available to help as well!\nOffice Hours (remote; two 60 minute sessions): On Wednesdays, I will hold drop-in office hours on Zoom. This is a great time to ask questions, get advice, or continue discussions from lab/lecture. We can talk in a breakout room or with the group! A link to the Zoom meeting can be found on Canvas.\n\n\n\nSchedule:\nBelow is a summary of topics that will be covered each week in lecture. Labs will focus on material covered in the previous lecture, unless otherwise stated below.\n\nWeek 1 (3/29): Introduction to R, RStudio, and RMarkdown\nWeek 2 (4/5): Visualizing Data\nWeek 3 (4/12): Manipulating and Summarizing Data\nWeek 4 (4/19): Understanding R Data Structures\nWeek 5 (4/26): Importing, Exporting, and Cleaning Data\nWeek 6 (5/3): Using Loops\nWeek 7 (5/10): Writing Functions\nWeek 8 (5/17): Working with Text Data\nWeek 9 (5/24): Working with Geographical Data\nWeek 10 (5/31): Reproducibility and Model Results\n\nThis course will have no meeting during final exam week.\n\n\nPrerequisites:\nThis course has no prerequisites.\n\n\nMaterials and Texts:\nThis course has no required materials or texts. However, there are a few things to note:\n\nLaptops: This course is primarily focused on computation. As a result, it is helpful to bring a personal laptop to class each day. Alternatively, you can use one of the computers available in the classroom (Savery 117, aka the “CSSCR Big Lab”). If you’d like a laptop but do not have one, you can borrow one for free from UW through the Student Technology Loan Program.\nOnline Textbooks: This course has no required textbooks, but there are many helpful resources available for free online. Two of my favorites are the textbook R for Data Science by Garrett Grolemund and Hadley Wickham and the collection of short R Cheat Sheets by the folks at RStudio.\n\n\n\nGrading\nThis course is graded as credit/no credit. To pass you need to receive at least 60% of the available points. There will be 8 graded homework assignments, one nearly every week. There are 4 points possible for each week that features a homework.\n\nHomework (75%; 3 points): These must be turned in as knitted Markdown documents which we will learn to create and for which templates are provided. They will be graded on a 0 to 3 point scale based on a simple effort-focused rubric found on the course website. These are designed first and foremost to develop skills rather than \"prove\" you have learned concepts. I encourage you to communicate and work together, so long as you write and explain your code yourself and do not copy work. You can learn a lot from replicating others' code, but you will learn nothing if you copy it without knowing how it works! In other words, you’re not really going to learn unless you do the coding yourself!\nPeer Review (25%; 1 point): Each week an assignment is due, students will be randomly assigned to grade another student's assignment following a 0 to 3 rubric. They will be expected to provide constructive feedback and commentary if something new was learned. Reading others' code is an important skill and you will write better code knowing others will see it. These reviews will be due prior to the following class meeting. Each peer review is worth 1 point and will be evaluated by the instructor on a binary \"good\" / \"not good\" scale.\n\n\n\nClassroom Environment\nI am absolutely committed to fostering a friendly and inclusive classroom environment in which all students have an equal opportunity to learn and succeed.\n\nNames & Pronouns: Everyone deserves to be addressed respectfully and correctly. You are welcome to send me your preferred name and correct gender pronouns at any time. I will also provide an opportunity to share your preferred name and pronouns in-class on the first day!\nCovid Considerations: I will follow all University rules and procedures regarding Covid, which may or may not change during the quarter. I also recognize that Covid creates unique circumstances and concerns for each of us, which may limit your ability to fully attend or participate in this course. You never need to apologize to me for anything pandemic related. If there is something I can do to make you feel more comfortable during class, please let me know!\nGetting Help: If at any point during the quarter you find yourself struggling to keep up, please let me know! I am here to help. A great place to start this process is by chatting after class, coming to office hours, or sending me an email.\nFeedback: I encourage and appreciate your feedback. Please feel welcome to contact me via email with feedback at any point during or after the quarter. Additionally, I will send out a mid-quarter feedback survey on Canvas around Week 5.\nDiversity: Diverse backgrounds, embodiments, and experiences are essential to the critical thinking endeavor at the heart of university education. Therefore, I expect you to follow the UW Student Conduct Code in your interactions with your colleagues and me in this course by respecting the many social and cultural differences among us, which may include, but are not limited to: age, cultural background, disability, ethnicity, family status, gender identity and presentation, citizenship and immigration status, national origin, race, religious and political beliefs, sex, sexual orientation, socioeconomic status, and veteran status.\nAccessibility & Accommodations: Your experience in this class is important to me. If you have already established accommodations with Disability Resources for Students (DRS), please communicate your approved accommodations to me at your earliest convenience so we can discuss your needs in this course. If you have not yet established services through DRS, but have a temporary health condition or permanent disability that requires accommodations (conditions include but not limited to; mental health, attention-related, learning, vision, hearing, physical or health impacts), you are welcome to contact DRS at 206-543-8924, uwdrs@uw.edu, or through their website. DRS offers resources and coordinates reasonable accommodations for students with disabilities and/or temporary health conditions. Reasonable accommodations are established through an interactive process between you, your instructor(s) and DRS. It is the policy and practice of the University of Washington to create inclusive and accessible learning environments consistent with federal and state law.\nAcademic Integrity: Academic integrity is essential to this course and to your learning. In this course, violations of the academic integrity policy include but are not limited to: copying from a peer, copying from an online resource, or using resources from a previous iteration of the course. That said, I hope you will collaborate with peers on assignments, and use Internet resources when questions arise to help solve issues. The key is that you ultimately submit your own work. Anything found in violation of this policy will be automatically given a score of 0 with no exceptions. If the situation merits, it will also be reported to the UW Student Conduct Office, at which point it is out of my hands. If you have any questions about this policy, please do not hesitate to reach out and ask.\nReligious Accommodations: Washington state law requires that UW develop a policy for accommodation of student absences or significant hardship due to reasons of faith or conscience, or for organized religious activities. The UW's policy, including more information about how to request an accommodation, is available at Religious Accommodations Policy. Accommodations must be requested within the first two weeks of this course using the Religious Accommodations Request form."
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2_index.html",
    "href": "Lectures/Lecture2/CSSS508_Lecture2_index.html",
    "title": "Lecture 2",
    "section": "",
    "text": "Slides\nHTML slides • PDF Slides • Raw qmd file\n\n\n\nResources\n\nCompanion R File\nGapminder\nR Graphics Cookbook\nProvides “recipes” for common plot types that you can use as is or as inspiration.\nPosit ggplot2 cheatsheet\nggplot2 reference website\nA much more user-friendly compilation of the help pages for all of the ggplot2 functions. With example code AND output!\nKieran Healy’s book Data Visualization: A Practical Introduction"
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture5_index.html",
    "href": "Lectures/Lecture5/CSSS508_Lecture5_index.html",
    "title": "Lecture 5",
    "section": "",
    "text": "Slides\nHTML slides • PDF Slides • Raw qmd file\n\n\n\nResources"
  },
  {
    "objectID": "Lectures/Lecture11/CSSS508_Lecture11_index.html",
    "href": "Lectures/Lecture11/CSSS508_Lecture11_index.html",
    "title": "Lecture 11",
    "section": "",
    "text": "Slides\nHTML slides • PDF Slides • Raw qmd file\n\n\n\nResources"
  },
  {
    "objectID": "Lectures/Lecture10/CSSS508_Lecture10_index.html",
    "href": "Lectures/Lecture10/CSSS508_Lecture10_index.html",
    "title": "Lecture 10",
    "section": "",
    "text": "Slides\nHTML slides • PDF Slides • Raw qmd file\n\n\n\nResources"
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4_index.html",
    "href": "Lectures/Lecture4/CSSS508_Lecture4_index.html",
    "title": "Lecture 4",
    "section": "",
    "text": "Slides\nHTML slides • PDF Slides • Raw qmd file\n\n\n\nResources\n\nCompanion R file\nExcel error article\nPosit dplyr cheatsheet\ndplyr reference website"
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3_index.html",
    "href": "Lectures/Lecture3/CSSS508_Lecture3_index.html",
    "title": "Lecture 3",
    "section": "",
    "text": "Slides\nHTML slides • PDF Slides • Raw qmd file\n\n\n\nResources\n\nCompanion R File\nThe tidyverse style guide"
  },
  {
    "objectID": "Lectures/lectures.html",
    "href": "Lectures/lectures.html",
    "title": "Schedule",
    "section": "",
    "text": "Lecture\nDate\nTopic\n\n\n\n\n1\n3 October 2023\nIntroduction to R, R Studio, and Quarto\n\n\n2\n10 October 2023\nVisualizing Data, Part I\n\n\n3\n17 October 2023\nWorkflow and Best Practices\n\n\n4\n24 October 2023\nManipulating and Summarizing Data\n\n\n5\n31 October 2023\nUnderstanding R Data Structures, Part I\n\n\n6\n7 November 2023\nUnderstanding R Data Structures, Part II\n\n\n7\n14 November 2023\nImporting, Exporting, and Cleaning Data\n\n\n8\n21 November 2023\nWriting Functions\n\n\n9\n28 November 2023\nIteration\n\n\n10\n5 December 2023\nVisualizing Data, Part II\n\n\n11\n15 December 2023\nNext Steps (Optional zoom lecture/recording)"
  },
  {
    "objectID": "Lectures/Lecture6/CSSS508_Lecture6_index.html",
    "href": "Lectures/Lecture6/CSSS508_Lecture6_index.html",
    "title": "Lecture 6",
    "section": "",
    "text": "Slides\nHTML slides • PDF Slides • Raw qmd file\n\n\n\nResources"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1_index.html",
    "href": "Lectures/Lecture1/CSSS508_Lecture1_index.html",
    "title": "Lecture 1",
    "section": "",
    "text": "Slides\nHTML slides • PDF Slides • Raw qmd file\n\n\n\nResources\n\nCompanion R File\nDownload R\nDownload RStudio\nR for Data Science\nPosit cheatsheets\nPosit community\nStackoverflow"
  },
  {
    "objectID": "Lectures/Lecture8/CSSS508_Lecture8_index.html",
    "href": "Lectures/Lecture8/CSSS508_Lecture8_index.html",
    "title": "Lecture 8",
    "section": "",
    "text": "Slides\nHTML slides • PDF Slides • Raw qmd file\n\n\n\nResources"
  },
  {
    "objectID": "Lectures/Lecture9/CSSS508_Lecture9_index.html",
    "href": "Lectures/Lecture9/CSSS508_Lecture9_index.html",
    "title": "Lecture 9",
    "section": "",
    "text": "Slides\nHTML slides • PDF Slides • Raw qmd file\n\n\n\nResources"
  },
  {
    "objectID": "Lectures/Lecture7/CSSS508_Lecture7_index.html",
    "href": "Lectures/Lecture7/CSSS508_Lecture7_index.html",
    "title": "Lecture 7",
    "section": "",
    "text": "Slides\nHTML slides • PDF Slides • Raw qmd file\n\n\n\nResources"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#welcome",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#welcome",
    "title": "CSSS 508 • Lecture 1",
    "section": "Welcome!",
    "text": "Welcome!\n\nIntroductions\nSyllabus\nLecture 1: Introduction to R, RStudio, and Quarto"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#introductions",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#introductions",
    "title": "CSSS 508 • Lecture 1",
    "section": "Introductions",
    "text": "Introductions\nLet’s start by going around the room and sharing our:\n\nName and pronouns\nProgram and year\nExperience with programming (in R or generally)\nYour favorite place to eat in Seattle (what do you usually order?)"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#syllabus",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#syllabus",
    "title": "CSSS 508 • Lecture 1",
    "section": "Syllabus",
    "text": "Syllabus\nThe syllabus (as well as lots of other information) can be found on our course website:\n\nhttps://vsass.github.io/CSSS508\n\nFeel free to follow along online as I run through the syllabus!"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#course-goals",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#course-goals",
    "title": "CSSS 508 • Lecture 1",
    "section": "Course goals",
    "text": "Course goals\nThis course is intended to give students a foundational understanding of programming in the statistical language R. General topics include:\n\n\nExploring data with graphics and summaries\nCleaning, preparing, and linking data for analyses\nFoundational programming skills such as functions and loops\nOrganizing projects and creating reproducible research\n\n\n\nWe won’t really cover any statistics in this course but the goal is for you to increase your coding comprehension and learn the tools you need to be able to focus on statistics instead of coding in any future/current CSSS or STAT courses!"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#logistics",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#logistics",
    "title": "CSSS 508 • Lecture 1",
    "section": "Logistics",
    "text": "Logistics\nSessions: \n\n\nLecture: An overview of that week’s topic where we’ll learn key skills, concepts, and principles.\n\nTuesdays, 4:30-5:20pm (Gowen 201)\n\n\n\nLabs: An interactive session where we’ll put what we’ve learned in lecture into practice.\n\n\nLab AA: Tuesday, 5:30-6:20pm (Savery 117)\n\nLab AB: Thursday, 4:30-5:20pm (Savery 117)\n\n\n\nOffice Hours: Thursdays, 2-4pm\n(on Zoom; link on Canvas)\n\n\nCourse Website: https://vsass.github.io/CSSS508\nContact: Message me on our Canvas course page rather than sending me an email. I get far too many emails a day and I don’t want to miss your message!"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#schedule",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#schedule",
    "title": "CSSS 508 • Lecture 1",
    "section": "Schedule",
    "text": "Schedule\n\nWeek 1: Introduction to R, RStudio, and Quarto\nWeek 2: Visualizing Data, Part I\nWeek 3: Workflow and Best Practices\nWeek 4: Manipulating and Summarizing Data\nWeek 5: Understanding Data Structures\nWeek 6: Working with Text Data\nWeek 7: Importing, Exporting, and Cleaning Data\nWeek 8: Writing Functions\nWeek 9: Iteration\nWeek 10: Visualizing Data, Part II\nWeek 11: Next Steps (Optional - Last day of Finals Week)"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html",
    "title": "CSSS 508 • Lecture 1",
    "section": "",
    "text": "Agenda for today:\n\nIntroductions\nSyllabus\nLecture 1: Introduction to R, RStudio, and Quarto"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#prerequisites-materials-and-texts",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#prerequisites-materials-and-texts",
    "title": "CSSS 508 • Lecture 1",
    "section": "Prerequisites, Materials, and Texts",
    "text": "Prerequisites, Materials, and Texts\nPrerequisites: None\nMaterials: All course materials are provided on the course website. This includes:\n\nThese slides and the code used to generate them.\nAn R script for the slides to follow along in class.\nHomework instructions and/or templates\nUseful links to other resources.\n\nLaptops: It’s helpful to bring a laptop to class. If you don’t have one, you can use the lab computers or borrow one for free from the UW Student Technology Loan Program.\nTextbooks: This course has no textbook. However, I will provide optional reading recommendations that I’ve found really useful!"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#grading",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#grading",
    "title": "CSSS 508 • Lecture 1",
    "section": "Grading",
    "text": "Grading\nFinal grade: Credit/No Credit (C/NC); You need at least 60% to get Credit.\n\n\nHomework (75%; assessed by peers): 8 total homeworks; assessed on a 0-3 point rubric. Assigned after lectures and due before the following lecture.\n\nPeer Grading (25%; assessed by the instructor): One per homework, assessed on a binary “good”/“not good” scale. Due before the following lab.\n\nAssignment/peer grading instructions and deadlines can be found on the Homework page of the course website. All homework will be turned in on Canvas."
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#ugh-peer-grading",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#ugh-peer-grading",
    "title": "CSSS 508 • Lecture 1",
    "section": "Ugh, peer grading?",
    "text": "Ugh, peer grading?\nYes, because:\n\nYou will write your reports better knowing others will see them\nYou learn alternate approaches to the same problem\nYou will have more opportunities to practice and have the material sink in\n\n\nHow to peer review:\n\nLeave constructive comments: You’ll only get the point if you write at least 1 full paragraph that includes\n\nAny key issues from the assignment and,\nPoints out something positive in your peer’s work.\n\n\n\nEmail me if you would like your assignment to be regraded or provide feedback if no peer review was given."
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#academic-integrity",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#academic-integrity",
    "title": "CSSS 508 • Lecture 1",
    "section": "Academic Integrity",
    "text": "Academic Integrity\nAcademic integrity is essential to this course and to your learning. Violations of the academic integrity policy include but are not limited to:\n\nCopying from a peer\nCopying from an online resource\nUsing resources from a previous iteration of the course.\n\n\nI hope you will collaborate with peers on assignments and use Internet resources when questions arise to help solve issues. The key is that you ultimately submit your own work.\n\n\nAnything found in violation of this policy will be automatically given a score of 0 with no exceptions. If the situation merits, it will also be reported to the UW Student Conduct Office, at which point it is out of my hands. If you have any questions about this policy, please do not hesitate to reach out and ask."
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#classroom-environment",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#classroom-environment",
    "title": "CSSS 508 • Lecture 1",
    "section": "Classroom Environment",
    "text": "Classroom Environment\nI’m committed to fostering a friendly and inclusive classroom environment in which all students have an equal opportunity to learn and succeed.\n\n\nNames & Pronouns: Everyone should be addressed respectfully and correctly. Feel free to send me your name/pronouns anytime.\n\n\n\n\nCovid: Covid creates unique circumstances for each of us, which may limit your ability to fully participate in this course. You never need to apologize to me for anything pandemic-related. Let me know how I can help!\n\n\n\n\nAccessibility & Accomodations: See course website for information on health, disability, and religious accomodations.\n\n\n\n\nFeedback: I encourage feedback at any point in the quarter. I will also send out a mid-quarter evaluation around Week 5.\n\n\n\n\nGetting Help: If you ever find yourself struggling, know I’m here to help! Try chatting after class, messaging me on Canvas, or coming to office hours."
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#asking-questions",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#asking-questions",
    "title": "CSSS 508 • Lecture 1",
    "section": "Asking Questions",
    "text": "Asking Questions\nDon’t ask like this:\n\ntried lm(y~x) but it iddn’t work wat do\n\n\nInstead, ask like this:\n\ny &lt;- seq(1:10) + rnorm(10)\nx &lt;- seq(0:10)\nmodel &lt;- lm(y ~ x)\nRunning the block above gives me the following error, anyone know why?\nError in model.frame.default(formula = y ~ x, \ndrop.unused.levels = TRUE) : variable lengths differ \n(found for 'x')\n\nI may send out your question (anonymously) and my answer to the course mailing list!"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#questions",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#questions",
    "title": "CSSS 508 • Lecture 1",
    "section": "Questions?",
    "text": "Questions?"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#a-note-on-slide-formatting",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#a-note-on-slide-formatting",
    "title": "CSSS 508 • Lecture 1",
    "section": "A Note on Slide Formatting",
    "text": "A Note on Slide Formatting\nBold and Italics indicate important terms!\n\nCode represents R code you could use to perform actions. For example: “Press Ctrl-P to open the print dialogue.”\n\n\nCode chunks that span the page represent actual R code embedded in the slides.\n\n# Sometimes important stuff is highlighted!\n7 * 49\n\n[1] 343"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#lecture-1-introduction-to-r-rstudio-and-quarto",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#lecture-1-introduction-to-r-rstudio-and-quarto",
    "title": "CSSS 508 • Lecture 1",
    "section": "Lecture 1: Introduction to R, RStudio, and Quarto",
    "text": "Lecture 1: Introduction to R, RStudio, and Quarto"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#why-r",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#why-r",
    "title": "CSSS 508 • Lecture 1",
    "section": "Why R?",
    "text": "Why R?\nR is a programming language built for statistical computing.\nIf one already knows Stata or similar software, why use R?\n\n\nR is free.\n\n\n\n\nR has a very large community.\n\n\n\n\nR can handle virtually any data format.\n\n\n\n\nR makes replication easy.\n\n\n\n\nR is a language so it can do everything.\n\n\n\n\nR skills transfer to other languages like Python and Julia."
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#r-studio",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#r-studio",
    "title": "CSSS 508 • Lecture 1",
    "section": "R Studio",
    "text": "R Studio\nR Studio is a “front-end” or integrated development environment (IDE) for R that can make your life easier.\n\nWe’ll show RStudio can… . . .\n\nOrganize your code, output, and plots\n\n\n\n\nAuto-complete code and highlight syntax\n\n\n\n\nHelp view data and objects\n\n\n\n\nEnable easy integration of R code into documents with Quarto\n\n\n\n\nIt can also…\n\nManage git repositories\nRun interactive tutorials\nHandle other languages like C++, Python, SQL, HTML, and shell scripting"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#selling-you-on-quarto",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#selling-you-on-quarto",
    "title": "CSSS 508 • Lecture 1",
    "section": "Selling You on Quarto",
    "text": "Selling You on Quarto\nBuilt upon many of the developments of the R Markdown ecosystem, Quarto distills them into one coherent system and additionally expands its functionality by supporting other programming languages besides R, including Python and Julia."
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#selling-you-on-quarto-1",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#selling-you-on-quarto-1",
    "title": "CSSS 508 • Lecture 1",
    "section": "Selling You on Quarto",
    "text": "Selling You on Quarto\nThe ability to create Quarto files in R is a powerful advantage. It allows us to:\n\n\nDocument analyses by combining text, code, and output\n\nNo copying and pasting into Word\nEasy for collaborators to understand\nShow as little or as much code as you want\n\n\nProduce many different document types as output\n\nPDF documents\nHTML webpages and reports\nWord and PowerPoint documents\n\nPresentations (like these slides)\nBooks\nTheses/Dissertations 😉🎓\nWebsites (like the one for this course!)\n\n\nWorks with LaTeX and HTML for math and more formatting control\n\n\n\nWe’ll get back to this shortly!"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#selling-you-on-quarto-2",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#selling-you-on-quarto-2",
    "title": "CSSS 508 • Lecture 1",
    "section": "Selling You on Quarto",
    "text": "Selling You on Quarto\nThe ability to create Quarto files in R is a powerful advantage. It allows us to:\n\nProduce many different document types as output\n\n\n\nPDF documents\nHTML webpages and reports\nWord and PowerPoint documents\n\nPresentations (like these slides)\nBooks\nTheses/Dissertations 😉🎓\nWebsites (like the one for this course!)\nWorks with LaTeX and HTML for math and more formatting control\n\n\n\nWe’ll get back to this shortly!"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#downloading-r-and-rstudio",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#downloading-r-and-rstudio",
    "title": "CSSS 508 • Lecture 1",
    "section": "Downloading R and RStudio",
    "text": "Downloading R and RStudio\nIf you don’t already have R and RStudio on your machine, now is the time to do so!"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#getting-started",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#getting-started",
    "title": "CSSS 508 • Lecture 1",
    "section": "Getting Started",
    "text": "Getting Started\nOpen up RStudio now and choose File &gt; New File &gt; R Script.\nThen, let’s get oriented with the interface:\n\n\nTop Left: Code editor pane, data viewer (browse with tabs)\nBottom Left: Console for running code (&gt; prompt)\nTop Right: List of objects in environment, code history tab.\nBottom Right: Tabs for browsing files, viewing plots, managing packages, and viewing help files."
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#getting-started-1",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#getting-started-1",
    "title": "CSSS 508 • Lecture 1",
    "section": "Getting Started",
    "text": "Getting Started\nOpen up RStudio now and choose File &gt; New File &gt; R Script.\nThen, let’s get oriented with the interface:\n\n\nTop Left: Code editor pane, data viewer (browse with tabs)\nBottom Left: Console for running code (&gt; prompt)\nTop Right: List of objects in environment, code history tab.\nBottom Right: Tabs for browsing files, viewing plots, managing packages, and viewing help files."
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#downloading-r-and-rstudio-1",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#downloading-r-and-rstudio-1",
    "title": "CSSS 508 • Lecture 1",
    "section": "Downloading R and RStudio",
    "text": "Downloading R and RStudio\nIf you don’t already have R and RStudio on your machine, now is the time to do so!\n\n\nGo to the course homepage, https://vsass.github.io/CSSS508\n\nClick the Download R link and download R to your machine.\nAfterwards, click the Download RStudio link and download RStudio to your machine.\nLastly, click the Download Quarto link and download Quarto to your machine.\n\n\n\nAlright, that’s it for lecture today! I’ll see most of you over in Savery 117 for our lab section and I’ll see the rest of you there on Thursday!"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#getting-started-background-image-httpsrstudio.github.iocheatsheetsrstudio-ide.pdf",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#getting-started-background-image-httpsrstudio.github.iocheatsheetsrstudio-ide.pdf",
    "title": "CSSS 508 • Lecture 1",
    "section": "Getting Started {background-image = “https://rstudio.github.io/cheatsheets/rstudio-ide.pdf”}",
    "text": "Getting Started {background-image = “https://rstudio.github.io/cheatsheets/rstudio-ide.pdf”}\nOpen up RStudio now and choose File &gt; New File &gt; R Script.\nThen, let’s get oriented with the interface:\n\n\nTop Left: Code editor pane, data viewer (browse with tabs)\nBottom Left: Console for running code (&gt; prompt)\nTop Right: List of objects in environment, code history tab.\nBottom Right: Tabs for browsing files, viewing plots, managing packages, and viewing help files."
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#background-iframehttpsrstudio.github.iocheatsheetsrstudio-ide.pdf-background-interactive-true",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#background-iframehttpsrstudio.github.iocheatsheetsrstudio-ide.pdf-background-interactive-true",
    "title": "CSSS 508 • Lecture 1",
    "section": "{background-iframe=“https://rstudio.github.io/cheatsheets/rstudio-ide.pdf” background-interactive = true}",
    "text": "{background-iframe=“https://rstudio.github.io/cheatsheets/rstudio-ide.pdf” background-interactive = true}"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#background-imageimagesrstudio-panes-labeled.jpeg-background-size-80",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#background-imageimagesrstudio-panes-labeled.jpeg-background-size-80",
    "title": "CSSS 508 • Lecture 1",
    "section": "{background-image=“images/rstudio-panes-labeled.jpeg” background-size: 80%}",
    "text": "{background-image=“images/rstudio-panes-labeled.jpeg” background-size: 80%}"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#editing-and-running-code",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#editing-and-running-code",
    "title": "CSSS 508 • Lecture 1",
    "section": "Editing and Running Code",
    "text": "Editing and Running Code\nThere are several ways to run R code in RStudio:\n\n\nHighlight lines in the editor window and click Run at the top or hit Ctrl+Enter or ⌘+Enter to run them all."
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#incomplete-code",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#incomplete-code",
    "title": "CSSS 508 • Lecture 1",
    "section": "Incomplete Code",
    "text": "Incomplete Code\nIf you mess up (e.g. leave off a parenthesis), R might show a + sign prompting you to finish the command:\n\n&gt; (11-2\n+\n\nFinish the command or hit Esc to get out of this."
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#r-as-a-calculator",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#r-as-a-calculator",
    "title": "CSSS 508 • Lecture 1",
    "section": "R as a Calculator",
    "text": "R as a Calculator\nIn the console, type 123 + 456 + 789 and hit Enter.\n\n\n123 + 456 + 789\n\n[1] 1368\n\n\n\n\nThe [1] in the output indicates the numeric index of the first element on that line.\n\n\nNow in your blank R document in the editor, try typing the line sqrt(400) and either clicking Run or hitting Ctrl+Enter or ⌘+Enter.\n\n\n\nsqrt(400)\n\n[1] 20"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#functions-and-help",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#functions-and-help",
    "title": "CSSS 508 • Lecture 1",
    "section": "Functions and Help",
    "text": "Functions and Help\nsqrt() is an example of a function in R.\nIf we didn’t have a good guess as to what sqrt() will do, we can type ?sqrt in the console and look at the Help panel on the right.\n\n?sqrt\n\nArguments are the inputs to a function. In this case, the only argument to sqrt() is x which can be a number or a vector of numbers.\nHelp files provide documentation on how to use functions and what functions produce."
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#objects",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#objects",
    "title": "CSSS 508 • Lecture 1",
    "section": "Objects",
    "text": "Objects\nR stores everything as an object, including data, functions, models, and output.\n\nCreating an object can be done using the assignment operator: &lt;- . . .\n\nnew.object &lt;- 144\n\n\n\nOperators like &lt;- are functions that look like symbols but typically sit between their arguments (e.g. numbers or objects) instead of having them inside () like in sqrt(x).\n\n\nWe do math with operators, e.g., x + y. + is the addition operator!"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#calling-objects",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#calling-objects",
    "title": "CSSS 508 • Lecture 1",
    "section": "Calling Objects",
    "text": "Calling Objects\nYou can display or “call” an object simply by using its name.\n\nnew.object\n\n[1] 144\n\n\n\nObject names can contain _ and . in them but cannot begin with numbers. Try to be consistent in naming objects. RStudio auto-complete means long names are better than vague ones!\nGood names save confusion later!\nObject names are CaSe SeNsItIvE!!"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#using-objects",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#using-objects",
    "title": "CSSS 508 • Lecture 1",
    "section": "Using Objects",
    "text": "Using Objects\nAn object’s name represents the information stored in that object, so you can treat the object’s name as if it were the values stored inside. . . .\n\nnew.object + 10\n\n[1] 154\n\nnew.object + new.object\n\n[1] 288\n\nsqrt(new.object)\n\n[1] 12"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#vectors",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#vectors",
    "title": "CSSS 508 • Lecture 1",
    "section": "Vectors",
    "text": "Vectors\nA vector is a series of elements, such as numbers.\n\nYou can create a vector using the function c() which stands for “combine” or “concatenate”. . . .\n\nnew.object &lt;- c(4, 9, 16, 25, 36)\nnew.object\n\n[1]  4  9 16 25 36\n\n\n\n\nIf you name an object the same name as an existing object, it will overwrite it.\n\n\nYou can provide a vector as an argument for many functions. . . .\n\nsqrt(new.object)\n\n[1] 2 3 4 5 6"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#more-complex-objects",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#more-complex-objects",
    "title": "CSSS 508 • Lecture 1",
    "section": "More Complex Objects",
    "text": "More Complex Objects\nThere are other, more complex data types in R which we will discuss later in the quarter! These include matrices, arrays, lists, and dataframes.\nMost data sets you will work with will be read into R and stored as a dataframe, so this course will mainly focus on manipulating and visualizing these objects."
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#quarto",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#quarto",
    "title": "CSSS 508 • Lecture 1",
    "section": "Quarto",
    "text": "Quarto"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#quarto-documents",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#quarto-documents",
    "title": "CSSS 508 • Lecture 1",
    "section": "Quarto Documents",
    "text": "Quarto Documents\nLet’s try making an Quarto file:\n\nChoose File &gt; New File &gt; Quarto Document…\n\nMake sure HTML Output is selected\nIn the Title box call this test document my_first_qmd.qmd and click Create\n\nSave this document somewhere (you can delete it later) (either with File &gt; Save or clicking the 💾 icon towards the top left of the source pane)\nClick the ➡️Render button\nWatch the progress in the Background Jobs tab of the console pane, then gaze upon your result!\n\n\nIf you want to create PDF output in the future, you’ll need to run the following code in your console.\n\ninstall.packages(\"quarto\")\ninstall.packages('tinytex')\ntinytex::install_tinytex()"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#quarto-headers",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#quarto-headers",
    "title": "CSSS 508 • Lecture 1",
    "section": "Quarto Headers",
    "text": "Quarto Headers\nThe header of an .qmd file is a code block, and everything else is part of the main document.\n\n\n---\ntitle: \"Untitled\"\nauthor: \"Victoria Sass\"\ndate: \"October 3, 2023\"\noutput: html_document\n---"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#footnotes",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#footnotes",
    "title": "CSSS 508 • Lecture 1",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nThis thing is the caret: |\nBe careful though, YAML is space-sensitive; indents matter!"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#editing-and-running-code-1",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#editing-and-running-code-1",
    "title": "CSSS 508 • Lecture 1",
    "section": "Editing and Running Code",
    "text": "Editing and Running Code\nThere are several ways to run R code in RStudio:\n\nHighlight lines in the editor window and click Run at the top or hit Ctrl+Enter or ⌘+Enter to run them all.\nWith your caret1 on a line you want to run, hit Ctrl+Enter or ⌘+Enter. Note your caret moves to the next line, so you can run code sequentially with repeated presses.\n\n\n\nType individual lines in the console and press Enter.\n\n\n\n\nIn R Markdown documents, click within a code chunk and click the green arrow to run the chunk. The button beside that runs all prior chunks.\n\n\n\nThe console will show the lines you ran followed by any printed output.\n\nThis thing is the caret: |"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#quarto-headers-1",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#quarto-headers-1",
    "title": "CSSS 508 • Lecture 1",
    "section": "Quarto Headers",
    "text": "Quarto Headers\nThe header of an .qmd file is a code block, and everything else is part of the main document.\n\n---\ntitle: \"Untitled\"\nauthor: \"Victoria Sass\"\ndate: \"October 3, 2023\"\noutput: html_document\n---\n\nTo mess with global formatting, you can modify the header1.\n\noutput:\n  html_document:\n    theme: readable\n\nBe careful though, YAML is space-sensitive; indents matter!"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#r-markdown-syntax",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#r-markdown-syntax",
    "title": "CSSS 508 • Lecture 1",
    "section": "R Markdown Syntax",
    "text": "R Markdown Syntax\n\n\nOutput\nbold/strong emphasis\nitalic/normal emphasis\n\nBlock quote from famous person\n\n\nSyntax\nbold/strong emphasis\nitalic/normal emphasis"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#subheader",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#subheader",
    "title": "CSSS 508 • Lecture 1",
    "section": "Subheader",
    "text": "Subheader\nSubsubheader\n\nBlock quote from famous person ```"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#quarto-syntax",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#quarto-syntax",
    "title": "CSSS 508 • Lecture 1",
    "section": "Quarto Syntax",
    "text": "Quarto Syntax\n\n\nOutput\nbold/strong emphasis italic/normal emphasis \nHeader\n\n\nSubheader\n\n\nSubsubheader\n\n\n\nBlock quote from famous person\n\n\nSyntax\n\n**bold/strong emphasis**\n*italic/normal emphasis*\n  \n  \n  \n# Header\n  \n  \n  \n## Subheader\n  \n\n\n### Subsubheader\n  \n\n\n\n&gt; Block quote from\n&gt; famous person"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#more-r-markdown-syntax",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#more-r-markdown-syntax",
    "title": "CSSS 508 • Lecture 1",
    "section": "More R Markdown Syntax",
    "text": "More R Markdown Syntax\n\n\nOutput\n\nOrdered lists\nAre real easy\nEven with sublists\nOr when lazy with numbering\n\n\nUnordered lists\nAre also real easy\n\nAlso even with sublists\n\n\n\nSyntax\n1. Ordered lists 1. Are real easy 1. Even with sublists 1. Or when lazy with numbering\n* Unordered lists * Are also real easy + Also even with sublists"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#quarto-syntax-continued",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#quarto-syntax-continued",
    "title": "CSSS 508 • Lecture 1",
    "section": "Quarto Syntax Continued",
    "text": "Quarto Syntax Continued\n\n\nOutput\n\nOrdered lists\nAre real easy\n\nEven with sublists\nOr with lazy numbering\n\n\n\n\nUnordered lists\nAre also real easy\n\nAlso even with sublists\n\nAnd subsublists\n\n\n\n\n\n\nSyntax\n\n1. Ordered lists\n1. Are real easy\n    1. Even with sublists\n    1. Or with lazy numbering\n  \n    \n    \n    \n    \n* Unordered lists\n* Are also real easy\n  + Also even with sublists\n    - And subsublists"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#formulae-and-syntax",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#formulae-and-syntax",
    "title": "CSSS 508 • Lecture 1",
    "section": "Formulae and Syntax",
    "text": "Formulae and Syntax\n\n\nOutput\nInclude math \\(y= \\left( \\frac{2}{3} \\right)^2\\) inline.\nOr centered on your page like so:\n\\[\\frac{1}{n} \\sum_{i=1}^{n} x_i = \\bar{x}_n\\]\nOr write code-looking font.\nOr a block of code:\n\ny &lt;- 1:5\nz &lt;- y^2\n\n\nSyntax\nInclude math $y= \\left(\\frac{2}{3} \\right)^2$ inline. \n\nOr centered on your page like so: \n  \n$$\\frac{1}{n} \\sum_{i=1}^{n}x_i = \\bar{x}_n$$\n\n\n  \n  \nOr write`code-looking font`.\n\nOr a block of code:\n\n```{r}\ny &lt;- 1:5\nz &lt;- y^2\n```"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#check",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#check",
    "title": "CSSS 508 • Lecture 1",
    "section": "Check",
    "text": "Check\n---\ntitle: \"My document\"\n---\n\nSome markdown content.\n\n```{r}\n1 + 1\n```\n\nSome additional markdown content."
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#quarto-tinkering",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#quarto-tinkering",
    "title": "CSSS 508 • Lecture 1",
    "section": "Quarto Tinkering",
    "text": "Quarto Tinkering\nQuarto docs can be modified in many ways. Visit these links for more information.\n\nWays to modify the overall document appearance\nWays to format parts of your document\nGetting started with Quarto"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#r-code-in-quarto",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#r-code-in-quarto",
    "title": "CSSS 508 • Lecture 1",
    "section": "R Code in Quarto",
    "text": "R Code in Quarto\nInside RMarkdown, lines of R code are called chunks. Code is sandwiched between sets of three backticks and {r}. This chunk of code…\n```{r}\nsummary(cars)\n```\nProduces this output in your document:\n\nsummary(cars)\n\n     speed           dist       \n Min.   : 4.0   Min.   :  2.00  \n 1st Qu.:12.0   1st Qu.: 26.00  \n Median :15.0   Median : 36.00  \n Mean   :15.4   Mean   : 42.98  \n 3rd Qu.:19.0   3rd Qu.: 56.00  \n Max.   :25.0   Max.   :120.00"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#chunk-options",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#chunk-options",
    "title": "CSSS 508 • Lecture 1",
    "section": "Chunk Options",
    "text": "Chunk Options\nChunks have options that control what happens with their code. They are specified as special comments at the top of a block. For example:\n```{r}\n#| label: bar-chart\n#| echo: false\n#| fig-cap: \"A line plot on a polar axis\"\n```"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#chunk-options-1",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#chunk-options-1",
    "title": "CSSS 508 • Lecture 1",
    "section": "Chunk Options",
    "text": "Chunk Options\nSome useful and common options include:\n\necho: false - Keeps R code from being shown in the document\neval: false - Shows R code in the document without running it\ninclude: false - Hides all output but still runs code (good for setup chunks where you load packages!)\noutput: false - Doesn’t include the results of that code chunk in the output\ncache: true - Saves results of running that chunk so if it takes a while, you won’t have to re-run it each time you re-knit the document\nfig.height: 5, fig.width: 5 - modify the dimensions of any plots that are generated in the chunk (units are in inches)\nfig.cap: \"Text\" - add a caption to your figure in the chunk"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#playing-with-chunk-options",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#playing-with-chunk-options",
    "title": "CSSS 508 • Lecture 1",
    "section": "Playing with Chunk Options",
    "text": "Playing with Chunk Options\nTry adding or changing the chunk options (separated by commas) for the two chunks in my_first_Rmd.qmd and re-knitting to check what happens.\n```{r}\n#| echo: false\nsummary(cars)\n```"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#in-line-r-code",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#in-line-r-code",
    "title": "CSSS 508 • Lecture 1",
    "section": "In-Line R code",
    "text": "In-Line R code\nSometimes we want to insert a value directly into our text. We do that using code in single backticks starting off with r.\n\nFour score and seven years ago is the same as `r 4*20 + 7` years.\n\n\nFour score and seven years ago is the same as 87 years.\n\n\n\nMaybe we’ve saved a variable in a chunk we want to reference in the text:\n\nx &lt;- sqrt(77) # &lt;- is how we assign objects\n\n\n\nThe value of `x` rounded to the nearest two decimals is `r round(x, 2)`.\n\n\nThe value of x rounded to the nearest two decimals is 8.77."
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#this-is-amazing",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#this-is-amazing",
    "title": "CSSS 508 • Lecture 1",
    "section": "This is Amazing!",
    "text": "This is Amazing!\nHaving R dump values directly into your document protects you from silly mistakes:\n\n\nNever wonder “how did I come up with this quantity?” ever again: Just look at your formula in your .qmd file!\n\n\n\n\nConsistency! No “find/replace” mishaps; reference a variable in-line throughout your document without manually updating if the calculation changes (e.g. reporting sample sizes).\n\n\n\n\nYou are more likely to make a typo in a “hard-coded” number than you are to write R code that somehow runs but gives you the wrong thing."
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#example-keeping-dates",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#example-keeping-dates",
    "title": "CSSS 508 • Lecture 1",
    "section": "Example: Keeping Dates",
    "text": "Example: Keeping Dates\nIn your YAML header, make the date come from R’s Sys.time() function by changing:\n\ndate: \"October 3, 2023\"\nto\ndate: \"`r Sys.time()`\""
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#whats-up-with-cars",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#whats-up-with-cars",
    "title": "CSSS 508 • Lecture 1",
    "section": "What’s Up with cars?",
    "text": "What’s Up with cars?\nIn the sample R Markdown document you are working on, we can load the built-in data cars, which loads as a dataframe, a type of object mentioned earlier. Then, we can look at it in a couple different ways.\n\ndata(cars) loads this dataframe into the Global Environment.\n\n\nView(cars) pops up a Viewer pane (“interactive” use only, don’t put in R Markdown document!).\n\n\n\nhead(cars, 5) # prints first 5 rows, can use tail() too\n\n  speed dist\n1     4    2\n2     4   10\n3     7    4\n4     7   22\n5     8   16"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#tell-me-more-about-cars",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#tell-me-more-about-cars",
    "title": "CSSS 508 • Lecture 1",
    "section": "Tell Me More About cars\n",
    "text": "Tell Me More About cars\n\nstr() displays the structure of an object:\n\nstr(cars) # str[ucture]\n\n'data.frame':   50 obs. of  2 variables:\n $ speed: num  4 4 7 7 8 9 10 10 10 11 ...\n $ dist : num  2 10 4 22 16 10 18 26 34 17 ...\n\n\n\nsummary() displays summary information 1:\n\nsummary(cars)\n\n     speed           dist       \n Min.   : 4.0   Min.   :  2.00  \n 1st Qu.:12.0   1st Qu.: 26.00  \n Median :15.0   Median : 36.00  \n Mean   :15.4   Mean   : 42.98  \n 3rd Qu.:19.0   3rd Qu.: 56.00  \n Max.   :25.0   Max.   :120.00  \n\n\n\nNote R is object-oriented: summary() provides different information for different types of objects!"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#ugly-pictures-of-cars",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#ugly-pictures-of-cars",
    "title": "CSSS 508 • Lecture 1",
    "section": "Ugly Pictures of cars\n",
    "text": "Ugly Pictures of cars\n\nhist() generates a histogram of a vector. Note you can access a vector that is a column of a dataframe using $, the extract operator.\n\n\n\nhist(cars$speed) # Histogram\n\n\n\n\n\n\nhist(cars$dist)"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#drawing-slightly-less-ugly-pictures",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#drawing-slightly-less-ugly-pictures",
    "title": "CSSS 508 • Lecture 1",
    "section": "Drawing Slightly Less Ugly Pictures",
    "text": "Drawing Slightly Less Ugly Pictures\n\nhist(cars$dist,\n     xlab = \"Distance (ft)\", # X axis label\n     main = \"Observed stopping distances of cars\") # Title"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#math-with-cars",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#math-with-cars",
    "title": "CSSS 508 • Lecture 1",
    "section": "Math with cars\n",
    "text": "Math with cars\n\n\ndist_mean  &lt;- mean(cars$dist) \nprint(dist_mean)\n\n[1] 42.98\n\nspeed_mean &lt;- mean(cars$speed)\nprint(speed_mean)\n\n[1] 15.4"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#drawing-still-ugly-pictures",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#drawing-still-ugly-pictures",
    "title": "CSSS 508 • Lecture 1",
    "section": "Drawing Still Ugly Pictures",
    "text": "Drawing Still Ugly Pictures\n\nplot(dist ~ speed, data = cars,\n     xlab = \"Speed (mph)\",\n     ylab = \"Stopping distance (ft)\",\n     main = \"Speeds and stopping distances of cars\",\n     pch = 16) # Point size"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#swiss-time",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#swiss-time",
    "title": "CSSS 508 • Lecture 1",
    "section": "\nswiss Time",
    "text": "swiss Time\nLet’s switch gears to the swiss data frame built in to R.\n\nFirst, use ?swiss to see what things mean.\n\n\nThen, load it using data(swiss)\n\n\nAdd chunks to your Quarto document inspecting swiss, defining variables, doing some exploratory plots using hist or plot.\nYou might experiment with colors and shapes."
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#looking-at-swiss",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#looking-at-swiss",
    "title": "CSSS 508 • Lecture 1",
    "section": "Looking at swiss\n",
    "text": "Looking at swiss\n\n\npairs(swiss, pch = 8, col = \"violet\",\n      main = \"Pairwise comparisons of Swiss variables\")\n\n\n\n\n\n\n\n\n\n\npairs() is a pairwise scatterplot function. Good for a quick look at small datasets, but mostly useless for larger data."
  }
]