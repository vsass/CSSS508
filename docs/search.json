[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "CS&SS 508",
    "section": "",
    "text": "Instructor:\nVictoria (Vic) Sass\n\n\nLecture:\nAsynchronous (videos posted in Slack).\n\nLab AA:\nTuesdays 5:30 - 6:20pm\n\n\nLab AB:\nThursdays 4:30 - 5:20pm\n\n\n\nOffice Hours:\nWednesdays 3-5pm on Zoom  (link on Canvas)"
  },
  {
    "objectID": "Homework/homework.html",
    "href": "Homework/homework.html",
    "title": "Overview",
    "section": "",
    "text": "This page contains general instructions for assignments/peer reviews. For homework-specific instructions and templates go to the specific assignment listed on the left.\n\n\nA Note About Rendering Your HTML documents\nYou need to include embed-resources: true in your YAML header in order for your HTML documents to include any plot output when you upload them to Canvas. It should look something like the following:\n\nYou can read more about this option here but basically, whenever you render a .qmd file to HTML, all output created goes into a separate, associated file, which is referenced when displaying the page in your web browser. However, when you upload the HTML file separately from that folder (e.g. to Canvas or through email), it doesn’t have the specific output images to reference, so they won’t appear. When you specify in your YAML header that you want to embed resources, you’re explicitly adding the output created by your code to the HTML file so that a separate output folder is longer created and you can send your HTML file with all its output as one entity.\n\n\nAssignment Due Dates\n\n\n\n\n\n\n  \n    \n    \n      #\n      \n        Section AA\n      \n      \n        Section AB\n      \n    \n    \n      Homework Due\n      Peer Review Due\n      Homework Due\n      Peer Review Due\n    \n  \n  \n    1\n10 October\n15 October\n12 October\n17 October\n    2\n17 October\n22 October\n19 October\n24 October\n    3\n24 October\n29 October\n26 October\n31 October\n    4\n31 October\n5 November\n2 November\n7 November\n    5\n7 November\n12 November\n9 November\n14 November\n    6\n14 November\n19 November\n16 November\n21 November\n    7\n21 November\n26 November\n23 November\n28 November\n    8\n28 November\n3 November\n30 November\n5 November\n    9\n5 December\n10 December\n7 December\n12 December\n  \n  \n  \n\n\n\n\n\nAll assignments should be created using Quarto and uploaded to Canvas as both html and qmd files. Your document should be pleasant for a peer to look at and follow all instructions. Use sections for organization, label figures/tables, and use code chunks.\n\n\nRubric Students Use to Grade Assignments:\n\n\n\n\n\n\n\n\n  \n    \n    \n      Evaluation\n      Points\n    \n  \n  \n    Didn't turn anything in.\n0\n    Turned in but low effort, ignoring many directions.\n1\n    Decent effort, followed directions with some minor issues.\n2\n    Nailed it!\n3\n  \n  \n  \n\n\n\n\n\n\nPeer Review:\nYou are required to both grade and provide feedback on a peer’s homework each week. Reading/evaluating the work of others is useful and important! Good programmers realize that most problems have been solved by others; the trick is figuring out how to apply existing code to new problems. You will develop this skill by reading others’ code, evaluating their approach to problems, providing suggestions, and pointing out when you learned something new. Good peer reviews give constructive, polite, and insightful comments, are specific and concise, use the grading rubric below, and point out what you learned from their code. Poor peer reviews are impolite or unprofessional, are generic (i.e., could be applied to anyone’s homework), or fail to provide useful suggestions.\n\n\n\n\n\n\nLate Homework Will Not Be Accepted For Credit\n\n\n\nDue to the nature of our schedule, peer reviews are randomly assigned when the due date/time is reached. Therefore, if you don’t submit your homework on time, you will not be given a peer’s homework to review and vice versa. Life is messy and complicated though and we all miss deadlines for a variety of reasons. Therefore, you can request that I provide you with feedback on a late assignment (message me on Slack) but you won’t be able to earn any points for that particular homework.\n\n\n\n\nRubric Instructor Uses to Grade Peer Review:\n\n\n\n\n\n\n\n\n  \n    \n    \n      Evaluation\n      Points\n    \n  \n  \n    Didn’t follow all peer-review instructions.\n\n0\n\n    Peer review is at least one paragraph long, \nmentions any and all key issues from the assignment, \nand points out at least one positive thing in your \npeer’s work (and hopefully more!).\n\n1\n\n  \n  \n  \n\n\n\n\n\n\nWhen to Contact the Instructor:\nA number of situations may warrant contacting the instructor:\n\nIf you believe you have received an unfair peer review, you can resubmit your homework for evaluation by the instructor. The assignment will be regraded, which may result in a higher, same, or lower grade.\nIf you wish for more feedback on a particular part of the homework, you can ask the instructor for additional explanation without resubmitting during office hours or over Slack.\nIf you receive no feedback, I will provide gentle peer review on request."
  },
  {
    "objectID": "Homework/HW1/homework1.html",
    "href": "Homework/HW1/homework1.html",
    "title": "Homework 1",
    "section": "",
    "text": "Instructions\nWrite up a .qmd file showing some exploratory analyses of the Swiss fertility data. Upload both the .qmd file and the .html file to Canvas. You must upload BOTH for credit.\nMix in-line R calculations, R output, and plots with text describing the relationships you see. Include at least one plot and one table using the gt package. You are encouraged to include more! You must use in-line R calculations/references at least once (e.g. functions like nrow(), mean(), sd(), cor(), median(), min()) and may not hard-code any numbers referenced in your text.\nYour document should be pleasant for a peer to look at, with some organization using sections or lists, and all plots labeled clearly. Use chunk options echo and output to limit the code/output you show in the .html. Discussion of specific values should be summarized in sentences in your text—not as printed code and output—and rounded so as not to be absurdly precise (e.g. round x with round(x, 2)).\n\n\nTemplate\nrendered html file • raw qmd file\n\n\nExample\nrendered html file • raw qmd file\n\n\nDue Dates\n\n\n\n\n\n\n  \n    \n    \n      #\n      \n        Section AA\n      \n      \n        Section AB\n      \n    \n    \n      Homework Due\n      Peer Review Due\n      Homework Due\n      Peer Review Due\n    \n  \n  \n    1\n10 October\n15 October\n12 October\n17 October\n    2\n17 October\n22 October\n19 October\n24 October\n    3\n24 October\n29 October\n26 October\n31 October\n    4\n31 October\n5 November\n2 November\n7 November\n    5\n7 November\n12 November\n9 November\n14 November\n    6\n14 November\n19 November\n16 November\n21 November\n    7\n21 November\n26 November\n23 November\n28 November\n    8\n28 November\n3 November\n30 November\n5 November\n    9\n5 December\n10 December\n7 December\n12 December\n  \n  \n  \n\n\n\n\n\n\n\n\n  \n    \n    \n      #\n      \n        Section AA\n      \n      \n        Section AB\n      \n    \n    \n      Homework Due\n      Peer Review Due\n      Homework Due\n      Peer Review Due\n    \n  \n  \n    1\n10 October\n15 October\n12 October\n17 October\n    2\n17 October\n22 October\n19 October\n24 October\n    3\n24 October\n29 October\n26 October\n31 October\n    4\n31 October\n5 November\n2 November\n7 November\n    5\n7 November\n12 November\n9 November\n14 November\n    6\n14 November\n19 November\n16 November\n21 November\n    7\n21 November\n26 November\n23 November\n28 November\n    8\n28 November\n3 November\n30 November\n5 November\n    9\n5 December\n10 December\n7 December\n12 December"
  },
  {
    "objectID": "Homework/HW1/CSSS508_HW1_Template.html",
    "href": "Homework/HW1/CSSS508_HW1_Template.html",
    "title": "Homework 1",
    "section": "",
    "text": "This basic R markdown file has some text, inline code, and code chunks!"
  },
  {
    "objectID": "Homework/HW1/CSSS508_HW1_Template.html#code-chunks",
    "href": "Homework/HW1/CSSS508_HW1_Template.html#code-chunks",
    "title": "Homework 1",
    "section": "Code Chunks",
    "text": "Code Chunks\n\nset.seed(1)\nnorm &lt;- rnorm(100)\nhist(x = norm, \n     xlab = \"X Axis Name\", \n     ylab = \"Count\", \n     main = \"Histogram of 100 observations from a Standard Normal\")"
  },
  {
    "objectID": "Homework/HW1/CSSS508_HW1_Template.html#text-and-inline-text",
    "href": "Homework/HW1/CSSS508_HW1_Template.html#text-and-inline-text",
    "title": "Homework 1",
    "section": "Text and Inline Text",
    "text": "Text and Inline Text\nThe sample mean of the data plotted above (rounded to 3 decimal points) is 0.109 and the variance is 0.807.\nWhat’s the relationship between standard deviation and variance?\n\\[ \\text{Standard Deviation}(X) = \\sqrt{\\text{Variance}(X)} \\]\nThe standard deviation of the data plotted above is 0.898."
  },
  {
    "objectID": "syllabus.html",
    "href": "syllabus.html",
    "title": "Syllabus",
    "section": "",
    "text": "This syllabus is subject to change. All changes will be announced both in class, on Slack, and on this page.\n\nCourse Info:\nInstructor: Victoria Sass\nLecture: Asynchronous videos available to watch at the beginning of each week (link posted in Slack)\n• Lab AA Tuesdays 5:30 - 6:20pm (Savery 117)\n• Lab AB Thursdays 4:30 - 5:20pm (Savery 117)\nOffice Hours: Wednesdays 3-5pm on Zoom (link on Canvas)\n\n\nOverview and Learning Objectives:\nThis course is intended to give students a foundational understanding of programming in the statistical language R. This knowledge is intended to be broadly useful wherever you encounter data in your education and career. General topics we will focus on include:\n\nDeveloping intermediate data management and visualization skills in R\nOrganizing projects and creating reproducible research\nCleaning data\nLinking multiple data sets together\nLearning basic programming skills\n\nBy the end of this course you should feel confident approaching any data you encounter in the future. We will cover almost no statistics, however it is the intention that this course will leave you prepared to progress in CS&SS or STAT courses with the ability to focus on statistics instead of coding. Additionally, the basic concepts you learn will be applicable to other programming languages and research in general, such as logic and algorithmic thinking.\n\n\nStructure:\nThis course has a primary lecture session, a lab session, and office hours:\n\nLecture (asynchronous videos; 50 minutes): At the beginning of each week I will post a video lecture covering a specific topic to help you learn fundamental skills, concepts, and principles for learning R. In lieu of having an in-person lecture you should watch the video lecture whenever is most convenient for you but definitely before coming to your lab section. The content from lecture each week will also be the basis of the homework assignment due the following week.\nLab (in-person; 50 minutes): On Tuesdays and Thursdays, we will meet in the CSSCR lab for an interactive session where we will practice the skills from the video lecture. These sections will give you all an opportunity to work with each other to learn and practice key skills in R and I will be available to answer questions and help troubleshoot code as well.\nOffice Hours (remote; one 2-hour session): On Wednesdays, I will hold drop-in office hours on Zoom. This is a great time to ask questions, get advice, or continue discussions from lab/lecture. We can talk in a breakout room or with the group! A link to the Zoom meeting can be found on Canvas.\n\n\n\nSchedule:\nBelow is a summary of topics that will be covered each week in lecture. Labs will focus on material covered in that week’s lecture.\n\nWeek 1: Introduction to R, RStudio, and RMarkdown\nWeek 2: Visualizing Data\nWeek 3: Workflow and Reproducibility\nWeek 4: Importing, Exporting, and Cleaning Data\nWeek 5: Manipulating and Summarizing Data\nWeek 6: Data Structures & Types\nWeek 7: Working with Text Data\nWeek 8: Writing Functions\nWeek 9: Iteration\nWeek 10: Next Steps\n\nThis course will have no meeting during final exam week.\n\n\nPrerequisites:\nThis course has no prerequisites.\n\n\nMaterials and Texts:\nThis course has no required materials or texts. However, there are a few things to note:\n\nComputers: This course is primarily focused on computation. It is helpful to bring a personal laptop to class as it helps to gain familiarity with the software you’ll be using on the machine you use most often. However, you will also have access to the computers available in the computer lab (Savery 117, aka the “CSSCR Big Lab”). If you’d like a laptop but do not have one, you can borrow one for free from UW through the Student Technology Loan Program.\n\n\n\n\n\n\n\nKeep In Mind\n\n\n\nThe versions of R, RStudio, and Quarto (as well as any packages you have installed) will change if you start using a different computer. My advice is to consistently use the same device or make sure to download the latest versions of R, RStudio, and Quarto when using a new machine.\n\n\n\nOnline Textbooks: This course has no required textbooks, but there are many helpful resources available for free online. I will be suggesting selections from R for Data Science by Hadley Wickham, Mine Çetinkaya-Rundel, & Garrett Grolemund to pair with each week’s topic. While not required, I strongly suggest reading those selections before doing the homework for that week.\n\n\n\nTools for Class:\n\n\n\n\n\n\n Communication\n\n\n\nLearning is collaborative! In addition to being the place to communicate with me, our Slack is also where you can ask one another questions, share resources, and just generally check in with each other about how your adventures with R are going. You can find the link to join our workplace on our course Canvas.\n\n\n\n\n\n\n\n\n Homework & Peer-Reviews\n\n\n\nWe will be using Canvas solely for homework & peer review submissions/deadlines and for any links I only want to distribute to those registered for this class (i.e. Slack and Office Hours Zoom).\n\n\n\n\n\n\n\n\n Course Content\n\n\n\nAll course content will be accessible on this website.\n\n\n\n\nGrading\nThis course is graded as credit/no credit. To pass you need to receive at least 60% of the available points. There will be 9 graded homework assignments: one every week but the last one. There are 4 points possible for each week that features a homework.\n\nHomework (75%; 3 points): These must be turned in as rendered Markdown documents which we will learn to create and for which templates are provided. They will be graded on a 0 to 3 point scale based on a simple effort-focused rubric found on the course website. These are designed first and foremost to develop skills rather than \"prove\" you have learned concepts. I encourage you to communicate and work together, so long as you write and explain your code yourself and do not copy work. You can learn a lot from replicating others' code, but you will learn nothing if you copy it without knowing how it works! In other words, you’re not really going to learn unless you do the coding yourself!\nPeer Review (25%; 1 point): Each week an assignment is due, students will be randomly assigned to grade another student's assignment following a 0 to 3 rubric. They will be expected to provide constructive feedback and commentary if something new was learned. Reading others' code is an important skill and you will write better code knowing others will see it. These reviews will be due 5 days after homework is due. Each peer review is worth 1 point and will be evaluated by the instructor on a binary \"satisfactory\" / \"not satisfactory\" scale.\nSchedule: We have a bit of a funky schedule due to increasing demand for this course over the years. Thus, instead of a 2-hour interactive lecture/lab each week we have a 50 minute lecture and 2 separate lab sections. To make sure everyone gets to practice the skills we learn in lecture before starting their homework, the due dates for your homework and peer reviews will depend upon which lab section you’re enrolled in. Make sure to check Canvas!\n\n\n\n\n\n\n\nLate Homework Will Not Be Accepted For Credit\n\n\n\nDue to the nature of our schedule, peer reviews are randomly assigned when the due date/time is reached. Therefore, if you don’t submit your homework on time, you will not be given a peer’s homework to review and vice versa. Life is messy and complicated though and we all miss deadlines for a variety of reasons. Therefore, you can request that I provide you with feedback on a late assignment (message me on slack) but you won’t be able to earn any points for that particular homework.\n\n\n\n\nClassroom Environment\nI’m committed to fostering a friendly and inclusive classroom environment in which all students have an equal opportunity to learn and succeed. This course is an attempt to make an often difficult and frustrating experience (learning R for the first time) less obfuscating, daunting, and stressful. That said, learning happens in different ways at at a different pace for everyone. Learning is also a collaborative and creative process and my aim is to create an environment in which you all feel comfortable asking questions of me and each other. Treat your peers and yourself with empathy and respect as you all approach this topic from a range of backgrounds and experiences (in programming and in life).\n\nNames & Pronouns: Everyone deserves to be addressed respectfully and correctly. You are welcome to send me your preferred name and correct gender pronouns at any time.\nCovid Considerations: I will follow all University rules and procedures regarding Covid, which may or may not change during the quarter. I also recognize that Covid creates unique circumstances and concerns for each of us, which may limit your ability to fully attend or participate in this course. You never need to apologize to me for anything pandemic-related. If there is something I can do to make you feel more comfortable during class, please let me know!\nGetting Help: If at any point during the quarter you find yourself struggling to keep up, please let me know! I am here to help. A great place to start this process is by chatting after class, coming to office hours, or sending me a message on Slack.\nDiversity: Diverse backgrounds, embodiments, and experiences are essential to the critical thinking endeavor at the heart of university education. Therefore, I expect you to follow the UW Student Conduct Code in your interactions with your colleagues and me in this course by respecting the many social and cultural differences among us, which may include, but are not limited to: age, cultural background, disability, ethnicity, family status, gender identity and presentation, body size/shape, citizenship and immigration status, national origin, race, religious and political beliefs, sex, sexual orientation, socioeconomic status, and veteran status.\nAccessibility & Accommodations: Your experience in this class is important to me. If you have already established accommodations with Disability Resources for Students (DRS), please communicate your approved accommodations to me at your earliest convenience so we can discuss your needs in this course. If you have not yet established services through DRS, but have a temporary health condition or permanent disability that requires accommodations (conditions include but not limited to; mental health, attention-related, learning, vision, hearing, physical or health impacts), you are welcome to contact DRS at 206-543-8924, uwdrs@uw.edu, or through their website. DRS offers resources and coordinates reasonable accommodations for students with disabilities and/or temporary health conditions. Reasonable accommodations are established through an interactive process between you, me (your instructor), and DRS. It is the policy and practice of the University of Washington to create inclusive and accessible learning environments consistent with federal and state law.\nAcademic Integrity: Academic integrity is essential to this course and to your learning. In this course, violations of the academic integrity policy include but are not limited to: copying from a peer, copying from an online resource, or using resources from a previous iteration of the course. That said, I hope you will collaborate with peers on assignments, and use Internet resources when questions arise to help solve issues. The key is that you ultimately submit your own work. Anything found in violation of this policy will be automatically given a score of 0 with no exceptions. If the situation merits, it will also be reported to the UW Student Conduct Office, at which point it is out of my hands. If you have any questions about this policy, please do not hesitate to reach out and ask.\nReligious Accommodations: Washington state law requires that UW develop a policy for accommodation of student absences or significant hardship due to reasons of faith or conscience, or for organized religious activities. The UW's policy, including more information about how to request an accommodation, is available at Religious Accommodations Policy. Accommodations must be requested within the first two weeks of this course using the Religious Accommodations Request form.\n\n\n\n\n\n\n\nFeedback\n\n\n\nIf you have feedback on any part of this course or the classroom environment I want to hear it! You can message me directly on Slack or send me an anonymous message here. Additionally, I will send out a mid-quarter feedback survey on Slack around Week 5."
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2_index.html",
    "href": "Lectures/Lecture2/CSSS508_Lecture2_index.html",
    "title": "Lecture 2",
    "section": "",
    "text": "Slides & Code\nHTML slides • Raw qmd file • R Code\n\n\n\nSuggested Reading (from R for Data Science (2e))\nBeginner: Chapter 2: Data Visualization\nIntermediate: Chapter 10: Layers • Chapter 11: Exploratory Data Analysis • Chapter 12: Communication\n\n\n\nUseful Resources\n\nCheatsheets\nggplot2\n\n\nMore ggplot2 Resources\nggplot2 Website • R Graphics Cookbook • ggplot2: Elegant Graphics for Data Analysis (3e) • ggplot2 extensions\n\n\nOther Readings\nData Visualization: A Practical Introduction - Kieran Healy •\nThe Truthful Art: Data, Charts, and Maps for Communication - Alberto Cairo •\nThe Visual Display of Quantitative Information - Edward Tufte\n\n\nCrowdsource Help\nCS&SS 508 Slack Workspace • Posit community • Stackoverflow"
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture5_index.html",
    "href": "Lectures/Lecture5/CSSS508_Lecture5_index.html",
    "title": "Lecture 5",
    "section": "",
    "text": "Slides & Code\nHTML slides • Raw qmd file\n\n\n\nSuggested Reading (from R for Data Science (2e))\nChapter 4: Data transformation\n\n\n\nUseful Resources\n\nCheatsheets\ndplyr\n\n\npackage Website\ndplyr\n\n\nOther Readings\n\n\nCrowdsource Help\nCS&SS 508 Slack Workspace • Posit community • Stackoverflow"
  },
  {
    "objectID": "Lectures/Lecture11/CSSS508_Lecture11_index.html",
    "href": "Lectures/Lecture11/CSSS508_Lecture11_index.html",
    "title": "Lecture 11",
    "section": "",
    "text": "Slides\nHTML slides • PDF Slides • Raw qmd file\n\n\n\nResources"
  },
  {
    "objectID": "Lectures/Lecture10/CSSS508_Lecture10_index.html",
    "href": "Lectures/Lecture10/CSSS508_Lecture10_index.html",
    "title": "Lecture 10",
    "section": "",
    "text": "Slides & Code\nHTML slides • Raw qmd file\n\n\n\nSuggested Reading (from R for Data Science (2e))\nChapter 28: A field guide to base R\nChapter 30: Quarto formats\n\n\n\nUseful Resources\n\nCheatsheets\ngit and GitHub\n\n\nPackage Website\nusethis\n\n\nOther Readings\nHappy Git and GitHub for the useR\n\n\nCrowdsource Help\nCS&SS 508 Slack Workspace • Posit community • Stackoverflow"
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4_index.html",
    "href": "Lectures/Lecture4/CSSS508_Lecture4_index.html",
    "title": "Lecture 4",
    "section": "",
    "text": "Slides & Code\n[HTML slides] • [Raw qmd file] • [R Code]\n\n\n\nSuggested Reading (from R for Data Science (2e))\nChapter 6: Data tidying • Chapter 8: Data import • Chapter 20: Joins\n\n\n\nUseful Resources\n\nCheatsheets\ntidyr • readr • SAS --&gt; R • Stata to R\n\n\nPackage Websites\ntidyr • readr • haven • readxl • googlesheets4 • googledrive\n\n\nOther Readings\n\n\nCrowdsource Help\nCS&SS 508 Slack Workspace • Posit community • Stackoverflow"
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3_index.html",
    "href": "Lectures/Lecture3/CSSS508_Lecture3_index.html",
    "title": "Lecture 3",
    "section": "",
    "text": "Slides & Code\nHTML slides • Raw qmd file • R Code\n\n\n\nSuggested Reading (from R for Data Science (2e))\nChapter 3: Workflow:basics • Chapter 4: Workflow:code style • Chapter 5: Workflow:scripts and projects •\nChapter 6: Workflow:getting help • Chapter 28: A field guide to base R (Sections 28.1 - 28.2.2, 28.3.1 - 28.3.2)\n\n\n\nUseful Resources\n\nCheatsheets\nBase R\n\n\nPackage websites\nstyler reprex\n\n\nCrowdsource Help\nCS&SS 508 Slack Workspace • Posit community • Stackoverflow"
  },
  {
    "objectID": "Lectures/lectures.html",
    "href": "Lectures/lectures.html",
    "title": "Schedule",
    "section": "",
    "text": "Lecture\nDate\nTopic\n\n\n\n\n\n1\n3 October 2023\nIntroduction to R, R Studio, and Quarto\n\n\n\n2\n10 October 2023\nVisualizing Data\n\n\n\n3\n17 October 2023\nWorkflow and Reproducibility\n\n\n\n4\n24 October 2023\nImporting, Exporting, and Cleaning Data\n\n\n\n5\n31 October 2023\nManipulating and Summarizing Data\n\n\n\n6\n7 November 2023\nData Structures & Types\n\n\n\n7\n14 November 2023\nWorking with Text Data\n\n\n\n8\n21 November 2023\nWriting Functions\n\n\n\n9\n28 November 2023\nIteration\n\n\n\n10\n5 December 2023\nNext Steps\n\n\n\n\n\n\n\n\n\n Lecture content\n\n\n\nGo to lecture tabs on the left for links to slides and topic-specific resources."
  },
  {
    "objectID": "Lectures/Lecture6/CSSS508_Lecture6_index.html",
    "href": "Lectures/Lecture6/CSSS508_Lecture6_index.html",
    "title": "Lecture 6",
    "section": "",
    "text": "Slides & Code\nHTML slides • Raw qmd file\n\n\n\nSuggested Reading (from R for Data Science (2e))\nChapter 13: Logical vectors • Chapter 14: Numbers • Chapter 17: Factors • Chapter 19: Missing Values\n\n\n\nUseful Resources\n\nCheatsheets\nforcats\n\n\nPackage Website\nforcats\n\n\nOther Readings\n\n\nCrowdsource Help\nCS&SS 508 Slack Workspace • Posit community • Stackoverflow"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1_index.html",
    "href": "Lectures/Lecture1/CSSS508_Lecture1_index.html",
    "title": "Lecture 1",
    "section": "",
    "text": "Slides & Code\nHTML slides • qmd file • R Code\n\n\n\nSuggested Reading (from R for Data Science (2e))\nChapter 1: Introduction • Chapter 29: Quarto\n\n\n\nUseful Resources\n\nGetting Started\nDownload R • Download RStudio • Download Quarto • Quarto Tutorial\n\n\nCheatsheets\nRStudio • Quarto • Base R\n\n\nOther Readings\nHands-On Programming with R\n\n\nCrowdsource Help\nCS&SS 508 Slack Workspace • Posit community • Stackoverflow"
  },
  {
    "objectID": "Lectures/Lecture8/CSSS508_Lecture8_index.html",
    "href": "Lectures/Lecture8/CSSS508_Lecture8_index.html",
    "title": "Lecture 8",
    "section": "",
    "text": "Slides & Code\nHTML slides • Raw qmd file\n\n\n\nSuggested Reading (from R for Data Science (2e))\nChapter 26: Functions\n\n\n\nUseful Resources\n\nCheatsheets\n\n\nMore resources\n\n\nOther Readings\nHands on Programming with R • Advanced R\n\n\nCrowdsource Help\nCS&SS 508 Slack Workspace • Posit community • Stackoverflow"
  },
  {
    "objectID": "Lectures/Lecture9/CSSS508_Lecture9_index.html",
    "href": "Lectures/Lecture9/CSSS508_Lecture9_index.html",
    "title": "Lecture 9",
    "section": "",
    "text": "Slides & Code\nHTML slides • Raw qmd file\n\n\n\nSuggested Reading (from R for Data Science (2e))\nChapter 27: Iteration\n\n\n\nUseful Resources\n\nCheatsheets\npurrr\n\n\nPackage Website\npurrr\n\n\nOther Readings\nHands on Programming with R • Advanced R\n\n\nCrowdsource Help\nCS&SS 508 Slack Workspace • Posit community • Stackoverflow"
  },
  {
    "objectID": "Lectures/Lecture7/CSSS508_Lecture7_index.html",
    "href": "Lectures/Lecture7/CSSS508_Lecture7_index.html",
    "title": "Lecture 7",
    "section": "",
    "text": "Slides & Code\nHTML slides • Raw qmd file\n\n\n\nSuggested Reading (from R for Data Science (2e))\nChapter 15: Strings • Chapter 16: Regular expressions • Chapter 18: Dates and times •\n\n\n\nUseful Resources\n\nCheatsheets\nstringr • Regular expressions • lubridate\n\n\nPackage Websites\nstringr lubridate hms\n\n\nOther Readings\n\n\nCrowdsource Help\nCS&SS 508 Slack Workspace • Posit community • Stackoverflow"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#welcome",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#welcome",
    "title": "Introductions & Syllabus",
    "section": "Welcome!",
    "text": "Welcome!\n\nIntroductions\nSyllabus\nLecture 1: Introduction to R, RStudio, and Quarto"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#introductions",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#introductions",
    "title": "Introductions & Syllabus",
    "section": "Introductions",
    "text": "Introductions\nLet’s start by getting to know each other a bit better. On your index card write the following:\n\nName and pronouns\nProgram and year\nExperience with programming (in R or more generally)\nOne word that best describes your feelings about taking this class\nWould you rather be able to converse with (non-human) animals, or have lifelong fluency in every (human) language?\n\n. . .\nForm a group of 3-5 with the people seated around you and introduce yourself to one another. Let’s take about 5-10 minutes to do this."
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#syllabus",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#syllabus",
    "title": "Introductions & Syllabus",
    "section": "Syllabus",
    "text": "Syllabus\nThe syllabus (as well as lots of other information) can be found on our course website:\n\nhttps://vsass.github.io/CSSS508\n\nFeel free to follow along online as I run through the syllabus!"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#course-goals",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#course-goals",
    "title": "Introductions & Syllabus",
    "section": "Course goals",
    "text": "Course goals\nThis course is intended to give students a foundational understanding of programming in the statistical language R. This knowledge is intended to be broadly useful wherever you encounter data in your education and career. General topics we will focus on include:\n\n\nDeveloping intermediate data management and visualization skills\nOrganizing projects and creating reproducible research\nCleaning data\nLinking multiple data sets together\nLearning basic programming skills\n\n\n. . .\nBy the end of this course you should feel confident approaching any data you encounter in the future. We will cover almost no statistics, however it is the intention that this course will leave you prepared to progress in CS&SS or STAT courses with the ability to focus on statistics instead of coding. Additionally, the basic concepts you learn will be applicable to other programming languages and research in general, such as logic and algorithmic thinking."
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#logistics",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#logistics",
    "title": "",
    "section": "Logistics",
    "text": "Logistics\nLecture: An overview of that week’s topic where we’ll learn fundamental skills, concepts, and principles for learning R. The content from lecture each week will be the basis of the homework assignment due the following week.\n\nTuesdays, 4:30-5:20pm (Gowen 201)\n\nLabs: An interactive session where we will practice the skills from lecture. Towards the end of these sections students will work with each other to learn and practice key skills in R, but I will be available to help as well!\n\n\nLab AA: Tuesday, 5:30-6:20pm (Savery 117)\n\nLab AB: Thursday, 4:30-5:20pm (Savery 117)\n\nOffice Hours: Drop-in to ask questions, get advice, or continue discussions from lab/lecture. We can talk in a breakout room or with the group!\n\nWednesdays, 10-11am & 4-5pm (on Zoom; link on Canvas)\n\nContact: Message me in our Slack workspace rather than sending me an email. I get far too many emails a day and I don’t want to miss your message!"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#schedule",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#schedule",
    "title": "Introductions & Syllabus",
    "section": "Schedule",
    "text": "Schedule\n\n\n3 October\n\n10 October\n\n17 October\n\n24 October\n\n31 October\n\n7 November\n\n14 November\n\n21 November\n\n28 November\n\n5 December\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWeek 1: Introduction to R, RStudio, and Quarto\n\nWeek 2: Visualizing Data\n\nWeek 3: Workflow and Reproducibility\n\nWeek 4: Importing, Exporting, and Cleaning Data\n\nWeek 5: Manipulating and Summarizing Data\n\nWeek 6: Data Structures & Types\n\nWeek 7: Working with Text Data\n\nWeek 8: Writing Functions\n\nWeek 9: Iteration\n\nWeek 10: Next Steps"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html",
    "title": "Introductions & Syllabus",
    "section": "",
    "text": "Syllabus and Introduction to R, RStudio, and Quarto\nCS&SS 508 • Lecture 1\n3 October 2023\nVictoria Sass"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#prerequisites-materials-and-texts",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#prerequisites-materials-and-texts",
    "title": "",
    "section": "Prerequisites, Materials, and Texts",
    "text": "Prerequisites, Materials, and Texts\nPrerequisites: None\nMaterials: All course materials are provided on the course website. This includes:\n\nThese slides and the code used to generate them.\nAn R script for the slides to follow along in class.\nHomework instructions and/or templates.\nRecommended reading/cheatsheet(s).\nUseful links to other resources.\n\nLaptops: It’s helpful to bring a laptop to class. If you don’t have one, you can use the lab computers or borrow one for free from the UW Student Technology Loan Program. There are also computers available in the lab during section.\n\n\n\n\n\n\nKeep In Mind\n\n\nThe versions of R, RStudio, and Quarto (as well as any packages you have installed) will change if you start using a different computer. My advice is to consistently use the same device or make sure to download the latest versions of R, RStudio, and Quarto when using a new machine.\n\n\n\nTextbooks: This course has no textbook. However, I will provide optional reading recommendations that I’ve found really useful!"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#grading",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#grading",
    "title": "",
    "section": "Grading",
    "text": "Grading\nFinal grade\nCredit/No Credit (C/NC); You need at least 60% to get Credit\n\n\nHomework (75%; assessed by peers)\n9 total homeworks; assessed on a 0-3 point rubric. Assigned at the end of lab sections and due a week later.\n\n\n\n\n\n\n\nEvaluation\n      Points\n    \n\n\nDidn't turn anything in.\n0\n\n\nTurned in but low effort, ignoring many directions.\n1\n\n\nDecent effort, followed directions with some minor issues.\n2\n\n\nNailed it!\n3\n\n\n\n\n\n\n\nPeer Grading (25%; assessed by me)\nOne per homework, assessed on a binary “satisfactory”/“unsatisfactory” scale. Due 5 days after homework due date.\n\n\n\n\n\n\n\nEvaluation\n      Points\n    \n\n\n\nDidn’t follow all peer-review instructions.\n\n\n0\n\n\n\n\nPeer review is at least one paragraph long, \nmentions any and all key issues from the assignment, \nand points out at least one positive thing in your \npeer’s work (and hopefully more!).\n\n\n1"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#ugh-peer-grading",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#ugh-peer-grading",
    "title": "Introductions & Syllabus",
    "section": "Ugh, peer grading?",
    "text": "Ugh, peer grading?\nYes, because:\n\nYou will write your reports better knowing others will see them\nYou learn alternate approaches to the same problem\nYou will have more opportunities to practice and have the material sink in\n\n. . .\nHow to peer review:\n\nLeave constructive comments: You’ll only get the point if you write at least 1 full paragraph that includes\n\nAny key issues from the assignment and,\nPoints out something positive in your peer’s work.\n\nSend me a message on Slack if you would like your assignment to be regraded or for me to provide feedback if no peer review was given."
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#academic-integrity",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#academic-integrity",
    "title": "Introductions & Syllabus",
    "section": "Academic Integrity",
    "text": "Academic Integrity\nAcademic integrity is essential to this course and to your learning. Violations of the academic integrity policy include but are not limited to:\n\nCopying from a peer\nCopying from an online resource\nUsing resources from a previous iteration of the course.\n\n. . .\nI hope you will collaborate with peers on assignments and use Internet resources when questions arise to help solve issues. The key is that you ultimately submit your own work.\n. . .\nAnything found in violation of this policy will be automatically given a score of 0 with no exceptions. If the situation merits, it will also be reported to the UW Student Conduct Office, at which point it is out of my hands. If you have any questions about this policy, please do not hesitate to reach out and ask."
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#classroom-environment",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#classroom-environment",
    "title": "Introductions & Syllabus",
    "section": "Classroom Environment",
    "text": "Classroom Environment\nI’m committed to fostering a friendly and inclusive classroom environment in which all students have an equal opportunity to learn and succeed. This course is an attempt to make an often difficult and frustrating experience (learning R for the first time) less obfuscating, daunting, and stressful. That said, learning happens in different ways at at a different pace for everyone. Learning is also a collaborative and creative process and my aim is to create an environment in which you all feel comfortable asking questions of me and each other. Treat your peers and yourself with empathy and respect as you all approach this topic from a range of backgrounds and experiences (in programming and in life)."
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#asking-questions",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#asking-questions",
    "title": "Introductions & Syllabus",
    "section": "Asking Questions",
    "text": "Asking Questions\nDon’t ask like this:\n\ntried lm(y~x) but it iddn’t work wat do\n\n. . .\nInstead, ask like this:\n\ny &lt;- seq(1:10) + rnorm(10)\nx &lt;- seq(0:10)\nmodel &lt;- lm(y ~ x)\nRunning the block above gives me the following error, anyone know why?\nError in model.frame.default(formula = y ~ x, \ndrop.unused.levels = TRUE) : variable lengths differ \n(found for 'x')\n\n\n\n\n\n\n\n FYI\n\n\n\nIf you ask me a question directly over Slack I may send out your question (anonymously) along with my answer to the whole course."
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#questions",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#questions",
    "title": "",
    "section": "Questions?",
    "text": "Questions?"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#a-note-on-slide-formatting",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#a-note-on-slide-formatting",
    "title": "Introductions & Syllabus",
    "section": "A Note on Slide Formatting",
    "text": "A Note on Slide Formatting\nBold usually indicates an important vocabulary term. Remember these!\n. . .\nItalics indicate emphasis but also are used to point out things you must click with a mouse.\n\nFor example: “Please click File &gt; Print”\n\n. . .\nCode represents R code you could use to perform actions.\n\nFor example: “Press Ctrl-P to open the print dialogue.”\n\n. . .\nCode chunks that span the page represent actual R code embedded in the slides.\n\n7 * 49"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#lecture-1-introduction-to-r-rstudio-and-quarto",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#lecture-1-introduction-to-r-rstudio-and-quarto",
    "title": "CSSS 508 • Lecture 1",
    "section": "Lecture 1: Introduction to R, RStudio, and Quarto",
    "text": "Lecture 1: Introduction to R, RStudio, and Quarto"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#why-r",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#why-r",
    "title": "Introductions & Syllabus",
    "section": "Why R?",
    "text": "Why R?\nR is a programming language built for statistical computing.\nIf one already knows Stata or similar software, why use R?\n. . .\n\nR is free.\n\n. . .\n\nR has a very large community.\n\n. . .\n\nR can handle virtually any data format.\n\n. . .\n\nR makes replication easy.\n\n. . .\n\nR is a language so it can do everything.\n\n. . .\n\nR skills transfer to other languages like Python and Julia."
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#r-studio",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#r-studio",
    "title": "Introductions & Syllabus",
    "section": "R Studio",
    "text": "R Studio\nR Studio is a “front-end” or integrated development environment (IDE) for R that can make your life easier.\n. . .\nWe’ll show RStudio can…\n. . .\n\n\nOrganize your code, output, and plots\nAuto-complete code and highlight syntax\nHelp view data and objects\nEnable easy integration of R code into documents with Quarto\n\n\n. . .\nIt can also…\n\nManage git repositories\nRun interactive tutorials\nHandle other languages like C++, Python, SQL, HTML, and shell scripting"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#selling-you-on-quarto",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#selling-you-on-quarto",
    "title": "Introductions & Syllabus",
    "section": "Selling You on Quarto",
    "text": "Selling You on Quarto\nBuilt upon many of the developments of the R Markdown ecosystem, Quarto distills them into one coherent system and additionally expands its functionality by supporting other programming languages besides R, including Python and Julia."
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#selling-you-on-quarto-1",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#selling-you-on-quarto-1",
    "title": "Introductions & Syllabus",
    "section": "Selling You on Quarto",
    "text": "Selling You on Quarto\nThe ability to create Quarto files in R is a powerful advantage. It allows us to:\n\n\nDocument analyses by combining text, code, and output\n\nNo copying and pasting into Word\nEasy for collaborators to understand\nShow as little or as much code as you want\n\nProduce many different document types as output\n\nPDF documents\nHTML webpages and reports\nWord and PowerPoint documents\n\nPresentations (like these slides)\nBooks\nTheses/Dissertations 😉🎓\nWebsites (like the one for this course!)\n\nWorks with LaTeX and HTML for math and more formatting control"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#selling-you-on-quarto-2",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#selling-you-on-quarto-2",
    "title": "CSSS 508 • Lecture 1",
    "section": "Selling You on Quarto",
    "text": "Selling You on Quarto\nThe ability to create Quarto files in R is a powerful advantage. It allows us to:\n\nProduce many different document types as output\n\n\n\nPDF documents\nHTML webpages and reports\nWord and PowerPoint documents\n\nPresentations (like these slides)\nBooks\nTheses/Dissertations 😉🎓\nWebsites (like the one for this course!)\nWorks with LaTeX and HTML for math and more formatting control\n\n\n\nWe’ll get back to this shortly!"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#downloading-r-and-rstudio",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#downloading-r-and-rstudio",
    "title": "Introductions & Syllabus",
    "section": "Downloading R and RStudio",
    "text": "Downloading R and RStudio\nIf you don’t already have R and RStudio on your machine, now is the time to do so!\n\n\nGo to the course homepage, https://vsass.github.io/CSSS508\nClick the Download R link and download R to your machine.\nAfterwards, click the Download RStudio link and download RStudio to your machine.\nLastly, click the Download Quarto link and download Quarto to your machine."
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#getting-started",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#getting-started",
    "title": "Introductions & Syllabus",
    "section": "Getting Started",
    "text": "Getting Started\nOpen up RStudio now and choose File &gt; New File &gt; R Script.\nThen, let’s get oriented with the interface:\n\n\nTop Left: Code editor pane, data viewer (browse with tabs)\nBottom Left: Console for running code (&gt; prompt)\nTop Right: List of objects in environment, code history tab.\nBottom Right: Tabs for browsing files, viewing plots, managing packages, and viewing help files."
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#getting-started-1",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#getting-started-1",
    "title": "CSSS 508 • Lecture 1",
    "section": "Getting Started",
    "text": "Getting Started\nOpen up RStudio now and choose File &gt; New File &gt; R Script.\nThen, let’s get oriented with the interface:\n\n\nTop Left: Code editor pane, data viewer (browse with tabs)\nBottom Left: Console for running code (&gt; prompt)\nTop Right: List of objects in environment, code history tab.\nBottom Right: Tabs for browsing files, viewing plots, managing packages, and viewing help files."
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#downloading-r-and-rstudio-1",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#downloading-r-and-rstudio-1",
    "title": "",
    "section": "Downloading R and RStudio",
    "text": "Downloading R and RStudio\nIf you don’t already have R and RStudio on your machine, now is the time to do so!\n\n\nGo to the course homepage, https://vsass.github.io/CSSS508\n\nClick the Download R link and download R to your machine.\nAfterwards, click the Download RStudio link and download RStudio to your machine.\nLastly, click the Download Quarto link and download Quarto to your machine."
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#getting-started-background-image-httpsrstudio.github.iocheatsheetsrstudio-ide.pdf",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#getting-started-background-image-httpsrstudio.github.iocheatsheetsrstudio-ide.pdf",
    "title": "CSSS 508 • Lecture 1",
    "section": "Getting Started {background-image = “https://rstudio.github.io/cheatsheets/rstudio-ide.pdf”}",
    "text": "Getting Started {background-image = “https://rstudio.github.io/cheatsheets/rstudio-ide.pdf”}\nOpen up RStudio now and choose File &gt; New File &gt; R Script.\nThen, let’s get oriented with the interface:\n\n\nTop Left: Code editor pane, data viewer (browse with tabs)\nBottom Left: Console for running code (&gt; prompt)\nTop Right: List of objects in environment, code history tab.\nBottom Right: Tabs for browsing files, viewing plots, managing packages, and viewing help files."
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#background-iframehttpsrstudio.github.iocheatsheetsrstudio-ide.pdf-background-interactive-true",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#background-iframehttpsrstudio.github.iocheatsheetsrstudio-ide.pdf-background-interactive-true",
    "title": "CSSS 508 • Lecture 1",
    "section": "{background-iframe=“https://rstudio.github.io/cheatsheets/rstudio-ide.pdf” background-interactive = true}",
    "text": "{background-iframe=“https://rstudio.github.io/cheatsheets/rstudio-ide.pdf” background-interactive = true}"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#background-imageimagesrstudio-panes-labeled.jpeg-background-size-80",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#background-imageimagesrstudio-panes-labeled.jpeg-background-size-80",
    "title": "CSSS 508 • Lecture 1",
    "section": "{background-image=“images/rstudio-panes-labeled.jpeg” background-size: 80%}",
    "text": "{background-image=“images/rstudio-panes-labeled.jpeg” background-size: 80%}"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#editing-and-running-code",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#editing-and-running-code",
    "title": "Introductions & Syllabus",
    "section": "Editing and Running Code",
    "text": "Editing and Running Code\nThere are several ways to run R code in RStudio:\n. . .\n\nHighlight lines in the editor window and click      Run at the top right corner of said window or hit Ctrl+Enter or ⌘+Enter to run them all."
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#incomplete-code",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#incomplete-code",
    "title": "Introductions & Syllabus",
    "section": "Incomplete Code",
    "text": "Incomplete Code\nIf you mess up (e.g. leave off a parenthesis), R might show a + sign prompting you to finish the command:\n\n&gt; (11-2\n+\n\nFinish the command or hit Esc to get out of this."
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#r-as-a-calculator",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#r-as-a-calculator",
    "title": "Introductions & Syllabus",
    "section": "R as a Calculator",
    "text": "R as a Calculator\nIn the console, type 123 + 456 + 789 and hit Enter.\n. . .\n\n123 + 456 + 789\n\n[1] 1368\n\n\n. . .\nThe [1] in the output indicates the numeric index of the first element on that line.\n. . .\nNow in your blank R document in the editor, try typing the line sqrt(400) and either clicking Run or hitting Ctrl+Enter or ⌘+Enter.\n. . .\n\nsqrt(400)\n\n[1] 20"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#functions-and-help",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#functions-and-help",
    "title": "CSSS 508 • Lecture 1",
    "section": "Functions and Help",
    "text": "Functions and Help\nsqrt() is an example of a function in R.\nIf we didn’t have a good guess as to what sqrt() will do, we can type ?sqrt in the console and look at the Help panel on the right.\n\n?sqrt\n\nArguments are the inputs to a function1. In this case, the only argument to sqrt() is x which can be a number or a vector of numbers.\nHelp files provide documentation on how to use functions and what functions produce.\n\nThe basic template of a function is\n\nfunction_name(argument1, argument2 = value2, argument3 = value3...)\n\nFunctions can have a wide range of arguments and some are required for the function to run, while others remain optional. You can see from each functions’ help page which are not required because they will have an = with some default value pre-selected. If there is no = it is up to the user to define that value and therefore it is a required specification."
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#objects",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#objects",
    "title": "Introductions & Syllabus",
    "section": "Objects",
    "text": "Objects\nR stores everything as an object, including data, functions, models, and output.\n. . .\nCreating an object can be done using the assignment operator: &lt;- . . .\n\nnew.object &lt;- 144\n\n. . .\nOperators like &lt;- are functions that look like symbols but typically sit between their arguments (e.g. numbers or objects) instead of having them inside () like in sqrt(x).\n. . .\nWe do math with operators, e.g., x + y.\n+ is the addition operator!"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#calling-objects",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#calling-objects",
    "title": "Introductions & Syllabus",
    "section": "Calling Objects",
    "text": "Calling Objects\nYou can display or “call” an object simply by using its name.\n\nnew.object\n\n[1] 144"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#using-objects",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#using-objects",
    "title": "Introductions & Syllabus",
    "section": "Using Objects",
    "text": "Using Objects\nAn object’s name represents the information stored in that object, so you can treat the object’s name as if it were the values stored inside. . . .\n\nnew.object + 10\n\n[1] 154\n\nnew.object + new.object\n\n[1] 288\n\nsqrt(new.object)\n\n[1] 12"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#vectors",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#vectors",
    "title": "Introductions & Syllabus",
    "section": "Vectors",
    "text": "Vectors\nA vector is one of many data types available in R. Specifically, it is a series of elements, such as numbers, strings, or booleans (i.e. TRUE, FALSE).\n. . .\nYou can create a vector using the function c() which stands for “combine” or “concatenate”. . . .\n\nnew.object &lt;- c(4, 9, 16, 25, 36)\nnew.object\n\n[1]  4  9 16 25 36\n\n\n. . .\nIf you name an object the same name as an existing object, it will overwrite it.\n. . .\nYou can provide a vector as an argument for many functions. . . .\n\nsqrt(new.object)\n\n[1] 2 3 4 5 6"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#more-complex-objects",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#more-complex-objects",
    "title": "Introductions & Syllabus",
    "section": "More Complex Objects",
    "text": "More Complex Objects\nThere are other, more complex data types in R which we will discuss later in the quarter! These include matrices, arrays, lists, and dataframes.\nMost data sets you will work with will be read into R and stored as a dataframe, so this course will mainly focus on manipulating and visualizing these objects."
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#quarto",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#quarto",
    "title": "CSSS 508 • Lecture 1",
    "section": "Quarto",
    "text": "Quarto"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#quarto-documents",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#quarto-documents",
    "title": "Introductions & Syllabus",
    "section": "Quarto Documents",
    "text": "Quarto Documents\nLet’s try making an Quarto file:\n\nChoose File &gt; New File &gt; Quarto Document…\nMake sure HTML Output is selected\nIn the Title box call this test document my_first_qmd.qmd and click Create\nSave this document somewhere (you can delete it later) (either with File &gt; Save or clicking     towards the top left of the source pane)\nWatch the progress in the Background Jobs tab of the console pane, then gaze upon your result!\n\n. . .\nIf you want to create PDF output in the future, you’ll need to run the following code in your console.\n\ninstall.packages(\"quarto\")\ninstall.packages('tinytex')\ntinytex::install_tinytex()"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#quarto-headers",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#quarto-headers",
    "title": "Introductions & Syllabus",
    "section": "Quarto Headers",
    "text": "Quarto Headers\nThe header of an .qmd file is a YAML3code block, and everything else is part of the main document.\n\n---\ntitle: \"Untitled\"\nauthor: \"Victoria Sass\"\ndate: \"October 3, 2023\"\noutput: html_document\n---\n\nTo mess with global formatting, you can modify the header4.\n\noutput:\n  html_document:\n    theme: readable"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#footnotes",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#footnotes",
    "title": "Introductions & Syllabus",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nThis thing is the caret: |↩︎\nIn Quarto documents, comments only work in code chunks. Outside of a chunk, # creates headers like “comments” at the top of this slide.↩︎\nYou can read a bit more about YAML headers in Quarto here and this reference page lists all options possible for html output.↩︎\nBe careful though, YAML is space-sensitive; indents matter!↩︎\nThis is all basic markdown syntax which you can learn about here.↩︎\nNote R is object-oriented which means summary() provides different information for different types of objects!↩︎\nYou never want to include this line of code in a Quarto document or an R Script↩︎\nYou never want to include this line of code in a Quarto document or an R Script↩︎\nYou’ll only need to re-install a package when you update R or if the package itself comes out with an updated version with new features you want to use.↩︎\nYou never want to include this line of code in a Quarto document or an R Script↩︎\nYou’ll only need to re-install a package when you update R or if the package itself comes out with an updated version with new features you want to use.↩︎"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#editing-and-running-code-1",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#editing-and-running-code-1",
    "title": "Introductions & Syllabus",
    "section": "Editing and Running Code",
    "text": "Editing and Running Code\nThere are several ways to run R code in RStudio:\n\nHighlight lines in the editor window and click      Run at the top right corner of said window or hit Ctrl+Enter or ⌘+Enter to run them all.\nWith your caret1 on a line you want to run, hit Ctrl+Enter or ⌘+Enter. Note your caret moves to the next line, so you can run code sequentially with repeated presses.\n\n. . .\n\nType individual lines in the console and press Enter.\n\n. . .\n\nIn quarto documents, click within a code chunk and click the green arrow     to run the chunk. The button beside that (   ) runs all prior chunks.\n\n. . .\nThe console will show the lines you ran followed by any printed output."
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#quarto-headers-1",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#quarto-headers-1",
    "title": "",
    "section": "Quarto Headers",
    "text": "Quarto Headers\nThe header of an .qmd file is a YAML1code block, and everything else is part of the main document.\n\n---\ntitle: \"Untitled\"\nauthor: \"Victoria Sass\"\ndate: \"October 3, 2023\"\noutput: html_document\n---\n\nTo mess with global formatting, you can modify the header2.\n\noutput:\n  html_document:\n    theme: readable\n\nYou can read a bit more about YAML headers in Quarto here and this reference page lists all options possible for html output.Be careful though, YAML is space-sensitive; indents matter!"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#r-markdown-syntax",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#r-markdown-syntax",
    "title": "CSSS 508 • Lecture 1",
    "section": "R Markdown Syntax",
    "text": "R Markdown Syntax\n\n\nOutput\nbold/strong emphasis\nitalic/normal emphasis\n\nBlock quote from famous person\n\n\nSyntax\nbold/strong emphasis\nitalic/normal emphasis"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#subheader",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#subheader",
    "title": "CSSS 508 • Lecture 1",
    "section": "Subheader",
    "text": "Subheader\nSubsubheader\n\nBlock quote from famous person ```"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#quarto-syntax",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#quarto-syntax",
    "title": "Introductions & Syllabus",
    "section": "Quarto Syntax",
    "text": "Quarto Syntax\n\n\n\nOutput\nbold/strong emphasis  italic/normal emphasis  \n\nHeader\n\n\n\nSubheader\n\n\n\nSubsubheader\n\n\n\nBlock quote from famous person\n\n\n\n\nSyntax\n\n**bold/strong emphasis**\n*italic/normal emphasis*\n  \n  \n  \n# Header\n  \n  \n  \n## Subheader\n  \n\n\n### Subsubheader\n  \n\n\n\n&gt; Block quote from\n&gt; famous person"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#more-r-markdown-syntax",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#more-r-markdown-syntax",
    "title": "CSSS 508 • Lecture 1",
    "section": "More R Markdown Syntax",
    "text": "More R Markdown Syntax\n\n\nOutput\n\nOrdered lists\nAre real easy\nEven with sublists\nOr when lazy with numbering\n\n\nUnordered lists\nAre also real easy\n\nAlso even with sublists\n\n\n\nSyntax\n1. Ordered lists 1. Are real easy 1. Even with sublists 1. Or when lazy with numbering\n* Unordered lists * Are also real easy + Also even with sublists"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#quarto-syntax-continued",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#quarto-syntax-continued",
    "title": "Introductions & Syllabus",
    "section": "Quarto Syntax5 Continued",
    "text": "Quarto Syntax5 Continued\n\n\n\nOutput\n\nOrdered lists\nAre real easy\n\nEven with sublists\nOr with lazy numbering\n\n\n\nUnordered lists\nAre also real easy\n\nAlso even with sublists\n\nAnd subsublists\n\n\n\n\n\n\nSyntax\n\n1. Ordered lists\n1. Are real easy\n    1. Even with sublists\n    1. Or with lazy numbering\n  \n    \n    \n    \n    \n* Unordered lists\n* Are also real easy\n  + Also even with sublists\n    - And subsublists"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#formulae-and-syntax",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#formulae-and-syntax",
    "title": "Introductions & Syllabus",
    "section": "Formulae and Syntax",
    "text": "Formulae and Syntax\n\n\n\nOutput\nInclude math \\(y= \\left( \\frac{2}{3} \\right)^2\\) inline.\nOr centered on your page like so:\n\\[\\frac{1}{n} \\sum_{i=1}^{n} x_i = \\bar{x}_n\\]\nOr write code-looking font.\nOr a block of code:\n\ny &lt;- 1:5\nz &lt;- y^2\n\n\n\n\nSyntax\nInclude math $y= \\left(\\frac{2}{3} \\right)^2$ inline. \n\nOr centered on your page like so: \n  \n$$\\frac{1}{n} \\sum_{i=1}^{n}x_i = \\bar{x}_n$$\n\n\n  \n  \nOr write`code-looking font`.\n\nOr a block of code:\n\n```{r}\ny &lt;- 1:5\nz &lt;- y^2\n```"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#check",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#check",
    "title": "CSSS 508 • Lecture 1",
    "section": "Check",
    "text": "Check\n---\ntitle: \"My document\"\n---\n\nSome markdown content.\n\n```{r}\n1 + 1\n```\n\nSome additional markdown content."
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#quarto-tinkering",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#quarto-tinkering",
    "title": "Introductions & Syllabus",
    "section": "Quarto Tinkering",
    "text": "Quarto Tinkering\nQuarto docs can be modified in many ways. Visit these links for more information.\n\nGetting started with Quarto\n\nTutorial: Hello, Quarto\nTutorial: Computations\nTutorial: Authoring\n\nWays to modify the overall document appearance\nWays to format parts of your document\nLearn about the visual editor here"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#r-code-in-quarto",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#r-code-in-quarto",
    "title": "Introductions & Syllabus",
    "section": "R Code in Quarto",
    "text": "R Code in Quarto\nInside Quarto, lines of R code are called chunks. Code is sandwiched between sets of three backticks and {r}. This chunk of code…\n```{r}\nsummary(cars)\n```\nProduces this output in your document:\n\nsummary(cars)\n\n     speed           dist       \n Min.   : 4.0   Min.   :  2.00  \n 1st Qu.:12.0   1st Qu.: 26.00  \n Median :15.0   Median : 36.00  \n Mean   :15.4   Mean   : 42.98  \n 3rd Qu.:19.0   3rd Qu.: 56.00  \n Max.   :25.0   Max.   :120.00"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#chunk-options",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#chunk-options",
    "title": "Introductions & Syllabus",
    "section": "Chunk Options",
    "text": "Chunk Options\nChunks have options that control what happens with their code. They are specified as special comments at the top of a block. For example:\n```{r}\n#| label: bar-chart\n#| eval: false\n#| fig-cap: \"A line plot on a polar axis\"\n```"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#chunk-options-1",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#chunk-options-1",
    "title": "Introductions & Syllabus",
    "section": "Chunk Options",
    "text": "Chunk Options\nSome useful and common options include:\n\necho: false - Keeps R code from being shown in the document\neval: false - Shows R code in the document without running it\ninclude: false - Hides all output but still runs code (good for setup chunks where you load packages!)\noutput: false - Doesn’t include the results of that code chunk in the output\ncache: true - Saves results of running that chunk so if it takes a while, you won’t have to re-run it each time you re-render the document\nfig.height: 5, fig.width: 5 - modify the dimensions of any plots that are generated in the chunk (units are in inches)\nfig.cap: \"Text\" - add a caption to your figure in the chunk"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#playing-with-chunk-options",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#playing-with-chunk-options",
    "title": "Introductions & Syllabus",
    "section": "Playing with Chunk Options",
    "text": "Playing with Chunk Options\nTry adding or changing the chunk options for the two chunks in my_first_Rmd.qmd and re-rendering to check what happens.\n\n```{r}\n#| eval: false\nsummary(cars)\n```"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#in-line-r-code",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#in-line-r-code",
    "title": "Introductions & Syllabus",
    "section": "In-Line R code",
    "text": "In-Line R code\nSometimes we want to insert a value directly into our text. We do that using code in single backticks starting off with r.\n. . .\nFour score and seven years ago is the same as `r 4*20 + 7` years.\n. . .\nFour score and seven years ago is the same as 87 years.\n. . .\n\nMaybe we’ve saved a variable in a chunk we want to reference in the text:\n\nx &lt;- sqrt(77)\n\n. . .\nThe value of `x` rounded to the nearest two decimals is `r round(x, 2)`.\n. . .\nThe value of x rounded to the nearest two decimals is 8.77."
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#this-is-amazing",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#this-is-amazing",
    "title": "Introductions & Syllabus",
    "section": "This is Amazing!",
    "text": "This is Amazing!\nHaving R dump values directly into your document protects you from silly mistakes:\n. . .\n\nNever wonder “how did I come up with this quantity?” ever again: Just look at your formula in your .qmd file!\n\n. . .\n\nConsistency! No “find/replace” mishaps; reference a variable in-line throughout your document without manually updating if the calculation changes (e.g. reporting sample sizes).\n\n. . .\n\nYou are more likely to make a typo in a “hard-coded” number than you are to write R code that somehow runs but gives you the wrong thing."
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#example-keeping-dates",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#example-keeping-dates",
    "title": "Introductions & Syllabus",
    "section": "Example: Keeping Dates",
    "text": "Example: Keeping Dates\nIn your YAML header, make the date come from R’s Sys.time() function by changing:\n\ndate: \"October 3, 2023\"\nto\ndate: \"`r Sys.time()`\""
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#whats-up-with-cars",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#whats-up-with-cars",
    "title": "",
    "section": "What’s Up with cars?",
    "text": "What’s Up with cars?\nIn the sample Quarto document you are working on, we can load the built-in data cars, which loads as a dataframe, a type of object mentioned earlier. Then, we can look at it in a couple different ways.\n\ndata(cars) loads this dataframe into the Global Environment.\n\n\nView(cars) pops up a Viewer pane (“interactive” use only, don’t put in Quarto document!).\n\n\n\nhead(cars, 5) # prints first 5 rows, can use tail() too\n\n  speed dist\n1     4    2\n2     4   10\n3     7    4\n4     7   22\n5     8   16"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#tell-me-more-about-cars",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#tell-me-more-about-cars",
    "title": "",
    "section": "Tell Me More About cars\n",
    "text": "Tell Me More About cars\n\nstr() displays the structure of an object:\n\nstr(cars) # str[ucture]\n\n'data.frame':   50 obs. of  2 variables:\n $ speed: num  4 4 7 7 8 9 10 10 10 11 ...\n $ dist : num  2 10 4 22 16 10 18 26 34 17 ...\n\n\n\nsummary() displays summary information 1:\n\nsummary(cars)\n\n     speed           dist       \n Min.   : 4.0   Min.   :  2.00  \n 1st Qu.:12.0   1st Qu.: 26.00  \n Median :15.0   Median : 36.00  \n Mean   :15.4   Mean   : 42.98  \n 3rd Qu.:19.0   3rd Qu.: 56.00  \n Max.   :25.0   Max.   :120.00  \n\n\n\nNote R is object-oriented: summary() provides different information for different types of objects!"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#ugly-pictures-of-cars",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#ugly-pictures-of-cars",
    "title": "",
    "section": "Ugly Pictures of cars\n",
    "text": "Ugly Pictures of cars\n\nhist() generates a histogram of a vector. Note you can access a vector that is a column of a dataframe using $, the extract operator.\n\n\n\nhist(cars$speed) # Histogram\n\n\n\n\n\n\nhist(cars$dist)"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#drawing-slightly-less-ugly-pictures",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#drawing-slightly-less-ugly-pictures",
    "title": "",
    "section": "Drawing Slightly Less Ugly Pictures",
    "text": "Drawing Slightly Less Ugly Pictures\n\nhist(cars$dist,\n     xlab = \"Distance (ft)\", # X axis label\n     main = \"Observed stopping distances of cars\") # Title"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#math-with-cars",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#math-with-cars",
    "title": "",
    "section": "Math with cars\n",
    "text": "Math with cars\n\n\ndist_mean  &lt;- mean(cars$dist) \nprint(dist_mean)\n\n[1] 42.98\n\nspeed_mean &lt;- mean(cars$speed)\nprint(speed_mean)\n\n[1] 15.4"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#drawing-still-ugly-pictures",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#drawing-still-ugly-pictures",
    "title": "",
    "section": "Drawing Still Ugly Pictures",
    "text": "Drawing Still Ugly Pictures"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#swiss-time",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#swiss-time",
    "title": "",
    "section": "\nswiss Time",
    "text": "swiss Time\nLet’s switch gears to the swiss data frame built in to R.\n\nFirst, use ?swiss to see what things mean.\n\n\nThen, load it using data(swiss)\n\n\nAdd chunks to your Quarto document inspecting swiss, defining variables, doing some exploratory plots using hist or plot.\nYou might experiment with colors and shapes."
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#looking-at-swiss",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#looking-at-swiss",
    "title": "Introductions & Syllabus",
    "section": "Looking at swiss",
    "text": "Looking at swiss\n\nCodePlot\n\n\n\npairs(swiss, \n      pch = 8, \n      col = \"violet\",\n      main = \"Pairwise comparisons of Swiss variables\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npairs() is a pairwise scatterplot function. Good for a quick look at small datasets with numerical/continuous data, but mostly useless for larger data."
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#installing-packages",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#installing-packages",
    "title": "Introductions & Syllabus",
    "section": "Installing Packages",
    "text": "Installing Packages\nTo use a package outside of Base R you need to do two things:"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#making-tables",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#making-tables",
    "title": "",
    "section": "Making Tables",
    "text": "Making Tables\n\nlibrary(pander) # loads pander, do once in your session\npander(summary(swiss), style = \"rmarkdown\", split.tables = 120)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFertility\nAgriculture\nExamination\nEducation\nCatholic\nInfant.Mortality\n\n\n\nMin. :35.00\nMin. : 1.20\nMin. : 3.00\nMin. : 1.00\nMin. : 2.150\nMin. :10.80\n\n\n1st Qu.:64.70\n1st Qu.:35.90\n1st Qu.:12.00\n1st Qu.: 6.00\n1st Qu.: 5.195\n1st Qu.:18.15\n\n\nMedian :70.40\nMedian :54.10\nMedian :16.00\nMedian : 8.00\nMedian : 15.140\nMedian :20.00\n\n\nMean :70.14\nMean :50.66\nMean :16.49\nMean :10.98\nMean : 41.144\nMean :19.94\n\n\n3rd Qu.:78.45\n3rd Qu.:67.65\n3rd Qu.:22.00\n3rd Qu.:12.00\n3rd Qu.: 93.125\n3rd Qu.:21.70\n\n\nMax. :92.50\nMax. :89.70\nMax. :37.00\nMax. :53.00\nMax. :100.000\nMax. :26.60\n\n\n\n\n\n\n\n\nNote that we put the summary(swiss) function call inside the pander() call. This is called nesting functions and is very common. I’ll introduce a method next week to avoid confusion from nesting too many functions inside each other"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#data-look-a-little-nicer-this-way",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#data-look-a-little-nicer-this-way",
    "title": "",
    "section": "Data Look a Little Nicer This Way",
    "text": "Data Look a Little Nicer This Way\n\npander(head(swiss, 5), style = \"rmarkdown\", split.tables = 120)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \nFertility\nAgriculture\nExamination\nEducation\nCatholic\nInfant.Mortality\n\n\n\nCourtelary\n80.2\n17\n15\n12\n9.96\n22.2\n\n\nDelemont\n83.1\n45.1\n6\n9\n84.84\n22.2\n\n\nFranches-Mnt\n92.5\n39.7\n5\n5\n93.4\n20.2\n\n\nMoutier\n85.8\n36.5\n12\n7\n33.77\n20.3\n\n\nNeuveville\n76.9\n43.5\n17\n15\n5.16\n20.6\n\n\n\n\n\n\n\n\nsplit.tables = 120 tells pander to break a table into multiple tables if it will be over 120 characters wide. Adjust this to get widths just right."
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#homework-1",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#homework-1",
    "title": "Introductions & Syllabus",
    "section": "Homework #1",
    "text": "Homework #1\nWrite up a .qmd file showing some exploratory analyses of the Swiss fertility data. Upload both the .qmd file and the .html file to Canvas. You must upload BOTH for credit.\n. . .\nMix in-line R calculations, R output, and plots with text describing the relationships you see. Include at least two plots. You are encouraged to include more! You must use in-line R calculations/references at least once (e.g. functions like nrow(), mean(), sd(), cor(), median(), min()) and may not hard-code any numbers referenced in your text.\n. . .\nYour document should be pleasant for a peer to look at, with some organization using sections or lists, and all plots labeled clearly. Use chunk options echo and output to limit the code/output you show in the .html. Discussion of specific values should be summarized in sentences in your text—not as printed code and output—and rounded so as not to be absurdly precise (e.g. round x with round(x, 2)).\n\n\nTake a look at the example provided on our course website for an idea what this might look like with a different dataset. Feel free to use the template as a starting point!"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#grading-rubric",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#grading-rubric",
    "title": "Introductions & Syllabus",
    "section": "Grading Rubric",
    "text": "Grading Rubric\n\n\n\n\n\n\n\n\n  \n    \n    \n      Evaluation\n      Points\n    \n  \n  \n    Didn't turn anything in.\n0\n    Turned in but low effort, ignoring many directions.\n1\n    Decent effort, followed directions with some minor issues.\n2\n    Nailed it!\n3"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#due-dates",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#due-dates",
    "title": "Introductions & Syllabus",
    "section": "Due dates",
    "text": "Due dates\n\n\n\n\n\n\n  \n    \n    \n      #\n      \n        Section AA\n      \n      \n        Section AB\n      \n    \n    \n      Homework Due\n      Peer Review Due\n      Homework Due\n      Peer Review Due\n    \n  \n  \n    1\n10 October\n15 October\n12 October\n17 October\n    2\n17 October\n22 October\n19 October\n24 October\n    3\n24 October\n29 October\n26 October\n31 October\n    4\n31 October\n5 November\n2 November\n7 November\n    5\n7 November\n12 November\n9 November\n14 November\n    6\n14 November\n19 November\n16 November\n21 November\n    7\n21 November\n26 November\n23 November\n28 November\n    8\n28 November\n3 November\n30 November\n5 November\n    9\n5 December\n10 December\n7 December\n12 December"
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#packages",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#packages",
    "title": "Roadmap",
    "section": "Packages",
    "text": "Packages\nLast week we discussed Base R and the fact that what makes R extremely powerful and flexible is the large number of diverse user-created packages.\n. . .\n\n\n\n\n\n\n What are packages again?\n\n\n\nRecall that packages are simply collections of functions and tools others have already created, that will make your life easier!\n\n\n. . .\n\n\n\n\n\n\n The package 2-step\n\n\n\nRemember that to install a new package you use install.packages(\"package_name\") in the console. You only need to do this once per machine (unless you want to update to a newer version of a package).\nTo load a package into your current session of R you use library(package_name), preferably at the beginning of your R script or Quarto document. Every time you open RStudio it’s a new session and you’ll have to call library() on the packages you want to use."
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#comments",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#comments",
    "title": "",
    "section": "Comments",
    "text": "Comments\nYou may have noticed that sometimes I have written code that looks like this:\n\nnew.object &lt;- 1:10 # Making vector of 1 to 10 \n\n# is known as the commenting symbol in R!\nAnything written on the same line after # will not be run by R.\nThis is useful for annotating your code to remind you (or others) what you are doing in a section.1\nIn Quarto documents, comments only work in chunks. Outside of a chunk, # creates headers like “comments” at the top of this slide."
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#saving-files",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#saving-files",
    "title": "",
    "section": "Saving Files",
    "text": "Saving Files\nYou can save an R object on your computer as a file to open later:\n\nsave(new.object, file = \"new_object.RData\")\n\n\nYou can open saved files in R as well:\n\nload(\"new_object.RData\")\n\n\n\nBut where are these files being saved and loaded from?"
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#working-directories",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#working-directories",
    "title": "",
    "section": "Working Directories",
    "text": "Working Directories\nR saves files and looks for files to open in your current working directory. You can ask R what this is:\n\ngetwd()\n\n[1] \"/Users/victoriasass/Desktop/GitHub/CSSS508/Lectures/Lecture2\"\n\n\n\nSimilarly, we can set a working directory like so:\n\nsetwd(\"C:/Users/vsass/CSSS508/HW2\")\n\n\n\nDon’t set a working directory in R Markdown documents! They automatically set the directory they are in as the working directory."
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#loading-packages",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#loading-packages",
    "title": "",
    "section": "Loading Packages",
    "text": "Loading Packages\nInstalling a packages does not mean it’s loaded in our R session. To do so, we call the package:\n\nlibrary(gapminder)\n\nNOTE: Use quotes when installing packages, but not when loading packages!\n\nWe need to run this code every time we open a new R session: Where should we put this code?\n\n\nAnswer: In qmd files, and not the console!"
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#managing-files",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#managing-files",
    "title": "",
    "section": "Managing Files",
    "text": "Managing Files\nWhen managing R projects, it is normally best to give each project (such as a homework assignment) its own folder. I use the following system:\n\n\nEvery class or project has its own folder . . .\nEach assignment or task has a folder inside that, which is the working directory for that item.\n\n\n\n\n\n.qmd and .R files are named clearly and completely\n\n\n\nFor example, this presentation is located and named this: GitHub/CSSS508/Lectures/Lecture1/CSSS508_Lecture1.qmd\n\n\nYou can use whatever system you want, but be consistent so your projects are organized! You don’t want to lose work by losing or overwriting files!\n\n\nFor large projects containing many files, I recommend using RStudio’s built in project management system found in the top right of the RStudio window.\n\n\nFor journal articles I recommend Ben Marwick’s rrtools and huskydown for UW dissertations and theses."
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#file-types",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#file-types",
    "title": "Roadmap",
    "section": "File Types",
    "text": "File Types\nWe mainly work with three types of files in this class:\n\n\n.qmd1: These are markdown syntax files, where you write code and prose to make documents.\n.R: These are R syntax files, where you write code to process and analyze data without making an output document2.\n.html (or .pdf): These are the output documents created when you Render a quarto markdown document.\n\n\n. . .\nMake sure you understand the difference between the uses of these file types! Please ask for clarification if needed!"
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#gapminder-data",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#gapminder-data",
    "title": "Roadmap",
    "section": "Gapminder Data",
    "text": "Gapminder Data\nWe’ll be working with data from Hans Rosling’s Gapminder project. An excerpt of these data can be accessed through an R package called gapminder4.\n. . .\nIn the console: install.packages(\"gapminder\")\n. . .\nThen load the gapminder package as well as the tidyverse package:\n\nlibrary(gapminder)\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.3     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.3     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors"
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#check-out-gapminder",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#check-out-gapminder",
    "title": "",
    "section": "Check Out Gapminder",
    "text": "Check Out Gapminder\nThe data frame we will work with is called gapminder, available once you have loaded the package. Let’s see its structure:\n\nstr(gapminder)\n\ntibble [1,704 × 6] (S3: tbl_df/tbl/data.frame)\n $ country  : Factor w/ 142 levels \"Afghanistan\",..: 1 1 1 1 1 1 1 1 1 1 ...\n $ continent: Factor w/ 5 levels \"Africa\",\"Americas\",..: 3 3 3 3 3 3 3 3 3 3 ...\n $ year     : int [1:1704] 1952 1957 1962 1967 1972 1977 1982 1987 1992 1997 ...\n $ lifeExp  : num [1:1704] 28.8 30.3 32 34 36.1 ...\n $ pop      : int [1:1704] 8425333 9240934 10267083 11537966 13079460 14880372 12881816 13867957 16317921 22227415 ...\n $ gdpPercap: num [1:1704] 779 821 853 836 740 ...\n\n\n\n\n\nWhat’s Interesting Here?\n\n\nFactor variables country and continent\n\nFactors are categorical data with an underlying numeric representation\nWe’ll spend a lot of time on factors later!\n\n\nMany observations: \\(n=1704\\) rows\nFor each observation, a few variables: \\(p=6\\) columns\nA nested/hierarchical structure: year in country in continent\n\nThese are panel data!"
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#whats-interesting-here",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#whats-interesting-here",
    "title": "",
    "section": "What’s Interesting Here?",
    "text": "What’s Interesting Here?\n\n\nFactor variables country and continent\n\nFactors are categorical data with an underlying numeric representation\nWe’ll spend a lot of time on factors later!\n\n\n\n\n\nMany observations: \\(n=1704\\) rows\n\n\n\n\nFor each observation, a few variables: \\(p=6\\) columns\n\n\n\n\n\nA nested/hierarchical structure: year in country in continent\n\nThese are panel data!"
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#basics-of-ggplot2",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#basics-of-ggplot2",
    "title": "",
    "section": "Basics of ggplot2\n",
    "text": "Basics of ggplot2\n\n\n\n\nChina &lt;- gapminder |&gt; \n  filter(country == \"China\")\nplot(lifeExp ~ year, \n     data = China, \n     xlab = \"Year\", \n     ylab = \"Life expectancy\",\n     main = \"Life expectancy in China\", \n     col = \"red\", \n     pch = 16)\n\nThis plot is made with one function and many arguments.\n\n\n\n\n\n\n\n\n\n\nNote: Don’t worry about the code used to create the object China. We’ll explore data manipulation next week!"
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#fancier-ggplot",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#fancier-ggplot",
    "title": "Roadmap",
    "section": "Fancier: ggplot",
    "text": "Fancier: ggplot\n\n\n\nggplot(data = China, \n       mapping = aes(x = year, y = lifeExp)) +\n  geom_point(color = \"red\", size = 3) +\n  labs(title = \"Life expectancy in China\", \n       x = \"Year\", \n       y = \"Life expectancy\") +\n  theme_bw(base_size = 18)\n\n\nThis ggplot is made with many functions and fewer arguments in each."
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#ggplot2",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#ggplot2",
    "title": "Roadmap",
    "section": "ggplot2",
    "text": "ggplot2\nThe ggplot2 package provides an alternative toolbox for plotting.\n. . .\nThe core idea underlying this package is the layered grammar of graphics: i.e. that we can break up elements of a plot into pieces and combine them.\n. . .\nggplots take a bit more work to create than Base R plots, but are usually:\n\nprettier\nmore professional\nmuch more customizable"
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#structure-of-a-ggplot",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#structure-of-a-ggplot",
    "title": "Roadmap",
    "section": "Structure of a ggplot",
    "text": "Structure of a ggplot\nggplot graphics objects consist of two primary components:\n. . .\n\nLayers, the components of a graph.\n\nWe add layers to a ggplot object using +.\nThis includes adding lines, shapes, and text to a plot.\n\n\n. . .\n\nAesthetics, which determine how the layers appear.\n\nWe set aesthetics using arguments (e.g. color = \"red\") inside layer functions.\nThis includes modifying locations, colors, and sizes of the layers.\n\n\n\n\n\n\n\n\n Aesthetic Vignette\n\n\n\nLearn more about all possible aesthetic mappings here."
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#structure-of-a-ggplot-1",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#structure-of-a-ggplot-1",
    "title": "CSSS 508 • Lecture 2",
    "section": "Structure of a ggplot",
    "text": "Structure of a ggplot\nggplot graphics objects consist of two primary components:\n\n\n\nLayers, the components of a graph.\n\nWe add layers to a ggplot object using +.\nThis includes adding lines, shapes, and text to a plot.\n\n\n\n\n\n\n\nAesthetics, which determine how the layers appear.\n\nWe set aesthetics using arguments (e.g. color=\"red\") inside layer functions.\nThis includes modifying locations, colors, and sizes of the layers."
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#layers",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#layers",
    "title": "Roadmap",
    "section": "Layers",
    "text": "Layers\nLayers are the components of the graph, such as:\n\n\nggplot(): initializes basic plotting object, specifies input data\ngeom_point(): layer of scatterplot points\ngeom_line(): layer of lines\ngeom_histogram(): layer of a histogram\nlabs (or to specify individually: ggtitle(), xlab(), ylab()): layers of labels\nfacet_wrap(): layer creating multiple plot panels\ntheme_bw(): layer replacing default gray background with black-and-white\n\n\n. . .\nLayers are separated by a + sign. For clarity, I usually put each layer on a new line.\n\n\n\n\n\n\n Syntax Warning\n\n\n\nBe sure to end each line with the +. The code will not run if a new line begins with a +."
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#aesthetics",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#aesthetics",
    "title": "Roadmap",
    "section": "Aesthetics",
    "text": "Aesthetics\nAesthetics control the appearance of the layers:\n\nx, y: \\(x\\) and \\(y\\) coordinate values to use\ncolor: set color of elements based on some data value\ngroup: describe which points are conceptually grouped together for the plot (often used with lines)\nsize: set size of points/lines based on some data value (greater than 0)\nalpha: set transparency based on some data value (between 0 and 1)\n\n\n\n\n\n\n\n Mapping data inside aes() vs. creating plot-wise settings outside aes()\n\n\n\nWhen aesthetic arguments are called within aes() they specify a variable of the data and therefore map said value of the data by that aesthetic. Called outside aes(), these are only settings that can be given a specific value but will not display a dimension of the data."
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#layered-grammar-of-graphics",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#layered-grammar-of-graphics",
    "title": "",
    "section": "Layered grammar of graphics1\n",
    "text": "Layered grammar of graphics1\n\n\n\n\n\nBased on Leland Wilkinson’s book The Grammar of Graphics"
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#examples-basic-jargon-in-action",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#examples-basic-jargon-in-action",
    "title": "",
    "section": "Examples: Basic Jargon in Action!",
    "text": "Examples: Basic Jargon in Action!\nWe’ll now build up two ggplots together that demonstrate common layers and aesthetics."
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#axis-labels-points-no-background",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#axis-labels-points-no-background",
    "title": "Roadmap",
    "section": "Axis Labels, Points, No Background",
    "text": "Axis Labels, Points, No Background\n\nBase ggplot\n\n\n\nggplot(data = China,  \n       aes(x = year, y = lifeExp)) \n\n\n\n\n\n\n\n\n\n\n\nInitialize the plot with ggplot() and x and y aesthetics mapped to variables. These aesthetics will be accessible to any future layers since they’re in the primary layer."
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#axis-labels-points-no-background-1",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#axis-labels-points-no-background-1",
    "title": "Roadmap",
    "section": "Axis Labels, Points, No Background",
    "text": "Axis Labels, Points, No Background\n\nScatterplot\n\n\n\nggplot(data = China, \n       aes(x = year, y = lifeExp)) +\n  geom_point()\n\n\n\n\n\n\n\n\n\n\n\nAdd a scatterplot layer."
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#axis-labels-points-no-background-2",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#axis-labels-points-no-background-2",
    "title": "Roadmap",
    "section": "Axis Labels, Points, No Background",
    "text": "Axis Labels, Points, No Background\n\nPoint Color and Size\n\n\n\nggplot(data = China, \n       aes(x = year, y = lifeExp)) +\n  geom_point(color = \"red\", size = 3)\n\n\n\n\n\n\n\n\n\n\n\nSet aesthetics to make the points larger and red."
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#axis-labels-points-no-background-3",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#axis-labels-points-no-background-3",
    "title": "Roadmap",
    "section": "Axis Labels, Points, No Background",
    "text": "Axis Labels, Points, No Background\n\nX-Axis Label\n\n\n\nggplot(data = China, \n       aes(x = year, y = lifeExp)) +\n  geom_point(color = \"red\", size = 3) +\n  labs(x = \"Year\")\n\n\n\n\n\n\n\n\n\n\n\nAdd a layer to capitalize the x-axis label."
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#axis-labels-points-no-background-4",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#axis-labels-points-no-background-4",
    "title": "Roadmap",
    "section": "Axis Labels, Points, No Background",
    "text": "Axis Labels, Points, No Background\n\nY-Axis Label\n\n\n\nggplot(data = China, \n       aes(x = year, y = lifeExp)) +\n  geom_point(color = \"red\", size = 3) +\n  labs(x = \"Year\", \n       y = \"Life expectancy\")\n\n\n\n\n\n\n\n\n\n\n\nAdd a layer to clean up the y-axis label."
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#axis-labels-points-no-background-5",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#axis-labels-points-no-background-5",
    "title": "Roadmap",
    "section": "Axis Labels, Points, No Background",
    "text": "Axis Labels, Points, No Background\n\nTitle\n\n\n\nggplot(data = China, \n       aes(x = year, y = lifeExp)) +\n  geom_point(color = \"red\", size = 3) +\n  labs(x = \"Year\",\n       y = \"Life expectancy\",\n       title = \"Life expectancy in China\")\n\n\n\n\n\n\n\n\n\n\n\nAdd a title layer."
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#axis-labels-points-no-background-6",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#axis-labels-points-no-background-6",
    "title": "Roadmap",
    "section": "Axis Labels, Points, No Background",
    "text": "Axis Labels, Points, No Background\n\nTheme\n\n\n\nggplot(data = China, \n       aes(x = year, y = lifeExp)) +\n  geom_point(color = \"red\", size = 3) +\n  labs(x = \"Year\",\n       y = \"Life expectancy\",\n       title = \"Life expectancy in China\") +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n\n\nPick a nicer theme with a new layer."
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#axis-labels-points-no-background-7",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#axis-labels-points-no-background-7",
    "title": "Roadmap",
    "section": "Axis Labels, Points, No Background",
    "text": "Axis Labels, Points, No Background\n\nText Size\n\n\n\nggplot(data = China, \n       aes(x = year, y = lifeExp)) +\n  geom_point(color = \"red\", size = 3) +\n  labs(x = \"Year\",\n       y = \"Life expectancy\",\n       title = \"Life expectancy in China\") +\n  theme_bw(base_size = 18) \n\n\n\n\n\n\n\n\n\n\n\nIncrease the base text size."
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#plotting-all-countries",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#plotting-all-countries",
    "title": "Roadmap",
    "section": "Plotting All Countries",
    "text": "Plotting All Countries\nWe have a plot we like for China…\n… but what if we want all the countries?"
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#plotting-all-countries-1",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#plotting-all-countries-1",
    "title": "Roadmap",
    "section": "Plotting All Countries",
    "text": "Plotting All Countries\n\nA Mess!\n\n\n\nggplot(data = gapminder,\n       aes(x = year, y = lifeExp)) +\n  geom_point(color = \"red\", size = 3) +\n  labs(x = \"Year\",\n       y = \"Life expectancy\",\n       title = \"Life expectancy over time\") + \n  theme_bw(base_size = 18) \n\n\n\n\n\n\n\n\n\n\n\nWe can’t tell countries apart! Maybe we could follow lines?"
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#plotting-all-countries-2",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#plotting-all-countries-2",
    "title": "Roadmap",
    "section": "Plotting All Countries",
    "text": "Plotting All Countries\n\nLines\n\n\n\nggplot(data = gapminder, \n       aes(x = year, y = lifeExp)) +\n  geom_line(color = \"red\", size = 3) + \n  labs(x = \"Year\",\n       y = \"Life expectancy\",\n       title = \"Life expectancy over time\") + \n  theme_bw(base_size = 18) \n\n\n\n\n\n\n\n\n\n\n\nggplot2 doesn’t know how to connect the lines!"
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#plotting-all-countries-3",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#plotting-all-countries-3",
    "title": "Roadmap",
    "section": "Plotting All Countries",
    "text": "Plotting All Countries\n\nGrouping\n\n\n\nggplot(data = gapminder, \n       aes(x = year, y = lifeExp, \n           group = country)) +\n  geom_line(color = \"red\", size = 3) +\n  labs(x = \"Year\",\n       y = \"Life expectancy\",\n       title = \"Life expectancy over time\") + \n  theme_bw(base_size = 18) \n\n\n\n\n\n\n\n\n\n\n\nThat looks more reasonable… but the lines are too thick!"
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#plotting-all-countries-4",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#plotting-all-countries-4",
    "title": "Roadmap",
    "section": "Plotting All Countries",
    "text": "Plotting All Countries\n\nSize\n\n\n\nggplot(data = gapminder, \n       aes(x = year, y = lifeExp, \n           group = country)) +\n  geom_line(color = \"red\") +\n  labs(x = \"Year\",\n       y = \"Life expectancy\",\n       title = \"Life expectancy over time\") + \n  theme_bw(base_size = 18) \n\n\n\n\n\n\n\n\n\n\n\nMuch better… but maybe we can do highlight regional differences?"
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#plotting-all-countries-5",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#plotting-all-countries-5",
    "title": "Roadmap",
    "section": "Plotting All Countries",
    "text": "Plotting All Countries\n\nColor\n\n\n\nggplot(data = gapminder, \n       aes(x = year, y = lifeExp, \n           group = country, \n           color = continent)) +\n  geom_line() +\n  labs(x = \"Year\",\n       y = \"Life expectancy\",\n       title = \"Life expectancy over time\") + \n  theme_bw(base_size = 18) \n\n\n\n\n\n\n\n\n\n\n\nPatterns are obvious… but it might be even more impactful if we separate continents completely."
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#plotting-all-countries-6",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#plotting-all-countries-6",
    "title": "Roadmap",
    "section": "Plotting All Countries",
    "text": "Plotting All Countries\n\nFacets\n\n\n\nggplot(data = gapminder, \n       aes(x = year, y = lifeExp, \n           group = country, \n           color = continent)) +\n  geom_line() +\n  labs(x = \"Year\",\n       y = \"Life expectancy\",\n       title = \"Life expectancy over time\") + \n  theme_bw(base_size = 18) +\n  facet_wrap(vars(continent))\n\n\n\n\n\n\n\n\n\n\n\nNow the text is too big!"
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#plotting-all-countries-7",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#plotting-all-countries-7",
    "title": "Roadmap",
    "section": "Plotting All Countries",
    "text": "Plotting All Countries\n\nText Size\n\n\n\nggplot(data = gapminder, \n       aes(x = year, y = lifeExp, \n           group = country, \n           color = continent)) +\n  geom_line() +\n  labs(x = \"Year\",\n       y = \"Life expectancy\",\n       title = \"Life expectancy over time\") + \n  theme_bw() +\n  facet_wrap(vars(continent))\n\n\n\n\n\n\n\n\n\n\n\nBetter. Do we even need the legend anymore?"
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#plotting-all-countries-8",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#plotting-all-countries-8",
    "title": "Roadmap",
    "section": "Plotting All Countries",
    "text": "Plotting All Countries\n\nNo Legend\n\n\n\nggplot(data = gapminder, \n       aes(x = year, y = lifeExp, \n           group = country, \n           color = continent)) +\n  geom_line() +\n  labs(x = \"Year\",\n       y = \"Life expectancy\",\n       title = \"Life expectancy over time\") + \n  theme_bw() +\n  facet_wrap(vars(continent)) + \n  theme(legend.position = \"none\")\n\n\n\n\n\n\n\n\n\n\n\nLooking pretty good!"
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#plotting-all-countries-9",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#plotting-all-countries-9",
    "title": "CSSS 508 • Lecture 2",
    "section": "Plotting All Countries",
    "text": "Plotting All Countries\n8: X-Axis Position\n\n\n\nggplot(data = gapminder, \n       aes(x = year, y = lifeExp, \n           group = country, \n           color = continent)) +\n  geom_line() +\n  xlab(\"Year\") + \n  ylab(\"Life expectancy\") +\n  ggtitle(\"Life expectancy over time\") +\n  theme_bw() +\n  facet_wrap(vars(continent)) + \n  theme(legend.position = \"none\", \n        axis.text.x = element_text(angle = 45))\n\n\n\n\n\n\n\n\n\n\n\nNice!"
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#advanced-ggplot-tools",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#advanced-ggplot-tools",
    "title": "",
    "section": "Advanced ggplot tools",
    "text": "Advanced ggplot tools\n(10 minute break!)\nNext, we’ll discuss:\n\nStoring, modifying, and saving ggplots\nAdvanced axis changes (scales, text, ticks)\nLegend changes (scales, colors, locations)"
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#storing-plots",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#storing-plots",
    "title": "Roadmap",
    "section": "Storing Plots",
    "text": "Storing Plots\nWe can assign a ggplot object to a name:\n\nlifeExp_by_year &lt;- \n  ggplot(data = gapminder, \n       aes(x = year, y = lifeExp, \n           group = country, \n           color = continent)) +\n  geom_line() +\n  labs(x = \"Year\",\n       y = \"Life expectancy\",\n       title = \"Life expectancy over time\") + \n  theme_bw() + \n  facet_wrap(vars(continent)) +\n  theme(legend.position = \"none\")\n\nAfterwards, you can display or modify ggplots…"
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#showing-a-stored-graph",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#showing-a-stored-graph",
    "title": "Roadmap",
    "section": "Showing a Stored Graph",
    "text": "Showing a Stored Graph\n\nlifeExp_by_year"
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#adding-more-layers",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#adding-more-layers",
    "title": "Roadmap",
    "section": "Adding More Layers",
    "text": "Adding More Layers\n\nlifeExp_by_year +\n  facet_grid(cols = vars(continent)) + \n    theme(legend.position = \"bottom\")"
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#saving-ggplot-plots",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#saving-ggplot-plots",
    "title": "Roadmap",
    "section": "Saving ggplot Plots",
    "text": "Saving ggplot Plots\nIf you want to save a ggplot, use ggsave():\n\nggsave(\"I_saved_a_file.pdf\", plot = lifeExp_by_year,\n       height = 3, width = 5, units = \"in\")\n\nIf you didn’t manually set font sizes, these will usually come out at a reasonable size given the dimensions of your output file."
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#changing-the-axes",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#changing-the-axes",
    "title": "Roadmap",
    "section": "Changing the Axes",
    "text": "Changing the Axes\nWe can modify the axes in a variety of ways, such as:\n\nChange the \\(x\\) or \\(y\\) range using xlim() or ylim() layers\nChange to a logarithmic or square-root scale on either axis: scale_x_log10(), scale_y_sqrt()\nChange where the major/minor breaks are: scale_x_continuous(breaks =, minor_breaks = )"
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#axis-changes",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#axis-changes",
    "title": "Roadmap",
    "section": "Axis Changes",
    "text": "Axis Changes\n\nggplot(data = China, aes(x = year, y = gdpPercap)) +\n    geom_line() +\n    scale_y_log10(breaks = c(1000, 2000, 3000, 4000, 5000)) + \n    xlim(1940, 2010) + ggtitle(\"Chinese GDP per capita\")"
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#precise-legend-position",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#precise-legend-position",
    "title": "Roadmap",
    "section": "Precise Legend Position",
    "text": "Precise Legend Position\n\nlifeExp_by_year +\n  theme(legend.position = c(0.8, 0.2)) \n\n\n\n\n\n\n\n\nInstead of coordinates, you could also use “top”, “bottom”, “left”, or “right”."
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#scales-for-color-shape-etc.",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#scales-for-color-shape-etc.",
    "title": "Roadmap",
    "section": "Scales for Color, Shape, etc.",
    "text": "Scales for Color, Shape, etc.\nScales are layers that control how the mapped aesthetics appear.\nYou can modify these with a scale_[aesthetic]_[option]() layer:\n\n\n[aesthetic] is x, y, color, shape, linetype, alpha, size, fill, etc.\n[option] is something like manual, continuous, binned or discrete (depending on nature of the variable).\n\n\n. . .\nExamples:\n\nscale_alpha_ordinal(): scales alpha transparency for ordinal categorical variable\nscale_x_log10(): maps a log10 transformation of the x-axis variable\nscale_color_manual(): allows manual specification of color aesthetic"
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#legend-name-and-manual-colors",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#legend-name-and-manual-colors",
    "title": "Roadmap",
    "section": "Legend Name and Manual Colors",
    "text": "Legend Name and Manual Colors\n\nlifeExp_by_year +\n  theme(legend.position = c(0.8, 0.2)) +\n  scale_color_manual(\n    name = \"Which continent are\\nwe looking at?\", # \\n adds a line break \n    values = c(\"Africa\" = \"#4e79a7\", \"Americas\" = \"#f28e2c\", \n               \"Asia\" = \"#e15759\", \"Europe\" = \"#76b7b2\", \"Oceania\" = \"#59a14f\"))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n Note\n\n\n\nThis scale argument knows to “map” onto continent because it is specified as the aesthetic for color in our original ggplot object."
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#end-result",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#end-result",
    "title": "Roadmap",
    "section": "End Result",
    "text": "End Result\nWe’re going to slowly build up a really detailed plot now!"
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#overriding-previous-specifications",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#overriding-previous-specifications",
    "title": "Roadmap",
    "section": "Overriding previous specifications",
    "text": "Overriding previous specifications\n\nlifeExp_by_year + \n  facet_grid(cols = vars(continent))"
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#base-plot-1",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#base-plot-1",
    "title": "",
    "section": "1. Base Plot",
    "text": "1. Base Plot\n\n\nCode\nPlot\n\n\n\n\nggplot(data = gapminder, aes(x = year, y = lifeExp, group = country)) \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWhat might be a good geom layer for this data?"
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#lines-1",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#lines-1",
    "title": "Roadmap",
    "section": "Lines",
    "text": "Lines\n\nLet’s also add a continent-specific average so we can visualize country-deviations from the regional average.\n\nCodePlot\n\n\n\nggplot(data = gapminder, \n       aes(x = year, y = lifeExp, group = country)) +\n  geom_line()"
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#continent-average",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#continent-average",
    "title": "Roadmap",
    "section": "Continent Average",
    "text": "Continent Average\n\nCodePlot\n\n\n\nggplot(data = gapminder, \n       aes(x = year, y = lifeExp, group = country)) +\n  geom_line() +\n  geom_line(stat = \"smooth\", \n            method = \"loess\", \n            aes(group = continent)) \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nA loess curve is something like a moving average."
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#facets-1",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#facets-1",
    "title": "Roadmap",
    "section": "Facets",
    "text": "Facets\n\nCodePlot\n\n\n\nggplot(data = gapminder, \n       aes(x = year, y = lifeExp, group = country)) +\n  geom_line() +\n  geom_line(stat = \"smooth\", \n            method = \"loess\", \n            aes(group = continent)) +\n  facet_wrap(~ continent, \n             nrow = 2)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFacets allow us to gain a clearer understanding of the regional patterns. We want to differentiate the continent-average line from the country-specific lines though so let’s change it’s color."
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#color-scale",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#color-scale",
    "title": "Roadmap",
    "section": "Color Scale",
    "text": "Color Scale\n\nHmm, can’t quite see the blue line yet. Let’s make it bigger?\n\nCodePlot\n\n\n\nggplot(data = gapminder, \n       aes(x = year, y = lifeExp, group = country)) +\n  geom_line() +\n  geom_line(stat = \"smooth\", \n            method = \"loess\", \n            aes(group = continent)) +\n  facet_wrap(~ continent, \n             nrow = 2) +\n  scale_color_manual(name = \"Life Exp. for:\", \n                     values = c(\"Country\" = \"black\", \"Continent\" = \"blue\"))"
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#size-scale",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#size-scale",
    "title": "Roadmap",
    "section": "Size Scale",
    "text": "Size Scale\n\nCodePlot\n\n\n\nggplot(data = gapminder, \n       aes(x = year, y = lifeExp, group = country)) +\n  geom_line() +\n  geom_line(stat = \"smooth\", \n            method = \"loess\", \n            aes(group = continent)) +\n  facet_wrap(~ continent, \n             nrow = 2) +\n  scale_color_manual(name = \"Life Exp. for:\", \n                     values = c(\"Country\" = \"black\", \"Continent\" = \"blue\")) +\n  scale_size_manual(name = \"Life Exp. for:\", \n                    values = c(\"Country\" = 0.25, \"Continent\" = 3))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIt doesn’t look like our color and size scales are actually mapping onto our variables. Why is that?"
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#alpha-transparency",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#alpha-transparency",
    "title": "Roadmap",
    "section": "Alpha (Transparency)",
    "text": "Alpha (Transparency)\n\nCodePlot\n\n\n\nggplot(data = gapminder, \n       aes(x = year, y = lifeExp, group = country)) +\n  geom_line(alpha = 0.5, \n            aes(color = \"Country\", size = \"Country\")) +\n  geom_line(stat = \"smooth\", method = \"loess\", \n            aes(group = continent, color = \"Continent\", size = \"Continent\"), \n            alpha = 0.5) +\n  facet_wrap(~ continent, \n             nrow = 2) +\n  scale_color_manual(name = \"Life Exp. for:\", \n                     values = c(\"Country\" = \"black\", \"Continent\" = \"blue\")) +\n  scale_size_manual(name = \"Life Exp. for:\", \n                    values = c(\"Country\" = 0.25, \"Continent\" = 3))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNow we’re getting somewhere! We can also add useful labels and clean up the theme."
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#theme-and-labels",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#theme-and-labels",
    "title": "Roadmap",
    "section": "Theme and Labels",
    "text": "Theme and Labels\n\nCodePlot\n\n\n\nggplot(data = gapminder, \n       aes(x = year, y = lifeExp, group = country)) +\n  geom_line() +\n  geom_line(stat = \"smooth\", \n            method = \"loess\", \n            aes(group = continent)) +\n  facet_wrap(~ continent, \n             nrow = 2) +\n  scale_color_manual(name = \"Life Exp. for:\", \n                     values = c(\"Country\" = \"black\", \"Continent\" = \"blue\")) +\n  scale_size_manual(name = \"Life Exp. for:\", \n                    values = c(\"Country\" = 0.25, \"Continent\" = 3)) +\n  theme_minimal(base_size = 14) + \n  labs(y = \"Years\", \n       x = \"\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWhat’s our plot showing? We should be explicit about that."
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#title-and-subtitle",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#title-and-subtitle",
    "title": "Roadmap",
    "section": "Title and Subtitle",
    "text": "Title and Subtitle\n\nCodePlot\n\n\n\nggplot(data = gapminder, \n       aes(x = year, y = lifeExp, group = country)) +\n  geom_line() +\n  geom_line(stat = \"smooth\", \n            method = \"loess\", \n            aes(group = continent)) +\n  facet_wrap(~ continent, \n             nrow = 2) +\n  scale_color_manual(name = \"Life Exp. for:\", \n                     values = c(\"Country\" = \"black\", \"Continent\" = \"blue\")) +\n  scale_size_manual(name = \"Life Exp. for:\", \n                    values = c(\"Country\" = 0.25, \"Continent\" = 3)) +\n  theme_minimal(base_size = 14) + \n  labs(y = \"Years\", \n       x = \"\", \n       title = \"Life Expectancy, 1952-2007\", \n       subtitle = \"By continent and country\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe x-axis feels a little busy right now…"
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#angled-tick-values",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#angled-tick-values",
    "title": "Roadmap",
    "section": "Angled Tick Values",
    "text": "Angled Tick Values\n\nCodePlot\n\n\n\nggplot(data = gapminder, \n       aes(x = year, y = lifeExp, group = country)) +\n  geom_line() +\n  geom_line(stat = \"smooth\", \n            method = \"loess\", \n            aes(group = continent)) +\n  facet_wrap(~ continent, \n             nrow = 2) +\n  scale_color_manual(name = \"Life Exp. for:\", \n                     values = c(\"Country\" = \"black\", \"Continent\" = \"blue\")) +\n  scale_size_manual(name = \"Life Exp. for:\", \n                    values = c(\"Country\" = 0.25, \"Continent\" = 3)) +\n  theme_minimal(base_size = 14) + \n  labs(y = \"Years\", \n       x = \"\", \n       title = \"Life Expectancy, 1952-2007\", \n       subtitle = \"By continent and country\") +\n  theme(axis.text.x = element_text(angle = 45)) \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n. . .\n\n\nNote: Fewer values might be better than angled labels! Finally, let’s move our legend so it isn’t wasting space."
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#legend-position",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#legend-position",
    "title": "Roadmap",
    "section": "Legend Position",
    "text": "Legend Position\n\nCodePlot\n\n\n\nggplot(data = gapminder, \n       aes(x = year, y = lifeExp, group = country)) +\n  geom_line() +\n  geom_line(stat = \"smooth\", \n            method = \"loess\", \n            aes(group = continent)) +\n  facet_wrap(~ continent, \n             nrow = 2) +\n  scale_color_manual(name = \"Life Exp. for:\", \n                     values = c(\"Country\" = \"black\", \"Continent\" = \"blue\")) +\n  scale_size_manual(name = \"Life Exp. for:\", \n                    values = c(\"Country\" = 0.25, \"Continent\" = 3)) +\n  theme_minimal(base_size = 14) + \n  labs(y = \"Years\", \n       x = \"\", \n       title = \"Life Expectancy, 1952-2007\", \n       subtitle = \"By continent and country\") +\n  theme(legend.position = c(0.82, 0.15), \n        axis.text.x = element_text(angle = 45))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nVoilà!"
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#summary-1",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#summary-1",
    "title": "Roadmap",
    "section": "Summary",
    "text": "Summary\nggplot2 can do a LOT! I won’t expect you to memorize all these tools, and neither should you! With time and practice, you’ll start to remember the key tools.\n\n\n\nWhen in doubt, Google it! (i.e. “R ggplot ‘whatever issue you need help with’”)\nThere are lots of great resources out there:\n\nThe ggplot2 reference page\nThe Cookbook for R website\nThe RStudio ggplot Cheatsheets.\nKieran Healy’s book Data Visualization: A Practical Introduction (right) is targeted at social scientists without technical backgrounds and uses the same tools we’ll be learning in this class."
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#exercise-histograms",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#exercise-histograms",
    "title": "",
    "section": "Exercise: Histograms",
    "text": "Exercise: Histograms\nIn pairs, you will create a histogram of life expectancy observations in the complete Gapminder dataset.\n\nSet the base layer by specifying the data as gapminder and the x variable as lifeExp\nAdd a second layer to create a histogram using the function geom_histogram()\nCustomize your plot with nice axis labels and a title."
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#solution",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#solution",
    "title": "",
    "section": "Solution",
    "text": "Solution\n1: Set Base Layer\n\n\n# code-line-numbers: \"1\"\nggplot(gapminder, aes(x = lifeExp))"
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#solution-1",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#solution-1",
    "title": "",
    "section": "Solution",
    "text": "Solution\n2: Add Histogram Layer\n\n\nggplot(gapminder, aes(x = lifeExp)) +\n  geom_histogram(bins = 30)\n\n\n\n\n\n\n\n\n\n\n\nSetting the bins aesthetic tells ggplot how many values to bin by (lower is more fine-grained, higher is less descriptive)."
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#solution-2",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#solution-2",
    "title": "",
    "section": "Solution",
    "text": "Solution\n3: Add Label Layers\n\n\nggplot(gapminder, aes(x = lifeExp)) +\n  geom_histogram(bins = 30) +\n  xlab(\"Life Expectancy\") +\n  ylab(\"Count\") +\n  ggtitle(\"Histogram of Life Expectancy in Gapminder Data\")"
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#homework-2",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#homework-2",
    "title": "Roadmap",
    "section": "Homework #2",
    "text": "Homework #2\nIn this homework, you’ll pose a question regarding the Gapminder dataset and investigate it graphically.\n\nAt the beginning of your document, write down a research question that is based on the Gapminder dataset (e.g., “How does population change over time in different countries?”)\nCreate 3-6 plots to answer/investigate your research question. Consider histograms (geom_histogram()), scatterplots (geom_point()), or lineplots (geom_line()).\nBe sure all titles, axes, and legends are clearly labelled (no raw variable names).\nInclude at least one plot with facet_wrap() or facet_grid().\nYou can use other geoms like bar charts, box plots, add meaningful vertical or horizontal lines, etc. You may find this data visualization cheat sheet helpful.\n\nYour document should be pleasant for a peer to look at, with some organization. You must write up your observations in words as well as showing the graphs. Upload both the .qmd file and the .html file to Canvas."
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#due-dates",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#due-dates",
    "title": "Roadmap",
    "section": "Due dates",
    "text": "Due dates\n\n\n\n\n\n\n  \n    \n    \n      #\n      \n        Section AA\n      \n      \n        Section AB\n      \n    \n    \n      Homework Due\n      Peer Review Due\n      Homework Due\n      Peer Review Due\n    \n  \n  \n    1\n10 October\n15 October\n12 October\n17 October\n    2\n17 October\n22 October\n19 October\n24 October\n    3\n24 October\n29 October\n26 October\n31 October\n    4\n31 October\n5 November\n2 November\n7 November\n    5\n7 November\n12 November\n9 November\n14 November\n    6\n14 November\n19 November\n16 November\n21 November\n    7\n21 November\n26 November\n23 November\n28 November\n    8\n28 November\n3 November\n30 November\n5 November\n    9\n5 December\n10 December\n7 December\n12 December"
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#something",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#something",
    "title": "CSSS 508 • Lecture 2",
    "section": "Something",
    "text": "Something\n::: :::{.column width=“50%”}\n\n::: ::::"
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#death-to-spreadsheets",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#death-to-spreadsheets",
    "title": "",
    "section": "Death to Spreadsheets",
    "text": "Death to Spreadsheets\nTools like Excel or Google Sheets lets you manipulate spreadsheets using functions.\n\nSpreadsheets are not reproducible: It’s hard to know how someone changed the raw data!\nIt’s hard to catch mistakes when you use spreadsheets. Don’t be the next sad Research Assistant who makes headlines with an Excel error! (Reinhart & Rogoff, 2010)\n\nToday, we’ll use R to manipulate data more transparently and reproducibly."
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#logical-operators",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#logical-operators",
    "title": "",
    "section": "Logical Operators",
    "text": "Logical Operators\nLogical operators refer to base functions which allow us to test a connection between two objects.\n\nFor example, we may test\n\nIs A equal to B?\nIs A greater than B?\nIs A within B?\n\nand many others!"
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#logical-operators-in-code",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#logical-operators-in-code",
    "title": "",
    "section": "Logical Operators in Code",
    "text": "Logical Operators in Code\n\n\n==: is equal to (note: there are TWO equal signs here!)\n\n\n\n\n!=: not equal to\n\n\n\n\n\n&gt;, &gt;=, &lt;, &lt;=: less than, less than or equal to, etc.\n\n\n\n\n\n%in%: used with checking equal to one of several values"
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#examples-of-logical-operators",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#examples-of-logical-operators",
    "title": "",
    "section": "Examples of Logical Operators",
    "text": "Examples of Logical Operators\nLet’s create two objects, A and B\n\nA &lt;- c(5,10,15)\nB &lt;- c(5,15,25)\n\n\n\nA == B\n\n[1]  TRUE FALSE FALSE\n\nA &gt;  B\n\n[1] FALSE FALSE FALSE\n\nA %in% B\n\n[1]  TRUE FALSE  TRUE"
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#combining-logical-operators",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#combining-logical-operators",
    "title": "",
    "section": "Combining Logical Operators",
    "text": "Combining Logical Operators\nWe have three main ways to combine logical operators:\n\n\n&: both conditions need to hold (AND)\n\n\n\n\n|: at least one condition needs to hold (OR)\n\n\n\n\n\n!: inverts a logical condition (TRUE becomes FALSE, FALSE becomes TRUE)"
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#examples",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#examples",
    "title": "",
    "section": "Examples",
    "text": "Examples\n\nA &lt;- c(5,10,15)\nB &lt;- c(5,15,25)\n\n\n\nA &gt; 5 & A &lt;= B\n\n[1] FALSE  TRUE  TRUE\n\nB &lt; 10 | B &gt; 20\n\n[1]  TRUE FALSE  TRUE\n\n!(A == 10)\n\n[1]  TRUE FALSE  TRUE"
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#building-block-of-dplyr-pipes",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#building-block-of-dplyr-pipes",
    "title": "",
    "section": "Building Block of dplyr: Pipes",
    "text": "Building Block of dplyr: Pipes\ndplyr allows us to “pipe” data between functions using the (%&gt;%) operator. So instead of nesting functions like this:\n\nlog(mean(gapminder$pop))\n\n[1] 17.20333\n\n\n\nWe can pipe them like this:\n\ngapminder$pop %&gt;% mean() %&gt;% log()\n\n[1] 17.20333\n\n\n\n\n\nPipes read “left to right.” (intuitive)\nNested functions read “inside to out.” (kinda weird; gets unwieldy the more nested your code becomes)"
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#subset-rows-filter",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#subset-rows-filter",
    "title": "",
    "section": "Subset Rows: filter\n",
    "text": "Subset Rows: filter\n\nWe often get big datasets, and we only want some of the entries. We can subset rows using filter.\n\n\ngapminder |&gt; \n  filter(country == \"China\") |&gt;\n  head(4) # display first four rows\n\n# A tibble: 4 × 6\n  country continent  year lifeExp       pop gdpPercap\n  &lt;fct&gt;   &lt;fct&gt;     &lt;int&gt;   &lt;dbl&gt;     &lt;int&gt;     &lt;dbl&gt;\n1 China   Asia       1952    44   556263527      400.\n2 China   Asia       1957    50.5 637408000      576.\n3 China   Asia       1962    44.5 665770000      488.\n4 China   Asia       1967    58.4 754550000      613.\n\nChina &lt;- gapminder |&gt; \n  filter(country == \"China\")\n\n(Now, China is an object in our environment which contains rows corresponding to China.)"
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#subset-columns-select",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#subset-columns-select",
    "title": "",
    "section": "Subset Columns: select\n",
    "text": "Subset Columns: select\n\nWhat if we want to keep each entry, but only use certain variables? Use select!\n\n\ngapminder |&gt; \n  select(country,continent,year,lifeExp) |&gt; \n  head(4)\n\n# A tibble: 4 × 4\n  country     continent  year lifeExp\n  &lt;fct&gt;       &lt;fct&gt;     &lt;int&gt;   &lt;dbl&gt;\n1 Afghanistan Asia       1952    28.8\n2 Afghanistan Asia       1957    30.3\n3 Afghanistan Asia       1962    32.0\n4 Afghanistan Asia       1967    34.0"
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#dropping-columns-with-select",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#dropping-columns-with-select",
    "title": "",
    "section": "Dropping columns with select\n",
    "text": "Dropping columns with select\n\nAlternatively, we can use select() to drop variables using a - sign:\n\ngapminder |&gt; \n  select(-continent, -pop, -lifeExp) |&gt; \n  head(4)\n\n# A tibble: 4 × 3\n  country      year gdpPercap\n  &lt;fct&gt;       &lt;int&gt;     &lt;dbl&gt;\n1 Afghanistan  1952      779.\n2 Afghanistan  1957      821.\n3 Afghanistan  1962      853.\n4 Afghanistan  1967      836."
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#finding-unique-rows-distinct",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#finding-unique-rows-distinct",
    "title": "",
    "section": "Finding Unique Rows: distinct\n",
    "text": "Finding Unique Rows: distinct\n\nYou may want to find the unique combinations of variables in a dataset. Use distinct\n\n\ngapminder |&gt; \n  distinct(continent, year) |&gt; \n  head(6)\n\n# A tibble: 6 × 2\n  continent  year\n  &lt;fct&gt;     &lt;int&gt;\n1 Asia       1952\n2 Asia       1957\n3 Asia       1962\n4 Asia       1967\n5 Asia       1972\n6 Asia       1977"
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#distinct-drops-variables",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#distinct-drops-variables",
    "title": "",
    "section": "\ndistinct drops variables!",
    "text": "distinct drops variables!\nBy default, distinct() drops unused variables. If you don’t want to drop them, add the argument .keep_all = TRUE:\n\ngapminder |&gt; \n  distinct(continent, year, .keep_all=TRUE) |&gt; \n  head(6)\n\n# A tibble: 6 × 6\n  country     continent  year lifeExp      pop gdpPercap\n  &lt;fct&gt;       &lt;fct&gt;     &lt;int&gt;   &lt;dbl&gt;    &lt;int&gt;     &lt;dbl&gt;\n1 Afghanistan Asia       1952    28.8  8425333      779.\n2 Afghanistan Asia       1957    30.3  9240934      821.\n3 Afghanistan Asia       1962    32.0 10267083      853.\n4 Afghanistan Asia       1967    34.0 11537966      836.\n5 Afghanistan Asia       1972    36.1 13079460      740.\n6 Afghanistan Asia       1977    38.4 14880372      786."
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#sorting-data-by-rows-arrange",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#sorting-data-by-rows-arrange",
    "title": "",
    "section": "Sorting data by rows: arrange\n",
    "text": "Sorting data by rows: arrange\n\nSometimes it’s useful to sort rows in your data, in ascending (low to high) or descending (high to low) order. We do that with arrange.\n\n\nUS_and_Canada &lt;- gapminder |&gt; \n  filter(country %in% c(\"United States\",\"Canada\"))\nUS_and_Canada |&gt; \n  arrange(year,lifeExp) |&gt; \n  head(4)\n\n# A tibble: 4 × 6\n  country       continent  year lifeExp       pop gdpPercap\n  &lt;fct&gt;         &lt;fct&gt;     &lt;int&gt;   &lt;dbl&gt;     &lt;int&gt;     &lt;dbl&gt;\n1 United States Americas   1952    68.4 157553000    13990.\n2 Canada        Americas   1952    68.8  14785584    11367.\n3 United States Americas   1957    69.5 171984000    14847.\n4 Canada        Americas   1957    70.0  17010154    12490."
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#sorting-data-by-rows-arrange-1",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#sorting-data-by-rows-arrange-1",
    "title": "",
    "section": "Sorting data by rows: arrange\n",
    "text": "Sorting data by rows: arrange\n\nTo sort in descending order, using desc() within arrange\n\nUS_and_Canada |&gt; \n  arrange(desc(pop)) |&gt; \n  head(4)\n\n# A tibble: 4 × 6\n  country       continent  year lifeExp       pop gdpPercap\n  &lt;fct&gt;         &lt;fct&gt;     &lt;int&gt;   &lt;dbl&gt;     &lt;int&gt;     &lt;dbl&gt;\n1 United States Americas   2007    78.2 301139947    42952.\n2 United States Americas   2002    77.3 287675526    39097.\n3 United States Americas   1997    76.8 272911760    35767.\n4 United States Americas   1992    76.1 256894189    32004."
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#rename-variables-rename",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#rename-variables-rename",
    "title": "",
    "section": "Rename variables: rename\n",
    "text": "Rename variables: rename\n\nYou may receive data with unintuitive variable names. You can change them using rename().\n\n\nUS_and_Canada |&gt; \n  rename(life_expectancy = lifeExp) |&gt;\n  head(4)\n\n# A tibble: 4 × 6\n  country continent  year life_expectancy      pop gdpPercap\n  &lt;fct&gt;   &lt;fct&gt;     &lt;int&gt;           &lt;dbl&gt;    &lt;int&gt;     &lt;dbl&gt;\n1 Canada  Americas   1952            68.8 14785584    11367.\n2 Canada  Americas   1957            70.0 17010154    12490.\n3 Canada  Americas   1962            71.3 18985849    13462.\n4 Canada  Americas   1967            72.1 20819767    16077.\n\n\n\n\n\n* NOTE 1: I did not re-save the object US_and_Canada, so the name change is not permanent!\n* NOTE 2: I recommend against using spaces in a name! It makes things really hard sometimes!!"
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#create-new-columns-mutate",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#create-new-columns-mutate",
    "title": "",
    "section": "Create new columns: mutate\n",
    "text": "Create new columns: mutate\n\nYou can add new columns to a data frame using mutate().\n\nFor example, perhaps we wish to state the population in millions:\n\nUS_and_Canada |&gt; \n  select(country, year, pop) |&gt;\n  mutate(pop_millions = pop / 1000000) |&gt; \n  head(5)\n\n# A tibble: 5 × 4\n  country  year      pop pop_millions\n  &lt;fct&gt;   &lt;int&gt;    &lt;int&gt;        &lt;dbl&gt;\n1 Canada   1952 14785584         14.8\n2 Canada   1957 17010154         17.0\n3 Canada   1962 18985849         19.0\n4 Canada   1967 20819767         20.8\n5 Canada   1972 22284500         22.3"
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#summarizing-data-summarize",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#summarizing-data-summarize",
    "title": "",
    "section": "Summarizing data: summarize\n",
    "text": "Summarizing data: summarize\n\nsummarize() calculates summaries of variables in your data:\n\nCount the number of rows\nCalculate the mean\nCalculate the sum\nFind the minimum or maximum value\n\nYou can use any function inside summarize() that aggregates multiple values into a single value (like sd(), mean(), or max())."
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#summarize-example",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#summarize-example",
    "title": "",
    "section": "\nsummarize() Example",
    "text": "summarize() Example\nFor the year 1982, let’s summarize some values in gapminder\n\ngapminder |&gt; \n  filter(year == 1982) |&gt;\n  summarize(number_observations = n(),\n            max_lifeexp = max(lifeExp),\n            mean_pop = mean(pop),\n            sd_pop = sd(pop))\n\n# A tibble: 1 × 4\n  number_observations max_lifeexp  mean_pop     sd_pop\n                &lt;int&gt;       &lt;dbl&gt;     &lt;dbl&gt;      &lt;dbl&gt;\n1                 142        77.1 30207302. 105098650."
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#summarizing-data-by-groups-group_by",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#summarizing-data-by-groups-group_by",
    "title": "",
    "section": "Summarizing data by groups: group_by\n",
    "text": "Summarizing data by groups: group_by\n\nWhat if we want to summarize data by category? Use group_by and summarize\n\nFunctions after group_by() are computed within each group as defined by variables given, rather than over all rows at once."
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#group_by-example",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#group_by-example",
    "title": "",
    "section": "\ngroup_by() Example",
    "text": "group_by() Example\n\nUS_and_Canada |&gt; group_by(year) |&gt;  \n  summarize(total_pop = sum(pop)) |&gt; \n  head(4)\n\n# A tibble: 4 × 2\n   year total_pop\n  &lt;int&gt;     &lt;int&gt;\n1  1952 172338584\n2  1957 188994154\n3  1962 205523849\n4  1967 219531767\n\n\nBecause we did group_by() with year then used summarize(), we get one row per value of year!"
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#why-merge",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#why-merge",
    "title": "",
    "section": "Why merge?!",
    "text": "Why merge?!\nIn practice, we often collect data from different sources. To analyze the data, we usually must first combine (merge) them.\n\nFor example, imagine you would like to study county-level patterns with respect to age and grocery spending. However, you can only find,\n\nCounty level age data from the US Census, and\nCounty level grocery spending data from the US Department of Agriculture\n\n\n\nMerge the data!!"
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#merging-in-concept",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#merging-in-concept",
    "title": "",
    "section": "Merging in Concept",
    "text": "Merging in Concept\nWhen merging datasets A and B, ask yourself the following two questions:\n\n\n\nWhich rows do I want to keep?\n\nAll rows in A?\nAll rows in both A and B?\n\n\n\n\n\n\n\nHow do my datasets connect?\n\nIs there a specific variable they have in common?\nMultiple variables they have in common?"
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#which-rows-to-keep",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#which-rows-to-keep",
    "title": "",
    "section": "Which Rows to Keep:",
    "text": "Which Rows to Keep:\nWe’ll focus on two types of joins1:\n\nA |&gt; left_join(B): keeps A and adds variables from B after matching.\nA |&gt; full_join(B): keeps all of A and B, but combines rows when possible.\nOther types include right_join, inner_join, semi_join, and anti_join, but we won’t study those here."
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#matching-criteria",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#matching-criteria",
    "title": "",
    "section": "Matching Criteria",
    "text": "Matching Criteria\nWe have to tell R which variables to use when merging datasets! Rows are matched when the values in matching variables are equivalent.\n\n\n\nby = c(\"County\"): Both datasets have a County variable, match on this!\n\n\n\n\n\nby = c(\"CountyName\" = \"County_Name\"): Match CountyName in A with County_Name in B"
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#example-nycflights13-data",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#example-nycflights13-data",
    "title": "",
    "section": "Example: nycflights13 Data",
    "text": "Example: nycflights13 Data\nThe nycflights13 package includes five data frames, some of which contain missing data (NA):\n\n\nflights: flights leaving JFK, LGA, or EWR in 2013\n\nairlines: airline abbreviations\n\nairports: airport metadata\n\nplanes: airplane metadata\n\nweather: hourly weather data for JFK, LGA, and EWR\n\n\n# install.packages(\"nycflights13\") # remember to do this in the console, not in your .R or .qmd document\nlibrary(nycflights13)"
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#join-example-1",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#join-example-1",
    "title": "",
    "section": "Join Example 1",
    "text": "Join Example 1\nflights has one row per flight, with abbreviated airline names.\n\nflights |&gt; \n  select(flight,origin,dest,carrier) |&gt; \n  head(2)\n\n# A tibble: 2 × 4\n  flight origin dest  carrier\n   &lt;int&gt; &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt;  \n1   1545 EWR    IAH   UA     \n2   1714 LGA    IAH   UA     \n\n\n\nairlines has one row per airline, with airline abbreviations and full names\n\nairlines |&gt; \n  head(2)\n\n# A tibble: 2 × 2\n  carrier name                  \n  &lt;chr&gt;   &lt;chr&gt;                 \n1 9E      Endeavor Air Inc.     \n2 AA      American Airlines Inc."
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#join-example-1-continued",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#join-example-1-continued",
    "title": "",
    "section": "Join Example 1 (continued)",
    "text": "Join Example 1 (continued)\nLet’s left join flights with airlines to add full airline name to each flight record!\n\nflights |&gt; \n  select(flight,origin,dest,carrier) |&gt;\n  left_join(airlines, by = \"carrier\")  |&gt; \n  head(5)\n\n# A tibble: 5 × 5\n  flight origin dest  carrier name                  \n   &lt;int&gt; &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt;   &lt;chr&gt;                 \n1   1545 EWR    IAH   UA      United Air Lines Inc. \n2   1714 LGA    IAH   UA      United Air Lines Inc. \n3   1141 JFK    MIA   AA      American Airlines Inc.\n4    725 JFK    BQN   B6      JetBlue Airways       \n5    461 LGA    ATL   DL      Delta Air Lines Inc.  \n\n\nWe now have one row per flight, with both carrier abbreviations and full names!"
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#join-example-2",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#join-example-2",
    "title": "",
    "section": "Join Example #2",
    "text": "Join Example #2\nflights also includes a tailnum variable for each plane’s tail number.\n\nflights |&gt; \n  select(flight,origin,dest,tailnum) |&gt; \n  head(2)\n\n# A tibble: 2 × 4\n  flight origin dest  tailnum\n   &lt;int&gt; &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt;  \n1   1545 EWR    IAH   N14228 \n2   1714 LGA    IAH   N24211 \n\n\n\nplanes includes a row for each plane type, including the manufacturer.\n\nplanes |&gt; \n  select(tailnum,year,manufacturer,model) |&gt; \n  head(2)\n\n# A tibble: 2 × 4\n  tailnum  year manufacturer     model    \n  &lt;chr&gt;   &lt;int&gt; &lt;chr&gt;            &lt;chr&gt;    \n1 N10156   2004 EMBRAER          EMB-145XR\n2 N102UW   1998 AIRBUS INDUSTRIE A320-214"
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#join-example-2-continued",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#join-example-2-continued",
    "title": "",
    "section": "Join Example 2 (continued)",
    "text": "Join Example 2 (continued)\nLet’s left join flights with planes to add manufacture to each flight record!\n\nflights |&gt; \n  select(flight,origin,dest,tailnum) |&gt;\n  left_join(planes, by = \"tailnum\")  |&gt; \n  head(5)\n\n# A tibble: 5 × 12\n  flight origin dest  tailnum  year type  manufacturer model engines seats speed\n   &lt;int&gt; &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt;   &lt;int&gt; &lt;chr&gt; &lt;chr&gt;        &lt;chr&gt;   &lt;int&gt; &lt;int&gt; &lt;int&gt;\n1   1545 EWR    IAH   N14228   1999 Fixe… BOEING       737-…       2   149    NA\n2   1714 LGA    IAH   N24211   1998 Fixe… BOEING       737-…       2   149    NA\n3   1141 JFK    MIA   N619AA   1990 Fixe… BOEING       757-…       2   178    NA\n4    725 JFK    BQN   N804JB   2012 Fixe… AIRBUS       A320…       2   200    NA\n5    461 LGA    ATL   N668DN   1991 Fixe… BOEING       757-…       2   178    NA\n# ℹ 1 more variable: engine &lt;chr&gt;\n\n\nA bunch of columns from planes are now in the dataset!"
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#join-example-2-continued-1",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#join-example-2-continued-1",
    "title": "",
    "section": "Join Example 2 (continued)",
    "text": "Join Example 2 (continued)\nLet’s remove some of the “spare” columns\n\nflights |&gt; \n  select(flight, origin, dest, tailnum) |&gt;\n  left_join(planes, by = \"tailnum\")  |&gt; \n  select(flight, origin, dest, manufacturer, model) |&gt;\n  head(5)\n\n# A tibble: 5 × 5\n  flight origin dest  manufacturer model   \n   &lt;int&gt; &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt;        &lt;chr&gt;   \n1   1545 EWR    IAH   BOEING       737-824 \n2   1714 LGA    IAH   BOEING       737-824 \n3   1141 JFK    MIA   BOEING       757-223 \n4    725 JFK    BQN   AIRBUS       A320-232\n5    461 LGA    ATL   BOEING       757-232"
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#activity",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#activity",
    "title": "",
    "section": "Activity",
    "text": "Activity\n\nCreate a new object that contains gapminder (1) observations from China, India, and United States after 1980, and (2) variables corresponding to country, year, population, and life expectancy.\nHow many rows and columns does the object contain?\nSave over your object after sorting the rows by year (ascending order) and population (descending order). Print the first 6 rows.\nAdd a new variable that contains population in billions.\nBy year, calculate the total population (in billions) across these three countries\nIn ggplot, create a line plot showing life expectancy over time by country. Make the plot visually appealing!"
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#my-answers",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#my-answers",
    "title": "CSSS 508 • Lecture 3",
    "section": "My Answers",
    "text": "My Answers\nQuestion 1:\n\nsubset_gapminder &lt;- gapminder |&gt; \n  filter(country %in% c(\"China\",\"India\",\"United States\"),  year &gt; 1980 ) |&gt;\n  select(country, year, pop, lifeExp)\n\n\nQuestion 2:\n\nc(nrow(subset_gapminder), ncol(subset_gapminder))\n\n[1] 18  4"
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#my-answers-1",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#my-answers-1",
    "title": "CSSS 508 • Lecture 3",
    "section": "My Answers",
    "text": "My Answers\nQuestion 3:\n\nsubset_gapminder &lt;- subset_gapminder |&gt; \n  arrange(year,desc(pop))\n\nsubset_gapminder |&gt; head(6)\n\n# A tibble: 6 × 4\n  country        year        pop lifeExp\n  &lt;fct&gt;         &lt;int&gt;      &lt;int&gt;   &lt;dbl&gt;\n1 China          1982 1000281000    65.5\n2 India          1982  708000000    56.6\n3 United States  1982  232187835    74.6\n4 China          1987 1084035000    67.3\n5 India          1987  788000000    58.6\n6 United States  1987  242803533    75.0\n\n\n\nQuestion 4:\n\nsubset_gapminder &lt;- subset_gapminder |&gt; \n  mutate(pop_billions = pop/1000000000)"
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#my-answers-2",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#my-answers-2",
    "title": "CSSS 508 • Lecture 3",
    "section": "My Answers",
    "text": "My Answers\nQuestion 5:\n\nsubset_gapminder |&gt; \n  group_by(year) |&gt; \n  summarize(TotalPop_Billions = sum(pop_billions))\n\n# A tibble: 6 × 2\n   year TotalPop_Billions\n  &lt;int&gt;             &lt;dbl&gt;\n1  1982              1.94\n2  1987              2.11\n3  1992              2.29\n4  1997              2.46\n5  2002              2.60\n6  2007              2.73"
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#my-answers-3",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#my-answers-3",
    "title": "CSSS 508 • Lecture 3",
    "section": "My Answers",
    "text": "My Answers\nQuestion 6:\n\nlibrary(ggplot2)\nggplot(subset_gapminder, aes(year, lifeExp, color = country, group = country)) +\n  theme_bw(base_size=20) + geom_point() + geom_line() +\n  xlab(\"Year\") + ylab(\"Life Expectancy (years)\") +\n  ggtitle(\"Life Expectancy (1982-2007)\",\"China, India, and United States\") +\n  scale_x_continuous(breaks = c(1982, 1987, 1992, 1997, 2002, 2007), minor_breaks = c()) +\n  ylim(c(50, 80)) + scale_color_discrete(name = \"Country\") + theme(legend.position = \"bottom\")"
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#homework-3",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#homework-3",
    "title": "",
    "section": "Homework 3",
    "text": "Homework 3\n\nx &lt;- rnorm(20, 10, 5)\n\n\nCreate the vector above:\n\nLook at the help file for rnorm and in your own words describe what arguments it takes and what it produces.\nWhich arguments are required and which are optional (if any)?\nWhat does the r in rnorm stand for?\nUsing [, select every value except the last one\nUsing [, select only values that are greater than 10."
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#due-dates",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#due-dates",
    "title": "",
    "section": "Due dates",
    "text": "Due dates\n\n\n\n\n\n\n\n\n#\n      \n        Section AA\n      \n      \n        Section AB\n      \n    \n\nHomework Due\n      Peer Review Due\n      Homework Due\n      Peer Review Due\n    \n\n\n\n1\n10 October\n15 October\n12 October\n17 October\n\n\n2\n17 October\n22 October\n19 October\n24 October\n\n\n3\n24 October\n29 October\n26 October\n31 October\n\n\n4\n31 October\n5 November\n2 November\n7 November\n\n\n5\n7 November\n12 November\n9 November\n14 November\n\n\n6\n14 November\n19 November\n16 November\n21 November\n\n\n7\n21 November\n26 November\n23 November\n28 November\n\n\n8\n28 November\n3 November\n30 November\n5 November\n\n\n9\n5 December\n10 December\n7 December\n12 December"
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#answers",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#answers",
    "title": "",
    "section": "Answers",
    "text": "Answers\nQuestion 1:\n\nsubset_gapminder &lt;- gapminder |&gt; \n  filter(country %in% c(\"China\",\"India\",\"United States\"),  year &gt; 1980 ) |&gt;\n  select(country, year, pop, lifeExp)\nsubset_gapminder |&gt; head(n = 5)\n\n# A tibble: 5 × 4\n  country  year        pop lifeExp\n  &lt;fct&gt;   &lt;int&gt;      &lt;int&gt;   &lt;dbl&gt;\n1 China    1982 1000281000    65.5\n2 China    1987 1084035000    67.3\n3 China    1992 1164970000    68.7\n4 China    1997 1230075000    70.4\n5 China    2002 1280400000    72.0"
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#answers-1",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#answers-1",
    "title": "",
    "section": "Answers",
    "text": "Answers\nQuestion 2:\n\n# Option 1\nc(nrow(subset_gapminder), ncol(subset_gapminder))\n\n[1] 18  4\n\n# Option 2\nglimpse(subset_gapminder)\n\nRows: 18\nColumns: 4\n$ country &lt;fct&gt; \"China\", \"China\", \"China\", \"China\", \"China\", \"China\", \"India\",…\n$ year    &lt;int&gt; 1982, 1987, 1992, 1997, 2002, 2007, 1982, 1987, 1992, 1997, 20…\n$ pop     &lt;int&gt; 1000281000, 1084035000, 1164970000, 1230075000, 1280400000, 13…\n$ lifeExp &lt;dbl&gt; 65.525, 67.274, 68.690, 70.426, 72.028, 72.961, 56.596, 58.553…\n\n# Option 3\ndim(subset_gapminder)\n\n[1] 18  4"
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#answers-2",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#answers-2",
    "title": "",
    "section": "Answers",
    "text": "Answers\nQuestion 3:\n\nsubset_gapminder &lt;- subset_gapminder |&gt; \n  arrange(year, desc(pop))\n\nsubset_gapminder |&gt; head(6)\n\n# A tibble: 6 × 4\n  country        year        pop lifeExp\n  &lt;fct&gt;         &lt;int&gt;      &lt;int&gt;   &lt;dbl&gt;\n1 China          1982 1000281000    65.5\n2 India          1982  708000000    56.6\n3 United States  1982  232187835    74.6\n4 China          1987 1084035000    67.3\n5 India          1987  788000000    58.6\n6 United States  1987  242803533    75.0"
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#answers-3",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#answers-3",
    "title": "",
    "section": "Answers",
    "text": "Answers\nQuestion 4:\n\nsubset_gapminder &lt;- subset_gapminder |&gt; \n  mutate(pop_billions = pop/1000000000)\n\nsubset_gapminder |&gt; head(n = 5)\n\n# A tibble: 5 × 5\n  country        year        pop lifeExp pop_billions\n  &lt;fct&gt;         &lt;int&gt;      &lt;int&gt;   &lt;dbl&gt;        &lt;dbl&gt;\n1 China          1982 1000281000    65.5        1.00 \n2 India          1982  708000000    56.6        0.708\n3 United States  1982  232187835    74.6        0.232\n4 China          1987 1084035000    67.3        1.08 \n5 India          1987  788000000    58.6        0.788"
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#answers-4",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#answers-4",
    "title": "",
    "section": "Answers",
    "text": "Answers\nQuestion 5:\n\n\nClassic syntax\nNew syntax (dplyr 1.1.0)\n\n\n\n\nsubset_gapminder |&gt; \n  group_by(year) |&gt; \n  summarize(TotalPop_Billions = sum(pop_billions))\n\n# A tibble: 6 × 2\n   year TotalPop_Billions\n  &lt;int&gt;             &lt;dbl&gt;\n1  1982              1.94\n2  1987              2.11\n3  1992              2.29\n4  1997              2.46\n5  2002              2.60\n6  2007              2.73\n\n\n\n\n\nsubset_gapminder |&gt; \n  summarize(TotalPop_Billions = sum(pop_billions), \n            .by = year)\n\n# A tibble: 6 × 2\n   year TotalPop_Billions\n  &lt;int&gt;             &lt;dbl&gt;\n1  1982              1.94\n2  1987              2.11\n3  1992              2.29\n4  1997              2.46\n5  2002              2.60\n6  2007              2.73\n\n\nThis new syntax allows for per-operation grouping which means it is only active within a single verb at a time (as opposed to being applied to the entire tibble until ungroup() is called). You can more about this new feature here)"
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#answers-5",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#answers-5",
    "title": "",
    "section": "Answers",
    "text": "Answers\nQuestion 6:\n\n\nCode\nPlot\n\n\n\n\nlibrary(ggplot2) \n# install.packages(\"ggthemes\") # run in console\nlibrary(ggthemes)\nggplot(subset_gapminder, aes(year, lifeExp, color = country, group = country)) +\n  theme_tufte(base_size = 20) + \n  geom_point() + \n  geom_line() +\n  xlab(\"Year\") + \n  ylab(\"Life Expectancy (years)\") +\n  ggtitle(\"Life Expectancy (1982-2007)\",\"China, India, and United States\") +\n  scale_x_continuous(breaks = c(1982, 1987, 1992, 1997, 2002, 2007), minor_breaks = c()) +\n  ylim(c(50, 80)) + \n  scale_color_discrete(name = \"Country\") + \n  theme(legend.position = \"bottom\")"
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#how-is-my-data-stored",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#how-is-my-data-stored",
    "title": "",
    "section": "How is my data stored?",
    "text": "How is my data stored?\nUnder the hood, R stores different types of data in different ways.\n\n\ne.g., R knows that 4.0 is a number, and that \"Vic\" is not a number.\n\n\n\nSo what exactly are the common data types, and how do we know what R is doing?"
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#data-types",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#data-types",
    "title": "",
    "section": "Data Types",
    "text": "Data Types\n\n\nnumeric: c(1, 10*3, 4, -3.14)\n\n\n\n\n\ncharacter: c(\"red\", \"blue\", \"blue\")\n\n\n\n\n\n\nfactor: factor(c(\"red\", \"blue\", \"blue\"))\n\n\n\n\n\n\nlogical: c(FALSE, TRUE, TRUE)"
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#note-on-factor-vectors",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#note-on-factor-vectors",
    "title": "",
    "section": "Note on Factor Vectors",
    "text": "Note on Factor Vectors\nFactors are categorical data that encode a (modest) number of levels, like for experimental group or geographic region:\n\ntest_group &lt;- factor(c(\"Treatment\", \"Placebo\", \"Placebo\", \"Treatment\"))\ntest_group\n\n[1] Treatment Placebo   Placebo   Treatment\nLevels: Placebo Treatment\n\n\n\nWhy use factor instead of character? Because factor data can go into a statistical model1.\n\nMost R models will automatically convert character data to factors. The default reference is chosen alphabetically."
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#note-on-logical-vectors",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#note-on-logical-vectors",
    "title": "",
    "section": "Note on Logical Vectors",
    "text": "Note on Logical Vectors\nRemember that logical data in R takes on boolean TRUE or FALSE values.\n\nYou can do math with logical values, because R makes TRUE = 1 and FALSE = 0:\n\nmy_booleans &lt;- c(TRUE, TRUE, FALSE, FALSE, FALSE)\nsum(my_booleans)\n\n[1] 2\n\nmean(my_booleans)\n\n[1] 0.4"
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#missing-or-infinite-data-types",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#missing-or-infinite-data-types",
    "title": "",
    "section": "Missing or Infinite Data Types",
    "text": "Missing or Infinite Data Types\nYour data may otherwise be missing or infinite:\n\n\nNot Applicable NA\n\nUsed when data simply is missing or “not available”\n\n\n\n\n\n\nNot a Number NaN\n\nUsed when you try to perform a bad math operation, e.g., 0 / 0\n\n\n\n\n\n\n\n\nInfinite Inf, -Inf\n\nUsed when you divide by 0, e.g., -5/0 or 5/0"
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#checking-data-types",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#checking-data-types",
    "title": "",
    "section": "Checking Data Types",
    "text": "Checking Data Types\nclass() tells us what type of data we have:\n\nclass4     &lt;- class(4)\nclassAB    &lt;- class(c(\"A\", \"B\"))\nclassABFac &lt;- class(factor(\"A\", \"B\"))\nclassTRUE  &lt;- class(TRUE)\n\nc(class4, classAB, classABFac, classTRUE)\n\n[1] \"numeric\"   \"character\" \"factor\"    \"logical\""
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#testing-data-types",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#testing-data-types",
    "title": "",
    "section": "Testing Data Types",
    "text": "Testing Data Types\nThere are also functions to test for certain data types:\n\nc(is.numeric(5),  is.character(\"A\"))\n\n[1] TRUE TRUE\n\nis.logical(TRUE)\n\n[1] TRUE\n\nc(is.infinite(-Inf),  is.na(NA),  is.nan(NaN))\n\n[1] TRUE TRUE TRUE\n\n\nWarning: NA is not NaN!!!"
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#making-vectors",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#making-vectors",
    "title": "",
    "section": "Making Vectors",
    "text": "Making Vectors\nIn R, we call a set of values of the same type a vector. We can create vectors using the c() function (“c” for combine or concatenate).\n\nc(1, 3, 7, -0.5)\n\n[1]  1.0  3.0  7.0 -0.5\n\n\n\nVectors have one dimension: length\n\nlength(c(1, 3, 7, -0.5))\n\n[1] 4\n\n\n\n\nAll elements of a vector are the same type (e.g. numeric or character)!\nIf you mix character and numeric data, it will convert everything to characters!"
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#generating-numeric-vectors",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#generating-numeric-vectors",
    "title": "",
    "section": "Generating Numeric Vectors",
    "text": "Generating Numeric Vectors\nThere are shortcuts for generating numeric vectors:\n\n1:10\n\n [1]  1  2  3  4  5  6  7  8  9 10\n\n\n\n\nseq(-3, 6, by = 1.75) # Sequence from -3 to 6, increments of 1.75\n\n[1] -3.00 -1.25  0.50  2.25  4.00  5.75\n\n\n\n\n\nrep(c(0, 1), times = 3) # Repeat c(0,1) 3 times\n\n[1] 0 1 0 1 0 1\n\nrep(c(0, 1), each = 3) # Repeat each element 3 times\n\n[1] 0 0 0 1 1 1"
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#element-wise-vector-math",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#element-wise-vector-math",
    "title": "",
    "section": "Element-wise Vector Math",
    "text": "Element-wise Vector Math\nWhen doing arithmetic operations on vectors, R handles these element-wise:\n\nc(1, 2, 3) + c(4, 5, 6)\n\n[1] 5 7 9\n\nc(1, 2, 3, 4)^3 # exponentiation with ^\n\n[1]  1  8 27 64\n\n\nCommon operations: *, /, exp() = \\(e^x\\), log() = \\(\\log_e(x)\\)"
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#vector-recycling",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#vector-recycling",
    "title": "",
    "section": "Vector Recycling",
    "text": "Vector Recycling\nIf we work with vectors of different lengths, R will recycle the shorter one by repeating it to make it match up with the longer one:\n\nc(0.5, 3) * c(1, 2, 3, 4)\n\n[1]  0.5  6.0  1.5 12.0\n\nc(0.5, 3, 0.5, 3) * c(1, 2, 3, 4) # same thing\n\n[1]  0.5  6.0  1.5 12.0"
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#scalars-as-recycling",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#scalars-as-recycling",
    "title": "",
    "section": "Scalars as Recycling",
    "text": "Scalars as Recycling\nA special case of recycling involves arithmetic with scalars (a single number). These are vectors of length 1 that are recycled to make a longer vector:\n\n3 * c(-1, 0, 1, 2) + 1\n\n[1] -2  1  4  7"
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#warning-on-recycling",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#warning-on-recycling",
    "title": "",
    "section": "Warning on Recycling",
    "text": "Warning on Recycling\nRecycling doesn’t work so well with vectors of incommensurate lengths:\n\nc(1,2) + c(100,200,300)\n\nWarning in c(1, 2) + c(100, 200, 300): longer object length is not a\nmultiple of shorter object length\n\n\n[1] 101 202 301\n\n\nBe careful!!"
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#example-standardizing-data",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#example-standardizing-data",
    "title": "",
    "section": "Example: Standardizing Data",
    "text": "Example: Standardizing Data\nLet’s say we had some test scores and we wanted to put these on a standardized scale:\n\\[z_i = \\frac{x_i - \\text{mean}(x)}{\\text{SD}(x)}\\]\n\n\nx &lt;- c(97, 68, 75, 77, 69, 81)\nz &lt;- (x - mean(x)) / sd(x)\nround(z, 2)\n\n[1]  1.81 -0.93 -0.27 -0.08 -0.83  0.30"
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#math-with-missing-values",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#math-with-missing-values",
    "title": "",
    "section": "Math with Missing Values",
    "text": "Math with Missing Values\nEven one NA “poisons the well”: You’ll get NA out of your calculations unless you add the extra argument na.rm = TRUE (availabe in some functions):\n\n\nvector_w_missing &lt;- c(1, 2, NA, 4, 5, 6, NA)\nmean(vector_w_missing)\n\n[1] NA\n\nmean(vector_w_missing, na.rm = TRUE)\n\n[1] 3.6"
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#subsetting-vectors",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#subsetting-vectors",
    "title": "",
    "section": "Subsetting Vectors",
    "text": "Subsetting Vectors\nWe can subset a vector in a number of ways:\n\nPassing a single index or vector of entries to keep:\n\n\nfirst_names &lt;- c(\"Andre\", \"Brady\", \"Cecilia\", \"Danni\", \"Edgar\", \"Francie\")\nfirst_names[1]\n\n[1] \"Andre\"\n\nfirst_names[c(1, 2)]\n\n[1] \"Andre\" \"Brady\"\n\n\n\n\nPassing a single index or vector of entries to drop:\n\n\nfirst_names[-3]\n\n[1] \"Andre\"   \"Brady\"   \"Danni\"   \"Edgar\"   \"Francie\""
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#matrices-two-dimensions",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#matrices-two-dimensions",
    "title": "",
    "section": "Matrices: Two Dimensions",
    "text": "Matrices: Two Dimensions\nMatrices extend vectors to two dimensions: rows and columns. We can construct them directly using matrix.\nR fills in a matrix column-by-column (not row-by-row!)\n\na_matrix &lt;- matrix(first_names, nrow = 2, ncol = 3)\na_matrix\n\n     [,1]    [,2]      [,3]     \n[1,] \"Andre\" \"Cecilia\" \"Edgar\"  \n[2,] \"Brady\" \"Danni\"   \"Francie\""
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#binding-vectors",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#binding-vectors",
    "title": "",
    "section": "Binding Vectors",
    "text": "Binding Vectors\nWe can also make matrices by binding vectors together with rbind() (row bind) and cbind() (column bind).\n\nb_matrix &lt;- cbind(c(1, 2), c(3, 4), c(5, 6))\nb_matrix\n\n     [,1] [,2] [,3]\n[1,]    1    3    5\n[2,]    2    4    6\n\nc_matrix &lt;- rbind(c(1, 2, 3), c(4, 5, 6))\nc_matrix\n\n     [,1] [,2] [,3]\n[1,]    1    2    3\n[2,]    4    5    6"
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#subsetting-matrices",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#subsetting-matrices",
    "title": "",
    "section": "Subsetting Matrices",
    "text": "Subsetting Matrices\nWe subset matrices using the same methods as with vectors, except we index them with [rows, columns]:\n\na_matrix[1, 2] # row 1, column 2\n\n[1] \"Cecilia\"\n\na_matrix[1, c(2,3)] # row 1, columns 2 and 3\n\n[1] \"Cecilia\" \"Edgar\"  \n\n\n\nWe can obtain the dimensions of a matrix using dim().\n\ndim(a_matrix)\n\n[1] 2 3"
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#matrices-becoming-vectors",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#matrices-becoming-vectors",
    "title": "",
    "section": "Matrices Becoming Vectors",
    "text": "Matrices Becoming Vectors\nIf a matrix ends up having just one row or column after subsetting, by default R will make it into a vector.\n\na_matrix[, 1] \n\n[1] \"Andre\" \"Brady\"\n\n\n\nYou can prevent this behavior using drop = FALSE.\n\na_matrix[, 1, drop = FALSE] \n\n     [,1]   \n[1,] \"Andre\"\n[2,] \"Brady\""
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#matrix-data-type-warning",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#matrix-data-type-warning",
    "title": "",
    "section": "Matrix Data Type Warning",
    "text": "Matrix Data Type Warning\nMatrices can contain numeric, integer, factor, character, or logical. But just like vectors, all elements must be the same data type.\n\nbad_matrix &lt;- cbind(1:2, c(\"Victoria\", \"Sass\"))\nbad_matrix\n\n     [,1] [,2]      \n[1,] \"1\"  \"Victoria\"\n[2,] \"2\"  \"Sass\"    \n\n\nIn this case, everything was converted to characters!"
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#matrix-dimension-names",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#matrix-dimension-names",
    "title": "",
    "section": "Matrix Dimension Names",
    "text": "Matrix Dimension Names\nWe can access dimension names or name them ourselves:\n\nrownames(bad_matrix) &lt;- c(\"First\", \"Last\")\ncolnames(bad_matrix) &lt;- c(\"Number\", \"Name\")\nbad_matrix\n\n      Number Name      \nFirst \"1\"    \"Victoria\"\nLast  \"2\"    \"Sass\"    \n\nbad_matrix[ ,\"Name\", drop = FALSE]\n\n      Name      \nFirst \"Victoria\"\nLast  \"Sass\""
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#matrix-arithmetic",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#matrix-arithmetic",
    "title": "",
    "section": "Matrix Arithmetic",
    "text": "Matrix Arithmetic\nMatrices of the same dimensions can have math performed entry-wise with the usual arithmetic operators:\n\nmatrix(c(2, 4, 6, 8),nrow = 2, ncol = 2) / matrix(c(2, 1, 3, 1),nrow = 2, ncol = 2)\n\n     [,1] [,2]\n[1,]    1    2\n[2,]    4    8"
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#proper-matrix-math",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#proper-matrix-math",
    "title": "",
    "section": "“Proper” Matrix Math",
    "text": "“Proper” Matrix Math\nTo do matrix transpositions, use t().\n\ne_matrix &lt;- t(c_matrix)\ne_matrix\n\n     [,1] [,2]\n[1,]    1    4\n[2,]    2    5\n[3,]    3    6\n\n\n\nTo do actual matrix multiplication (not entry-wise), use %*%.\n\nf_matrix &lt;- c_matrix %*% e_matrix\nf_matrix\n\n     [,1] [,2]\n[1,]   14   32\n[2,]   32   77"
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#proper-matrix-math-cont.",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#proper-matrix-math-cont.",
    "title": "",
    "section": "“Proper” Matrix Math (cont.)",
    "text": "“Proper” Matrix Math (cont.)\nTo invert an invertible square matrix, use solve().\n\ng_matrix &lt;- solve(f_matrix)\ng_matrix\n\n           [,1]       [,2]\n[1,]  1.4259259 -0.5925926\n[2,] -0.5925926  0.2592593"
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#matrices-vs.-data.frames-and-tibbles",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#matrices-vs.-data.frames-and-tibbles",
    "title": "",
    "section": "Matrices vs. data.frames and tibbles",
    "text": "Matrices vs. data.frames and tibbles\nAll of these structures display data in two dimensions\n\n\nmatrix\n\nBase R\nSingle data type allowed\n\n\n\n\n\n\ndata.frame\n\nBase R (default for data storage)\nStores multiple data types\n\n\n\n\n\n\n\ntibbles\n\ntidyverse\nStores multiple data types\nDisplays nicely\n\n\n\n\n\nIn practice, data.frames and tibbles are very similar!"
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#creating-data.frames",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#creating-data.frames",
    "title": "",
    "section": "Creating data.frames",
    "text": "Creating data.frames\nWe create a data.frame by specifying the columns separately:\n\ndata.frame(Column1Name = c(1,2,3),\n           Column2Name = c(\"A\",\"B\",\"C\"))\n\n  Column1Name Column2Name\n1           1           A\n2           2           B\n3           3           C\n\n\nNote: data.frames allow for mixed data types!"
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#what-are-lists",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#what-are-lists",
    "title": "",
    "section": "What are Lists?",
    "text": "What are Lists?\nLists are objects that can store multiple types of data.\n\nmy_list &lt;- list(\"first_thing\"  = 1:5,\n                 \"second_thing\" = matrix(8:11, nrow = 2))\nmy_list\n\n$first_thing\n[1] 1 2 3 4 5\n\n$second_thing\n     [,1] [,2]\n[1,]    8   10\n[2,]    9   11"
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#accessing-list-elements",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#accessing-list-elements",
    "title": "",
    "section": "Accessing List Elements",
    "text": "Accessing List Elements\nYou can access a list element by its name or number in [[ ]], or a $ followed by its name:\n\nmy_list[[\"first_thing\"]]\n\n[1] 1 2 3 4 5\n\nmy_list[[1]]\n\n[1] 1 2 3 4 5\n\nmy_list$first_thing\n\n[1] 1 2 3 4 5"
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#why-two-brackets",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#why-two-brackets",
    "title": "",
    "section": "Why Two Brackets [[ ]]?",
    "text": "Why Two Brackets [[ ]]?\nDouble brackets get the actual element — as whatever data type it is stored as, in that location in the list.\n\nstr(my_list[[1]])\n\n int [1:5] 1 2 3 4 5\n\n\n\nIf you use single brackets to access list elements, you get a list back.\n\nstr(my_list[1])\n\nList of 1\n $ first_thing: int [1:5] 1 2 3 4 5"
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#names-and-list-elements",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#names-and-list-elements",
    "title": "",
    "section": "\nnames() and List Elements",
    "text": "names() and List Elements\nYou can use names() to get a vector of list element names:\n\nnames(my_list)\n\n[1] \"first_thing\"  \"second_thing\""
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#example-regression-output",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#example-regression-output",
    "title": "",
    "section": "Example: Regression Output",
    "text": "Example: Regression Output\nWhen you perform linear regression in R, the output is a list!\n\nlm_output &lt;- lm(speed ~ dist, data = cars)\nis.list(lm_output)\n\n[1] TRUE\n\nnames(lm_output)\n\n [1] \"coefficients\"  \"residuals\"     \"effects\"       \"rank\"         \n [5] \"fitted.values\" \"assign\"        \"qr\"            \"df.residual\"  \n [9] \"xlevels\"       \"call\"          \"terms\"         \"model\"        \n\nlm_output$coefficients\n\n(Intercept)        dist \n  8.2839056   0.1655676"
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#mini-check-1-types-of-data",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#mini-check-1-types-of-data",
    "title": "",
    "section": "Mini-Check 1: Types of Data",
    "text": "Mini-Check 1: Types of Data\nIn each case, what will R return?\n\n\n\nis.numeric(3.14)\n\nTRUE\n\n\n\nis.numeric(pi)\n\nTRUE\n\n\n\nis.logical(FALSE)\n\nTRUE\n\n\n\nis.nan(NA)\n\nFALSE"
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#mini-check-2-vectors",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#mini-check-2-vectors",
    "title": "",
    "section": "Mini-Check 2: Vectors",
    "text": "Mini-Check 2: Vectors\n\n\nWhat does sum(c(1, 2, NA)) output?\n\n\nNA. The code sum(c(1, 2, NA), na.rm = TRUE) would output 3.\n\n\n\n\n\n\n\nWhat does rep(c(0, 1), times = 2) output?\n\nc(0, 1, 0, 1)\n\n\n\n\n\n\n\nI want to get the first and second elements of my vector, a_vector. What’s wrong with the code a_vector[1, 2] ?\n\na_vector[c(1, 2)]"
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#activity-matrices-and-lists",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#activity-matrices-and-lists",
    "title": "",
    "section": "Activity: Matrices and Lists",
    "text": "Activity: Matrices and Lists\n\nWrite code to create the following matrix:\n\n\n\n     [,1] [,2] [,3]\n[1,] \"A\"  \"B\"  \"C\" \n[2,] \"D\"  \"E\"  \"F\" \n\n\n\nWrite a line of code to extract the second column. Ensure the output is still a matrix.\n\n\n\n     [,1]\n[1,] \"B\" \n[2,] \"E\" \n\n\n\nComplete the following sentence: “Lists are to vectors, what data frames are to…”\n\nCreate a list that contains 3 elements:\n\n“ten_numbers” (integers between 1 and 10)\n“my_name” (your name as a character)\n“booleans” (vector of TRUE and FALSE alternating three times)"
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#answers",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#answers",
    "title": "",
    "section": "Answers",
    "text": "Answers\n1. Write code to create the following matrix:\n\nmat_test &lt;- matrix(c(\"A\", \"B\", \"C\", \"D\", \"E\", \"F\"), nrow = 2, byrow = TRUE)\nmat_test\n\n     [,1] [,2] [,3]\n[1,] \"A\"  \"B\"  \"C\" \n[2,] \"D\"  \"E\"  \"F\" \n\n\n\n2. Write a line of code to extract the second column. Ensure the output is still a matrix.\n\nmat_test[ ,2, drop = FALSE]\n\n     [,1]\n[1,] \"B\" \n[2,] \"E\""
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#answers-1",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#answers-1",
    "title": "",
    "section": "Answers",
    "text": "Answers\n3. Complete the following sentence: “Lists are to vectors, what data frames are to…Matrices!1”\n\n4. Create a list that contains 3 elements:\n\nmy_new_list &lt;- list(\"ten_numbers\" = 1:10,\n                    \"my_name\" = \"Victoria Sass\",\n                    \"booleans\" = rep(c(TRUE, FALSE), times = 3))\nmy_new_list\n\n$ten_numbers\n [1]  1  2  3  4  5  6  7  8  9 10\n\n$my_name\n[1] \"Victoria Sass\"\n\n$booleans\n[1]  TRUE FALSE  TRUE FALSE  TRUE FALSE\n\n\n\nLists and data frames can contain mixed data types, while vectors and matrices can only contain one data type."
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#homework-4",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#homework-4",
    "title": "Roadmap",
    "section": "Homework 4",
    "text": "Homework 4\n*On Course Website!*"
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#due-dates",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#due-dates",
    "title": "Roadmap",
    "section": "Due dates",
    "text": "Due dates\n\n\n\n\n\n\n  \n    \n    \n      #\n      \n        Section AA\n      \n      \n        Section AB\n      \n    \n    \n      Homework Due\n      Peer Review Due\n      Homework Due\n      Peer Review Due\n    \n  \n  \n    1\n10 October\n15 October\n12 October\n17 October\n    2\n17 October\n22 October\n19 October\n24 October\n    3\n24 October\n29 October\n26 October\n31 October\n    4\n31 October\n5 November\n2 November\n7 November\n    5\n7 November\n12 November\n9 November\n14 November\n    6\n14 November\n19 November\n16 November\n21 November\n    7\n21 November\n26 November\n23 November\n28 November\n    8\n28 November\n3 November\n30 November\n5 November\n    9\n5 December\n10 December\n7 December\n12 December"
  },
  {
    "objectID": "Homework/HW5/homework5.html",
    "href": "Homework/HW5/homework5.html",
    "title": "Homework 5",
    "section": "",
    "text": "Data\nbillboard.csv\n\n\nDue Dates\n\n\n\n\n\n\n  \n    \n    \n      #\n      \n        Section AA\n      \n      \n        Section AB\n      \n    \n    \n      Homework Due\n      Peer Review Due\n      Homework Due\n      Peer Review Due\n    \n  \n  \n    1\n10 October\n15 October\n12 October\n17 October\n    2\n17 October\n22 October\n19 October\n24 October\n    3\n24 October\n29 October\n26 October\n31 October\n    4\n31 October\n5 November\n2 November\n7 November\n    5\n7 November\n12 November\n9 November\n14 November\n    6\n14 November\n19 November\n16 November\n21 November\n    7\n21 November\n26 November\n23 November\n28 November\n    8\n28 November\n3 November\n30 November\n5 November\n    9\n5 December\n10 December\n7 December\n12 December"
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture5.html#data-packages",
    "href": "Lectures/Lecture5/CSSS508_Lecture5.html#data-packages",
    "title": "Roadmap",
    "section": "Data Packages",
    "text": "Data Packages\nR has a big user base. If you are working with a popular data source, it will often have a devoted R package on CRAN or Github.\n. . .\nExamples:\n\nWDI: World Development Indicators (World Bank)\nWHO: World Health Organization API\ntidycensus: Census and American Community Survey\nquantmod: financial data from Yahoo, FRED, Google\n\n. . .\nIf you have an actual data file, you’ll have to import it yourself…"
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture5.html#delimited-text-files",
    "href": "Lectures/Lecture5/CSSS508_Lecture5.html#delimited-text-files",
    "title": "Roadmap",
    "section": "Delimited Text Files",
    "text": "Delimited Text Files\nBesides a package, it’s easiest when data is stored in a text file.\n. . .\nAn example of a comma-separated values (.csv) file is below:\n\"Subject\",\"Depression\",\"Sex\",\"Week\",\"HamD\",\"Imipramine\"\n101,\"Non-endogenous\",\"Second\",0,26,NA\n101,\"Non-endogenous\",\"Second\",1,22,NA\n101,\"Non-endogenous\",\"Second\",2,18,4.04305\n101,\"Non-endogenous\",\"Second\",3,7,3.93183\n101,\"Non-endogenous\",\"Second\",4,4,4.33073\n101,\"Non-endogenous\",\"Second\",5,3,4.36945\n103,\"Non-endogenous\",\"First\",0,33,NA\n103,\"Non-endogenous\",\"First\",1,24,NA\n103,\"Non-endogenous\",\"First\",2,15,2.77259"
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture5.html#readr",
    "href": "Lectures/Lecture5/CSSS508_Lecture5.html#readr",
    "title": "Roadmap",
    "section": "readr",
    "text": "readr\nR has some built-in functions for importing data, such as read.table() and read.csv().\n. . .\nThe readr package provides similar functions, like read_csv(), that have slightly better features:\n\nFaster!\nBetter defaults (e.g. doesn’t convert characters to factors)\nA little smarter about dates and times\nLoading bars for large files\n\n\nlibrary(readr)"
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture5.html#readr-importing-example",
    "href": "Lectures/Lecture5/CSSS508_Lecture5.html#readr-importing-example",
    "title": "Roadmap",
    "section": "readr Importing Example",
    "text": "readr Importing Example\nLet’s import some data about song ranks on the Billboard Hot 100 in 2000:\n\nbillboard_2000_raw &lt;- read_csv(file = \"https://raw.githubusercontent.com/vsass/CSSS508/main/Lectures/Lecture5/data/billboard.csv\")"
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture5.html#did-it-load",
    "href": "Lectures/Lecture5/CSSS508_Lecture5.html#did-it-load",
    "title": "Roadmap",
    "section": "Did It Load?",
    "text": "Did It Load?\n\nlibrary(dplyr)\ndim(billboard_2000_raw)\n\n[1] 317  81\n\nnames(billboard_2000_raw) %&gt;% \n  head(20)\n\n [1] \"year\"         \"artist\"       \"track\"        \"time\"         \"date.entered\"\n [6] \"wk1\"          \"wk2\"          \"wk3\"          \"wk4\"          \"wk5\"         \n[11] \"wk6\"          \"wk7\"          \"wk8\"          \"wk9\"          \"wk10\"        \n[16] \"wk11\"         \"wk12\"         \"wk13\"         \"wk14\"         \"wk15\""
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture5.html#alternate-solution",
    "href": "Lectures/Lecture5/CSSS508_Lecture5.html#alternate-solution",
    "title": "Roadmap",
    "section": "Alternate Solution",
    "text": "Alternate Solution\nImport the data manually!\nIn the upper right-hand pane of RStudio (make sure you’re in the Environment tab), select:\nImport Dataset &gt; From Text (readr)\n. . .\nOnce you’ve imported the data, you can copy/paste the import code from the console into your file!!\nThis makes the process reproducible!"
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture5.html#importing-other-data-types",
    "href": "Lectures/Lecture5/CSSS508_Lecture5.html#importing-other-data-types",
    "title": "Roadmap",
    "section": "Importing Other Data Types",
    "text": "Importing Other Data Types\n\nFor Excel files (.xls or .xlsx), use package readxl\nFor Google Docs Spreadsheets, use package googlesheets4\nFor Stata, SPSS, and SAS files, use package haven (tidyverse)\nFor Stata, SPSS, and Minitab, use package foreign\n\n\n\nNote: You won’t keep text formatting, color, comments, or merged cells!!"
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture5.html#writing-delimited-files",
    "href": "Lectures/Lecture5/CSSS508_Lecture5.html#writing-delimited-files",
    "title": "Roadmap",
    "section": "Writing Delimited Files",
    "text": "Writing Delimited Files\nGetting data out of R into a delimited file is very similar to getting it into R:\n\nwrite_csv(billboard_2000_raw, path = \"billboard_data.csv\")\n\nThis saved the data we pulled off the web in a file called billboard_data.csv in my working directory."
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture5.html#initial-spot-checks",
    "href": "Lectures/Lecture5/CSSS508_Lecture5.html#initial-spot-checks",
    "title": "Roadmap",
    "section": "Initial Spot Checks",
    "text": "Initial Spot Checks\nFirst things to check after loading new data:\n\n\nDid all the rows/columns from the original file make it in?\n\nCheck using dim() or str()\n\nAre the column names in good shape?\n\nUse names() to check; fix with rename()\n\nAre there “decorative” blank rows or columns to remove?\n\nfilter() or select() out those rows/columns"
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture5.html#tidy-data",
    "href": "Lectures/Lecture5/CSSS508_Lecture5.html#tidy-data",
    "title": "Roadmap",
    "section": "Tidy Data",
    "text": "Tidy Data\nTidy data (aka “long data”) are such that:\n\n\nThe values for a single observation are in their own row.\nThe values for a single variable are in their own column.\nThere is only one value per cell.\n\n\n. . .\nWhy do we want tidy data?\n\nEasier to understand many rows than many columns\nRequired for plotting in ggplot2\nRequired for many types of statistical procedures (e.g. hierarchical or mixed effects models)\nFewer issues with missing values and “imbalanced” repeated measures data"
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture5.html#slightly-messy-data",
    "href": "Lectures/Lecture5/CSSS508_Lecture5.html#slightly-messy-data",
    "title": "Roadmap",
    "section": "Slightly “Messy” Data",
    "text": "Slightly “Messy” Data\n\n\n\n\n\nProgram\nFirst Year\nSecond Year\n\n\n\n\nEvans School\n10\n6\n\n\nArts & Sciences\n5\n6\n\n\nPublic Health\n2\n3\n\n\nOther\n5\n1\n\n\n\n\n\nWhat is an observation?\n\nA group of students from a program of a given year\n\nWhat are the variables?\n\nProgram, Year\n\nWhat are the values?\n\nProgram: Evans School, Arts & Sciences, Public Health, Other\nYear: First, Second – in column headings. Bad!\nCount: spread over two columns!"
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture5.html#tidy-version",
    "href": "Lectures/Lecture5/CSSS508_Lecture5.html#tidy-version",
    "title": "Roadmap",
    "section": "Tidy Version",
    "text": "Tidy Version\n\n\n\n\n\nProgram\nYear\nCount\n\n\n\n\nEvans School\nFirst\n10\n\n\nEvans School\nSecond\n6\n\n\nArts & Sciences\nFirst\n5\n\n\nArts & Sciences\nSecond\n6\n\n\nPublic Health\nFirst\n2\n\n\nPublic Health\nSecond\n3\n\n\nOther\nFirst\n5\n\n\nOther\nSecond\n1\n\n\n\n\n\nEach variable is a column.\nEach observation is a row.\nEach cell has a single value."
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture5.html#billboard-is-just-ugly-messy",
    "href": "Lectures/Lecture5/CSSS508_Lecture5.html#billboard-is-just-ugly-messy",
    "title": "Roadmap",
    "section": "Billboard is Just Ugly-Messy",
    "text": "Billboard is Just Ugly-Messy\n\n\n# A tibble: 10 × 81\n    year artist     track time  date.entered   wk1   wk2   wk3   wk4   wk5   wk6\n   &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt; &lt;tim&gt; &lt;date&gt;       &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1  2000 2 Pac      Baby… 04:22 2000-02-26      87    82    72    77    87    94\n 2  2000 2Ge+her    The … 03:15 2000-09-02      91    87    92    NA    NA    NA\n 3  2000 3 Doors D… Kryp… 03:53 2000-04-08      81    70    68    67    66    57\n 4  2000 3 Doors D… Loser 04:24 2000-10-21      76    76    72    69    67    65\n 5  2000 504 Boyz   Wobb… 03:35 2000-04-15      57    34    25    17    17    31\n 6  2000 98^0       Give… 03:24 2000-08-19      51    39    34    26    26    19\n 7  2000 A*Teens    Danc… 03:44 2000-07-08      97    97    96    95   100    NA\n 8  2000 Aaliyah    I Do… 04:15 2000-01-29      84    62    51    41    38    35\n 9  2000 Aaliyah    Try … 04:03 2000-03-18      59    53    38    28    21    18\n10  2000 Adams, Yo… Open… 05:30 2000-08-26      76    76    74    69    68    67\n# ℹ 70 more variables: wk7 &lt;dbl&gt;, wk8 &lt;dbl&gt;, wk9 &lt;dbl&gt;, wk10 &lt;dbl&gt;, wk11 &lt;dbl&gt;,\n#   wk12 &lt;dbl&gt;, wk13 &lt;dbl&gt;, wk14 &lt;dbl&gt;, wk15 &lt;dbl&gt;, wk16 &lt;dbl&gt;, wk17 &lt;dbl&gt;,\n#   wk18 &lt;dbl&gt;, wk19 &lt;dbl&gt;, wk20 &lt;dbl&gt;, wk21 &lt;dbl&gt;, wk22 &lt;dbl&gt;, wk23 &lt;dbl&gt;,\n#   wk24 &lt;dbl&gt;, wk25 &lt;dbl&gt;, wk26 &lt;dbl&gt;, wk27 &lt;dbl&gt;, wk28 &lt;dbl&gt;, wk29 &lt;dbl&gt;,\n#   wk30 &lt;dbl&gt;, wk31 &lt;dbl&gt;, wk32 &lt;dbl&gt;, wk33 &lt;dbl&gt;, wk34 &lt;dbl&gt;, wk35 &lt;dbl&gt;,\n#   wk36 &lt;dbl&gt;, wk37 &lt;dbl&gt;, wk38 &lt;dbl&gt;, wk39 &lt;dbl&gt;, wk40 &lt;dbl&gt;, wk41 &lt;dbl&gt;,\n#   wk42 &lt;dbl&gt;, wk43 &lt;dbl&gt;, wk44 &lt;dbl&gt;, wk45 &lt;dbl&gt;, wk46 &lt;dbl&gt;, wk47 &lt;dbl&gt;, …\n\n\n\n\nWeek columns continue up to wk76!"
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture5.html#billboard",
    "href": "Lectures/Lecture5/CSSS508_Lecture5.html#billboard",
    "title": "Roadmap",
    "section": "Billboard",
    "text": "Billboard\n\n\nWhat are the observations in the data?\n\nSong on the Billboard chart each week\n\nWhat are the variables in the data?\n\nYear, artist, track, song length, date entered Hot 100, week since first entered Hot 100 (spread over many columns), rank during week (spread over many columns)\n\nWhat are the values in the data?\n\ne.g. 2000; 3 Doors Down; Kryptonite; 3 minutes 53 seconds; April 8, 2000; Week 3 (stuck in column headings); rank 68 (spread over many columns)"
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture5.html#tidyr",
    "href": "Lectures/Lecture5/CSSS508_Lecture5.html#tidyr",
    "title": "Roadmap",
    "section": "tidyr",
    "text": "tidyr\nThe tidyr package provides functions to tidy up data.\n. . .\nKey functions:\n\npivot_longer(): takes a set of columns and pivots them down (“longer”) to make two new columns (which you can name yourself):\n\nA name column that stores the original column names\nA value with the values in those original columns\n\n\n. . .\n\npivot_wider(): inverts pivot_longer() by taking two columns and pivoting them up and across (“wider”) into multiple columns\n\n. . .\nWe’re going to focus only on pivot_longer here, but know that it can be reversed!"
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture5.html#pivot_longer",
    "href": "Lectures/Lecture5/CSSS508_Lecture5.html#pivot_longer",
    "title": "Roadmap",
    "section": "pivot_longer()",
    "text": "pivot_longer()\nThis function usually takes three arguments:\n\ncols: The columns we want to modify\nnames_to: New variable name to store original columns\nvalues_to: New variable name to store original values"
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture5.html#example-of-pivot_longer",
    "href": "Lectures/Lecture5/CSSS508_Lecture5.html#example-of-pivot_longer",
    "title": "Roadmap",
    "section": "Example of pivot_longer()",
    "text": "Example of pivot_longer()\n\nlibrary(tidyr)\nbillboard_2000 &lt;- billboard_2000_raw %&gt;%\n  pivot_longer(cols=wk1:wk76,\n               names_to =\"week\",\n               values_to = \"rank\")\nbillboard_2000 %&gt;% \n  head(5)\n\n# A tibble: 5 × 7\n   year artist track                   time   date.entered week   rank\n  &lt;dbl&gt; &lt;chr&gt;  &lt;chr&gt;                   &lt;time&gt; &lt;date&gt;       &lt;chr&gt; &lt;dbl&gt;\n1  2000 2 Pac  Baby Don't Cry (Keep... 04:22  2000-02-26   wk1      87\n2  2000 2 Pac  Baby Don't Cry (Keep... 04:22  2000-02-26   wk2      82\n3  2000 2 Pac  Baby Don't Cry (Keep... 04:22  2000-02-26   wk3      72\n4  2000 2 Pac  Baby Don't Cry (Keep... 04:22  2000-02-26   wk4      77\n5  2000 2 Pac  Baby Don't Cry (Keep... 04:22  2000-02-26   wk5      87\n\n\nNow we have a single week column!"
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture5.html#lots-of-missing-values",
    "href": "Lectures/Lecture5/CSSS508_Lecture5.html#lots-of-missing-values",
    "title": "Roadmap",
    "section": "Lots of missing values?!",
    "text": "Lots of missing values?!\n\nsummary(billboard_2000$rank)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n   1.00   26.00   51.00   51.05   76.00  100.00   18785 \n\n\nWe don’t want to keep the 18785 rows with missing ranks."
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture5.html#pivoting-better-values_drop_na",
    "href": "Lectures/Lecture5/CSSS508_Lecture5.html#pivoting-better-values_drop_na",
    "title": "Roadmap",
    "section": "Pivoting Better: values_drop_na",
    "text": "Pivoting Better: values_drop_na\nAdding the argument values_drop_na = TRUE to pivot_longer() will remove rows with missing ranks.\n\nbillboard_2000 &lt;- billboard_2000_raw %&gt;%\n  pivot_longer(cols = wk1:wk76, \n               names_to = \"week\", \n               values_to = \"rank\", \n               values_drop_na = TRUE)\nsummary(billboard_2000$rank)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   1.00   26.00   51.00   51.05   76.00  100.00 \n\n\n. . .\nNo more NA values!\n\ndim(billboard_2000)\n\n[1] 5307    7\n\n\nAnd way fewer rows!"
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture5.html#parse_number",
    "href": "Lectures/Lecture5/CSSS508_Lecture5.html#parse_number",
    "title": "Roadmap",
    "section": "parse_number()",
    "text": "parse_number()\nThe week column is of they type character, but it should be numeric.\n\nhead(billboard_2000$week)\n\n[1] \"wk1\" \"wk2\" \"wk3\" \"wk4\" \"wk5\" \"wk6\"\n\n\n. . .\nparse_number() grabs just the numeric information from a character string:\n\nbillboard_2000 &lt;- billboard_2000 %&gt;%\n    mutate(week = parse_number(week))\nsummary(billboard_2000$week)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   1.00    5.00   10.00   11.47   16.00   65.00 \n\n\nMore sophisticated tools for character strings will be covered later in this course!"
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture5.html#lubridate",
    "href": "Lectures/Lecture5/CSSS508_Lecture5.html#lubridate",
    "title": "Roadmap",
    "section": "lubridate",
    "text": "lubridate\nThe package lubridate (part of the tidyverse!) has a very large number of functions you can use!\n. . .\n\nConverting dates/times between formats (DD-MM-YY to YY-MM-DD)\nExtracting dates/times (day of week, month, leap years, etc.)\nMath with dates/times (time zone conversions, etc.)\n\n. . .\nThere’s too much to cover all of it, but I’ll run through a few examples."
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture5.html#dates-in-billboard_2000",
    "href": "Lectures/Lecture5/CSSS508_Lecture5.html#dates-in-billboard_2000",
    "title": "Roadmap",
    "section": "Dates in billboard_2000",
    "text": "Dates in billboard_2000\n\nbillboard_2000 %&gt;% \n  select(date.entered) %&gt;% \n  head(10)\n\n# A tibble: 10 × 1\n   date.entered\n   &lt;date&gt;      \n 1 2000-02-26  \n 2 2000-02-26  \n 3 2000-02-26  \n 4 2000-02-26  \n 5 2000-02-26  \n 6 2000-02-26  \n 7 2000-02-26  \n 8 2000-09-02  \n 9 2000-09-02  \n10 2000-09-02"
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture5.html#extracting-year-month-or-day",
    "href": "Lectures/Lecture5/CSSS508_Lecture5.html#extracting-year-month-or-day",
    "title": "Roadmap",
    "section": "Extracting Year, Month, or Day",
    "text": "Extracting Year, Month, or Day\n\nlibrary(lubridate)\nhead(billboard_2000$date.entered, 5)\n\n[1] \"2000-02-26\" \"2000-02-26\" \"2000-02-26\" \"2000-02-26\" \"2000-02-26\"\n\nyear(billboard_2000$date.entered) %&gt;% \n  head(5)\n\n[1] 2000 2000 2000 2000 2000\n\nmonth(billboard_2000$date.entered) %&gt;% \n  head(5)\n\n[1] 2 2 2 2 2\n\nday(billboard_2000$date.entered) %&gt;% \n  head(5)\n\n[1] 26 26 26 26 26"
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture5.html#extracting-weekday-quarter-and-leap-year-boolean",
    "href": "Lectures/Lecture5/CSSS508_Lecture5.html#extracting-weekday-quarter-and-leap-year-boolean",
    "title": "Roadmap",
    "section": "Extracting Weekday, Quarter, and Leap Year Boolean",
    "text": "Extracting Weekday, Quarter, and Leap Year Boolean\n\nwday(billboard_2000$date.entered) %&gt;% \n  head(5)\n\n[1] 7 7 7 7 7\n\nquarter(billboard_2000$date.entered) %&gt;% \n  head(5)\n\n[1] 1 1 1 1 1\n\nleap_year(billboard_2000$date.entered) %&gt;% \n   head(5)\n\n[1] TRUE TRUE TRUE TRUE TRUE"
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture5.html#example-question",
    "href": "Lectures/Lecture5/CSSS508_Lecture5.html#example-question",
    "title": "Roadmap",
    "section": "Example: Question",
    "text": "Example: Question\nQuestion: Do songs that hit #1 have a different trajectory than those that don’t?\n\nbillboard_2000_question &lt;- billboard_2000 %&gt;%\n    group_by(artist, track) %&gt;%\n    mutate(`Weeks at #1` = sum(rank == 1),\n           `Peak Rank`   = ifelse(any(rank == 1),\n                                  \"Hit #1\",\n                                  \"Didn't hit #1\")) \n\n\n\nNote: any(rank==1) checks to see if any value of rank is equal to one for the given artist and track"
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture5.html#example-figure",
    "href": "Lectures/Lecture5/CSSS508_Lecture5.html#example-figure",
    "title": "CSSS 508 • Lecture 5",
    "section": "Example: Figure",
    "text": "Example: Figure\n\nlibrary(ggplot2)\nlibrary(ggthemes)\nbillboard_trajectories &lt;- \n  ggplot(data = billboard_2000_question,\n         aes(x = week, y = rank, group = track,\n             color = `Peak Rank`)) +\n  geom_line(aes(size = `Peak Rank`), alpha = 0.4) +\n  theme_tufte() +\n  xlab(\"Week\") + ylab(\"Rank\") +\n  scale_color_manual(values = c(\"black\", \"red\")) +\n  scale_size_manual(values = c(0.25, 1)) +\n  theme(legend.position = c(0.90, 0.75),\n        legend.background = element_rect(fill = \"transparent\"))"
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture5.html#charts-of-2000-beauty",
    "href": "Lectures/Lecture5/CSSS508_Lecture5.html#charts-of-2000-beauty",
    "title": "CSSS 508 • Lecture 5",
    "section": "Charts of 2000: Beauty!",
    "text": "Charts of 2000: Beauty!\n\nSongs that reach #1 on the Billboard charts appear to last &gt;20 weeks on the charts, while other songs very rarely make it past that point."
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture5.html#due-dates",
    "href": "Lectures/Lecture5/CSSS508_Lecture5.html#due-dates",
    "title": "Roadmap",
    "section": "Due dates",
    "text": "Due dates\n\n\n\n\n\n\n  \n    \n    \n      #\n      \n        Section AA\n      \n      \n        Section AB\n      \n    \n    \n      Homework Due\n      Peer Review Due\n      Homework Due\n      Peer Review Due\n    \n  \n  \n    1\n10 October\n15 October\n12 October\n17 October\n    2\n17 October\n22 October\n19 October\n24 October\n    3\n24 October\n29 October\n26 October\n31 October\n    4\n31 October\n5 November\n2 November\n7 November\n    5\n7 November\n12 November\n9 November\n14 November\n    6\n14 November\n19 November\n16 November\n21 November\n    7\n21 November\n26 November\n23 November\n28 November\n    8\n28 November\n3 November\n30 November\n5 November\n    9\n5 December\n10 December\n7 December\n12 December"
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture5.html",
    "href": "Lectures/Lecture5/CSSS508_Lecture5.html",
    "title": "Roadmap",
    "section": "",
    "text": "execute: echo: true message: false warning: false fig-format: “svg” format: revealjs: highlight-style: a11y-dark reference-location: margin theme: lecture_styles.scss slide-number: true code-link: true chalkboard: true incremental: false smaller: true preview-links: true code-line-numbers: true history: false progress: true link-external-icon: true pointer: color: “#b18eb1” revealjs-plugins: - pointer —\nLoading required package: downlit\n\n\nLoading required package: xml2\n\n\nLoading required package: tidyverse\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.3     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.3     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors"
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture5.html#activity",
    "href": "Lectures/Lecture5/CSSS508_Lecture5.html#activity",
    "title": "Roadmap",
    "section": "Activity",
    "text": "Activity\n\nCreate a new object that contains gapminder (1) observations from China, India, and United States after 1980, and (2) variables corresponding to country, year, population, and life expectancy.\nHow many rows and columns does the object contain?\nSave over your object after sorting the rows by year (ascending order) and population (descending order). Print the first 6 rows.\nAdd a new variable that contains population in billions.\nBy year, calculate the total population (in billions) across these three countries\nIn ggplot, create a line plot showing life expectancy over time by country. Make the plot visually appealing!"
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture5.html#summary",
    "href": "Lectures/Lecture5/CSSS508_Lecture5.html#summary",
    "title": "Roadmap",
    "section": "Summary",
    "text": "Summary\n\nImporting/Exporting Data: readr\nReshaping data: tidyr\nDates and times lubridate\n\nLet’s take a 10 minute break, then reconvene for an activity!"
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture5.html#example",
    "href": "Lectures/Lecture5/CSSS508_Lecture5.html#example",
    "title": "CSSS 508 • Lecture 5",
    "section": "Example",
    "text": "Example\n\n\nCode\nCharts of 2000: Beauty!\n\n\n\n\nlibrary(ggplot2)\nlibrary(ggthemes)\nbillboard_trajectories &lt;- \n  ggplot(data = billboard_2000_question,\n         aes(x = week, y = rank, group = track,\n             color = `Peak Rank`)) +\n  geom_line(aes(size = `Peak Rank`), alpha = 0.4) +\n  theme_tufte() +\n  xlab(\"Week\") + ylab(\"Rank\") +\n  scale_color_manual(values = c(\"black\", \"red\")) +\n  scale_size_manual(values = c(0.25, 1)) +\n  theme(legend.position = c(0.90, 0.75),\n        legend.background = element_rect(fill = \"transparent\"))\n\n\n\n\nbillboard_trajectories\n\n\n\n\n\n\n\n\n\nSongs that reach #1 on the Billboard charts appear to last &gt;20 weeks on the charts, while other songs very rarely make it past that point."
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture5.html#charts-of-2000-beauty-1",
    "href": "Lectures/Lecture5/CSSS508_Lecture5.html#charts-of-2000-beauty-1",
    "title": "CSSS 508 • Lecture 5",
    "section": "Charts of 2000: Beauty!",
    "text": "Charts of 2000: Beauty!\n\n\n\n\n\n\n\nSongs that reach #1 on the Billboard charts appear to last &gt;20 weeks on the charts, while other songs very rarely make it past that point."
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture5.html#example-visualization",
    "href": "Lectures/Lecture5/CSSS508_Lecture5.html#example-visualization",
    "title": "Roadmap",
    "section": "Example Visualization",
    "text": "Example Visualization\n\nCodeCharts of 2000: Beauty!\n\n\n\nlibrary(ggplot2)\nlibrary(ggthemes)\nbillboard_trajectories &lt;- \n  ggplot(data = billboard_2000_question,\n         aes(x = week, y = rank, group = track,\n             color = `Peak Rank`)) +\n  geom_line(aes(size = `Peak Rank`), alpha = 0.4) +\n  theme_tufte() +\n  xlab(\"Week\") + ylab(\"Rank\") +\n  scale_color_manual(values = c(\"black\", \"red\")) +\n  scale_size_manual(values = c(0.25, 1)) +\n  theme(legend.position = c(0.90, 0.75),\n        legend.background = element_rect(fill = \"transparent\"))\n\n\n\n\nbillboard_trajectories\n\n\n\n\n\n\n\n\n\nSongs that reach #1 on the Billboard charts appear to last &gt;20 weeks on the charts, while other songs very rarely make it past that point."
  },
  {
    "objectID": "Lectures/Lecture6/CSSS508_Lecture6.html#bad-repetition",
    "href": "Lectures/Lecture6/CSSS508_Lecture6.html#bad-repetition",
    "title": "",
    "section": "Bad Repetition",
    "text": "Bad Repetition\nIf someone doesn’t know better, they might find the means of variables in the swiss data by typing in a line of code for each column:\n\nmean1 &lt;- mean(swiss$Fertility)\nmean2 &lt;- mean(swiss$Agriculture)\nmean3 &lt;- mean(swissExamination)\nmean4 &lt;- mean(swiss$Fertility)\nmean5 &lt;- mean(swiss$Catholic)\nmean5 &lt;- mean(swiss$Infant.Mortality)\nc(mean1, mean2 mean3, mean4, mean5, man6)\n\nCan you spot the problems?\n\nHow upset would they be if the swiss data had 200 columns instead of 6?"
  },
  {
    "objectID": "Lectures/Lecture6/CSSS508_Lecture6.html#good-repetition",
    "href": "Lectures/Lecture6/CSSS508_Lecture6.html#good-repetition",
    "title": "",
    "section": "Good Repetition",
    "text": "Good Repetition\nYou will learn a better way to calculate column means today using loops!\n\nmeans &lt;- rep(NA, ncol(swiss))\nfor(i in 1:ncol(swiss)){\n  means[i] &lt;- mean(swiss[,i])\n}\ndata.frame(Variable=names(swiss),Mean=means)\n\n          Variable Mean\n1        Fertility 70.1\n2      Agriculture 50.7\n3      Examination 16.5\n4        Education 11.0\n5         Catholic 41.1\n6 Infant.Mortality 19.9\n\n\nDon’t worry about the details yet!"
  },
  {
    "objectID": "Lectures/Lecture6/CSSS508_Lecture6.html#dont-repeat-yourself-dry",
    "href": "Lectures/Lecture6/CSSS508_Lecture6.html#dont-repeat-yourself-dry",
    "title": "",
    "section": "Don’t Repeat Yourself (DRY)!",
    "text": "Don’t Repeat Yourself (DRY)!\nThe DRY idea: Computers are much better at doing the same thing over and over again than we are.\n\n\nWriting code to repeat tasks for us reduces the most common human coding mistakes.\nIt also substantially reduces the time and effort involved in processing large volumes of data.\nLastly, compact code is more readable and easier to troubleshoot."
  },
  {
    "objectID": "Lectures/Lecture6/CSSS508_Lecture6.html#the-for-loop",
    "href": "Lectures/Lecture6/CSSS508_Lecture6.html#the-for-loop",
    "title": "",
    "section": "The for() Loop",
    "text": "The for() Loop\nfor() loops are the most general kind of loop, found in pretty much every programming language.\n“For each of these values – in order – do this”\n\nConceptually:\nGiven a set of values…\n\nSet an index variable (often i) equal to the first value\nDo something (perhaps depending on i)\nIs there a next value?\n\n\nYES: Update to next value, go back to 2.\n\nNO: Exit loop\n\n\n\nWe are looping through values and repeating some actions."
  },
  {
    "objectID": "Lectures/Lecture6/CSSS508_Lecture6.html#for-loop-diagram",
    "href": "Lectures/Lecture6/CSSS508_Lecture6.html#for-loop-diagram",
    "title": "",
    "section": "\nfor() Loop: Diagram",
    "text": "for() Loop: Diagram\nGiven a set of values…"
  },
  {
    "objectID": "Lectures/Lecture6/CSSS508_Lecture6.html#for-loop-example",
    "href": "Lectures/Lecture6/CSSS508_Lecture6.html#for-loop-example",
    "title": "",
    "section": "\nfor() Loop: Example",
    "text": "for() Loop: Example\n\nfor(i in 1:5) {\n    # inside for, output won't show up without print()\n    print(i^2) \n}\n\n[1] 1\n[1] 4\n[1] 9\n[1] 16\n[1] 25\n\n\nNote this runs 5 separate print commands, which is why each line starts with [1]."
  },
  {
    "objectID": "Lectures/Lecture6/CSSS508_Lecture6.html#these-do-the-same-thing",
    "href": "Lectures/Lecture6/CSSS508_Lecture6.html#these-do-the-same-thing",
    "title": "",
    "section": "These Do the Same Thing",
    "text": "These Do the Same Thing\n\n\n\nfor(i in 1:3) {\n    print(i^2) \n}\n\n[1] 1\n[1] 4\n[1] 9\n\n\n\n\ni &lt;- 1\nprint(i^2) \ni &lt;- 2\nprint(i^2)\ni &lt;- 3\nprint(i^2)\n\n[1] 1\n[1] 4\n[1] 9"
  },
  {
    "objectID": "Lectures/Lecture6/CSSS508_Lecture6.html#iteration-conventions",
    "href": "Lectures/Lecture6/CSSS508_Lecture6.html#iteration-conventions",
    "title": "",
    "section": "Iteration Conventions",
    "text": "Iteration Conventions\n\n\nWe call what happens in the loop for a particular value one iteration.\nIterating over indices 1:n is very common. n might be the length of a vector, the number of rows or columns in a matrix or data frame, or the length of a list.\nCommon notation: i is the object that holds the current value inside the loop.\n\nIf loops are nested, you will often see j and k used for the inner loops.\nThis notation is similar to indexing in mathematical symbols (e.g \\(\\sum\\limits_{i=1}^n\\))\n\n\nNote i (and j,k, etc) are just normal objects. You can use any other names you want.\n\nEx: When iterating over rows and/or columns, I often use row and/or col!"
  },
  {
    "objectID": "Lectures/Lecture6/CSSS508_Lecture6.html#iterate-over-characters",
    "href": "Lectures/Lecture6/CSSS508_Lecture6.html#iterate-over-characters",
    "title": "",
    "section": "Iterate Over Characters",
    "text": "Iterate Over Characters\nWhat we iterate over doesn’t have to be numbers 1:n or numbers at all! You can also iterate over a character vector in R:\n\nfor(i in letters[1:3]) {\n    print(i)\n}\n\n[1] \"a\"\n[1] \"b\"\n[1] \"c\"\n\ni # in R, this will exist outside of the loop!\n\n[1] \"c\""
  },
  {
    "objectID": "Lectures/Lecture6/CSSS508_Lecture6.html#pre-allocation",
    "href": "Lectures/Lecture6/CSSS508_Lecture6.html#pre-allocation",
    "title": "",
    "section": "Pre-Allocation",
    "text": "Pre-Allocation\nUsually in a for() loop, you aren’t just printing output, but want to store results from calculations in each iteration somewhere.\n\nTo do that, figure out what you want to store, and pre-allocate an object of the right size as a placeholder (typically with missing values as placeholders).\n\n\nExamples of what to pre-allocate based on what you store:\n\n\nSingle numeric value per iteration:\n\nrep(NA, num_iter_iters)\n\n\nNumeric vector per iteration:\n\nmatrix(NA, nrow = num_of_iters, ncol = length_of_vector)"
  },
  {
    "objectID": "Lectures/Lecture6/CSSS508_Lecture6.html#pre-allocation-numeric",
    "href": "Lectures/Lecture6/CSSS508_Lecture6.html#pre-allocation-numeric",
    "title": "",
    "section": "Pre-Allocation: Numeric",
    "text": "Pre-Allocation: Numeric\n\niters &lt;- 10 # Set number of interations\noutput &lt;- rep(NA,iters) # Pre-allocate numeric vector \noutput\n\n [1] NA NA NA NA NA NA NA NA NA NA\n\nfor(i in 1:iters) { # Run code below iters times\n    output[i] &lt;- (i-1)^2 + (i-2)^2\n}\noutput # Display output\n\n [1]   1   1   5  13  25  41  61  85 113 145\n\n\nSteps:\n\nSet a number of iterations\nPre-allocate a numeric vector of that length\nRun ten iterations where the output is a mathematical function of each iteration number."
  },
  {
    "objectID": "Lectures/Lecture6/CSSS508_Lecture6.html#pre-allocation-numeric-vector-per-iteration-matrix",
    "href": "Lectures/Lecture6/CSSS508_Lecture6.html#pre-allocation-numeric-vector-per-iteration-matrix",
    "title": "",
    "section": "Pre-Allocation: Numeric Vector per Iteration Matrix",
    "text": "Pre-Allocation: Numeric Vector per Iteration Matrix\n\nrownums &lt;- 3\ncolnums &lt;- 6\noutput &lt;- matrix(NA,nrow=rownums,ncol=colnums)\n\nfor(i in 1:rownums){\n  for(j in 1:colnums){\n    output[i,j] &lt;- i + j\n  }\n}\noutput\n\n     [,1] [,2] [,3] [,4] [,5] [,6]\n[1,]    2    3    4    5    6    7\n[2,]    3    4    5    6    7    8\n[3,]    4    5    6    7    8    9"
  },
  {
    "objectID": "Lectures/Lecture6/CSSS508_Lecture6.html#aside-ifelse-statements",
    "href": "Lectures/Lecture6/CSSS508_Lecture6.html#aside-ifelse-statements",
    "title": "",
    "section": "Aside: If/Else Statements",
    "text": "Aside: If/Else Statements\nTo test a logical statement and then conditionally execute a set of actions, use if() and else. The structure is:\n\nif(CONDITION){\n  SOME CALCULATION\n} else{\n  A DIFFERENT CALCULATION\n}\n\nWarning! else needs to be on same line as the closing brace } of previous if()."
  },
  {
    "objectID": "Lectures/Lecture6/CSSS508_Lecture6.html#ifelse-simple-example",
    "href": "Lectures/Lecture6/CSSS508_Lecture6.html#ifelse-simple-example",
    "title": "",
    "section": "If/Else Simple Example",
    "text": "If/Else Simple Example\n\nif(8  &lt; 10){\n  print(\"Less than 10!\")\n}else{\n  print(\"Not less than 10!\")\n}\n\n[1] \"Less than 10!\""
  },
  {
    "objectID": "Lectures/Lecture6/CSSS508_Lecture6.html#more-complex-ifelse",
    "href": "Lectures/Lecture6/CSSS508_Lecture6.html#more-complex-ifelse",
    "title": "",
    "section": "More Complex If/Else",
    "text": "More Complex If/Else\nWe can nest together multiple if/elses! if we wish:\n\ni &lt;- 13\nif(i &lt;= 10) { \n  print(\"i is less than or equal to 10!\")\n} else if(i &lt;= 14) {\n  print(\"i is greater than 10, less than or equal to 14\")\n} else {\n  print(\"i is greater than or equal to 15\")\n}\n\n[1] \"i is greater than 10, less than or equal to 14\""
  },
  {
    "objectID": "Lectures/Lecture6/CSSS508_Lecture6.html#loops-with-ifelse-statements",
    "href": "Lectures/Lecture6/CSSS508_Lecture6.html#loops-with-ifelse-statements",
    "title": "",
    "section": "Loops with If/Else Statements",
    "text": "Loops with If/Else Statements\nSuppose we want to take the numbers between 1 and 5, and divide the evens by 2 and multiply the odds by 2. We could do that using a loop with if/else statements!\n\nfor(i in 1:5){\n  if(i %% 2 == 0){ #check for even numbers\n    print(i / 2)\n  }else{\n    print(i * 2)\n  }\n}\n\n[1] 2\n[1] 1\n[1] 6\n[1] 2\n[1] 10"
  },
  {
    "objectID": "Lectures/Lecture6/CSSS508_Lecture6.html#handling-special-cases",
    "href": "Lectures/Lecture6/CSSS508_Lecture6.html#handling-special-cases",
    "title": "",
    "section": "Handling Special Cases",
    "text": "Handling Special Cases\nAside from the previous toy example, if() statements are useful when you have to handle special cases.\nif() statements can be used to make a loop ignore or fix problematic cases.\nThey are also useful for producing error messages, by generating a message if an input value is not what is expected."
  },
  {
    "objectID": "Lectures/Lecture6/CSSS508_Lecture6.html#while",
    "href": "Lectures/Lecture6/CSSS508_Lecture6.html#while",
    "title": "",
    "section": "while()",
    "text": "while()\nA lesser-used looping structure is the while() loop.\nRather than iterating over a predefined vector, the loop keeps going until some condition is no longer true.\n\nHere is the structure:\n\nwhile(COND IS MET){\n  RUN CODE\n}\n\nIf you’re not careful, the while loop will run forever!!"
  },
  {
    "objectID": "Lectures/Lecture6/CSSS508_Lecture6.html#simple-while-loop-example",
    "href": "Lectures/Lecture6/CSSS508_Lecture6.html#simple-while-loop-example",
    "title": "",
    "section": "Simple while() loop example:",
    "text": "Simple while() loop example:\n\nx &lt;- 0 \nwhile(x &lt; 3){\n  x &lt;- x + 1\n  print(x)\n}\n\n[1] 1\n[1] 2\n[1] 3\n\n\nWhat happened in each iteration?"
  },
  {
    "objectID": "Lectures/Lecture6/CSSS508_Lecture6.html#these-do-the-same-thing-1",
    "href": "Lectures/Lecture6/CSSS508_Lecture6.html#these-do-the-same-thing-1",
    "title": "",
    "section": "These Do the Same Thing",
    "text": "These Do the Same Thing\n\n\n\nx &lt;- 0 \nwhile(x &lt; 3){\n  x &lt;- x + 1\n  print(x)\n}\n\n[1] 1\n[1] 2\n[1] 3\n\n\n\n\nx &lt;- 0\nx &lt;- x+1\nprint(x)\nx &lt;- x+1\nprint(x)\nx &lt;- x+1\nprint(x)\n\n[1] 1\n[1] 2\n[1] 3"
  },
  {
    "objectID": "Lectures/Lecture6/CSSS508_Lecture6.html#more-complex-example",
    "href": "Lectures/Lecture6/CSSS508_Lecture6.html#more-complex-example",
    "title": "",
    "section": "More Complex Example",
    "text": "More Complex Example\nLet’s see how many times we need to flip a coin to get 4 heads:\n\nnum_heads &lt;- 0\nnum_flips &lt;- 0\n\nwhile(num_heads &lt; 4) {\n  # simulating a coin flip\n  coin_flip &lt;- rbinom(n = 1, size = 1, prob = 0.5) \n\n  # keep track of heads\n  if (coin_flip == 1) { \n    num_heads &lt;- num_heads + 1 \n  }\n  \n  # update number of coin flips\n  num_flips &lt;- num_flips + 1 \n}\n\nnum_flips # follows negative binomial distribution\n\n[1] 12"
  },
  {
    "objectID": "Lectures/Lecture6/CSSS508_Lecture6.html#summary",
    "href": "Lectures/Lecture6/CSSS508_Lecture6.html#summary",
    "title": "",
    "section": "Summary",
    "text": "Summary\n\nWhy Loops?\n\n\nTo make our lives easier!\n\n\n\nfor() loops:\n\n\nFor iterating over a fixed number of items\n\n\n\nwhile() loops:\n\n\nFor iterating until some condition is met\n\nLet’s take a 10 minute break, then return for some activities!"
  },
  {
    "objectID": "Lectures/Lecture6/CSSS508_Lecture6.html#activity-1",
    "href": "Lectures/Lecture6/CSSS508_Lecture6.html#activity-1",
    "title": "",
    "section": "Activity 1",
    "text": "Activity 1\n\nCreate a for loop to calculate the maximum value of each variable in the swiss data. What are the maximum values of each variable?\nUsing your previous answer as a starting point, create a nested for loop to calculate the maximum value for each variable in the swiss data (outer loop), and then divide that maximum by 1, 2, and 4 (inner loop). Print the output after each step.\nUsing your previous answer as a starting point, write a loop that does the same calculations as before but stores the values in a matrix with ncol(swiss) columns and 3 rows. How will you “pre-allocate” space for the results?"
  },
  {
    "objectID": "Lectures/Lecture6/CSSS508_Lecture6.html#activity-1-answers",
    "href": "Lectures/Lecture6/CSSS508_Lecture6.html#activity-1-answers",
    "title": "",
    "section": "Activity 1: Answers",
    "text": "Activity 1: Answers\nQuestion 1:\n\nfor(i in 1:ncol(swiss)) {\n  curr_max &lt;- max(swiss[,i])\n  print(curr_max)\n}\n\n[1] 92.5\n[1] 89.7\n[1] 37\n[1] 53\n[1] 100\n[1] 26.6"
  },
  {
    "objectID": "Lectures/Lecture6/CSSS508_Lecture6.html#activity-1-answers-1",
    "href": "Lectures/Lecture6/CSSS508_Lecture6.html#activity-1-answers-1",
    "title": "",
    "section": "Activity 1: Answers",
    "text": "Activity 1: Answers\nQuestion 2:\n\nfor(i in 1:ncol(swiss)) {\n  curr_max &lt;- max(swiss[,i])\n  for(j in c(1,2,4)){\n    print(curr_max/j)\n  }\n}\n\n[1] 92.5\n[1] 46.2\n[1] 23.1\n[1] 89.7\n[1] 44.9\n[1] 22.4\n[1] 37\n[1] 18.5\n[1] 9.25\n[1] 53\n[1] 26.5\n[1] 13.2\n[1] 100\n[1] 50\n[1] 25\n[1] 26.6\n[1] 13.3\n[1] 6.65"
  },
  {
    "objectID": "Lectures/Lecture6/CSSS508_Lecture6.html#activity-1-answers-2",
    "href": "Lectures/Lecture6/CSSS508_Lecture6.html#activity-1-answers-2",
    "title": "",
    "section": "Activity 1: Answers",
    "text": "Activity 1: Answers\nQuestion 3:\n\nresults &lt;- matrix(NA, ncol=ncol(swiss),nrow=3)\nfor(i in 1:ncol(swiss)) {\n  curr_max &lt;- max(swiss[,i])\n  for(j in 1:3){\n    curr_divisor &lt;- c(1,2,4)[j]\n    results[j,i] &lt;- curr_max/curr_divisor\n  }\n}\nresults\n\n     [,1] [,2]  [,3] [,4] [,5]  [,6]\n[1,] 92.5 89.7 37.00 53.0  100 26.60\n[2,] 46.2 44.9 18.50 26.5   50 13.30\n[3,] 23.1 22.4  9.25 13.2   25  6.65"
  },
  {
    "objectID": "Lectures/Lecture6/CSSS508_Lecture6.html#activity-2",
    "href": "Lectures/Lecture6/CSSS508_Lecture6.html#activity-2",
    "title": "",
    "section": "Activity 2",
    "text": "Activity 2\n1. Consider the vector vec &lt;- c(1,2,NA,3,NA). Write a for loop that includes an if/else function so that for each value x in vec, we print “Missing!” if x is NA, and x^3 otherwise.\n2. What will happen if I run the following loop:\n\nx &lt;- 1\nwhile(x &lt; 10){\n  print(x + 1)\n}\n\n3. Write a while() loop that starts with x &lt;- 1 and doubles x each iteration, while x &lt; 100. Print x after each iteration."
  },
  {
    "objectID": "Lectures/Lecture6/CSSS508_Lecture6.html#activity-2-answers",
    "href": "Lectures/Lecture6/CSSS508_Lecture6.html#activity-2-answers",
    "title": "",
    "section": "Activity 2: Answers",
    "text": "Activity 2: Answers\n1.\n\nfor(x in c(1,2,NA,3,NA)){\n  if(is.na(x)){\n    print(\"Missing!\")\n  } else{\n    print(x^3)\n  }\n}\n\n[1] 1\n[1] 8\n[1] \"Missing!\"\n[1] 27\n[1] \"Missing!\""
  },
  {
    "objectID": "Lectures/Lecture6/CSSS508_Lecture6.html#activity-2-answers-1",
    "href": "Lectures/Lecture6/CSSS508_Lecture6.html#activity-2-answers-1",
    "title": "",
    "section": "Activity 2: Answers",
    "text": "Activity 2: Answers\n2. What will happen if I run the following loop:\n\nx &lt;- 1\nwhile(x &lt; 10){\n  print(x + 1)\n}\n\n\n\nAnswer: The while loop will run forever printing 1, since we are not updating x!!"
  },
  {
    "objectID": "Lectures/Lecture6/CSSS508_Lecture6.html#activity-2-answers-2",
    "href": "Lectures/Lecture6/CSSS508_Lecture6.html#activity-2-answers-2",
    "title": "",
    "section": "Activity 2: Answers",
    "text": "Activity 2: Answers\n3. Write a while() loop that starts with x &lt;- 1 and doubles x each iteration, while x &lt; 100. Print x after each iteration.\n\nx &lt;- 1\nwhile(x &lt;100){\n  x &lt;- x * 2\n  print(x)\n}\n\n[1] 2\n[1] 4\n[1] 8\n[1] 16\n[1] 32\n[1] 64\n[1] 128\n\n\nWhy does x reach 128?!"
  },
  {
    "objectID": "Lectures/Lecture6/CSSS508_Lecture6.html#homework",
    "href": "Lectures/Lecture6/CSSS508_Lecture6.html#homework",
    "title": "CSSS 508 • Lecture 6",
    "section": "Homework",
    "text": "Homework\nHW 6 will be posted on the website shortly! Remember that it is a continuation of HW 5!"
  },
  {
    "objectID": "Lectures/Lecture6/CSSS508_Lecture6.html#due-dates",
    "href": "Lectures/Lecture6/CSSS508_Lecture6.html#due-dates",
    "title": "Preamble: Data Structures and Types in R",
    "section": "Due dates",
    "text": "Due dates\n\n\n\n\n\n\n  \n    \n    \n      #\n      \n        Section AA\n      \n      \n        Section AB\n      \n    \n    \n      Homework Due\n      Peer Review Due\n      Homework Due\n      Peer Review Due\n    \n  \n  \n    1\n10 October\n15 October\n12 October\n17 October\n    2\n17 October\n22 October\n19 October\n24 October\n    3\n24 October\n29 October\n26 October\n31 October\n    4\n31 October\n5 November\n2 November\n7 November\n    5\n7 November\n12 November\n9 November\n14 November\n    6\n14 November\n19 November\n16 November\n21 November\n    7\n21 November\n26 November\n23 November\n28 November\n    8\n28 November\n3 November\n30 November\n5 November\n    9\n5 December\n10 December\n7 December\n12 December"
  },
  {
    "objectID": "Lectures/Lecture7/CSSS508_Lecture7.html#why-functions",
    "href": "Lectures/Lecture7/CSSS508_Lecture7.html#why-functions",
    "title": "",
    "section": "Why Functions?",
    "text": "Why Functions?\nR (as well as mathematics in general) is full of functions!\n\nWe use functions to:\n\nCompute summary statistics (mean(), sd(), min())\nFit models to data (lm(Fertility~Agriculture,data=swiss))\nLoad data (read_csv())\nCreate ggplots (ggplot())\nAnd so much more!!"
  },
  {
    "objectID": "Lectures/Lecture7/CSSS508_Lecture7.html#examples-of-existing-functions",
    "href": "Lectures/Lecture7/CSSS508_Lecture7.html#examples-of-existing-functions",
    "title": "",
    "section": "Examples of Existing Functions",
    "text": "Examples of Existing Functions\n\n\n\nmean():\n\nInput: a vector\nOutput: a single number\n\n\n\ndplyr::filter():\n\nInput: a data frame, logical conditions\nOutput: a data frame with rows removed using those conditions\n\n\n\nreadr::read_csv():\n\nInput: a file path, optionally variable names or types\nOutput: a data frame containing info read in from file\n\n\n\n\n\nEach function requires inputs, and returns outputs"
  },
  {
    "objectID": "Lectures/Lecture7/CSSS508_Lecture7.html#why-write-your-own-functions",
    "href": "Lectures/Lecture7/CSSS508_Lecture7.html#why-write-your-own-functions",
    "title": "",
    "section": "Why Write Your Own Functions?",
    "text": "Why Write Your Own Functions?\nFunctions encapsulate actions you might perform often, such as:\n\nGiven a vector, compute some special summary stats\nGiven a vector and definition of “invalid” values, replace with NA\n\nDefining a new logical operator\n\n\nAdvanced function applications (not covered in this class):\n\nParallel processing\nGenerating other functions\nMaking custom packages containing your functions"
  },
  {
    "objectID": "Lectures/Lecture7/CSSS508_Lecture7.html#anatomy-of-a-function",
    "href": "Lectures/Lecture7/CSSS508_Lecture7.html#anatomy-of-a-function",
    "title": "",
    "section": "Anatomy of a Function",
    "text": "Anatomy of a Function\n\nNAME &lt;- function(ARGUMENT1, ARGUMENT2=DEFAULT){\n  BODY\n  return(OUTPUT)\n}\n\n\n\n\nName: What you call the function so you can use it later\n\nArguments (aka inputs, parameters): things the user passes to the function that affect how it works\n\ne.g. ARGUMENT1, ARGUMENT2\n\n\nARGUMENT2=DEFAULT is example of setting a default value\nIn this example, ARGUMENT1, ARGUMENT2 values won’t exist outside of the function\n\n\n\nBody: The actual operations inside the function.\n\nOutput: The object inside return(). Could be anything (or nothing!)\n\nIf unspecified, will be the last thing calculated"
  },
  {
    "objectID": "Lectures/Lecture7/CSSS508_Lecture7.html#example-1-doubling-a-number",
    "href": "Lectures/Lecture7/CSSS508_Lecture7.html#example-1-doubling-a-number",
    "title": "",
    "section": "Example 1: Doubling A Number",
    "text": "Example 1: Doubling A Number\n\ndouble_x &lt;- function(x){\n  double_x &lt;- x * 2\n  return(double_x)\n}\n\n\nLet’s run it!\n\ndouble_x(5)\n\n[1] 10\n\ndouble_x(NA)\n\n[1] NA\n\ndouble_x(1:2)\n\n[1] 2 4"
  },
  {
    "objectID": "Lectures/Lecture7/CSSS508_Lecture7.html#example-2-extract-firstlast",
    "href": "Lectures/Lecture7/CSSS508_Lecture7.html#example-2-extract-firstlast",
    "title": "",
    "section": "Example 2: Extract First/Last",
    "text": "Example 2: Extract First/Last\n\nfirst_and_last &lt;- function(x) {\n    first &lt;- x[1]\n    last  &lt;- x[length(x)]\n    return(c(\"first\" = first, \"last\" = last))\n}\n\n\nTest it out:\n\nfirst_and_last(c(4, 3, 1, 8))\n\nfirst  last \n    4     8"
  },
  {
    "objectID": "Lectures/Lecture7/CSSS508_Lecture7.html#example-2-testing-first_and_last",
    "href": "Lectures/Lecture7/CSSS508_Lecture7.html#example-2-testing-first_and_last",
    "title": "",
    "section": "Example 2: Testing first_and_last\n",
    "text": "Example 2: Testing first_and_last\n\nWhat if I give first_and_last() a vector of length 1?\n\nfirst_and_last(7)\n\nfirst  last \n    7     7 \n\n\n\nOf length 0?\n\nfirst_and_last(numeric(0))\n\nfirst \n   NA \n\n\n\n\nMaybe we want it to be a little smarter."
  },
  {
    "objectID": "Lectures/Lecture7/CSSS508_Lecture7.html#example-3-checking-inputs",
    "href": "Lectures/Lecture7/CSSS508_Lecture7.html#example-3-checking-inputs",
    "title": "",
    "section": "Example 3: Checking Inputs",
    "text": "Example 3: Checking Inputs\nLet’s make sure we get an error message when the vector is too small:\n\nsmarter_first_and_last &lt;- function(x) {\n    if(length(x) &lt; 2){\n      stop(\"Input is not long enough!\")\n    } else{\n      first &lt;- x[1]\n      last  &lt;- x[length(x)]\n      return(c(\"first\" = first, \"last\" = last))    \n    }\n}\n\n\n\nstop() ceases running the function and prints the text inside as an error message."
  },
  {
    "objectID": "Lectures/Lecture7/CSSS508_Lecture7.html#example-3-testing-smarter-function",
    "href": "Lectures/Lecture7/CSSS508_Lecture7.html#example-3-testing-smarter-function",
    "title": "",
    "section": "Example 3: Testing Smarter Function",
    "text": "Example 3: Testing Smarter Function\n\nsmarter_first_and_last(NA)\n\nError in smarter_first_and_last(NA): Input is not long enough!\n\nsmarter_first_and_last(c(4, 3, 1, 8))\n\nfirst  last \n    4     8"
  },
  {
    "objectID": "Lectures/Lecture7/CSSS508_Lecture7.html#cracking-open-functions",
    "href": "Lectures/Lecture7/CSSS508_Lecture7.html#cracking-open-functions",
    "title": "",
    "section": "Cracking Open Functions",
    "text": "Cracking Open Functions\nIf you type a function name without any parentheses or arguments, you can see its contents:\n\nsmarter_first_and_last\n\nfunction(x) {\n    if(length(x) &lt; 2){\n      stop(\"Input is not long enough!\")\n    } else{\n      first &lt;- x[1]\n      last  &lt;- x[length(x)]\n      return(c(\"first\" = first, \"last\" = last))    \n    }\n}\n&lt;bytecode: 0x121da17b0&gt;"
  },
  {
    "objectID": "Lectures/Lecture7/CSSS508_Lecture7.html#applying-functions-multiple-times",
    "href": "Lectures/Lecture7/CSSS508_Lecture7.html#applying-functions-multiple-times",
    "title": "",
    "section": "Applying Functions Multiple Times?",
    "text": "Applying Functions Multiple Times?\nLast week, we saw an example where we wanted to take the mean of each column in the swiss data:\n\nfor(col_index in 1:ncol(swiss)){\n  mean_swiss_col &lt;- mean(swiss[,col_index])\n  names_swiss_col &lt;- names(swiss)[col_index]\n  print(c(names_swiss_col,round(mean_swiss_col,3)))\n}\n\n[1] \"Fertility\" \"70.143\"   \n[1] \"Agriculture\" \"50.66\"      \n[1] \"Examination\" \"16.489\"     \n[1] \"Education\" \"10.979\"   \n[1] \"Catholic\" \"41.144\"  \n[1] \"Infant.Mortality\" \"19.943\"          \n\n\nIsn’t this kind of complex?!"
  },
  {
    "objectID": "Lectures/Lecture7/CSSS508_Lecture7.html#apply-dont-loop",
    "href": "Lectures/Lecture7/CSSS508_Lecture7.html#apply-dont-loop",
    "title": "",
    "section": "\napply(), don’t loop!",
    "text": "apply(), don’t loop!\nWriting loops can be challenging and prone to bugs!!\n\nThe apply() can solve this issue:\n\n\napply a function to values in each row or column of a matrix\nDoesn’t require preallocation\nCan take built-in functions or user-created functions."
  },
  {
    "objectID": "Lectures/Lecture7/CSSS508_Lecture7.html#structure-of-apply",
    "href": "Lectures/Lecture7/CSSS508_Lecture7.html#structure-of-apply",
    "title": "",
    "section": "Structure of apply()\n",
    "text": "Structure of apply()\n\napply() takes 3 arguments:\n\nData (a matrix or data frame)\nMargin (1 applies function to each row, 2 applies to each column)\nFunction\n\n\napply(DATA, MARGIN, FUNCTION)\n\n\nFor example,\n\napply(swiss, 2, mean)\n\n       Fertility      Agriculture      Examination        Education \n        70.14255         50.65957         16.48936         10.97872 \n        Catholic Infant.Mortality \n        41.14383         19.94255"
  },
  {
    "objectID": "Lectures/Lecture7/CSSS508_Lecture7.html#example-1",
    "href": "Lectures/Lecture7/CSSS508_Lecture7.html#example-1",
    "title": "",
    "section": "Example 1",
    "text": "Example 1\n\nrow_max &lt;- apply(swiss,1,max) # maximum in each row\nhead(row_max, 20)\n\n  Courtelary     Delemont Franches-Mnt      Moutier   Neuveville   Porrentruy \n       80.20        84.84        93.40        85.80        76.90        90.57 \n       Broye        Glane      Gruyere       Sarine      Veveyse        Aigle \n       92.85        97.16        97.67        91.38        98.61        64.10 \n     Aubonne     Avenches     Cossonay    Echallens     Grandson     Lausanne \n       67.50        68.90        69.30        72.60        71.70        55.70 \n   La Vallee       Lavaux \n       54.30        73.00"
  },
  {
    "objectID": "Lectures/Lecture7/CSSS508_Lecture7.html#example-2",
    "href": "Lectures/Lecture7/CSSS508_Lecture7.html#example-2",
    "title": "",
    "section": "Example 2",
    "text": "Example 2\n\napply(swiss, 2, summary) # summary of each column\n\n        Fertility Agriculture Examination Education  Catholic Infant.Mortality\nMin.     35.00000     1.20000     3.00000   1.00000   2.15000         10.80000\n1st Qu.  64.70000    35.90000    12.00000   6.00000   5.19500         18.15000\nMedian   70.40000    54.10000    16.00000   8.00000  15.14000         20.00000\nMean     70.14255    50.65957    16.48936  10.97872  41.14383         19.94255\n3rd Qu.  78.45000    67.65000    22.00000  12.00000  93.12500         21.70000\nMax.     92.50000    89.70000    37.00000  53.00000 100.00000         26.60000\n\n\n**Note:* Matrix output!"
  },
  {
    "objectID": "Lectures/Lecture7/CSSS508_Lecture7.html#example-3-user-created-function",
    "href": "Lectures/Lecture7/CSSS508_Lecture7.html#example-3-user-created-function",
    "title": "",
    "section": "Example 3: User-Created Function",
    "text": "Example 3: User-Created Function\n\nscores &lt;- matrix(1:21, nrow=3)\nprint(scores)\n\n     [,1] [,2] [,3] [,4] [,5] [,6] [,7]\n[1,]    1    4    7   10   13   16   19\n[2,]    2    5    8   11   14   17   20\n[3,]    3    6    9   12   15   18   21\n\nmy_function &lt;- function(x){ mean(x+10, na.rm = T) }\napply(scores, 1, my_function)\n\n[1] 20 21 22"
  },
  {
    "objectID": "Lectures/Lecture7/CSSS508_Lecture7.html#activity-writing-a-function",
    "href": "Lectures/Lecture7/CSSS508_Lecture7.html#activity-writing-a-function",
    "title": "",
    "section": "Activity: Writing A Function",
    "text": "Activity: Writing A Function\nIn Olympic diving, a panel of 7 judges provide scores. After removing the worst and best scores, the mean of the remaining scores is given to the diver. We’ll write code to calculate this score!\n\nSuppose I get you a vector, x, of length 7. Write code that will sort the vector from least to greatest, then keep the 2nd-6th elements1.\n\nWrite a function to calculate a diver’s score:\n\nInput: Vector of length 7\nChecks: Check that the vector has length 7 (if not, stop!)\nOutput: Mean score after removing the lowest and greatest scores.\n\n\nCalculate the diver’s score given x &lt;- c(2, 1:5, 3)\nHINT: Use the sort() function and square brackets [ ] for subsetting"
  },
  {
    "objectID": "Lectures/Lecture7/CSSS508_Lecture7.html#activity-solution",
    "href": "Lectures/Lecture7/CSSS508_Lecture7.html#activity-solution",
    "title": "",
    "section": "Activity: Solution",
    "text": "Activity: Solution\n\nSort and extract elements 2 through 6:\n\n\nAnswer: Given vector x, use sort(x)[2:6]\n\n\n\nFunction\n\n\ndivers_score &lt;- function(x){\n  if(length(x) != 7){\n    stop(\"x is not of length 7!\")\n  } else{\n    x_nofirst_nolast &lt;- sort(x)[2:6]\n    return(mean(x_nofirst_nolast))\n  }\n}\n\n\n\nCalculate the diver’s score given x &lt;- c(2, 1:5, 3)\n\n\n\ndivers_score(x = c(2,1:5,3) )\n\n[1] 2.8"
  },
  {
    "objectID": "Lectures/Lecture7/CSSS508_Lecture7.html#activity",
    "href": "Lectures/Lecture7/CSSS508_Lecture7.html#activity",
    "title": "",
    "section": "Activity",
    "text": "Activity\nThese are homework questions!!\n\nPreallocate a matrix of NAs with 3 rows and 8 columns, called double_matrix. Manually specify the first column equal to the values 1, 2, and 3. Using a nested loop, fill in the matrix, row by row, such that each value is double that to its left.\nWrite an apply() function to take the median value of each column in the cars dataset\nUsing ggplot, make a scatterplot of the speed and dist variables in cars. Then, add an appropriate horizontal and vertical line symbolizing the median value of each variable1.\nHint: Using the layers geom_vline(xintercept = ) and geom_hline(yintercept = )"
  },
  {
    "objectID": "Lectures/Lecture7/CSSS508_Lecture7.html#answers",
    "href": "Lectures/Lecture7/CSSS508_Lecture7.html#answers",
    "title": "",
    "section": "Answers",
    "text": "Answers\n\nPreallocate a matrix of NAs with 3 rows and 8 columns, called double_matrix. Manually specify the first column equal to the values 1, 2, and 3. Using a nested loop, fill in the matrix, row by row, such that each value is double that to its left.\n\n\ndouble_matrix &lt;- matrix(NA, nrow = 3,ncol = 8)\ndouble_matrix[ , 1] &lt;- 1:3\nfor(row in 1:3){\n  for(col in 2:8){\n    double_matrix[row, col] &lt;- double_matrix[row, col-1] * 2\n  }\n}\ndouble_matrix\n\n     [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8]\n[1,]    1    2    4    8   16   32   64  128\n[2,]    2    4    8   16   32   64  128  256\n[3,]    3    6   12   24   48   96  192  384"
  },
  {
    "objectID": "Lectures/Lecture7/CSSS508_Lecture7.html#answers-1",
    "href": "Lectures/Lecture7/CSSS508_Lecture7.html#answers-1",
    "title": "",
    "section": "Answers",
    "text": "Answers\n2. Write an apply() function to take the median value of each column in the cars dataset\n\nmedian_cars &lt;- apply(cars, 2, median)\nmedian_cars\n\nspeed  dist \n   15    36"
  },
  {
    "objectID": "Lectures/Lecture7/CSSS508_Lecture7.html#my-answers",
    "href": "Lectures/Lecture7/CSSS508_Lecture7.html#my-answers",
    "title": "CSSS 508 • Lecture 7",
    "section": "My Answers",
    "text": "My Answers\n3. Make a ggplot\n\n\nCode\nPlot\n\n\n\n\nlibrary(ggplot2)\nggplot(cars, aes(speed, dist)) + \n  geom_point() +\n  geom_vline(xintercept = median_cars[1]) +\n  geom_hline(yintercept = median_cars[2])"
  },
  {
    "objectID": "Lectures/Lecture7/CSSS508_Lecture7.html#homework",
    "href": "Lectures/Lecture7/CSSS508_Lecture7.html#homework",
    "title": "CSSS 508 • Lecture 7",
    "section": "Homework",
    "text": "Homework\nTime to work on Homework 7!"
  },
  {
    "objectID": "Lectures/Lecture7/CSSS508_Lecture7.html#due-dates",
    "href": "Lectures/Lecture7/CSSS508_Lecture7.html#due-dates",
    "title": "Roadmap",
    "section": "Due dates",
    "text": "Due dates\n\n\n\n\n\n\n  \n    \n    \n      #\n      \n        Section AA\n      \n      \n        Section AB\n      \n    \n    \n      Homework Due\n      Peer Review Due\n      Homework Due\n      Peer Review Due\n    \n  \n  \n    1\n10 October\n15 October\n12 October\n17 October\n    2\n17 October\n22 October\n19 October\n24 October\n    3\n24 October\n29 October\n26 October\n31 October\n    4\n31 October\n5 November\n2 November\n7 November\n    5\n7 November\n12 November\n9 November\n14 November\n    6\n14 November\n19 November\n16 November\n21 November\n    7\n21 November\n26 November\n23 November\n28 November\n    8\n28 November\n3 November\n30 November\n5 November\n    9\n5 December\n10 December\n7 December\n12 December"
  },
  {
    "objectID": "Lectures/Lecture8/CSSS508_Lecture8.html#basics-of-strings-1",
    "href": "Lectures/Lecture8/CSSS508_Lecture8.html#basics-of-strings-1",
    "title": "",
    "section": "Basics of Strings",
    "text": "Basics of Strings\n\n\nA general programming term for a unit of character data is a string\n\nStrings are a sequence of characters\n\nIn R, “strings” and “character data” are mostly interchangeable.\nSome languages have more precise distinctions, but we won’t worry about that here!\n\n\n\n\n\n\nWe can create strings by surrounding text, numbers, spaces, or symbols with quotes!\n\nExamples: \"Hello! My name is Vic\" or \"%*$#01234\""
  },
  {
    "objectID": "Lectures/Lecture8/CSSS508_Lecture8.html#basics-of-strings-2",
    "href": "Lectures/Lecture8/CSSS508_Lecture8.html#basics-of-strings-2",
    "title": "",
    "section": "Basics of Strings",
    "text": "Basics of Strings\nR can treat strings in funny ways!\n\n\"01\" == \"1\"\n\n[1] FALSE\n\n\"01\" == 1\n\n[1] FALSE\n\n\"1\" == 1\n\n[1] TRUE\n\n\n\nReminder: We can check data types using the class() function!\n\nc(class(\"1\"), class(1))\n\n[1] \"character\" \"numeric\""
  },
  {
    "objectID": "Lectures/Lecture8/CSSS508_Lecture8.html#data-king-county-restaurant-inspections",
    "href": "Lectures/Lecture8/CSSS508_Lecture8.html#data-king-county-restaurant-inspections",
    "title": "",
    "section": "Data: King County Restaurant Inspections!",
    "text": "Data: King County Restaurant Inspections!\nToday we’ll study real data on food safety inspections in King County, collected from data.kingcounty.gov.\nNote these data are fairly large. The following code can be used to download the data directly from my Github page:\n\nrestaurants &lt;- read_csv(file = \"https://raw.githubusercontent.com/vsass/CSSS508/main/Lectures/Lecture8/data/restaurants.csv\")"
  },
  {
    "objectID": "Lectures/Lecture8/CSSS508_Lecture8.html#quick-examination-of-the-data",
    "href": "Lectures/Lecture8/CSSS508_Lecture8.html#quick-examination-of-the-data",
    "title": "",
    "section": "Quick Examination of the Data",
    "text": "Quick Examination of the Data\n\nnames(restaurants)\n\n [1] \"Name\"                       \"Program Identifier\"        \n [3] \"Inspection Date\"            \"Description\"               \n [5] \"Address\"                    \"City\"                      \n [7] \"Zip Code\"                   \"Phone\"                     \n [9] \"Longitude\"                  \"Latitude\"                  \n[11] \"Inspection Business Name\"   \"Inspection Type\"           \n[13] \"Inspection Score\"           \"Inspection Result\"         \n[15] \"Inspection Closed Business\" \"Violation Type\"            \n[17] \"Violation Description\"      \"Violation Points\"          \n[19] \"Business_ID\"                \"Inspection_Serial_Num\"     \n[21] \"Violation_Record_ID\"        \"Grade\"                     \n\ndim(restaurants)\n\n[1] 255270     22"
  },
  {
    "objectID": "Lectures/Lecture8/CSSS508_Lecture8.html#quick-examination-of-the-data-1",
    "href": "Lectures/Lecture8/CSSS508_Lecture8.html#quick-examination-of-the-data-1",
    "title": "",
    "section": "Quick Examination of the Data",
    "text": "Quick Examination of the Data\nGood Questions to Ask:\n\nWhat does each row represent?\nIs the data in long or wide format?\nWhat are the key variables?\nHow are the data stored? (data type)"
  },
  {
    "objectID": "Lectures/Lecture8/CSSS508_Lecture8.html#nchar",
    "href": "Lectures/Lecture8/CSSS508_Lecture8.html#nchar",
    "title": "",
    "section": "nchar()",
    "text": "nchar()\nThe nchar() function calculates the number of characters in a given string.\n\n\nlength() doesn’t work with strings!!\n\nWhy not?\n\n\n\n\n\nnchar(\"Victoria Sass\")\n\n[1] 13\n\nlength(\"Victoria Sass\")\n\n[1] 1\n\n\n\n\nIn our restaurants data, let’s see how many characters are in each zip code:\n\nlength_zip &lt;- nchar(restaurants$`Zip Code`) # notice when a variable name has spaces we need to contain it within backticks so R knows it is a singular entity\ntable(length_zip)\n\nlength_zip\n     4      5      6 \n    15 255248      1"
  },
  {
    "objectID": "Lectures/Lecture8/CSSS508_Lecture8.html#substr",
    "href": "Lectures/Lecture8/CSSS508_Lecture8.html#substr",
    "title": "",
    "section": "substr()",
    "text": "substr()\nThe substr() function allows us to extract characters from a string.\n\nFor example, we can extract the third through fifth elements of a string as follows:\n\nsubstr(\"98126\", 3, 5)\n\n[1] \"126\""
  },
  {
    "objectID": "Lectures/Lecture8/CSSS508_Lecture8.html#substr-1",
    "href": "Lectures/Lecture8/CSSS508_Lecture8.html#substr-1",
    "title": "",
    "section": "substr()",
    "text": "substr()\nLet’s extract the first five characters from each zip code in the restaurants data, and add it to our dataset.\n\nlibrary(dplyr)\nrestaurants$ZIP_5 &lt;- substr(restaurants$`Zip Code`, 1, 5) \nrestaurants %&gt;% \n  distinct(ZIP_5) %&gt;% \n  head()\n\n# A tibble: 6 × 1\n  ZIP_5\n  &lt;chr&gt;\n1 98105\n2 98103\n3 98104\n4 98109\n5 98101\n6 98052"
  },
  {
    "objectID": "Lectures/Lecture8/CSSS508_Lecture8.html#paste",
    "href": "Lectures/Lecture8/CSSS508_Lecture8.html#paste",
    "title": "",
    "section": "paste()",
    "text": "paste()\nWe combine strings together using paste(). By default, it puts a space between different strings.\n\nFor example, we can combine \"Victoria\" and \"Sass\" as follows:\n\npaste(\"Victoria\", \"Sass\")\n\n[1] \"Victoria Sass\""
  },
  {
    "objectID": "Lectures/Lecture8/CSSS508_Lecture8.html#more-complex-paste-commands",
    "href": "Lectures/Lecture8/CSSS508_Lecture8.html#more-complex-paste-commands",
    "title": "",
    "section": "More complex paste() commands",
    "text": "More complex paste() commands\nThere are two additional common arguments to use with paste():\n\n\nsep = controls what separates vectors, entry-wise\n\ncollapse = controls if/how multiple outputs are collapsed into a single string.\n\n\nExamples:\n\npaste(\"CSSS\", \"508\", sep = \"_\")\n\n[1] \"CSSS_508\"\n\npaste(c(\"CSSS\", \"STAT\"), \"508\", sep = \"_\")\n\n[1] \"CSSS_508\" \"STAT_508\"\n\npaste(c(\"CSSS\", \"STAT\"), \"508\", sep = \"_\", collapse = \" , \")\n\n[1] \"CSSS_508 , STAT_508\"\n\n\nWhen do we get one string as output vs. two?"
  },
  {
    "objectID": "Lectures/Lecture8/CSSS508_Lecture8.html#paste-1",
    "href": "Lectures/Lecture8/CSSS508_Lecture8.html#paste-1",
    "title": "",
    "section": "paste()",
    "text": "paste()\nLet’s use paste() to create complete mailing addresses for each restaurant:\n\n\nrestaurants$mailing_address &lt;- paste(restaurants$Address, \", \", restaurants$City, \n                                     \", WA \", restaurants$ZIP_5, sep = \"\")\nrestaurants %&gt;% \n  distinct(mailing_address) %&gt;% \n  head()\n\n# A tibble: 6 × 1\n  mailing_address                                  \n  &lt;chr&gt;                                            \n1 2746 NE 45TH ST, SEATTLE, WA 98105               \n2 1906 N 34TH ST, SEATTLE, WA 98103                \n3 122 2ND AVE S, SEATTLE, WA 98104                 \n4 1001 FAIRVIEW AVE N Unit 1700A, SEATTLE, WA 98109\n5 1225 1ST AVE, SEATTLE, WA 98101                  \n6 15364 NE 96TH PL, REDMOND, WA 98052"
  },
  {
    "objectID": "Lectures/Lecture8/CSSS508_Lecture8.html#stringr",
    "href": "Lectures/Lecture8/CSSS508_Lecture8.html#stringr",
    "title": "",
    "section": "stringr",
    "text": "stringr\nstringr is yet another R package from the Tidyverse (like ggplot2, dplyr, tidyr, lubridate, readr).\n\nIt provides TONS of functions for working with strings:\n\nSome are equivalent/better versions of Base R functions\nSome can do fancier tricks with strings\n\n\n\nMost stringr functions begin with “str_” to make RStudio auto-complete more useful.\n\n\nWe’ll cover the basics today, but know there’s much more out there!\n\nlibrary(stringr)"
  },
  {
    "objectID": "Lectures/Lecture8/CSSS508_Lecture8.html#equivalencies-str_length",
    "href": "Lectures/Lecture8/CSSS508_Lecture8.html#equivalencies-str_length",
    "title": "",
    "section": "Equivalencies: str_length()\n",
    "text": "Equivalencies: str_length()\n\nstr_length() is equivalent to nchar():\n\nnchar(\"weasels\")\n\n[1] 7\n\nstr_length(\"weasels\")\n\n[1] 7"
  },
  {
    "objectID": "Lectures/Lecture8/CSSS508_Lecture8.html#equivalencies-str_sub",
    "href": "Lectures/Lecture8/CSSS508_Lecture8.html#equivalencies-str_sub",
    "title": "",
    "section": "Equivalencies: str_sub()\n",
    "text": "Equivalencies: str_sub()\n\nstr_sub() is like substr():\n\nstr_sub(\"Washington\", 2, 4)\n\n[1] \"ash\"\n\n\n\nstr_sub() also lets you put in negative values to count backwards from the end (-1 is the end, -3 is third from end):\n\nstr_sub(\"Washington\", 4, -3)\n\n[1] \"hingt\""
  },
  {
    "objectID": "Lectures/Lecture8/CSSS508_Lecture8.html#equivalencies-str_c",
    "href": "Lectures/Lecture8/CSSS508_Lecture8.html#equivalencies-str_c",
    "title": "",
    "section": "Equivalencies: str_c()\n",
    "text": "Equivalencies: str_c()\n\nstr_c() (“string combine”) is just like paste() but where the default is sep = \"\" (no space!)\n\nstr_c(c(\"CSSS\",\"STAT\"), 508)\n\n[1] \"CSSS508\" \"STAT508\"\n\nstr_c(c(\"CSSS\",\"STAT\"), 508, sep = \" \")\n\n[1] \"CSSS 508\" \"STAT 508\"\n\nstr_c(c(\"CSSS\",\"STAT\"), 508, sep = \" \", collapse = \", \")\n\n[1] \"CSSS 508, STAT 508\""
  },
  {
    "objectID": "Lectures/Lecture8/CSSS508_Lecture8.html#changing-cases",
    "href": "Lectures/Lecture8/CSSS508_Lecture8.html#changing-cases",
    "title": "",
    "section": "Changing Cases",
    "text": "Changing Cases\nstr_to_upper(), str_to_lower(), str_to_title() convert cases, which is often a good idea to do before searching for values:\n\nunique_cities &lt;- unique(restaurants$City)\nunique_cities %&gt;% \n  head()\n\n[1] \"SEATTLE\" \"REDMOND\" \"KENT\"    \"KENMORE\" \"Seattle\" \"RENTON\" \n\nstr_to_upper(unique_cities) %&gt;% \n  head()\n\n[1] \"SEATTLE\" \"REDMOND\" \"KENT\"    \"KENMORE\" \"SEATTLE\" \"RENTON\" \n\nstr_to_lower(unique_cities) %&gt;% \n  head()\n\n[1] \"seattle\" \"redmond\" \"kent\"    \"kenmore\" \"seattle\" \"renton\" \n\nstr_to_title(unique_cities) %&gt;% \n  head()\n\n[1] \"Seattle\" \"Redmond\" \"Kent\"    \"Kenmore\" \"Seattle\" \"Renton\""
  },
  {
    "objectID": "Lectures/Lecture8/CSSS508_Lecture8.html#whitespace-str_trim",
    "href": "Lectures/Lecture8/CSSS508_Lecture8.html#whitespace-str_trim",
    "title": "",
    "section": "Whitespace: str_trim()\n",
    "text": "Whitespace: str_trim()\n\nExtra leading or trailing whitespace is common in text data:\n\nunique_names &lt;- unique(restaurants$Name)\nunique_names %&gt;% \n  head(3)\n\n[1] \"#807 TUTTA BELLA\" \"+MAS CAFE\"        \"?al?al Cafe\"     \n\n\nWe can remove the whitespace using str_trim():\n\nstr_trim(unique_names) %&gt;% \n  head(3)\n\n[1] \"#807 TUTTA BELLA\" \"+MAS CAFE\"        \"?al?al Cafe\""
  },
  {
    "objectID": "Lectures/Lecture8/CSSS508_Lecture8.html#patterns",
    "href": "Lectures/Lecture8/CSSS508_Lecture8.html#patterns",
    "title": "",
    "section": "Patterns!",
    "text": "Patterns!\nIt’s common to want to see if a string satisfies a certain pattern.\n\nWe did this with numeric values earlier in this course!\n\ncars %&gt;% \n  filter(speed &lt; 5 | speed &gt; 24)\n\n  speed dist\n1     4    2\n2     4   10\n3    25   85\n\ncars %&gt;% \n  filter(dist &gt; 2 & dist &lt;= 10)\n\n  speed dist\n1     4   10\n2     7    4\n3     9   10"
  },
  {
    "objectID": "Lectures/Lecture8/CSSS508_Lecture8.html#patterns-str_detect",
    "href": "Lectures/Lecture8/CSSS508_Lecture8.html#patterns-str_detect",
    "title": "",
    "section": "Patterns: str_detect()\n",
    "text": "Patterns: str_detect()\n\nWe can do similar pattern-checking using str_detect():\n\nstr_detect(string, pattern)\n\n\n\nstring is the character string (or vector of strings) we want to examine\n\npattern is the pattern that we’re checking for inside string\n\nOutput: TRUE/FALSE vector indicating if pattern was found\n\n\n\nstr_detect(string = c(\"Hello\", \"my middle name\", \"is Anne\"),\n           pattern = \"a\")\n\n[1] FALSE  TRUE FALSE\n\nstr_detect(string = c(\"Hello\", \"my middle name\", \"is Anne\"),\n           pattern = \"A\")\n\n[1] FALSE FALSE  TRUE\n\n\nResults are case-sensitive!!"
  },
  {
    "objectID": "Lectures/Lecture8/CSSS508_Lecture8.html#patterns-str_detect-1",
    "href": "Lectures/Lecture8/CSSS508_Lecture8.html#patterns-str_detect-1",
    "title": "",
    "section": "Patterns: str_detect()\n",
    "text": "Patterns: str_detect()\n\nLet’s see which phone numbers are in the 206 area code:\n\nunique_phones &lt;- unique(restaurants$Phone)\nunique_phones %&gt;% tail(4)\n\n[1] \"(206) 257-0857\" \"(206) 390-9205\" \"(415) 385-1379\" \"(206) 779-0528\"\n\nstr_detect(unique_phones, \"206\") %&gt;% tail(4)\n\n[1]  TRUE  TRUE FALSE  TRUE"
  },
  {
    "objectID": "Lectures/Lecture8/CSSS508_Lecture8.html#replacement-str_replace",
    "href": "Lectures/Lecture8/CSSS508_Lecture8.html#replacement-str_replace",
    "title": "",
    "section": "Replacement: str_replace()\n",
    "text": "Replacement: str_replace()\n\nWhat about if you want to replace a string with something else? Use str_replace()!\n\nThis function works very similarly to str_detect(), but with one extra argument:\n\nstr_replace(string, pattern, replacement)\n\n\n\nreplacement is what pattern is substituted for.\n\n\n\n\nstr_replace(string = \"Hi, I'm Vic\",\n            pattern = \"Hi\", replacement = \"Hello\")\n\n[1] \"Hello, I'm Vic\""
  },
  {
    "objectID": "Lectures/Lecture8/CSSS508_Lecture8.html#replacement-str_replace-1",
    "href": "Lectures/Lecture8/CSSS508_Lecture8.html#replacement-str_replace-1",
    "title": "",
    "section": "Replacement: str_replace()\n",
    "text": "Replacement: str_replace()\n\nIn the Date variable, let’s replace each dash (“-”) with an underscore (“_“)\n\ndates &lt;- restaurants$`Inspection Date`\ndates %&gt;% \n  tail(3)\n\n[1] \"01/23/2023\" \"01/23/2023\" \"07/28/2022\"\n\nstr_replace(dates, \"/\", \"_\") %&gt;% \n  tail(3)\n\n[1] \"01_23/2023\" \"01_23/2023\" \"07_28/2022\"\n\n\nWait, what?"
  },
  {
    "objectID": "Lectures/Lecture8/CSSS508_Lecture8.html#replacement-str_replace_all",
    "href": "Lectures/Lecture8/CSSS508_Lecture8.html#replacement-str_replace_all",
    "title": "",
    "section": "Replacement: str_replace_all()\n",
    "text": "Replacement: str_replace_all()\n\nstr_replace() only changes the first instance of a pattern in each string!\n\nIf we want to replace all patterns, use str_replace_all()\n\ndates &lt;- restaurants$`Inspection Date`\ndates %&gt;% tail(3)\n\n[1] \"01/23/2023\" \"01/23/2023\" \"07/28/2022\"\n\nstr_replace_all(dates, \"/\", \"_\") %&gt;% \n  tail(3)\n\n[1] \"01_23_2023\" \"01_23_2023\" \"07_28_2022\""
  },
  {
    "objectID": "Lectures/Lecture8/CSSS508_Lecture8.html#activity-answers",
    "href": "Lectures/Lecture8/CSSS508_Lecture8.html#activity-answers",
    "title": "",
    "section": "Activity: Answers",
    "text": "Activity: Answers\nThe variable Inspection_Date is in the format “MM/DD/YYYY”. In this question, we’ll change the format using functions for strings.\n\nHow long is each character string in this variable?\n\n\ntable(nchar(restaurants$`Inspection Date`))\n\n\n    10 \n254624 \n\n\n\n\nUse substr() to extract the month of each entry and save it to an object called “months”\n\n\nmonths &lt;- substr(restaurants$`Inspection Date`, 1, 2)\nmonths |&gt; \n  head(5)\n\n[1] \"03\" \"03\" \"08\" \"08\" \"01\""
  },
  {
    "objectID": "Lectures/Lecture8/CSSS508_Lecture8.html#activity-answers-1",
    "href": "Lectures/Lecture8/CSSS508_Lecture8.html#activity-answers-1",
    "title": "",
    "section": "Activity: Answers",
    "text": "Activity: Answers\n\nUse substr() to extract the year of each entry and save it to an object called “years”\n\n\nyears &lt;- substr(restaurants$`Inspection Date`, 7, 10)\nyears |&gt; \n  head(5)\n\n[1] \"2023\" \"2023\" \"2022\" \"2022\" \"2022\"\n\n\n\n\nUse paste() to combine each month and year, separated by an underscore (_). Save this as a new variable in the data called “Inspection_Date_Formatted”\n\n\nrestaurants$Inspection_Date_Formatted &lt;- paste(months, years, sep = \"_\")\n\nrestaurants %&gt;% \n  select(Name, `Inspection Date`, Inspection_Date_Formatted) %&gt;%\n  head(5)\n\n# A tibble: 5 × 3\n  Name             `Inspection Date` Inspection_Date_Formatted\n  &lt;chr&gt;            &lt;chr&gt;             &lt;chr&gt;                    \n1 #807 TUTTA BELLA 03/02/2023        03_2023                  \n2 #807 TUTTA BELLA 03/02/2023        03_2023                  \n3 #807 TUTTA BELLA 08/31/2022        08_2022                  \n4 #807 TUTTA BELLA 08/31/2022        08_2022                  \n5 #807 TUTTA BELLA 01/13/2022        01_2022"
  },
  {
    "objectID": "Lectures/Lecture8/CSSS508_Lecture8.html#activity-solutions",
    "href": "Lectures/Lecture8/CSSS508_Lecture8.html#activity-solutions",
    "title": "",
    "section": "Activity: Solutions",
    "text": "Activity: Solutions\n1. Filter your data to only include rows in which the Name includes the word “coffee” (in any case!)\n\ncoffee &lt;- restaurants\ncoffee$Name &lt;- str_to_lower(coffee$Name)\ncoffee &lt;- coffee %&gt;% \n  filter(str_detect(Name, \"coffee\"))\ncoffee |&gt; \n  head(5)\n\n# A tibble: 5 × 25\n  Name          `Program Identifier` `Inspection Date` Description Address City \n  &lt;chr&gt;         &lt;chr&gt;                &lt;chr&gt;             &lt;chr&gt;       &lt;chr&gt;   &lt;chr&gt;\n1 203 degrees … 203 DEGREES FAHRENH… 06/08/2023        Seating 13… 11901 … KIRK…\n2 203 degrees … 203 DEGREES FAHRENH… 06/08/2023        Seating 13… 11901 … KIRK…\n3 203 degrees … 203 DEGREES FAHRENH… 01/26/2022        Seating 13… 11901 … KIRK…\n4 203 degrees … 203 DEGREES FAHRENH… 08/11/2021        Seating 13… 11901 … KIRK…\n5 203 degrees … 203 DEGREES FAHRENH… 01/23/2020        Seating 13… 11901 … KIRK…\n# ℹ 19 more variables: `Zip Code` &lt;dbl&gt;, Phone &lt;chr&gt;, Longitude &lt;dbl&gt;,\n#   Latitude &lt;dbl&gt;, `Inspection Business Name` &lt;chr&gt;, `Inspection Type` &lt;chr&gt;,\n#   `Inspection Score` &lt;dbl&gt;, `Inspection Result` &lt;chr&gt;,\n#   `Inspection Closed Business` &lt;lgl&gt;, `Violation Type` &lt;chr&gt;,\n#   `Violation Description` &lt;chr&gt;, `Violation Points` &lt;dbl&gt;, Business_ID &lt;chr&gt;,\n#   Inspection_Serial_Num &lt;chr&gt;, Violation_Record_ID &lt;chr&gt;, Grade &lt;dbl&gt;,\n#   ZIP_5 &lt;chr&gt;, mailing_address &lt;chr&gt;, Inspection_Date_Formatted &lt;chr&gt;"
  },
  {
    "objectID": "Lectures/Lecture8/CSSS508_Lecture8.html#activity-solutions-1",
    "href": "Lectures/Lecture8/CSSS508_Lecture8.html#activity-solutions-1",
    "title": "",
    "section": "Activity: Solutions",
    "text": "Activity: Solutions\n2.Create a new variable in your data which includes the length of the business name, after removing beginning/trailing whitespace.\n\ncoffee$NameLength &lt;- str_length(str_trim(coffee$Name))\ncoffee |&gt; \n  select(Name, NameLength) |&gt; \n  slice(1:10)\n\n# A tibble: 10 × 2\n   Name                          NameLength\n   &lt;chr&gt;                              &lt;int&gt;\n 1 203 degrees fahrenheit coffee         29\n 2 203 degrees fahrenheit coffee         29\n 3 203 degrees fahrenheit coffee         29\n 4 203 degrees fahrenheit coffee         29\n 5 203 degrees fahrenheit coffee         29\n 6 203 degrees fahrenheit coffee         29\n 7 909 coffee and wine                   19\n 8 909 coffee and wine                   19\n 9 909 coffee and wine                   19\n10 909 coffee and wine                   19"
  },
  {
    "objectID": "Lectures/Lecture8/CSSS508_Lecture8.html#activity-solutions-2",
    "href": "Lectures/Lecture8/CSSS508_Lecture8.html#activity-solutions-2",
    "title": "",
    "section": "Activity: Solutions",
    "text": "Activity: Solutions\n3. Create a new variable in your data for the inspection year.\n\ncoffee$Year &lt;- str_sub(coffee$`Inspection Date`,-4,-1)\ncoffee$Year |&gt; \n  head(5)\n\n[1] \"2023\" \"2023\" \"2022\" \"2021\" \"2020\""
  },
  {
    "objectID": "Lectures/Lecture8/CSSS508_Lecture8.html#activity-solutions-3",
    "href": "Lectures/Lecture8/CSSS508_Lecture8.html#activity-solutions-3",
    "title": "",
    "section": "Activity: Solutions",
    "text": "Activity: Solutions\n4. Create side-by-side boxplots for the length of business name vs. year.\n\nlibrary(ggplot2)\nggplot(coffee, aes(Year, NameLength)) + \n  geom_boxplot()"
  },
  {
    "objectID": "Lectures/Lecture8/CSSS508_Lecture8.html#activity-solutions-4",
    "href": "Lectures/Lecture8/CSSS508_Lecture8.html#activity-solutions-4",
    "title": "",
    "section": "Activity: Solutions",
    "text": "Activity: Solutions\n5. Calculate the maximum Inspection Score by business and year.\n\ncoffee_summary &lt;- coffee %&gt;% \n  group_by(Name, Year) %&gt;% \n  summarize(MaxScore = max(`Inspection Score`))\ncoffee_summary |&gt; \n  head(5)\n\n# A tibble: 5 × 3\n# Groups:   Name [1]\n  Name                          Year  MaxScore\n  &lt;chr&gt;                         &lt;chr&gt;    &lt;dbl&gt;\n1 203 degrees fahrenheit coffee 2019         0\n2 203 degrees fahrenheit coffee 2020        10\n3 203 degrees fahrenheit coffee 2021         0\n4 203 degrees fahrenheit coffee 2022         0\n5 203 degrees fahrenheit coffee 2023        15"
  },
  {
    "objectID": "Lectures/Lecture8/CSSS508_Lecture8.html#due-dates",
    "href": "Lectures/Lecture8/CSSS508_Lecture8.html#due-dates",
    "title": "Roadmap",
    "section": "Due dates",
    "text": "Due dates\n\n\n\n\n\n\n  \n    \n    \n      #\n      \n        Section AA\n      \n      \n        Section AB\n      \n    \n    \n      Homework Due\n      Peer Review Due\n      Homework Due\n      Peer Review Due\n    \n  \n  \n    1\n10 October\n15 October\n12 October\n17 October\n    2\n17 October\n22 October\n19 October\n24 October\n    3\n24 October\n29 October\n26 October\n31 October\n    4\n31 October\n5 November\n2 November\n7 November\n    5\n7 November\n12 November\n9 November\n14 November\n    6\n14 November\n19 November\n16 November\n21 November\n    7\n21 November\n26 November\n23 November\n28 November\n    8\n28 November\n3 November\n30 November\n5 November\n    9\n5 December\n10 December\n7 December\n12 December"
  },
  {
    "objectID": "Lectures/Lecture8/CSSS508_Lecture8.html#quick-summary",
    "href": "Lectures/Lecture8/CSSS508_Lecture8.html#quick-summary",
    "title": "",
    "section": "Quick Summary",
    "text": "Quick Summary\nWe’ve seen lots of functions today!\nDon’t try to memorize them! Instead, use this page as a reference.\n\nCharacter Length: nchar and str_length\n\nSubsetting: substr and str_sub\n\nCombining: paste and str_c\n\nCase Changes: str_to_upper(), str_to_lower(), and str_to_title()\n\nRemoving Whitespace: str_trim\n\nPattern Detection/Replacement: str_detect() and str_replace()"
  },
  {
    "objectID": "Lectures/Lecture8/CSSS508_Lecture8.html#activity-1-base-r-functions",
    "href": "Lectures/Lecture8/CSSS508_Lecture8.html#activity-1-base-r-functions",
    "title": "",
    "section": "Activity 1: Base R Functions",
    "text": "Activity 1: Base R Functions\nThe variable Inspection Date is in the format “MM/DD/YYYY”. In this question, we’ll change the format using functions for strings.\n\nHow long is each character string in this variable?\nUse substr() to extract the month of each entry and save it to an object called “months”\nUse substr() to extract the year of each entry and save it to an object called “years”\nUse paste() to combine each month and year, separated by an underscore (_). Save this as a new variable in the data called “Inspection_Date_Formatted”"
  },
  {
    "objectID": "Lectures/Lecture8/CSSS508_Lecture8.html#activity-2-hw-8",
    "href": "Lectures/Lecture8/CSSS508_Lecture8.html#activity-2-hw-8",
    "title": "",
    "section": "Activity 2: HW 8",
    "text": "Activity 2: HW 8\nLet’s examine the coffee shops of King County!\n\nFilter your data to only include rows in which the Name includes the word “coffee” (in any case!)\n\n2.. Create a new variable in your data which includes the length of the business name, after removing beginning/trailing whitespace.\n\nCreate a new variable in your data for the inspection year, using a stringr function!\nCreate side-by-side boxplots for the length of business name vs. year.\nCalculate the maximum Inspection Score by business and year.\nCreate a line plot of maximum score (“MaxScore”) over time (“Year”), by business (“Name”). That is, you should have a single line for each business. (Don’t try to label them, as there are far too many!)"
  },
  {
    "objectID": "Lectures/Lecture8/CSSS508_Lecture8.html#activity-solutions-5",
    "href": "Lectures/Lecture8/CSSS508_Lecture8.html#activity-solutions-5",
    "title": "",
    "section": "Activity: Solutions",
    "text": "Activity: Solutions\n6. Create a line plot of maximum score (“MaxScore”) over time (“Year”), by business (“Name”). That is, you should have a single line for each business. (Don’t try to label them, as there are far too many!)\n\nggplot(coffee_summary, aes(Year, MaxScore, group = Name)) +\n  geom_line(alpha = .2)"
  },
  {
    "objectID": "Lectures/Lecture11/CSSS508_Lecture11.html#topics-for-today",
    "href": "Lectures/Lecture11/CSSS508_Lecture11.html#topics-for-today",
    "title": "",
    "section": "Topics for Today",
    "text": "Topics for Today\nWorking with Model Results\n\nTidy model output with broom\n\nVisualizing models with ggeffects\n\nTables with gt, modelsummary, and gtsummary\n\n\nReproducible Research\nBest Practices\n\nOrganization\nPortability\nVersion Control\n\nWrapping up the course"
  },
  {
    "objectID": "Lectures/Lecture11/CSSS508_Lecture11.html#broom",
    "href": "Lectures/Lecture11/CSSS508_Lecture11.html#broom",
    "title": "",
    "section": "broom",
    "text": "broom\nbroom is a package that “tidies up” the output from models such a lm() and glm().\nIt has a small number of key functions:\n\n\ntidy() - Creates a dataframe summary of a model.\n\naugment() - Adds columns—such as fitted values—to the data used in the model.\n\nglance() - Provides one row of fit statistics for models.\n\n\nlibrary(broom)"
  },
  {
    "objectID": "Lectures/Lecture11/CSSS508_Lecture11.html#model-output-is-a-list",
    "href": "Lectures/Lecture11/CSSS508_Lecture11.html#model-output-is-a-list",
    "title": "",
    "section": "Model Output is a List",
    "text": "Model Output is a List\nlm() and summary() produce lists as output, which cannot go directly into tidyverse functions, particularly those in ggplot2.\n\nlm_1 &lt;- lm(yn ~ num1 + fac1, data = ex_dat)\nsummary(lm_1)\n\n\nCall:\nlm(formula = yn ~ num1 + fac1, data = ex_dat)\n\nResiduals:\n   Min     1Q Median     3Q    Max \n-7.580 -2.077  0.259  1.981  6.967 \n\nCoefficients:\n            Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)   1.1987     0.3803   3.152  0.00187 ** \nnum1          0.6335     0.1129   5.609 6.85e-08 ***\nfac1B         0.9209     0.4924   1.870  0.06297 .  \nfac1C         1.5672     0.5306   2.954  0.00353 ** \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 2.91 on 196 degrees of freedom\nMultiple R-squared:  0.1599,    Adjusted R-squared:  0.1471 \nF-statistic: 12.44 on 3 and 196 DF,  p-value: 1.761e-07\n...."
  },
  {
    "objectID": "Lectures/Lecture11/CSSS508_Lecture11.html#model-output-varies",
    "href": "Lectures/Lecture11/CSSS508_Lecture11.html#model-output-varies",
    "title": "",
    "section": "Model Output Varies!",
    "text": "Model Output Varies!\nEach type of model also produces somewhat different output, so you can’t just reuse the same code to handle output from every model.\n\nglm_1 &lt;- glm(yb ~ num1 + fac1, data = ex_dat, family=binomial(link=\"logit\"))\nsummary(glm_1)\n\n\nCall:\nglm(formula = yb ~ num1 + fac1, family = binomial(link = \"logit\"), \n    data = ex_dat)\n\nCoefficients:\n            Estimate Std. Error z value Pr(&gt;|z|)    \n(Intercept) -0.35422    0.27145  -1.305 0.191922    \nnum1         0.29497    0.08603   3.429 0.000606 ***\nfac1B        0.34270    0.35176   0.974 0.329934    \nfac1C        0.58759    0.37999   1.546 0.122025    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n(Dispersion parameter for binomial family taken to be 1)\n\n    Null deviance: 275.64  on 199  degrees of freedom\nResidual deviance: 261.33  on 196  degrees of freedom\nAIC: 269.33\n\n...."
  },
  {
    "objectID": "Lectures/Lecture11/CSSS508_Lecture11.html#broomtidy",
    "href": "Lectures/Lecture11/CSSS508_Lecture11.html#broomtidy",
    "title": "",
    "section": "broom::tidy()",
    "text": "broom::tidy()\ntidy() produces similar output, but as a dataframe.\n\nlm_1 %&gt;% tidy()\n\n# A tibble: 4 × 5\n  term        estimate std.error statistic      p.value\n  &lt;chr&gt;          &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;        &lt;dbl&gt;\n1 (Intercept)    1.20      0.380      3.15 0.00187     \n2 num1           0.634     0.113      5.61 0.0000000685\n3 fac1B          0.921     0.492      1.87 0.0630      \n4 fac1C          1.57      0.531      2.95 0.00353     \n\n\nEach type of model (e.g. glm, lmer) has a different method with its own additional arguments. See ?tidy.lm for an example."
  },
  {
    "objectID": "Lectures/Lecture11/CSSS508_Lecture11.html#broomtidy-1",
    "href": "Lectures/Lecture11/CSSS508_Lecture11.html#broomtidy-1",
    "title": "",
    "section": "broom::tidy()",
    "text": "broom::tidy()\nThis output is also completely identical between different models.\nThis can be very useful and important if running models with different test statistics… or just running a lot of models!\n\nglm_1 %&gt;% tidy()\n\n# A tibble: 4 × 5\n  term        estimate std.error statistic  p.value\n  &lt;chr&gt;          &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;\n1 (Intercept)   -0.354    0.271     -1.30  0.192   \n2 num1           0.295    0.0860     3.43  0.000606\n3 fac1B          0.343    0.352      0.974 0.330   \n4 fac1C          0.588    0.380      1.55  0.122"
  },
  {
    "objectID": "Lectures/Lecture11/CSSS508_Lecture11.html#broomglance",
    "href": "Lectures/Lecture11/CSSS508_Lecture11.html#broomglance",
    "title": "",
    "section": "broom::glance()",
    "text": "broom::glance()\nglance() produces dataframes of fit statistics for models.\nIf you run many models, you can compare each model row-by-row in each column… or even plot their different fit statistics to allow holistic comparison.\n\nglance(lm_1)\n\n# A tibble: 1 × 12\n  r.squared adj.r.squared sigma statistic     p.value    df logLik   AIC   BIC\n      &lt;dbl&gt;         &lt;dbl&gt; &lt;dbl&gt;     &lt;dbl&gt;       &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1     0.160         0.147  2.91      12.4 0.000000176     3  -495. 1001. 1017.\n# ℹ 3 more variables: deviance &lt;dbl&gt;, df.residual &lt;int&gt;, nobs &lt;int&gt;"
  },
  {
    "objectID": "Lectures/Lecture11/CSSS508_Lecture11.html#broomaugment",
    "href": "Lectures/Lecture11/CSSS508_Lecture11.html#broomaugment",
    "title": "",
    "section": "broom::augment()",
    "text": "broom::augment()\naugment() takes values generated by a model and adds them back to the original data. This includes fitted values, residuals, and leverage statistics.\n\naugment(lm_1) %&gt;% \n  head()\n\n# A tibble: 6 × 9\n      yn   num1 fac1  .fitted .resid   .hat .sigma   .cooksd .std.resid\n   &lt;dbl&gt;  &lt;dbl&gt; &lt;fct&gt;   &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;     &lt;dbl&gt;      &lt;dbl&gt;\n1 -2.19  -0.189 B       2.00  -4.19  0.0155   2.90 0.00828      -1.45  \n2  2.83   1.52  A       2.16   0.672 0.0161   2.92 0.000221      0.233 \n3 -1.55   0.129 A       1.28  -2.83  0.0167   2.91 0.00408      -0.979 \n4 -3.20  -2.82  C       0.979 -4.18  0.0317   2.90 0.0175       -1.46  \n5 -0.448 -0.260 C       2.60  -3.05  0.0174   2.91 0.00496      -1.06  \n6  1.78   1.14  A       1.92  -0.146 0.0157   2.92 0.0000102    -0.0506\n\n\nSee ?augment.lm for examples of what augment() can do."
  },
  {
    "objectID": "Lectures/Lecture11/CSSS508_Lecture11.html#the-power-of-broom",
    "href": "Lectures/Lecture11/CSSS508_Lecture11.html#the-power-of-broom",
    "title": "",
    "section": "The Power of broom\n",
    "text": "The Power of broom\n\nThe real advantage of broom becomes apparent when running many models at once. Here we run separate models for each level of fac1:\n\nex_dat %&gt;% \n  nest_by(fac1) %&gt;% #&lt;&lt;\n  mutate(model = list(lm(yn ~  num1 + fac2, data = data))) %&gt;%  \n  summarize(tidy(model), .groups = \"drop\")\n\n# A tibble: 9 × 6\n  fac1  term        estimate std.error statistic    p.value\n  &lt;fct&gt; &lt;chr&gt;          &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;      &lt;dbl&gt;\n1 A     (Intercept)    0.595     0.489      1.22 0.228     \n2 A     num1           0.812     0.211      3.85 0.000286  \n3 A     fac2No         1.05      0.739      1.43 0.159     \n4 B     (Intercept)    1.57      0.641      2.46 0.0163    \n5 B     num1           0.464     0.182      2.55 0.0128    \n6 B     fac2No         1.17      0.757      1.55 0.126     \n7 C     (Intercept)    2.23      0.412      5.41 0.00000136\n8 C     num1           0.654     0.191      3.43 0.00112   \n9 C     fac2No         1.20      0.636      1.89 0.0642    \n\n\n\n\nnest_by() nests data into a list column by levels of fac1."
  },
  {
    "objectID": "Lectures/Lecture11/CSSS508_Lecture11.html#geom_smooth",
    "href": "Lectures/Lecture11/CSSS508_Lecture11.html#geom_smooth",
    "title": "",
    "section": "geom_smooth()",
    "text": "geom_smooth()\nI have used geom_smooth() in many past examples.\ngeom_smooth() generates “smoothed conditional means” including loess curves and generalized additive models (GAMs).\n\nNote, however, that most regression models are conditional mean models, such as ordinary least squares and generalized linear models.\n\n\nWe can use geom_smooth() to add a layer depicting common bivariate models.\nWe’ll look at this with the gapminder data from Week 2.\n\nlibrary(gapminder)"
  },
  {
    "objectID": "Lectures/Lecture11/CSSS508_Lecture11.html#more-complex-models",
    "href": "Lectures/Lecture11/CSSS508_Lecture11.html#more-complex-models",
    "title": "",
    "section": "More Complex Models",
    "text": "More Complex Models\nWhat if we want something more complex than a bivariate model?\nWhat if we have a statistically complex model, like nonlinear probability model or multilevel model?\nWe need to go beyond geom_smooth()!"
  },
  {
    "objectID": "Lectures/Lecture11/CSSS508_Lecture11.html#but-first-vocab",
    "href": "Lectures/Lecture11/CSSS508_Lecture11.html#but-first-vocab",
    "title": "",
    "section": "But first, vocab!",
    "text": "But first, vocab!\nWe are often interested in what might happen if some variables take particular values, often ones not seen in the actual data.\n\nWhen we set variables to certain values, we refer to them as counterfactual values or just counterfactuals.\n\n\nFor example, if we know nothing about a new observation, our prediction for that estimate is often based on assuming every variable is at its mean.\n\n\nSometimes, however, we might have very specific questions which require setting (possibly many) combinations of variables to particular values and making an estimate or prediction.\n\n\nProviding specific estimates, conditional on values of covariates, is a nice way to summarize results, particularly for models with unintuitive parameters (e.g. logit models)."
  },
  {
    "objectID": "Lectures/Lecture11/CSSS508_Lecture11.html#ggeffects-1",
    "href": "Lectures/Lecture11/CSSS508_Lecture11.html#ggeffects-1",
    "title": "",
    "section": "ggeffects",
    "text": "ggeffects\nIf we want to look at more complex models, we can use ggeffects to create and plot tidy marginal effects.\nThat is, tidy dataframes of ranges of predicted values that can be fed straight into ggplot2 for plotting model results.\nWe will focus on two ggeffects functions:\n\n\nggpredict() - Computes predicted values for the outcome variable at margins of specific variables.\n\nplot.ggeffects() - A plot method for ggeffects objects (like ggpredict() output)\n\n\nlibrary(ggeffects)"
  },
  {
    "objectID": "Lectures/Lecture11/CSSS508_Lecture11.html#quick-simulated-data",
    "href": "Lectures/Lecture11/CSSS508_Lecture11.html#quick-simulated-data",
    "title": "",
    "section": "Quick Simulated Data",
    "text": "Quick Simulated Data\nTo best show off ggeffects, I need a data frame with numeric and categorical variables with strong relationships. It is easiest to just simulate it:\n\nex_dat &lt;- data.frame(num1 = rnorm(200, 1, 2), \n                     fac1 = sample(c(1, 2, 3), 200, TRUE),\n                     num2 = rnorm(200, 0, 3),\n                     fac2 = sample(c(1, 2))) %&gt;%\n  mutate(yn = num1 * 0.5 + fac1 * 1.1 + num2 * 0.7 +\n              fac2 - 1.5  + rnorm(200, 0, 2)) %&gt;% \n  mutate(yb = as.numeric(yn &gt; mean(yn))) %&gt;%\n  mutate(fac1 = factor(fac1, labels = c(\"A\", \"B\", \"C\")),\n         fac2 = factor(fac2, labels = c(\"Yes\", \"No\")))\nglimpse(ex_dat)\n\nRows: 200\nColumns: 6\n$ num1 &lt;dbl&gt; -0.2412843, 3.0198857, -1.7444404, 1.6478446, -0.6613235, 1.97802…\n$ fac1 &lt;fct&gt; A, C, A, A, A, B, C, B, A, C, A, A, B, B, C, B, B, A, A, B, C, B,…\n$ num2 &lt;dbl&gt; 3.19094580, -1.54205858, -0.63284705, 3.93564842, 2.38839013, -5.…\n$ fac2 &lt;fct&gt; No, Yes, No, Yes, No, Yes, No, Yes, No, Yes, No, Yes, No, Yes, No…\n$ yn   &lt;dbl&gt; 4.276335557, 3.070201356, 3.750839566, 3.954848525, 2.197367467, …\n$ yb   &lt;dbl&gt; 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0,…\n\n\nNow we can get ggpredicting!"
  },
  {
    "objectID": "Lectures/Lecture11/CSSS508_Lecture11.html#ggpredict",
    "href": "Lectures/Lecture11/CSSS508_Lecture11.html#ggpredict",
    "title": "",
    "section": "ggpredict()",
    "text": "ggpredict()\nWhen you run ggpredict(), it produces a dataframe with a row for every unique value of a supplied predictor (“independent”) variable (term).\nEach row contains an expected (estimated) value for the outcome (“dependent”) variable, plus confidence intervals.\n\nlm_1 &lt;- lm(yn ~ num1 + fac1, data = ex_dat)\nlm_1_est &lt;- ggpredict(lm_1, terms = \"num1\")\n\nIf desired, the argument interval = \"prediction\" will give predicted intervals instead."
  },
  {
    "objectID": "Lectures/Lecture11/CSSS508_Lecture11.html#plot-for-ggpredict",
    "href": "Lectures/Lecture11/CSSS508_Lecture11.html#plot-for-ggpredict",
    "title": "",
    "section": "\nplot() for ggpredict()\n",
    "text": "plot() for ggpredict()\n\nggeffects features a plot() method, plot.ggeffects(), which produces a ggplot when you give plot() output from ggpredict().\n\nplot(lm_1_est)"
  },
  {
    "objectID": "Lectures/Lecture11/CSSS508_Lecture11.html#faceting-with-ggpredict",
    "href": "Lectures/Lecture11/CSSS508_Lecture11.html#faceting-with-ggpredict",
    "title": "",
    "section": "Faceting with ggpredict()\n",
    "text": "Faceting with ggpredict()\n\nYou can add facet = TRUE to the plot() call to facet over grouping terms.\n\nglm(yb ~ num1 + fac1 + num2 + fac2, data = ex_dat, family = binomial(link = \"logit\")) %&gt;%\n  ggpredict(terms = c(\"num1\", \"fac1\")) %&gt;% \n  plot(facet = TRUE)"
  },
  {
    "objectID": "Lectures/Lecture11/CSSS508_Lecture11.html#counterfactual-values",
    "href": "Lectures/Lecture11/CSSS508_Lecture11.html#counterfactual-values",
    "title": "",
    "section": "Counterfactual Values",
    "text": "Counterfactual Values\nYou can add values in square brackets in the terms = argument to specify counterfactual values.\n\nglm(yb ~ num1 + fac1 + num2 + fac2, data = ex_dat, family = binomial(link = \"logit\")) %&gt;%\n  ggpredict(terms = c(\"num1 [-1,0,1]\", \"fac1 [A,B]\")) %&gt;% plot(facet = TRUE)"
  },
  {
    "objectID": "Lectures/Lecture11/CSSS508_Lecture11.html#representative-values",
    "href": "Lectures/Lecture11/CSSS508_Lecture11.html#representative-values",
    "title": "",
    "section": "Representative Values",
    "text": "Representative Values\nYou can also use [meansd] or [minmax] to set representative values.\n\nglm(yb ~ num1 + fac1 + num2 + fac2, data = ex_dat, family = binomial(link = \"logit\")) %&gt;%\n  ggpredict(terms = c(\"num1 [meansd]\", \"num2 [minmax]\")) %&gt;% plot(facet = TRUE)"
  },
  {
    "objectID": "Lectures/Lecture11/CSSS508_Lecture11.html#dot-plots-with-ggpredict",
    "href": "Lectures/Lecture11/CSSS508_Lecture11.html#dot-plots-with-ggpredict",
    "title": "",
    "section": "Dot plots with ggpredict()\n",
    "text": "Dot plots with ggpredict()\n\nggpredict will produce dot plots with error bars for categorical predictors.\n\nlm(yn ~ fac1 + fac2, data = ex_dat) %&gt;% \n  ggpredict(terms = c(\"fac1\", \"fac2\")) %&gt;% \n  plot()"
  },
  {
    "objectID": "Lectures/Lecture11/CSSS508_Lecture11.html#notes-on-ggeffects",
    "href": "Lectures/Lecture11/CSSS508_Lecture11.html#notes-on-ggeffects",
    "title": "",
    "section": "Notes on ggeffects\n",
    "text": "Notes on ggeffects\n\nThere is a lot more to the ggeffects package that you can see in the package vignette and the github repository. This includes, but is not limited to:\n\nPredicted values for polynomial and interaction terms\nGetting predictions from models from dozens of other packages\nSending ggeffects objects to ggplot2 to freely modify plots"
  },
  {
    "objectID": "Lectures/Lecture11/CSSS508_Lecture11.html#pander-regression-tables",
    "href": "Lectures/Lecture11/CSSS508_Lecture11.html#pander-regression-tables",
    "title": "",
    "section": "\npander Regression Tables",
    "text": "pander Regression Tables\nWe’ve used pander to create nice tables for dataframes. But pander has methods to handle all sort of objects that you might want displayed nicely.\nThis includes model output, such as from lm(), glm(), and summary().\n\nlibrary(pander)"
  },
  {
    "objectID": "Lectures/Lecture11/CSSS508_Lecture11.html#pander-and-lm",
    "href": "Lectures/Lecture11/CSSS508_Lecture11.html#pander-and-lm",
    "title": "",
    "section": "\npander() and lm()\n",
    "text": "pander() and lm()\n\nYou can send an lm() object straight to pander:\n\npander(lm_1) # this creates an markdown-formatted chunk of text you can add to your qmd document\n\n\nFitting linear model: yn ~ num1 + fac1\n\n \nEstimate\nStd. Error\nt value\nPr(&gt;\n\n\n\n(Intercept)\n1.003\n0.3866\n2.594\n0.01019\n\n\nnum1\n0.6407\n0.1047\n6.118\n5.06e-09\n\n\nfac1B\n1.675\n0.5341\n3.137\n0.001972\n\n\nfac1C\n2.16\n0.5349\n4.038\n7.719e-05"
  },
  {
    "objectID": "Lectures/Lecture11/CSSS508_Lecture11.html#pander-and-summary",
    "href": "Lectures/Lecture11/CSSS508_Lecture11.html#pander-and-summary",
    "title": "",
    "section": "\npander() and summary()\n",
    "text": "pander() and summary()\n\nYou can do this with summary() as well, for added information:\n\npander(summary(lm_1))\n\n\n\n \nEstimate\nStd. Error\nt value\nPr(&gt;\n\n\n\n(Intercept)\n1.003\n0.3866\n2.594\n0.01019\n\n\nnum1\n0.6407\n0.1047\n6.118\n5.06e-09\n\n\nfac1B\n1.675\n0.5341\n3.137\n0.001972\n\n\nfac1C\n2.16\n0.5349\n4.038\n7.719e-05\n\n\n\n\nFitting linear model: yn ~ num1 + fac1\n\nObservations\nResidual Std. Error\n\\(R^2\\)\nAdjusted \\(R^2\\)\n\n\n\n200\n3.093\n0.2126\n0.2005"
  },
  {
    "objectID": "Lectures/Lecture11/CSSS508_Lecture11.html#advanced-tables",
    "href": "Lectures/Lecture11/CSSS508_Lecture11.html#advanced-tables",
    "title": "",
    "section": "Advanced Tables",
    "text": "Advanced Tables\npander tables are great for basic rmarkdown documents, but they’re not generally publication ready.\nWe’re going to talk about a few different approaches for making nicer tables:\n\ngt from RStudio for general table construction\nmodelsummary for creating model tables\ngtsummary for creating data summaries"
  },
  {
    "objectID": "Lectures/Lecture11/CSSS508_Lecture11.html#gt",
    "href": "Lectures/Lecture11/CSSS508_Lecture11.html#gt",
    "title": "",
    "section": "gt",
    "text": "gt\nIf you need to more customizability or different output types, RStudio’s gt package is a new and powerful system for creating tables from dataframes. We’ll use dplyr’s built-in starwars data for some examples.\n\nlibrary(gt)\ntes_chars &lt;- starwars %&gt;% \n  unnest(films) %&gt;% \n  unnest(starships, keep_empty = TRUE) %&gt;% \n  filter(films == \"The Empire Strikes Back\") %&gt;% \n  select(name, species, starships, mass, height) %&gt;%\n  distinct(name, .keep_all = TRUE) %&gt;%\n  mutate(starships = ifelse(name == \"Obi-Wan Kenobi\" | is.na(starships), \n                            \"No Ship\", starships))\nglimpse(tes_chars)\n\nRows: 16\nColumns: 5\n$ name      &lt;chr&gt; \"Luke Skywalker\", \"C-3PO\", \"R2-D2\", \"Darth Vader\", \"Leia Org…\n$ species   &lt;chr&gt; \"Human\", \"Droid\", \"Droid\", \"Human\", \"Human\", \"Human\", \"Wooki…\n$ starships &lt;chr&gt; \"X-wing\", \"No Ship\", \"No Ship\", \"TIE Advanced x1\", \"No Ship\"…\n$ mass      &lt;dbl&gt; 77.0, 75.0, 32.0, 136.0, 49.0, 77.0, 112.0, 80.0, 77.0, 17.0…\n$ height    &lt;int&gt; 172, 167, 96, 202, 150, 182, 228, 180, 170, 66, 170, 183, 20…"
  },
  {
    "objectID": "Lectures/Lecture11/CSSS508_Lecture11.html#initialize",
    "href": "Lectures/Lecture11/CSSS508_Lecture11.html#initialize",
    "title": "",
    "section": "Initialize",
    "text": "Initialize\n\n\n\ntes_chars %&gt;%\n  gt() \n\ngt() just renders the dataframe as a table using markdown.\n\n\n\n\n\n\n\n\nname\n      species\n      starships\n      mass\n      height\n    \n\n\nLuke Skywalker\nHuman\nX-wing\n77.0\n172\n\n\nC-3PO\nDroid\nNo Ship\n75.0\n167\n\n\nR2-D2\nDroid\nNo Ship\n32.0\n96\n\n\nDarth Vader\nHuman\nTIE Advanced x1\n136.0\n202\n\n\nLeia Organa\nHuman\nNo Ship\n49.0\n150\n\n\nObi-Wan Kenobi\nHuman\nNo Ship\n77.0\n182\n\n\nChewbacca\nWookiee\nMillennium Falcon\n112.0\n228\n\n\nHan Solo\nHuman\nMillennium Falcon\n80.0\n180\n\n\nWedge Antilles\nHuman\nX-wing\n77.0\n170\n\n\nYoda\nYoda's species\nNo Ship\n17.0\n66\n\n\nPalpatine\nHuman\nNo Ship\n75.0\n170\n\n\nBoba Fett\nHuman\nSlave 1\n78.2\n183\n\n\nIG-88\nDroid\nNo Ship\n140.0\n200\n\n\nBossk\nTrandoshan\nNo Ship\n113.0\n190\n\n\nLando Calrissian\nHuman\nMillennium Falcon\n79.0\n177\n\n\nLobot\nHuman\nNo Ship\n79.0\n175"
  },
  {
    "objectID": "Lectures/Lecture11/CSSS508_Lecture11.html#grouping",
    "href": "Lectures/Lecture11/CSSS508_Lecture11.html#grouping",
    "title": "",
    "section": "Grouping",
    "text": "Grouping\n\n\n\ntes_chars %&gt;% \n  group_by(starships) %&gt;%\n  gt()\n\nIf we group_by() first, the levels of the grouping variable become grouping rows in the table.\n\n\n\n\n\n\n\n\nname\n      species\n      mass\n      height\n    \n\n\nX-wing\n    \n\nLuke Skywalker\nHuman\n77.0\n172\n\n\nWedge Antilles\nHuman\n77.0\n170\n\n\nNo Ship\n    \n\nC-3PO\nDroid\n75.0\n167\n\n\nR2-D2\nDroid\n32.0\n96\n\n\nLeia Organa\nHuman\n49.0\n150\n\n\nObi-Wan Kenobi\nHuman\n77.0\n182\n\n\nYoda\nYoda's species\n17.0\n66\n\n\nPalpatine\nHuman\n75.0\n170\n\n\nIG-88\nDroid\n140.0\n200\n\n\nBossk\nTrandoshan\n113.0\n190\n\n\nLobot\nHuman\n79.0\n175\n\n\nTIE Advanced x1\n    \n\nDarth Vader\nHuman\n136.0\n202\n\n\nMillennium Falcon\n    \n\nChewbacca\nWookiee\n112.0\n228\n\n\nHan Solo\nHuman\n80.0\n180\n\n\nLando Calrissian\nHuman\n79.0\n177\n\n\nSlave 1\n    \n\nBoba Fett\nHuman\n78.2\n183"
  },
  {
    "objectID": "Lectures/Lecture11/CSSS508_Lecture11.html#rownames",
    "href": "Lectures/Lecture11/CSSS508_Lecture11.html#rownames",
    "title": "",
    "section": "Rownames",
    "text": "Rownames\n\n\n\ntes_chars %&gt;% \n  group_by(starships) %&gt;%\n  gt(rowname_col = \"name\")\n\nDesignating a rowname_col removes that column’s name and divides the values from the measures to the right.\n\n\n\n\n\n\n\n\n\n      species\n      mass\n      height\n    \n\n\nX-wing\n    \n\nLuke Skywalker\nHuman\n77.0\n172\n\n\nWedge Antilles\nHuman\n77.0\n170\n\n\nNo Ship\n    \n\nC-3PO\nDroid\n75.0\n167\n\n\nR2-D2\nDroid\n32.0\n96\n\n\nLeia Organa\nHuman\n49.0\n150\n\n\nObi-Wan Kenobi\nHuman\n77.0\n182\n\n\nYoda\nYoda's species\n17.0\n66\n\n\nPalpatine\nHuman\n75.0\n170\n\n\nIG-88\nDroid\n140.0\n200\n\n\nBossk\nTrandoshan\n113.0\n190\n\n\nLobot\nHuman\n79.0\n175\n\n\nTIE Advanced x1\n    \n\nDarth Vader\nHuman\n136.0\n202\n\n\nMillennium Falcon\n    \n\nChewbacca\nWookiee\n112.0\n228\n\n\nHan Solo\nHuman\n80.0\n180\n\n\nLando Calrissian\nHuman\n79.0\n177\n\n\nSlave 1\n    \n\nBoba Fett\nHuman\n78.2\n183"
  },
  {
    "objectID": "Lectures/Lecture11/CSSS508_Lecture11.html#header",
    "href": "Lectures/Lecture11/CSSS508_Lecture11.html#header",
    "title": "",
    "section": "Header",
    "text": "Header\n\n\n\ntes_chars %&gt;% \n  group_by(starships) %&gt;%\n  gt(rowname_col = \"name\") %&gt;%\n  tab_header(\n    title = \"Star Wars Characters\", \n    subtitle = \"The Empire Strikes Back\"\n  ) \n\ntab_header() can add titles and subtitles.\n\n\n\n\n\n\n\n\n\nStar Wars Characters\n    \n\nThe Empire Strikes Back\n    \n\n\n      species\n      mass\n      height\n    \n\n\n\nX-wing\n    \n\nLuke Skywalker\nHuman\n77.0\n172\n\n\nWedge Antilles\nHuman\n77.0\n170\n\n\nNo Ship\n    \n\nC-3PO\nDroid\n75.0\n167\n\n\nR2-D2\nDroid\n32.0\n96\n\n\nLeia Organa\nHuman\n49.0\n150\n\n\nObi-Wan Kenobi\nHuman\n77.0\n182\n\n\nYoda\nYoda's species\n17.0\n66\n\n\nPalpatine\nHuman\n75.0\n170\n\n\nIG-88\nDroid\n140.0\n200\n\n\nBossk\nTrandoshan\n113.0\n190\n\n\nLobot\nHuman\n79.0\n175\n\n\nTIE Advanced x1\n    \n\nDarth Vader\nHuman\n136.0\n202\n\n\nMillennium Falcon\n    \n\nChewbacca\nWookiee\n112.0\n228\n\n\nHan Solo\nHuman\n80.0\n180\n\n\nLando Calrissian\nHuman\n79.0\n177\n\n\nSlave 1\n    \n\nBoba Fett\nHuman\n78.2\n183"
  },
  {
    "objectID": "Lectures/Lecture11/CSSS508_Lecture11.html#spanner",
    "href": "Lectures/Lecture11/CSSS508_Lecture11.html#spanner",
    "title": "",
    "section": "Spanner",
    "text": "Spanner\n\n\n\ntes_chars %&gt;% \n  group_by(starships) %&gt;%\n  gt(rowname_col = \"name\") %&gt;%\n  tab_header(\n    title = \"Star Wars Characters\", \n    subtitle = \"The Empire Strikes Back\"\n  ) %&gt;%\n  tab_spanner(\n    label = \"Vitals\",\n    columns = vars(mass, height)\n  ) \n\nA tab_spanner() lets us group columns together.\n\n\n\n\n\n\n\n\n\nStar Wars Characters\n    \n\nThe Empire Strikes Back\n    \n\n\n      species\n      \n        Vitals\n      \n    \n\nmass\n      height\n    \n\n\n\nX-wing\n    \n\nLuke Skywalker\nHuman\n77.0\n172\n\n\nWedge Antilles\nHuman\n77.0\n170\n\n\nNo Ship\n    \n\nC-3PO\nDroid\n75.0\n167\n\n\nR2-D2\nDroid\n32.0\n96\n\n\nLeia Organa\nHuman\n49.0\n150\n\n\nObi-Wan Kenobi\nHuman\n77.0\n182\n\n\nYoda\nYoda's species\n17.0\n66\n\n\nPalpatine\nHuman\n75.0\n170\n\n\nIG-88\nDroid\n140.0\n200\n\n\nBossk\nTrandoshan\n113.0\n190\n\n\nLobot\nHuman\n79.0\n175\n\n\nTIE Advanced x1\n    \n\nDarth Vader\nHuman\n136.0\n202\n\n\nMillennium Falcon\n    \n\nChewbacca\nWookiee\n112.0\n228\n\n\nHan Solo\nHuman\n80.0\n180\n\n\nLando Calrissian\nHuman\n79.0\n177\n\n\nSlave 1\n    \n\nBoba Fett\nHuman\n78.2\n183"
  },
  {
    "objectID": "Lectures/Lecture11/CSSS508_Lecture11.html#column-labels",
    "href": "Lectures/Lecture11/CSSS508_Lecture11.html#column-labels",
    "title": "",
    "section": "Column Labels",
    "text": "Column Labels\n\n\n\ntes_chars %&gt;% \n  group_by(starships) %&gt;%\n  gt(rowname_col = \"name\") %&gt;%\n  tab_header(\n    title = \"Star Wars Characters\", \n    subtitle = \"The Empire Strikes Back\"\n  ) %&gt;%\n  tab_spanner(\n    label = \"Vitals\",\n    columns = vars(mass, height)\n  ) %&gt;%\n  cols_label(\n    mass = \"Mass (kg)\",\n    height = \"Height (cm)\",\n    species = \"Species\"\n  )\n\nWe can directly change column names with cols_label()\n\n\n\n\n\n\n\n\n\nStar Wars Characters\n    \n\nThe Empire Strikes Back\n    \n\n\n      Species\n      \n        Vitals\n      \n    \n\nMass (kg)\n      Height (cm)\n    \n\n\n\nX-wing\n    \n\nLuke Skywalker\nHuman\n77.0\n172\n\n\nWedge Antilles\nHuman\n77.0\n170\n\n\nNo Ship\n    \n\nC-3PO\nDroid\n75.0\n167\n\n\nR2-D2\nDroid\n32.0\n96\n\n\nLeia Organa\nHuman\n49.0\n150\n\n\nObi-Wan Kenobi\nHuman\n77.0\n182\n\n\nYoda\nYoda's species\n17.0\n66\n\n\nPalpatine\nHuman\n75.0\n170\n\n\nIG-88\nDroid\n140.0\n200\n\n\nBossk\nTrandoshan\n113.0\n190\n\n\nLobot\nHuman\n79.0\n175\n\n\nTIE Advanced x1\n    \n\nDarth Vader\nHuman\n136.0\n202\n\n\nMillennium Falcon\n    \n\nChewbacca\nWookiee\n112.0\n228\n\n\nHan Solo\nHuman\n80.0\n180\n\n\nLando Calrissian\nHuman\n79.0\n177\n\n\nSlave 1\n    \n\nBoba Fett\nHuman\n78.2\n183"
  },
  {
    "objectID": "Lectures/Lecture11/CSSS508_Lecture11.html#number-format",
    "href": "Lectures/Lecture11/CSSS508_Lecture11.html#number-format",
    "title": "",
    "section": "Number Format",
    "text": "Number Format\n\n\n\ntes_chars %&gt;% \n  group_by(starships) %&gt;%\n  gt(rowname_col = \"name\") %&gt;%\n  tab_header(\n    title = \"Star Wars Characters\", \n    subtitle = \"The Empire Strikes Back\"\n  ) %&gt;%\n  tab_spanner(\n    label = \"Vitals\",\n    columns = vars(mass, height)\n  ) %&gt;%\n  cols_label(\n    mass = \"Mass (kg)\",\n    height = \"Height (cm)\",\n    species = \"Species\"\n  ) %&gt;%\n  fmt_number(\n    columns = vars(mass),\n    decimals = 0) \n\nWe can adjust cell formats too.\n\n\n\n\n\n\n\n\n\nStar Wars Characters\n    \n\nThe Empire Strikes Back\n    \n\n\n      Species\n      \n        Vitals\n      \n    \n\nMass (kg)\n      Height (cm)\n    \n\n\n\nX-wing\n    \n\nLuke Skywalker\nHuman\n77\n172\n\n\nWedge Antilles\nHuman\n77\n170\n\n\nNo Ship\n    \n\nC-3PO\nDroid\n75\n167\n\n\nR2-D2\nDroid\n32\n96\n\n\nLeia Organa\nHuman\n49\n150\n\n\nObi-Wan Kenobi\nHuman\n77\n182\n\n\nYoda\nYoda's species\n17\n66\n\n\nPalpatine\nHuman\n75\n170\n\n\nIG-88\nDroid\n140\n200\n\n\nBossk\nTrandoshan\n113\n190\n\n\nLobot\nHuman\n79\n175\n\n\nTIE Advanced x1\n    \n\nDarth Vader\nHuman\n136\n202\n\n\nMillennium Falcon\n    \n\nChewbacca\nWookiee\n112\n228\n\n\nHan Solo\nHuman\n80\n180\n\n\nLando Calrissian\nHuman\n79\n177\n\n\nSlave 1\n    \n\nBoba Fett\nHuman\n78\n183"
  },
  {
    "objectID": "Lectures/Lecture11/CSSS508_Lecture11.html#align-columns",
    "href": "Lectures/Lecture11/CSSS508_Lecture11.html#align-columns",
    "title": "",
    "section": "Align Columns",
    "text": "Align Columns\n\n\n\ntes_chars %&gt;% \n  group_by(starships) %&gt;%\n  gt(rowname_col = \"name\") %&gt;%\n  tab_header(\n    title = \"Star Wars Characters\", \n    subtitle = \"The Empire Strikes Back\"\n  ) %&gt;%\n  tab_spanner(\n    label = \"Vitals\",\n    columns = vars(mass, height)\n  ) %&gt;%\n  cols_label(\n    mass = \"Mass (kg)\",\n    height = \"Height (cm)\",\n    species = \"Species\"\n  ) %&gt;%\n  fmt_number(\n    columns = vars(mass),\n    decimals = 0\n  ) %&gt;%\n  cols_align(\n    align = \"center\",\n    columns = vars(species, mass, height)\n  )\n\n\n\n\n\n\n\n\n\n\nStar Wars Characters\n    \n\nThe Empire Strikes Back\n    \n\n\n      Species\n      \n        Vitals\n      \n    \n\nMass (kg)\n      Height (cm)\n    \n\n\n\nX-wing\n    \n\nLuke Skywalker\nHuman\n77\n172\n\n\nWedge Antilles\nHuman\n77\n170\n\n\nNo Ship\n    \n\nC-3PO\nDroid\n75\n167\n\n\nR2-D2\nDroid\n32\n96\n\n\nLeia Organa\nHuman\n49\n150\n\n\nObi-Wan Kenobi\nHuman\n77\n182\n\n\nYoda\nYoda's species\n17\n66\n\n\nPalpatine\nHuman\n75\n170\n\n\nIG-88\nDroid\n140\n200\n\n\nBossk\nTrandoshan\n113\n190\n\n\nLobot\nHuman\n79\n175\n\n\nTIE Advanced x1\n    \n\nDarth Vader\nHuman\n136\n202\n\n\nMillennium Falcon\n    \n\nChewbacca\nWookiee\n112\n228\n\n\nHan Solo\nHuman\n80\n180\n\n\nLando Calrissian\nHuman\n79\n177\n\n\nSlave 1\n    \n\nBoba Fett\nHuman\n78\n183"
  },
  {
    "objectID": "Lectures/Lecture11/CSSS508_Lecture11.html#reorder-groups",
    "href": "Lectures/Lecture11/CSSS508_Lecture11.html#reorder-groups",
    "title": "",
    "section": "Reorder Groups",
    "text": "Reorder Groups\n\n\n\ntes_chars %&gt;% \n  group_by(starships) %&gt;%\n  gt(rowname_col = \"name\") %&gt;%\n  tab_header(\n    title = \"Star Wars Characters\", \n    subtitle = \"The Empire Strikes Back\"\n  ) %&gt;%\n  tab_spanner(\n    label = \"Vitals\",\n    columns = vars(mass, height)\n  ) %&gt;%\n  cols_label(\n    mass = \"Mass (kg)\",\n    height = \"Height (cm)\",\n    species = \"Species\"\n  ) %&gt;%\n  fmt_number(\n    columns = vars(mass),\n    decimals = 0\n  ) %&gt;%\n  cols_align(\n    align = \"center\",\n    columns = vars(species, mass, height)\n  ) %&gt;%\n  row_group_order(\n    groups = c(\"X-wing\", \n               \"Millennium Falcon\")\n  )\n\n\n\n\n\n\n\n\n\n\nStar Wars Characters\n    \n\nThe Empire Strikes Back\n    \n\n\n      Species\n      \n        Vitals\n      \n    \n\nMass (kg)\n      Height (cm)\n    \n\n\n\nX-wing\n    \n\nLuke Skywalker\nHuman\n77\n172\n\n\nWedge Antilles\nHuman\n77\n170\n\n\nMillennium Falcon\n    \n\nChewbacca\nWookiee\n112\n228\n\n\nHan Solo\nHuman\n80\n180\n\n\nLando Calrissian\nHuman\n79\n177\n\n\nNo Ship\n    \n\nC-3PO\nDroid\n75\n167\n\n\nR2-D2\nDroid\n32\n96\n\n\nLeia Organa\nHuman\n49\n150\n\n\nObi-Wan Kenobi\nHuman\n77\n182\n\n\nYoda\nYoda's species\n17\n66\n\n\nPalpatine\nHuman\n75\n170\n\n\nIG-88\nDroid\n140\n200\n\n\nBossk\nTrandoshan\n113\n190\n\n\nLobot\nHuman\n79\n175\n\n\nTIE Advanced x1\n    \n\nDarth Vader\nHuman\n136\n202\n\n\nSlave 1\n    \n\nBoba Fett\nHuman\n78\n183"
  },
  {
    "objectID": "Lectures/Lecture11/CSSS508_Lecture11.html#flextable",
    "href": "Lectures/Lecture11/CSSS508_Lecture11.html#flextable",
    "title": "",
    "section": "flextable",
    "text": "flextable\n\n\nThis is a table produced by flextable in Word format–including the embedded density images1!\nLook into flextable if you’ll be working in Word or want a table package that handles just about every format.\n\n\n\n\nEmbedding summary plots is a bit complicated and requires list columns"
  },
  {
    "objectID": "Lectures/Lecture11/CSSS508_Lecture11.html#modelsummary",
    "href": "Lectures/Lecture11/CSSS508_Lecture11.html#modelsummary",
    "title": "",
    "section": "modelsummary",
    "text": "modelsummary\nThe modelsummary package combines broom, gt, flextable, and kableExtra to produce tabular summaries of almost any model fit in R.\nAn advantage of this package is that it can produce output in every common format: HTML, Markdown, \\(\\LaTeX\\), raw text, and even images (.png or .jpg).\n\nlibrary(modelsummary)\n\nIts key function is msummary() or modelsummary() which creates summary tables of models.\nYou can then build on it using gt, flextable, or kableExtra functions, depending on the selected output format."
  },
  {
    "objectID": "Lectures/Lecture11/CSSS508_Lecture11.html#msummary",
    "href": "Lectures/Lecture11/CSSS508_Lecture11.html#msummary",
    "title": "",
    "section": "msummary",
    "text": "msummary\n\n\nLike pander(), msummary() takes a model as an object to make a table.\n\nmod_1 &lt;- lm(mpg ~ wt, data = mtcars)\nmsummary(mod_1)\n\nNote default modelsummary look like pander tables because they use Markdown.\n\n\n\n\n\n\n (1)\n\n\n\n(Intercept)\n37.285\n\n\n\n(1.878)\n\n\nwt\n−5.344\n\n\n\n(0.559)\n\n\nNum.Obs.\n32\n\n\nR2\n0.753\n\n\nR2 Adj.\n0.745\n\n\nAIC\n166.0\n\n\nBIC\n170.4\n\n\nLog.Lik.\n−80.015\n\n\nRMSE\n2.95"
  },
  {
    "objectID": "Lectures/Lecture11/CSSS508_Lecture11.html#msummary-1",
    "href": "Lectures/Lecture11/CSSS508_Lecture11.html#msummary-1",
    "title": "",
    "section": "msummary",
    "text": "msummary\n\n\nYou can present multiple models in msummary using named lists:\n\nmod_1 &lt;- lm(mpg ~ wt, data = mtcars)\nmod_2 &lt;- lm(mpg ~ hp + wt, data = mtcars)\nmod_3 &lt;- lm(mpg ~ hp + wt + factor(am), \n            data = mtcars)\nmodel_list &lt;- list(\"Model 1\" = mod_1, \n                   \"Model 2\" = mod_2, \n                   \"Model 3\" = mod_3)\nmsummary(model_list)\n\nThis allows you to produce the common (and often bad) journal format where one starts with a nonsensical “naive model” then works up to the “full model” justified by the front end of the paper.\n\n\n\n\n\n\nModel 1\n Model 2\n Model 3\n\n\n\n(Intercept)\n37.285\n37.227\n34.003\n\n\n\n(1.878)\n(1.599)\n(2.643)\n\n\nwt\n−5.344\n−3.878\n−2.879\n\n\n\n(0.559)\n(0.633)\n(0.905)\n\n\nhp\n\n−0.032\n−0.037\n\n\n\n\n(0.009)\n(0.010)\n\n\nfactor(am)1\n\n\n2.084\n\n\n\n\n\n(1.376)\n\n\nNum.Obs.\n32\n32\n32\n\n\nR2\n0.753\n0.827\n0.840\n\n\nR2 Adj.\n0.745\n0.815\n0.823\n\n\nAIC\n166.0\n156.7\n156.1\n\n\nBIC\n170.4\n162.5\n163.5\n\n\nLog.Lik.\n−80.015\n−74.326\n−73.067\n\n\nRMSE\n2.95\n2.47\n2.37"
  },
  {
    "objectID": "Lectures/Lecture11/CSSS508_Lecture11.html#pdf-output",
    "href": "Lectures/Lecture11/CSSS508_Lecture11.html#pdf-output",
    "title": "",
    "section": "PDF Output",
    "text": "PDF Output\noutput = \"latex\" produces kableExtra based output well-suited to PDFs.1\n\nmsummary(model_list, output = \"latex\")\n\n\nFor customization, I recommend referring to modelsummary’s documentation."
  },
  {
    "objectID": "Lectures/Lecture11/CSSS508_Lecture11.html#saving-a-modelsummary",
    "href": "Lectures/Lecture11/CSSS508_Lecture11.html#saving-a-modelsummary",
    "title": "",
    "section": "Saving a modelsummary\n",
    "text": "Saving a modelsummary\n\n\nmsummary(model_list, output = \"ex_table.png\")\n\nTo save a modelsummary object as a file, just provide a path to the output = argument.\nSpecifying a suffix (e.g., .png or .pdf) will control the output format."
  },
  {
    "objectID": "Lectures/Lecture11/CSSS508_Lecture11.html#modelsummary-and-gt",
    "href": "Lectures/Lecture11/CSSS508_Lecture11.html#modelsummary-and-gt",
    "title": "",
    "section": "\nmodelsummary and gt\n",
    "text": "modelsummary and gt\n\n\n\nYou can select gt output to enable modifying summaries with gt functions.\n\nmsummary(model_list, output = \"gt\") %&gt;%\n  tab_header(\n    title = \"Table 1. Linear Models\", \n    subtitle = \"DV: Miles per Gallon\"\n  )\n\nNote that gt’s support for PDF output is immature–this format is better for HTML or image output.\n\n\n\n\n\n\n\n\n\nTable 1. Linear Models\n    \n\nDV: Miles per Gallon\n    \n\n \n      Model 1\n      Model 2\n      Model 3\n    \n\n\n\n(Intercept)\n37.285\n37.227\n34.003\n\n\n\n(1.878)\n(1.599)\n(2.643)\n\n\nwt\n-5.344\n-3.878\n-2.879\n\n\n\n(0.559)\n(0.633)\n(0.905)\n\n\nhp\n\n-0.032\n-0.037\n\n\n\n\n(0.009)\n(0.010)\n\n\nfactor(am)1\n\n\n2.084\n\n\n\n\n\n(1.376)\n\n\nNum.Obs.\n32\n32\n32\n\n\nR2\n0.753\n0.827\n0.840\n\n\nR2 Adj.\n0.745\n0.815\n0.823\n\n\nAIC\n166.0\n156.7\n156.1\n\n\nBIC\n170.4\n162.5\n163.5\n\n\nLog.Lik.\n-80.015\n-74.326\n-73.067\n\n\nRMSE\n2.95\n2.47\n2.37"
  },
  {
    "objectID": "Lectures/Lecture11/CSSS508_Lecture11.html#tbl_summary",
    "href": "Lectures/Lecture11/CSSS508_Lecture11.html#tbl_summary",
    "title": "",
    "section": "tbl_summary()",
    "text": "tbl_summary()\n\n\nBy default, gtsummary tables provide:\n\nFrequencies for categorical and binary variables\nQuantiles of the form “50% (25%, 75%)” for continuous variables\nSample size\n\n\nmtcars %&gt;% \n  select(1:9) %&gt;%\n  tbl_summary() \n\n\n\n\n\n\n\n\n\nCharacteristic\n      \nN = 321\n\n    \n\n\nmpg\n19.2 (15.4, 22.8)\n\n\ncyl\n\n\n\n    4\n11 (34%)\n\n\n    6\n7 (22%)\n\n\n    8\n14 (44%)\n\n\ndisp\n196 (121, 326)\n\n\nhp\n123 (97, 180)\n\n\ndrat\n3.70 (3.08, 3.92)\n\n\nwt\n3.33 (2.58, 3.61)\n\n\nqsec\n17.71 (16.89, 18.90)\n\n\nvs\n14 (44%)\n\n\nam\n13 (41%)\n\n\n\n\n1 Median (IQR); n (%)"
  },
  {
    "objectID": "Lectures/Lecture11/CSSS508_Lecture11.html#grouping-1",
    "href": "Lectures/Lecture11/CSSS508_Lecture11.html#grouping-1",
    "title": "",
    "section": "Grouping",
    "text": "Grouping\n\n\nYou can provide a by = argument to do grouped descriptives.\n\nmtcars %&gt;% \n  select(1:9) %&gt;%\n  tbl_summary(by = \"am\") \n\n\n\n\n\n\n\n\n\nCharacteristic\n      \n0, N = 191\n\n      \n1, N = 131\n\n    \n\n\nmpg\n17.3 (15.0, 19.2)\n22.8 (21.0, 30.4)\n\n\ncyl\n\n\n\n\n    4\n3 (16%)\n8 (62%)\n\n\n    6\n4 (21%)\n3 (23%)\n\n\n    8\n12 (63%)\n2 (15%)\n\n\ndisp\n276 (196, 360)\n120 (79, 160)\n\n\nhp\n175 (117, 193)\n109 (66, 113)\n\n\ndrat\n3.15 (3.07, 3.70)\n4.08 (3.85, 4.22)\n\n\nwt\n3.52 (3.44, 3.84)\n2.32 (1.94, 2.78)\n\n\nqsec\n17.82 (17.18, 19.17)\n17.02 (16.46, 18.61)\n\n\nvs\n7 (37%)\n7 (54%)\n\n\n\n\n1 Median (IQR); n (%)"
  },
  {
    "objectID": "Lectures/Lecture11/CSSS508_Lecture11.html#adding-gt",
    "href": "Lectures/Lecture11/CSSS508_Lecture11.html#adding-gt",
    "title": "",
    "section": "Adding gt\n",
    "text": "Adding gt\n\n\n\nIf you select gt output, you can dress it up with gt functions.\n\nmtcars %&gt;% \n  select(1:9) %&gt;%\n  tbl_summary(by = \"am\") %&gt;%\n  as_gt() %&gt;%\n  tab_spanner(\n    label = \"Transmission\", \n    columns = starts_with(\"stat_\")\n  ) %&gt;%\n  tab_header(\n    title = \"Motor Trend Cars\", \n    subtitle = \"Descriptive Statistics\"\n  )\n\nstarts\\_with(\"stat\\_\") here selects the statistic columns created by tbl_summary().\n\n\n\n\n\n\n\n\n\nMotor Trend Cars\n    \n\nDescriptive Statistics\n    \n\nCharacteristic\n      \n        Transmission\n      \n    \n\n\n0, N = 191\n\n      \n1, N = 131\n\n    \n\n\n\nmpg\n17.3 (15.0, 19.2)\n22.8 (21.0, 30.4)\n\n\ncyl\n\n\n\n\n    4\n3 (16%)\n8 (62%)\n\n\n    6\n4 (21%)\n3 (23%)\n\n\n    8\n12 (63%)\n2 (15%)\n\n\ndisp\n276 (196, 360)\n120 (79, 160)\n\n\nhp\n175 (117, 193)\n109 (66, 113)\n\n\ndrat\n3.15 (3.07, 3.70)\n4.08 (3.85, 4.22)\n\n\nwt\n3.52 (3.44, 3.84)\n2.32 (1.94, 2.78)\n\n\nqsec\n17.82 (17.18, 19.17)\n17.02 (16.46, 18.61)\n\n\nvs\n7 (37%)\n7 (54%)\n\n\n\n\n1 Median (IQR); n (%)"
  },
  {
    "objectID": "Lectures/Lecture11/CSSS508_Lecture11.html#bonus-corrplot",
    "href": "Lectures/Lecture11/CSSS508_Lecture11.html#bonus-corrplot",
    "title": "",
    "section": "Bonus: corrplot\n",
    "text": "Bonus: corrplot\n\nThe corrplot package has functions for displaying correlograms.\nThese make interpreting the correlations between variables in a data set easier than conventional correlation tables.\nThe first argument is a call to cor(), the base R function for generating a correlation matrix.\nSee the vignette for customization options.\n\nlibrary(corrplot)\ncorrplot(\n  cor(mtcars),\n  addCoef.col = \"white\",\n  addCoefasPercent=T,\n  type=\"upper\", \n  order=\"AOE\")"
  },
  {
    "objectID": "Lectures/Lecture11/CSSS508_Lecture11.html#correlogram",
    "href": "Lectures/Lecture11/CSSS508_Lecture11.html#correlogram",
    "title": "",
    "section": "Correlogram",
    "text": "Correlogram"
  },
  {
    "objectID": "Lectures/Lecture11/CSSS508_Lecture11.html#why-reproducibility",
    "href": "Lectures/Lecture11/CSSS508_Lecture11.html#why-reproducibility",
    "title": "",
    "section": "Why Reproducibility?",
    "text": "Why Reproducibility?\nReproducibility is not replication.\n\n\nReplication is running a new study to show if and how results of a prior study hold.\n\nReproducibility is about rerunning the same study and getting the same results.\n\n\nReproducible studies can still be wrong… and in fact reproducibility makes proving a study wrong much easier.\n\n\nReproducibility means:\n\nTransparent research practices.\nMinimal barriers to verifying your results.\n\n\n\nAny study that isn’t reproducible can be trusted only on faith."
  },
  {
    "objectID": "Lectures/Lecture11/CSSS508_Lecture11.html#reproducibility-definitions",
    "href": "Lectures/Lecture11/CSSS508_Lecture11.html#reproducibility-definitions",
    "title": "",
    "section": "Reproducibility Definitions",
    "text": "Reproducibility Definitions\nReproducibility comes in three forms (Stodden 2014):\n\n\n\n\nEmpirical: Repeatability in data collection.\n\nStatistical: Verification with alternate methods of inference.\n\nComputational: Reproducibility in cleaning, organizing, and presenting data and results.\n\n\n\n\nR is particularly well suited to enabling computational reproducibility1.\n\n\nThey will not fix flawed research design, nor offer a remedy for improper application of statistical methods.\nThose are the difficult, non-automatable things you want skills in.\n\n Python is equally well suited. Julia is an option as well."
  },
  {
    "objectID": "Lectures/Lecture11/CSSS508_Lecture11.html#computational-reproducibility",
    "href": "Lectures/Lecture11/CSSS508_Lecture11.html#computational-reproducibility",
    "title": "",
    "section": "Computational Reproducibility",
    "text": "Computational Reproducibility\nElements of computational reproducibility:\n\n\nShared data\n\nResearchers need your original data to verify and replicate your work.\n\n\nShared code\n\nYour code must be shared to make decisions transparent.\n\n\n\n\n\n\nDocumentation\n\nThe operation of code should be either self-documenting or have written descriptions to make its use clear.\n\n\n\n\n\n\n\nVersion Control\n\nDocuments the research process.\nPrevents losing work and facilitates sharing."
  },
  {
    "objectID": "Lectures/Lecture11/CSSS508_Lecture11.html#levels-of-reproducibility",
    "href": "Lectures/Lecture11/CSSS508_Lecture11.html#levels-of-reproducibility",
    "title": "",
    "section": "Levels of Reproducibility",
    "text": "Levels of Reproducibility\nFor academic papers, degrees of reproducibility vary:\n\n\n“Read the article”\nShared data with documentation\nShared data and all code\nInteractive document\nResearch compendium\nDocker compendium: Self-contained ecosystem"
  },
  {
    "objectID": "Lectures/Lecture11/CSSS508_Lecture11.html#interactive-documents",
    "href": "Lectures/Lecture11/CSSS508_Lecture11.html#interactive-documents",
    "title": "",
    "section": "Interactive Documents",
    "text": "Interactive Documents\nInteractive documents — like Quarto docs — combine code and text together into a self-contained document.\n\nLoad and process data\nRun models\nGenerate tables and plots in-line with text\nIn-text values automatically filled in\n\n\nInteractive documents allow a reader to examine your computational methods within the document itself; in effect, they are self-documenting.\n\n\nBy re-running the code, they reproduce your results on demand.\n\n\nCommon Platforms:\n\n\nR: Quarto\n\nPython: Jupyter Notebooks"
  },
  {
    "objectID": "Lectures/Lecture11/CSSS508_Lecture11.html#research-compendia",
    "href": "Lectures/Lecture11/CSSS508_Lecture11.html#research-compendia",
    "title": "",
    "section": "Research Compendia",
    "text": "Research Compendia\nA research compendium is a portable, reproducible distribution of an article or other project.\n\nResearch compendia feature:\n\nAn interactive document as the foundation\nFiles organized in a recognizable structure (e.g. an R package)\nClear separation of data, method, and output. Data are read only.\nA well-documented or even preserved computational environment (e.g. Docker)\n\n\n\nrrtools by UW’s Ben Markwick provides a simplified workflow to accomplish this in R."
  },
  {
    "objectID": "Lectures/Lecture11/CSSS508_Lecture11.html#bookdown",
    "href": "Lectures/Lecture11/CSSS508_Lecture11.html#bookdown",
    "title": "",
    "section": "Bookdown",
    "text": "Bookdown\nbookdown — which is integrated into rrtools — can generate documents in the proper format for articles, theses, books, or dissertations.\n\nbookdown provides an accessible alternative to writing \\(\\LaTeX\\) for typesetting and reference management.\n\n\nYou can integrate citations and automate reference page generation using bibtex files (such as produced by Zotero).\n\n\nbookdown supports .html output for ease and speed and also renders .pdf files through \\(\\LaTeX\\) for publication-ready documents.\n\n\nFor University of Washington theses and dissertations, consider Ben Marwick’s huskydown package which uses Markdown but renders via a UW approved \\(\\LaTeX\\) template."
  },
  {
    "objectID": "Lectures/Lecture11/CSSS508_Lecture11.html#best-practices-1",
    "href": "Lectures/Lecture11/CSSS508_Lecture11.html#best-practices-1",
    "title": "CSSS 508 • Lecture 11",
    "section": "Best Practices",
    "text": "Best Practices"
  },
  {
    "objectID": "Lectures/Lecture11/CSSS508_Lecture11.html#organization-and-portability",
    "href": "Lectures/Lecture11/CSSS508_Lecture11.html#organization-and-portability",
    "title": "",
    "section": "Organization and Portability",
    "text": "Organization and Portability"
  },
  {
    "objectID": "Lectures/Lecture11/CSSS508_Lecture11.html#workflow-versus-project",
    "href": "Lectures/Lecture11/CSSS508_Lecture11.html#workflow-versus-project",
    "title": "",
    "section": "Workflow versus Project",
    "text": "Workflow versus Project\nTo summarize Jenny Bryan, one should separate workflow from projects.\n\n\n\n\nWorkflow\n\nThe software you use to write your code (e.g. RStudio)\nThe location you store a project\nThe specific computer you use\nThe code you ran earlier or typed into your console\n\n\nProject\n\nThe raw data\nThe code that operates on your raw data\nThe packages you use\nThe output files or documents\n\n\n\n\n\n\nProjects should not modify anything outside of the project nor need to be modified by someone else (or future you) to run.\nProjects should be independent of your workflow."
  },
  {
    "objectID": "Lectures/Lecture11/CSSS508_Lecture11.html#portability",
    "href": "Lectures/Lecture11/CSSS508_Lecture11.html#portability",
    "title": "",
    "section": "Portability",
    "text": "Portability\nFor research to be reproducible, it must also be portable. Portable software operates independently of workflow such as fixed file locations.\n\n\nDo Not:\nDo:\n\n\n\n\nUse setwd() in scripts or .Rmd files.\nUse absolute paths except for fixed, immovable sources (secure data).\n\nread_csv(\"C:/my_project/data/my_data.csv\")\n\n\nUse install.packages() in script or .Rmd files.\nUse rm(list=ls()) anywhere but your console.\n\n\n\n\nUse RStudio projects (or the here package) to set directories.\nUse relative paths to load and save files:\n\nread_csv(\"./data/my_data.csv\")\n\n\nLoad all required packages using library().\nClear your workspace when closing RStudio.\n\nSet Tools &gt; Global Options… &gt; Save workspace… to Never"
  },
  {
    "objectID": "Lectures/Lecture11/CSSS508_Lecture11.html#divide-and-conquer",
    "href": "Lectures/Lecture11/CSSS508_Lecture11.html#divide-and-conquer",
    "title": "",
    "section": "Divide and Conquer",
    "text": "Divide and Conquer\nOften you do not want to include all code for a project in one .qmd file:\n\nThe code takes too long to knit.\nThe file is so long it is difficult to read.\n\n\nThere are two ways to deal with this:\n\n\nUse separate .R scripts or .qmd files which save results from complicated parts of a project, then load these results in the main .qmd file.\n\nThis is good for loading and cleaning large data.\nAlso for running slow models.\n\n\n\n\n\n\n\nUse source() to run external .R scripts when the .qmd renders\n\nThis can be used to run large files that aren’t impractically slow.\nAlso good for loading project-specific functions."
  },
  {
    "objectID": "Lectures/Lecture11/CSSS508_Lecture11.html#the-way-of-many-files",
    "href": "Lectures/Lecture11/CSSS508_Lecture11.html#the-way-of-many-files",
    "title": "",
    "section": "The Way of Many Files",
    "text": "The Way of Many Files\nI find it beneficial to break projects into many files:\n\nScripts with specialized functions.\nScripts to load and clean each set of variables.\nScripts to run each set of models and make tables and plots.\nA main .qmd that runs some or all of these to reproduce the entire project.\n\n\nSplitting up a project carries benefits:\n\nOnce a portion of the project is done and in its own file, it is out of your way.\n\nIf you need to make changes, you don’t need to search through huge files.\nEntire sections of the project can be added or removed quickly (e.g. converted to an appendix of an article)\nIt is the only way to build a proper 2 for a project."
  },
  {
    "objectID": "Lectures/Lecture11/CSSS508_Lecture11.html#pipelines",
    "href": "Lectures/Lecture11/CSSS508_Lecture11.html#pipelines",
    "title": "",
    "section": "Pipelines",
    "text": "Pipelines\nProfessional researchers and teams design projects as a pipeline.\n\nA pipeline is a series of consecutive processing elements (scripts and functions in R).\n\n\nEach stage of a pipeline…\n\nHas clearly defined inputs and outputs\nDoes not modify its inputs.\nProduces the exact same output every time it is re-run.\n\n\n\nThis means…\n\nWhen you modify one stage, you only need to rerun subsequent stages.\nDifferent people can work on each stage.\nProblems are isolated within stages.\nYou can depict your project as a directed graph of dependencies."
  },
  {
    "objectID": "Lectures/Lecture11/CSSS508_Lecture11.html#example-pipeline",
    "href": "Lectures/Lecture11/CSSS508_Lecture11.html#example-pipeline",
    "title": "",
    "section": "Example Pipeline",
    "text": "Example Pipeline\nEvery stage (oval) has an unambiguous input and output. Everything that precedes a given stage is a dependency — something required to run it.\n\n\n\nNote: targets is a great package for managing R research pipelines."
  },
  {
    "objectID": "Lectures/Lecture11/CSSS508_Lecture11.html#on-formats",
    "href": "Lectures/Lecture11/CSSS508_Lecture11.html#on-formats",
    "title": "",
    "section": "On Formats",
    "text": "On Formats\nAvoid “closed” or commercial software and file formats except where absolutely necessary.\n\nUse open source software and file formats.\n\n\n\n\nIt is always better for science:\n\nPeople should be able to explore your research without buying commercial software.\nYou do not want your research to be inaccessible when software is updated.\n\n\n\n\n\n\n\nIt is often just better.\n\nIt is usually updated more quickly\nIt tends to be more secure\nIt is rarely abandoned\n\n\n\n\n\nThe ideal: Use software that reads and writes raw text."
  },
  {
    "objectID": "Lectures/Lecture11/CSSS508_Lecture11.html#text",
    "href": "Lectures/Lecture11/CSSS508_Lecture11.html#text",
    "title": "",
    "section": "Text",
    "text": "Text\nWriting and formatting documents are two completely separate jobs.\n\nWrite first\nFormat later\n\nMarkdown was made for this\n\n\nWord processors — like Microsoft Word — try to do both at the same time, usually badly.\nThey waste time by leading you to format instead of writing.\n\n\nFind a good modular text editor and learn to use it:\n\nAtom\n\nSublime (Commercial)\nEmacs\nVim"
  },
  {
    "objectID": "Lectures/Lecture11/CSSS508_Lecture11.html#version-control-1",
    "href": "Lectures/Lecture11/CSSS508_Lecture11.html#version-control-1",
    "title": "",
    "section": "Version Control",
    "text": "Version Control\nVersion control originates in collaborative software development.\nThe Idea: All changes ever made to a piece of software are documented, saved automatically, and revertible.\n\nVersion control allows all decisions ever made in a research project to be documented automatically.\n\n\nVersion control can:\n\nProtect your work from destructive changes\nSimplify collaboration by merging changes\nDocument design decisions\nMake your research process transparent"
  },
  {
    "objectID": "Lectures/Lecture11/CSSS508_Lecture11.html#git-and-github",
    "href": "Lectures/Lecture11/CSSS508_Lecture11.html#git-and-github",
    "title": "",
    "section": "Git and GitHub",
    "text": "Git and GitHub\ngit is the dominant platform for version control, and GitHub is a free (and now Microsoft owned) platform for hosting repositories.\n\nRepositories are folders on your computer where all changes are tracked by Git.\n\n\nOnce satisfied with changes, you “commit” them then “push” them to a remote repository that stores your project.\n\n\nOthers can copy your project (“pull”), and if you permit, make suggestions for changes.\n\n\nConstantly committing and pulling changes automatically generates a running “history” that documents the evolution of a project.\n\n\ngit is integrated into RStudio under the Tools menu. It requires some setup.1\n\nYou can also use the GitHub desktop application."
  },
  {
    "objectID": "Lectures/Lecture11/CSSS508_Lecture11.html#github-as-a-cv",
    "href": "Lectures/Lecture11/CSSS508_Lecture11.html#github-as-a-cv",
    "title": "",
    "section": "GitHub as a CV",
    "text": "GitHub as a CV\nBeyond archiving projects and allowing sharing, GitHub also serves as a sort of curriculum vitae for the programmer.\n\nBy allowing others to view your projects, you can display competence in programming and research.\n\n\nIf you are planning on working in the private sector, an active GitHub profile will give you a leg up on the competition.\n\n\nIf you are aiming for academia, a GitHub account signals technical competence and an interest in research transparency."
  },
  {
    "objectID": "Lectures/Lecture11/CSSS508_Lecture11.html#what-youve-learned",
    "href": "Lectures/Lecture11/CSSS508_Lecture11.html#what-youve-learned",
    "title": "",
    "section": "What You’ve Learned",
    "text": "What You’ve Learned\nA lot!\n\nHow to get data into R from a variety of formats\nHow to do “data custodian” work to manipulate and clean data\nHow to make pretty visualizations\nHow to automate with loops and functions\nHow to combine text, calculations, plots, and tables into dynamic R Markdown reports"
  },
  {
    "objectID": "Lectures/Lecture11/CSSS508_Lecture11.html#what-comes-next",
    "href": "Lectures/Lecture11/CSSS508_Lecture11.html#what-comes-next",
    "title": "",
    "section": "What Comes Next?",
    "text": "What Comes Next?\n\nStatistical inference (e.g. more CSSS courses)\n\nFunctions for hypothesis testing, hierarchical/mixed effect models, machine learning, survey design, etc. are straightforward to use… once data are clean\nAccess output by working with list structures (like from regression models) or using broom and ggeffects\n\n\n\nPractice, practice, practice!\n\nReplicate analyses you’ve done in Excel, SPSS, or Stata\nThink about data using dplyr verbs, tidy data principles\nQuarto for reproducibility\n\n\nMore advanced projects\n\nUsing version control (git) in RStudio\nInteractive Shiny web apps\nWrite your own functions and put them in a package"
  },
  {
    "objectID": "Lectures/Lecture11/CSSS508_Lecture11.html#course-plugs",
    "href": "Lectures/Lecture11/CSSS508_Lecture11.html#course-plugs",
    "title": "",
    "section": "Course Plugs",
    "text": "Course Plugs\nIf you…\n\nhave no stats background yet - SOC504: Applied Social Statistics\n\nhave (only) finished SOC506 - CSSS510: Maximum Likelihood\n\nwant to master visualization - CSSS569: Visualizing Data\n\nstudy events or durations - CSSS544: Event History Analysis1\n\nwant to use network data - CSSS567: Social Network Analysis\n\nwant to work with spatial data - CSSS554: Spatial Statistics\n\nwant to work with time series - CSSS512: Time Series and Panel Data\n\nAlso a great maximum likelihood introduction."
  },
  {
    "objectID": "Lectures/Lecture11/CSSS508_Lecture11.html#sjplot",
    "href": "Lectures/Lecture11/CSSS508_Lecture11.html#sjplot",
    "title": "",
    "section": "sjPlot",
    "text": "sjPlot\npander tables are great for basic rmarkdown documents, but they’re not generally publication ready.\nThe sjPlot package produces html tables that look more like those you may find in journal articles.\n\nlibrary(sjPlot)"
  },
  {
    "objectID": "Lectures/Lecture11/CSSS508_Lecture11.html#sjplot-tables",
    "href": "Lectures/Lecture11/CSSS508_Lecture11.html#sjplot-tables",
    "title": "",
    "section": "\nsjPlot Tables",
    "text": "sjPlot Tables\ntab_model() will produce tables for most models.\n\nmodel_1 &lt;- lm(mpg ~ wt, data = mtcars)\ntab_model(model_1)\n\n\n\n \nmpg\n\n\nPredictors\nEstimates\nCI\np\n\n\n(Intercept)\n37.29\n33.45 – 41.12\n&lt;0.001\n\n\nwt\n-5.34\n-6.49 – -4.20\n&lt;0.001\n\n\nObservations\n32\n\n\nR2 / R2 adjusted\n0.753 / 0.745"
  },
  {
    "objectID": "Lectures/Lecture11/CSSS508_Lecture11.html#multi-model-tables-with-sjtable",
    "href": "Lectures/Lecture11/CSSS508_Lecture11.html#multi-model-tables-with-sjtable",
    "title": "",
    "section": "Multi-Model Tables with sjTable\n",
    "text": "Multi-Model Tables with sjTable\n\nOften in journal articles you will see a single table that compares multiple models.\nTypically, authors will start with a simple model on the left, then add variables, until they have their most complex model on the right.\nThe sjPlot package makes this easy to do: just give tab_model() more models!"
  },
  {
    "objectID": "Lectures/Lecture11/CSSS508_Lecture11.html#multiple-tab_model",
    "href": "Lectures/Lecture11/CSSS508_Lecture11.html#multiple-tab_model",
    "title": "",
    "section": "Multiple tab_model()\n",
    "text": "Multiple tab_model()\n\n\nmodel_2 &lt;- lm(mpg ~ hp + wt, data = mtcars)\nmodel_3 &lt;- lm(mpg ~ hp + wt + factor(am), data = mtcars)\ntab_model(model_1, model_2, model_3)\n\n\n\n \nmpg\nmpg\nmpg\n\n\nPredictors\nEstimates\nCI\np\nEstimates\nCI\np\nEstimates\nCI\np\n\n\n(Intercept)\n37.29\n33.45 – 41.12\n&lt;0.001\n37.23\n33.96 – 40.50\n&lt;0.001\n34.00\n28.59 – 39.42\n&lt;0.001\n\n\nwt\n-5.34\n-6.49 – -4.20\n&lt;0.001\n-3.88\n-5.17 – -2.58\n&lt;0.001\n-2.88\n-4.73 – -1.02\n0.004\n\n\nhp\n\n\n\n-0.03\n-0.05 – -0.01\n0.001\n-0.04\n-0.06 – -0.02\n0.001\n\n\nam [1]\n\n\n\n\n\n\n2.08\n-0.74 – 4.90\n0.141\n\n\nObservations\n32\n32\n32\n\n\nR2 / R2 adjusted\n0.753 / 0.745\n0.827 / 0.815\n0.840 / 0.823"
  },
  {
    "objectID": "Lectures/Lecture11/CSSS508_Lecture11.html#sjplot-example-likert-plots",
    "href": "Lectures/Lecture11/CSSS508_Lecture11.html#sjplot-example-likert-plots",
    "title": "",
    "section": "\nsjPlot Example: Likert plots",
    "text": "sjPlot Example: Likert plots"
  },
  {
    "objectID": "Lectures/Lecture11/CSSS508_Lecture11.html#sjplot-example-crosstabs",
    "href": "Lectures/Lecture11/CSSS508_Lecture11.html#sjplot-example-crosstabs",
    "title": "",
    "section": "\nsjPlot Example: Crosstabs",
    "text": "sjPlot Example: Crosstabs"
  },
  {
    "objectID": "Lectures/Lecture11/CSSS508_Lecture11.html#default-geom_smooth",
    "href": "Lectures/Lecture11/CSSS508_Lecture11.html#default-geom_smooth",
    "title": "",
    "section": "Default geom_smooth()\n",
    "text": "Default geom_smooth()\n\n\nggplot(data = gapminder, aes(x = year, y = lifeExp, color = continent)) +\n  geom_point(position = position_jitter(1, 0), size = 0.5) +\n  geom_smooth()\n\n\nBy default, geom_smooth() chooses either a loess smoother (N &lt; 1000) or a GAM depending on the number of observations."
  },
  {
    "objectID": "Lectures/Lecture11/CSSS508_Lecture11.html#linear-glm",
    "href": "Lectures/Lecture11/CSSS508_Lecture11.html#linear-glm",
    "title": "",
    "section": "Linear glm\n",
    "text": "Linear glm\n\n\nggplot(data = gapminder, aes(x = year, y = lifeExp, color = continent)) +\n  geom_point(position = position_jitter(1,0), size = 0.5) +\n  geom_smooth(method = \"glm\", formula = y ~ x)\n\n\nWe could also fit a standard linear model using either method = \"glm\" or method = \"lm\" and a formula like y ~ x."
  },
  {
    "objectID": "Lectures/Lecture11/CSSS508_Lecture11.html#polynomial-glm",
    "href": "Lectures/Lecture11/CSSS508_Lecture11.html#polynomial-glm",
    "title": "",
    "section": "Polynomial glm\n",
    "text": "Polynomial glm\n\n\nggplot(data = gapminder, aes(x = year, y = lifeExp, color = continent)) +\n  geom_point(position = position_jitter(1,0), size = 0.5) +\n  geom_smooth(method = \"glm\", formula = y ~ poly(x, 2)) \n\n\npoly(x, 2) produces a quadratic model which contains a linear term (x) and a quadratic term (x^2)."
  },
  {
    "objectID": "Lectures/Lecture11/CSSS508_Lecture11.html#grouping-with-ggpredict",
    "href": "Lectures/Lecture11/CSSS508_Lecture11.html#grouping-with-ggpredict",
    "title": "",
    "section": "Grouping with ggpredict()\n",
    "text": "Grouping with ggpredict()\n\nWhen using a vector of terms, ggeffects will plot the first along the x-axis and use others for grouping. Note we can pipe a model into ggpredict()!\n\nglm(yb ~ num1 + fac1 + num2 + fac2, data = ex_dat, family = binomial(link = \"logit\")) %&gt;%\n  ggpredict(terms = c(\"num1\", \"fac1\")) %&gt;% \n  plot()"
  },
  {
    "objectID": "Lectures/Lecture11/CSSS508_Lecture11.html#big-improvement",
    "href": "Lectures/Lecture11/CSSS508_Lecture11.html#big-improvement",
    "title": "",
    "section": "Big Improvement!",
    "text": "Big Improvement!\n\n\n\n\n\n\n\n\n\nname\n      species\n      starships\n      mass\n      height\n    \n\n\nLuke Skywalker\nHuman\nX-wing\n77.0\n172\n\n\nC-3PO\nDroid\nNo Ship\n75.0\n167\n\n\nR2-D2\nDroid\nNo Ship\n32.0\n96\n\n\nDarth Vader\nHuman\nTIE Advanced x1\n136.0\n202\n\n\nLeia Organa\nHuman\nNo Ship\n49.0\n150\n\n\nObi-Wan Kenobi\nHuman\nNo Ship\n77.0\n182\n\n\nChewbacca\nWookiee\nMillennium Falcon\n112.0\n228\n\n\nHan Solo\nHuman\nMillennium Falcon\n80.0\n180\n\n\nWedge Antilles\nHuman\nX-wing\n77.0\n170\n\n\nYoda\nYoda's species\nNo Ship\n17.0\n66\n\n\nPalpatine\nHuman\nNo Ship\n75.0\n170\n\n\nBoba Fett\nHuman\nSlave 1\n78.2\n183\n\n\nIG-88\nDroid\nNo Ship\n140.0\n200\n\n\nBossk\nTrandoshan\nNo Ship\n113.0\n190\n\n\nLando Calrissian\nHuman\nMillennium Falcon\n79.0\n177\n\n\nLobot\nHuman\nNo Ship\n79.0\n175\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nStar Wars Characters\n    \n\nThe Empire Strikes Back\n    \n\n\n      Species\n      \n        Vitals\n      \n    \n\nMass (kg)\n      Height (cm)\n    \n\n\n\nX-wing\n    \n\nLuke Skywalker\nHuman\n77\n172\n\n\nWedge Antilles\nHuman\n77\n170\n\n\nMillennium Falcon\n    \n\nChewbacca\nWookiee\n112\n228\n\n\nHan Solo\nHuman\n80\n180\n\n\nLando Calrissian\nHuman\n79\n177\n\n\nNo Ship\n    \n\nC-3PO\nDroid\n75\n167\n\n\nR2-D2\nDroid\n32\n96\n\n\nLeia Organa\nHuman\n49\n150\n\n\nObi-Wan Kenobi\nHuman\n77\n182\n\n\nYoda\nYoda's species\n17\n66\n\n\nPalpatine\nHuman\n75\n170\n\n\nIG-88\nDroid\n140\n200\n\n\nBossk\nTrandoshan\n113\n190\n\n\nLobot\nHuman\n79\n175\n\n\nTIE Advanced x1\n    \n\nDarth Vader\nHuman\n136\n202\n\n\nSlave 1\n    \n\nBoba Fett\nHuman\n78\n183"
  },
  {
    "objectID": "Lectures/Lecture11/CSSS508_Lecture11.html#latex-tables",
    "href": "Lectures/Lecture11/CSSS508_Lecture11.html#latex-tables",
    "title": "",
    "section": "\n\\(\\LaTeX\\) Tables",
    "text": "\\(\\LaTeX\\) Tables\ngt is a very new package and is somewhat finicky when used in .pdf documents.\nFor tables in \\(\\LaTeX\\)—as is needed for .pdf files—I recommend also looking into the kableExtra or flextable packages.\n\nLike gt, kableExtra and flextable allow the construction of complex tables in either HTML or \\(\\LaTeX\\) using additive syntax similar to ggplot2 and dplyr. flextable is also great for Word tables.\n\n\nIf you want to edit \\(\\LaTeX\\) documents, you can do it in R using Sweave documents (.Rnw). Alternatively, you may want to work in a dedicated \\(\\LaTeX\\) editor. I recommend Overleaf for this purpose.\n\n\nRMarkdown has support for a fair amount of basic \\(\\LaTeX\\) syntax if you aren’t trying to get too fancy!"
  },
  {
    "objectID": "Lectures/Lecture11/CSSS508_Lecture11.html#gtsummary",
    "href": "Lectures/Lecture11/CSSS508_Lecture11.html#gtsummary",
    "title": "",
    "section": "gtsummary",
    "text": "gtsummary\nThe gtsummary package is similar to modelsummary in that it takes advantage of broom, gt, and kableExtra to provide a flexible table-making framework.\nWhile gtsummary can also produce model tables like modelsummary, it also produces descriptive statistic tables for dataframes1.\n\nlibrary(gtsummary)\n\nI prefer modelsummary’s syntax (or manual table building) for most model tables."
  },
  {
    "objectID": "Lectures/Lecture11/CSSS508_Lecture11.html#organization-systems",
    "href": "Lectures/Lecture11/CSSS508_Lecture11.html#organization-systems",
    "title": "",
    "section": "Organization Systems",
    "text": "Organization Systems\nOrganizing research projects is something you either do accidentally — and badly — or purposefully with some upfront labor.\n\nUniform organization makes switching between or revisiting projects easier.\n\n\nI suggest something like the following:\n\n\nproject/\n   readme.md\n   data/\n     derived/\n       processed_data.RData\n     raw/\n       core_data.csv\n   docs/\n     paper.Rmd\n   syntax/\n     functions.R\n     models.R\n\n\nThere is a clear hierarchy\n\nWritten content is in docs\n\nCode is in syntax\n\nData is in data\n\n\n\nNaming is uniform\n\nAll lower case\nWords separated by underscores\n\n\nNames are self-descriptive"
  },
  {
    "objectID": "Lectures/Lecture11/CSSS508_Lecture11.html#some-opinionated-advice",
    "href": "Lectures/Lecture11/CSSS508_Lecture11.html#some-opinionated-advice",
    "title": "CSSS 508 • Lecture 11",
    "section": "Some opinionated advice",
    "text": "Some opinionated advice"
  },
  {
    "objectID": "Lectures/Lecture11/CSSS508_Lecture11.html#sjplot-does-a-lot-more",
    "href": "Lectures/Lecture11/CSSS508_Lecture11.html#sjplot-does-a-lot-more",
    "title": "",
    "section": "\nsjPlot does a lot more",
    "text": "sjPlot does a lot more\nThe sjPlot package does a lot more than just make pretty tables. It is a rabbit holeof incredibly powerful and useful functions for displaying descriptive and inferential results.\nView the package website for extensive documentation.\nsjPlot is a bit more complicated than ggeffects but can do just about everything it can do as well; they were written by the same author!\nsjPlot is fairly new but offers a fairly comprehensive solution for ggplot based publication-ready social science data visualization. All graphical functions in sjPlot are based on ggplot2, so it should not take terribly long to figure out."
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#functions",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#functions",
    "title": "Introductions & Syllabus",
    "section": "Functions",
    "text": "Functions\nsqrt() is an example of a function in R.\nArguments are the inputs to a function. In this case, the only argument to sqrt() is x which can be a number or a vector of numbers.\n\n. . .\nThe basic template of a function is\nfunction_name(argument1, argument2 = value2, argument3 = value3...)\n\n. . .\n\n\n\n\n\n\n  Something to Note\n\n\n\nFunctions can have a wide range of arguments and some are required for the function to run, while others remain optional. You can see from each functions’ help page which are not required because they will have an = with some default value pre-selected. If there is no = it is up to the user to define that value and it’s therefore a required specification."
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#help",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#help",
    "title": "Introductions & Syllabus",
    "section": "Help",
    "text": "Help\n\n\nIf we didn’t have a good guess as to what sqrt() will do, we can type ?sqrt in the console and look at the Help panel on the right.\n\n?sqrt\n\n\nIf you’re trying to look up the help page for a function and can’t remember its name you can search by a keyword and you will get a list of help pages containing said keyword.\n\n??exponential"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#help-1",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#help-1",
    "title": "Introductions & Syllabus",
    "section": "Help",
    "text": "Help\nHelp files provide documentation on how to use functions and what functions produce. They will generally consist of the following sections:\n\nDescription - What does it do?\nUsage - How do you write it?\nArguments - What arguments does it take; which are required; what are the defaults?\nDetails - A more in-depth description\nValue - What does the function return?\nSee Also - Related R functions\nExamples - Example (& reproducible) code"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#comments",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#comments",
    "title": "Introductions & Syllabus",
    "section": "Comments",
    "text": "Comments\nAnything writen after #2 will be ignorned by R.\n\n# create vector of ages of students\nages &lt;- c(45, 21, 27, 34, 23, 24, 24)\n\n# get average age of students\nmean(ages)\n\n[1] 28.28571\n\n\n. . .\nComments help collaborators and future-you understand what, and more importantly, why you are doing what you’re doing with that specific line/chunk of code.\n. . .\nAdditionally, comments allow you to explain your overall coding plan and record anything important that you’ve discovered along the way."
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#naming-objects",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#naming-objects",
    "title": "Introductions & Syllabus",
    "section": "Naming Objects",
    "text": "Naming Objects\nObject names must begin with a letter and can contain letters, numbers, ., and _.\nTry to be consistent in naming objects. RStudio auto-complete means long, descriptive names are better than short, vague ones! Good names save confusion later!\n. . .\n\nsnake_case, where you separate lowercase words with _ is a common and practical naming convention that I strongly recommend.\n\n\nsnake_case_is_easy_to_read\nCamelCaseIsAlsoAnOptionButSortOfHardToReadQuickly\nsome.people.use.periods\nAnd_some.People_ARETRUErebels\n\n. . .\n\nRemember that object names are CaSe SeNsItIvE!!\nAlso, TYPOS MATTER!"
  },
  {
    "objectID": "Lectures/Lecture10/CSSS508_Lecture10.html",
    "href": "Lectures/Lecture10/CSSS508_Lecture10.html",
    "title": "Roadmap",
    "section": "",
    "text": "Next Steps\nCS&SS 508 • Lecture 10\n5 December 2023\nVictoria Sass"
  },
  {
    "objectID": "Lectures/Lecture10/CSSS508_Lecture10.html#naming-variables",
    "href": "Lectures/Lecture10/CSSS508_Lecture10.html#naming-variables",
    "title": "",
    "section": "Naming Variables",
    "text": "Naming Variables\nIt’s good practice to name variables using only lowercase letters, numbers, and _ (to separate words).\n\nRemember to give them descriptive names, even if that means they’re longer.\n\n\nIf you have many related variables, try and be consistent with your naming convention.\n\nA common prefix is preferable to a common suffix due to RStudio’s autocomplete feature.\n\n\n# Code goal: \nshort_flights &lt;- flights |&gt; \n  filter(air_time &lt; 60)\n\n# Code foul: \nSHORTFLIGHTS &lt;- flights |&gt; \n  filter(air_time &lt; 60)"
  },
  {
    "objectID": "Lectures/Lecture10/CSSS508_Lecture10.html#spacing",
    "href": "Lectures/Lecture10/CSSS508_Lecture10.html#spacing",
    "title": "",
    "section": "Spacing",
    "text": "Spacing\nFor readability you’ll want to put spaces around all mathematical operators1 (i.e. +, -, ==, &lt;, etc.) as well as the assignment operator (&lt;-).\n\n# Code goals: \nz &lt;- (a + b)^2 / d\nmean(x, na.rm = TRUE)\n\n# Code foul: \nz&lt;-( a + b ) ^ 2/d\nmean (x ,na.rm=TRUE)\n\n\nTo make code easier to skim quickly it’s alright to add extra space for better alignment.\n\nflights |&gt; \n  mutate(\n    speed      = distance / air_time,\n    dep_hour   = dep_time %/% 100,\n    dep_minute = dep_time %%  100\n  )\n\n\nexcept for ^"
  },
  {
    "objectID": "Lectures/Lecture10/CSSS508_Lecture10.html#pipes",
    "href": "Lectures/Lecture10/CSSS508_Lecture10.html#pipes",
    "title": "",
    "section": "Pipes",
    "text": "Pipes\nAs you begin to use more functions, sequentially, it can start to get unclear what’s happening when, and to what.\n\nmedian(sqrt(log(mean(gapminder$pop))))\n\n\nWith nested functions, like those above, you need to read the order of operations inside out, which is a bit awkward. It becomes even more confusing the more function calls you have, especially when they have multiple arguments each.\n\n\nEnter the pipe1: |&gt;\nPipes read “left to right” which is much more intuitive!\n\ngapminder$pop |&gt; mean() |&gt; log() |&gt; sqrt() |&gt; median()\n\n\n\nThe above code takes what’s on the left-hand side of |&gt; and gives it as the first unnamed argument to the first function (mean()).\nThe result of that function call is then “piped” to the first unnamed argument of the second function (log()).\n\n\n\nCeci n’est pas une pipe."
  },
  {
    "objectID": "Lectures/Lecture10/CSSS508_Lecture10.html#footnotes",
    "href": "Lectures/Lecture10/CSSS508_Lecture10.html#footnotes",
    "title": "Roadmap",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nEmbedding summary plots is a bit complicated and requires list columns↩︎\nI prefer modelsummary’s syntax (or manual table building) for most model tables.↩︎\nYou can also use the GitHub desktop application.↩︎\nAlso a great maximum likelihood introduction.↩︎"
  },
  {
    "objectID": "Lectures/Lecture10/CSSS508_Lecture10.html#pipes-1",
    "href": "Lectures/Lecture10/CSSS508_Lecture10.html#pipes-1",
    "title": "",
    "section": "Pipes",
    "text": "Pipes\nAs you can see, pipes allow us to “chain” many function calls together easily.\n\nThe so-called “native pipe” (i.e. built into base R) is relatively new. Before this, the pipe was a function from the magrittr package that looks like this: %&gt;%.\n\n\nThis latter version continues to work and has a different functionality than the new, native pipe.\n\n\nMost importantly, while both the magrittr pipe and the native pipe take the RHS (right-hand side) and “pipe” it to the LHS (left-hand side), they operate differently when it comes to explicitly specifying which argument of the LHS to pipe the RHS into.\n\n\n\n# magrittr pipe\na %&gt;% gsub('A', '-', x = .)\n\n# native pipe\na |&gt; gsub('A','-', x = _) # _ is the placeholder for |&gt; \na |&gt; gsub(pattern = 'A', replacement = '-') # leaving the \"piped\" argument as the only unnamed argument also works \na |&gt; (\\(.) gsub('A', '-', x = .))() # using an anonymous function call allow you to be explicit while specifying your own placeholder\n\n\n\n\n\n\nYou can read more about the differences between |&gt; and %&gt;% here and anonymous functions here. Code above comes from responses to this stackoverflow post."
  },
  {
    "objectID": "Lectures/Lecture10/CSSS508_Lecture10.html#pipes-2",
    "href": "Lectures/Lecture10/CSSS508_Lecture10.html#pipes-2",
    "title": "",
    "section": "Pipes",
    "text": "Pipes\nSome good syntax practices:\n\nYou should always put a space before |&gt; and it should usually be the last thing on a line.\n\nNew functions should be on a new line, indented 2 spaces (RStudio will automatically do this for you)\nNamed arguments within a function should also get their own line\n\n\n# code goals\nflights |&gt;  \n  group_by(tailnum) |&gt; \n  summarize(\n    delay = mean(arr_delay, na.rm = TRUE),\n    n = n()\n  )\n\n# code fouls\nflights |&gt;\n  group_by(\n    tailnum\n  ) |&gt; \n  summarize(delay = mean(arr_delay, na.rm = TRUE), n = n())"
  },
  {
    "objectID": "Lectures/Lecture10/CSSS508_Lecture10.html#r-scripts",
    "href": "Lectures/Lecture10/CSSS508_Lecture10.html#r-scripts",
    "title": "",
    "section": ".R scripts",
    "text": ".R scripts\nWe’ve been working with Quarto documents but you’ll sometimes simply want to use an R script, which is basically an entire file that is just a code chunk.\n\n\nWhy would you prefer an .R file over a .qmd file?\nWhen might you use a .qmd file?\n\n\n\n\nYou just need to run code, without the need for accompanying text output and plots in the same document. Examples include:\n\nReading in and cleaning/manipulating your data before analysis\nWriting functions you’ll use throughout your project\nGetting descriptive statistics/making descriptive plots of data\nRunning models and generating tables/plots of their results\n\n\n\n\n\n\nHomework assignments (like for this class) that require you to show code, describe your process for arriving at your solution, and include any results (i.e. tables, statistics, visualizations)\nAcademic articles\nPresentations for class, conferences, talks, etc.\nTheses/dissertations\nInteractive visualizations (i.e. widgets)\nBuilding your own website"
  },
  {
    "objectID": "Lectures/Lecture10/CSSS508_Lecture10.html#file-naming",
    "href": "Lectures/Lecture10/CSSS508_Lecture10.html#file-naming",
    "title": "",
    "section": "File naming",
    "text": "File naming\nFile names should:\n\nbe machine readable: avoid spaces, symbols, and special characters. Don’t rely on case sensitivity to distinguish files.\nbe human readable: use file names to describe what’s in the file.\nplay well with default ordering: start file names with numbers so that alphabetical sorting puts them in the order they get used."
  },
  {
    "objectID": "Lectures/Lecture10/CSSS508_Lecture10.html#file-naming-1",
    "href": "Lectures/Lecture10/CSSS508_Lecture10.html#file-naming-1",
    "title": "",
    "section": "File naming",
    "text": "File naming\n\n\nGood Example directory\nBad Example directory\n\n\n\n01-load-data.R\n02-exploratory-analysis.R\n03-model-approach-1.R\n04-model-approach-2.R\nfig-01.png\nfig-02.png\nreport-2022-03-20.qmd\nreport-2022-04-02.qmd\nreport-draft-notes.txt\n\n\n\nNumbering scripts makes it clear in which order they should be run.\nConsistent naming scheme makes it easy to see what things are grouped together and what varies.\nWith many files in one directory you should go a step further and create subfolders for different types of files (i.e. scripts, figures, tables, etc.)\n\n\n\n\nalternative model.R\ncode for exploratory analysis.r\nfinalreport.qmd\nFinalReport.qmd\nfig 1.png\nFigure_02.png\nmodel_first_try.R\nrun-first.r\ntemp.txt\n\n\n\nOrdering of the files is unclear\nInconsistent naming is confusing (which final report is THE final report?)\nNon-descriptive naming means more work for you in trying to decipher its contents"
  },
  {
    "objectID": "Lectures/Lecture10/CSSS508_Lecture10.html#projects",
    "href": "Lectures/Lecture10/CSSS508_Lecture10.html#projects",
    "title": "",
    "section": "Projects",
    "text": "Projects\n\n\n\n\n\n\n\nYou can create a project by clicking\n\n\nFile &gt; New Project…\n\n\n in the upper-left corner of RStudio\nthe dropdown menu in the upper-right corner of RStudio and selecting New Project…"
  },
  {
    "objectID": "Lectures/Lecture10/CSSS508_Lecture10.html#working-directory",
    "href": "Lectures/Lecture10/CSSS508_Lecture10.html#working-directory",
    "title": "",
    "section": "Working directory",
    "text": "Working directory\nYour working directory is where R will look for any files that you ask it to load and where it’ll put anything you ask it to save. It is literally just a folder somewhere on your computer or the remote server/cloud you’re working within.\n\nYou can ask R what your current working directory is by running getwd() (get working directory).\n\n\n\ngetwd()\n\n[1] \"/Users/victoriasass/Desktop/GitHub/CSSS508/Lectures/Lecture10\"\n\n\nYou can see above that this lecture was created in a lecture-specific folder within a lectures folder, in a directory for this class, which is in a folder called GitHub on the Desktop of my laptop.\n\n\nWhile you can technically set your working directory using setwd() and giving R a filepath, in the name of reproducible research I strongly advise an alternative: RStudio projects."
  },
  {
    "objectID": "Lectures/Lecture10/CSSS508_Lecture10.html#projects-1",
    "href": "Lectures/Lecture10/CSSS508_Lecture10.html#projects-1",
    "title": "",
    "section": "Projects",
    "text": "Projects\nA “project” is RStudio’s built-in organizational support system which keeps all the files associated with a given project (i.e. data, R scripts, figures, results) together in one directory.\n\nCreating a new project quite basically creates a new folder in a place that you specify. But it also does a few of other extremely useful things:\n\n\n\n\nCreates a .Rproj file which tracks your command history and all the files in your project folder.\nContains all the files needed to reproduce your work\n\ni.e. you can send a project folder to someone and they will be able to run it on their local machine\n\n\nFacilitates version control with built-in git/GitHub connection (more on this later in the course)"
  },
  {
    "objectID": "Lectures/Lecture11/CSSS508_Lecture11.html",
    "href": "Lectures/Lecture11/CSSS508_Lecture11.html",
    "title": "CSSS 508 • Lecture 11",
    "section": "",
    "text": "We’ve learned SO MUCH in this class:\n\n\n\n\n\n\n. . .\nToday, we’ll look at some of the ways you can extend your learning beyond the scope of this introductory course.\n\nVersion control with Git/GitHub\nTidy Modeling\nEven more visualizations\nWorking with geospatial data\nAnalyzing text data\nWriting theses/dissertations\nCreating slides for presentations (like this one!)\nCreating a website\n\n\n\n\n\n\nTidy model output with broom\nVisualizing models with ggeffects\nTables with gt, modelsummary, and gtsummary\n\n\n\n\n\n\n\n\nOrganization\nPortability\nVersion Control"
  },
  {
    "objectID": "Lectures/Lecture10/CSSS508_Lecture10.html#title-slide",
    "href": "Lectures/Lecture10/CSSS508_Lecture10.html#title-slide",
    "title": "Roadmap",
    "section": "",
    "text": "Next Steps\nCS&SS 508 • Lecture 10\n5 December 2023\nVictoria Sass"
  },
  {
    "objectID": "Lectures/Lecture10/CSSS508_Lecture10.html#title-slide-data-menu-title-workflow-best-practices-background-1e4655",
    "href": "Lectures/Lecture10/CSSS508_Lecture10.html#title-slide-data-menu-title-workflow-best-practices-background-1e4655",
    "title": "",
    "section": "{#title-slide data-menu-title = “Workflow & Best Practices” background = “#1e4655”}",
    "text": "{#title-slide data-menu-title = “Workflow & Best Practices” background = “#1e4655”}\n\nWorkflow & Best Practices\nCS&SS 508 • Victoria Sass"
  },
  {
    "objectID": "Lectures/Lecture10/CSSS508_Lecture10.html#section-slide-data-menu-title-roadmap-background-99a486",
    "href": "Lectures/Lecture10/CSSS508_Lecture10.html#section-slide-data-menu-title-roadmap-background-99a486",
    "title": "",
    "section": "{#section-slide data-menu-title = “Roadmap” background = “#99a486”}",
    "text": "{#section-slide data-menu-title = “Roadmap” background = “#99a486”}\nRoadmap"
  },
  {
    "objectID": "Lectures/Lecture10/CSSS508_Lecture10.html#section-slide",
    "href": "Lectures/Lecture10/CSSS508_Lecture10.html#section-slide",
    "title": "",
    "section": "",
    "text": "Roadmap"
  },
  {
    "objectID": "Lectures/Lecture10/CSSS508_Lecture10.html#title-slide-data-menu-titleworkflow-best-practices-background1e4655-background-image....imagescsss-logo.png-background-positioncenter-bottom-20-background-size50",
    "href": "Lectures/Lecture10/CSSS508_Lecture10.html#title-slide-data-menu-titleworkflow-best-practices-background1e4655-background-image....imagescsss-logo.png-background-positioncenter-bottom-20-background-size50",
    "title": "",
    "section": "{#title-slide data-menu-title=“Workflow & Best Practices” background=“#1e4655” background-image=“../../images/csss-logo.png” background-position=“center bottom 20%”, background-size=“50%”}",
    "text": "{#title-slide data-menu-title=“Workflow & Best Practices” background=“#1e4655” background-image=“../../images/csss-logo.png” background-position=“center bottom 20%”, background-size=“50%”}\nWorkflow & Best Practices\nCS&SS 508 • Lecture 1\n15 December 2023\nVictoria Sass"
  },
  {
    "objectID": "Lectures/Lecture10/CSSS508_Lecture10.html#title-slide-data-menu-titleworkflow-best-practices-background1e4655-background-image....imagescsss-logo.png-background-positioncenter-top-5-background-size50-link-colorc7cdac",
    "href": "Lectures/Lecture10/CSSS508_Lecture10.html#title-slide-data-menu-titleworkflow-best-practices-background1e4655-background-image....imagescsss-logo.png-background-positioncenter-top-5-background-size50-link-colorc7cdac",
    "title": "",
    "section": "{#title-slide data-menu-title=“Workflow & Best Practices” background=“#1e4655” background-image=“../../images/csss-logo.png” background-position=“center top 5%” background-size=“50%” $link-color=“#c7cdac”}",
    "text": "{#title-slide data-menu-title=“Workflow & Best Practices” background=“#1e4655” background-image=“../../images/csss-logo.png” background-position=“center top 5%” background-size=“50%” $link-color=“#c7cdac”}\nWorkflow & Best Practices\nCS&SS 508 • Lecture 10\n15 December 2023\nVictoria Sass"
  },
  {
    "objectID": "Lectures/Lecture10/CSSS508_Lecture10.html#title-slide-data-menu-titleworkflow-best-practices-background1e4655-background-image....imagescsss-logo.png-background-positioncenter-top-5-background-size50",
    "href": "Lectures/Lecture10/CSSS508_Lecture10.html#title-slide-data-menu-titleworkflow-best-practices-background1e4655-background-image....imagescsss-logo.png-background-positioncenter-top-5-background-size50",
    "title": "",
    "section": "{#title-slide data-menu-title=“Workflow & Best Practices” background=“#1e4655” background-image=“../../images/csss-logo.png” background-position=“center top 5%” background-size=“50%”}",
    "text": "{#title-slide data-menu-title=“Workflow & Best Practices” background=“#1e4655” background-image=“../../images/csss-logo.png” background-position=“center top 5%” background-size=“50%”}\nWorkflow & Best Practices\nCS&SS 508 • Lecture 10\n15 December 2023\nVictoria Sass"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#title-slide",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#title-slide",
    "title": "Introductions & Syllabus",
    "section": "",
    "text": "Syllabus and Introduction to R, RStudio, and Quarto\nCS&SS 508 • Lecture 1\n3 October 2023\nVictoria Sass"
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#title-slide",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#title-slide",
    "title": "Roadmap",
    "section": "",
    "text": "Visualizing Data\nCS&SS 508 • Lecture 2\n10 October 2023\nVictoria Sass"
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#title-slide",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#title-slide",
    "title": "",
    "section": "",
    "text": "Workflow & Reproducibility\nCS&SS 508 • Lecture 3\n17 October 2023\nVictoria Sass"
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#title-slide",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#title-slide",
    "title": "Roadmap",
    "section": "",
    "text": "Importing, Exporting, and Cleaning Data\nCS&SS 508 • Lecture 4\n24 October 2023\nVictoria Sass"
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture5.html#title-slide",
    "href": "Lectures/Lecture5/CSSS508_Lecture5.html#title-slide",
    "title": "Roadmap",
    "section": "",
    "text": "Manipulating and Summarizing Data\nCS&SS 508 • Lecture 5\n31 October 2023\nVictoria Sass"
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture5.html#homework-5",
    "href": "Lectures/Lecture5/CSSS508_Lecture5.html#homework-5",
    "title": "Roadmap",
    "section": "Homework 5",
    "text": "Homework 5\nCreate a qmd file (from scratch this time!) in which you answer each of the following questions. Be sure to display all your code in the knitted version (use throughout echo: false).\nRemember, the package nycflights13 contains data on flights originating in NYC during the year 2013. There are three airports servicing NYC: JFK, LGA (“LaGuardia”), and EWR (“Newark”).\n\nChoose an airport outside New York, and count how many flights went to that airport from NYC in 2013. How many of those flights started at JFK, LGA, and EWR? (Hint: Use filter, group_by, and summarize)\nThe variable arr_delay contains arrival delays in minutes (negative values represent early arrivals). Make a ggplot histogram displaying arrival delays for 2013 flights from NYC to the airport you chose.\nUse left_join to add weather data at departure to the subsetted data2. Calculate the mean temperature by month at departure (temp) across all flights3.\nInvestigate if there is a relationship between departure delay (dep_delay) and wind speed (wind_speed). Is the relationship different between JFK, LGA, and EWR? I suggest answering this question by making a plot and writing down a one-sentence interpretation.\n\nAs always, submit both the .qmd and knitted .html to Canvas."
  },
  {
    "objectID": "Lectures/Lecture6/CSSS508_Lecture6.html#title-slide",
    "href": "Lectures/Lecture6/CSSS508_Lecture6.html#title-slide",
    "title": "Preamble: Data Structures and Types in R",
    "section": "",
    "text": "Data Structures & Types\nCS&SS 508 • Lecture 6\n7 November 2023\nVictoria Sass"
  },
  {
    "objectID": "Lectures/Lecture6/CSSS508_Lecture6.html#homework-6",
    "href": "Lectures/Lecture6/CSSS508_Lecture6.html#homework-6",
    "title": "Preamble: Data Structures and Types in R",
    "section": "Homework 6",
    "text": "Homework 6\nFor Homework 6, you will fill in an Quarto template on our course website that walks you through the process of creating, accessing, and manipulating R data structures. Enter values in the qmd document and Render it to check your answers!\n\nRender after entering each answer!! If you get an error, check to see if undoing your last edit solves the problem. Coding an assignment to handle all possible mistakes is really hard!\nThis assignment is long, so start early.\n\nOn the due date, I will provide a key for the written answers. You will grade those answers as part of your peer review. In addition, you’ll be asked to comment on the style of your peer’s code and what you yourself did similarly/different. Please remember to provide a numerical grade (0-3), as always."
  },
  {
    "objectID": "Lectures/Lecture7/CSSS508_Lecture7.html#title-slide",
    "href": "Lectures/Lecture7/CSSS508_Lecture7.html#title-slide",
    "title": "Roadmap",
    "section": "",
    "text": "Working with Text Data\nCS&SS 508 • Lecture 7\n14 November 2023\nVictoria Sass"
  },
  {
    "objectID": "Lectures/Lecture7/CSSS508_Lecture7.html#answers-2",
    "href": "Lectures/Lecture7/CSSS508_Lecture7.html#answers-2",
    "title": "",
    "section": "Answers",
    "text": "Answers\n3. Make a ggplot\n\n\nCode\nPlot\n\n\n\n\nlibrary(ggplot2)\nggplot(cars, aes(speed, dist)) + \n  geom_point() +\n  geom_vline(xintercept = median_cars[1]) +\n  geom_hline(yintercept = median_cars[2])"
  },
  {
    "objectID": "Lectures/Lecture7/CSSS508_Lecture7.html#homework-7",
    "href": "Lectures/Lecture7/CSSS508_Lecture7.html#homework-7",
    "title": "Roadmap",
    "section": "Homework 7",
    "text": "Homework 7"
  },
  {
    "objectID": "Lectures/Lecture8/CSSS508_Lecture8.html#title-slide",
    "href": "Lectures/Lecture8/CSSS508_Lecture8.html#title-slide",
    "title": "Roadmap",
    "section": "",
    "text": "Writing Functions\nCS&SS 508 • Lecture 8\n21 November 2023\nVictoria Sass"
  },
  {
    "objectID": "Lectures/Lecture8/CSSS508_Lecture8.html#homework-8",
    "href": "Lectures/Lecture8/CSSS508_Lecture8.html#homework-8",
    "title": "Roadmap",
    "section": "Homework 8",
    "text": "Homework 8\nTime to work on Homework 8!"
  },
  {
    "objectID": "Lectures/Lecture11/CSSS508_Lecture11.html#title-slide",
    "href": "Lectures/Lecture11/CSSS508_Lecture11.html#title-slide",
    "title": "",
    "section": "",
    "text": "Next Steps\nCS&SS 508 • Lecture 11\n15 December 2023\nVictoria Sass"
  },
  {
    "objectID": "Lectures/Lecture11/CSSS508_Lecture11.html#ggpredict-output",
    "href": "Lectures/Lecture11/CSSS508_Lecture11.html#ggpredict-output",
    "title": "",
    "section": "\nggpredict() output",
    "text": "ggpredict() output\n\nlm_1_est\n\n# Predicted values of yn\n\nnum1 | Predicted |         95% CI\n---------------------------------\n  -6 |     -1.89 | [-3.71, -0.07]\n  -4 |     -0.68 | [-2.11,  0.74]\n  -2 |      0.52 | [-0.55,  1.59]\n   0 |      1.73 | [ 0.90,  2.56]\n   2 |      2.93 | [ 2.13,  3.73]\n   4 |      4.14 | [ 3.14,  5.14]\n   6 |      5.35 | [ 4.01,  6.68]\n\nAdjusted for:\n* fac1 = A"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#title-slide-data-menu-titlesyllabus-and-introduction-to-r-rstudio-and-quarto-background-image....imagescsss-logo.png-background-positioncenter-top-5-background-size50-background1e4655-bordersolid-99a486-medium",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#title-slide-data-menu-titlesyllabus-and-introduction-to-r-rstudio-and-quarto-background-image....imagescsss-logo.png-background-positioncenter-top-5-background-size50-background1e4655-bordersolid-99a486-medium",
    "title": "",
    "section": "{#title-slide data-menu-title=“Syllabus and Introduction to R, RStudio, and Quarto” background-image=“../../images/csss-logo.png” background-position=“center top 5%” background-size=“50%” background=“#1e4655”} {border=“solid #99a486” medium}",
    "text": "{#title-slide data-menu-title=“Syllabus and Introduction to R, RStudio, and Quarto” background-image=“../../images/csss-logo.png” background-position=“center top 5%” background-size=“50%” background=“#1e4655”} {border=“solid #99a486” medium}\nSyllabus and Introduction to R, RStudio, and Quarto\nCS&SS 508 • Lecture 1\n3 October 2023\nVictoria Sass"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#title-slide-data-menu-titlesyllabus-and-introduction-to-r-rstudio-and-quarto-background-image....imagescsss-logo.png-background-positioncenter-top-5-background-size50-background1e4655",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#title-slide-data-menu-titlesyllabus-and-introduction-to-r-rstudio-and-quarto-background-image....imagescsss-logo.png-background-positioncenter-top-5-background-size50-background1e4655",
    "title": "",
    "section": "{#title-slide data-menu-title=“Syllabus and Introduction to R, RStudio, and Quarto” background-image=“../../images/csss-logo.png” background-position=“center top 5%” background-size=“50%” background=“#1e4655”}",
    "text": "{#title-slide data-menu-title=“Syllabus and Introduction to R, RStudio, and Quarto” background-image=“../../images/csss-logo.png” background-position=“center top 5%” background-size=“50%” background=“#1e4655”}\nSyllabus and Introduction to R, RStudio, and Quarto\nCS&SS 508 • Lecture 1\n3 October 2023\nVictoria Sass"
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#base-r-plot",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#base-r-plot",
    "title": "Roadmap",
    "section": "Base R plot",
    "text": "Base R plot\n\n\n\nChina &lt;- gapminder |&gt; \n  filter(country == \"China\")\nplot(lifeExp ~ year, \n     data = China, \n     xlab = \"Year\", \n     ylab = \"Life expectancy\",\n     main = \"Life expectancy in China\", \n     col = \"red\", \n     pch = 16)\n\n\nThis plot is made with one function and many arguments.\n\n\n\n\n\n\n\n\n\n\nNote: Don’t worry about the code used to create the object China. We’ll explore data manipulation in a couple weeks!"
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#base-plot",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#base-plot",
    "title": "",
    "section": "1. Base Plot",
    "text": "1. Base Plot\n\n\nCode\nPlot\n\n\n\n\nggplot(data = gapminder, \n       aes(x = year, y = lifeExp, group = country)) \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWhat might be a good geom layer for this data?"
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#base-ggplot-1",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#base-ggplot-1",
    "title": "Roadmap",
    "section": "Base ggplot",
    "text": "Base ggplot\n\nCodePlot\n\n\n\nggplot(data = gapminder, \n       aes(x = year, y = lifeExp, group = country)) \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWhat might be a good geom layer for this data?"
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html",
    "title": "Roadmap",
    "section": "",
    "text": "Importing, Exporting, and Cleaning Data\nCS&SS 508 • Lecture 4\n24 October 2023\nVictoria Sass"
  },
  {
    "objectID": "Lectures/Lecture11/CSSS508_Lecture10.html#title-slide",
    "href": "Lectures/Lecture11/CSSS508_Lecture10.html#title-slide",
    "title": "",
    "section": "",
    "text": "Next Steps\nCS&SS 508 • Lecture 10\n5 December 2023\nVictoria Sass"
  },
  {
    "objectID": "Lectures/Lecture11/CSSS508_Lecture10.html#topics-for-today",
    "href": "Lectures/Lecture11/CSSS508_Lecture10.html#topics-for-today",
    "title": "",
    "section": "Topics for Today",
    "text": "Topics for Today\nWorking with Model Results\n\nTidy model output with broom\n\nVisualizing models with ggeffects\n\nTables with gt, modelsummary, and gtsummary\n\n\nReproducible Research\nBest Practices\n\nOrganization\nPortability\nVersion Control\n\nWrapping up the course"
  },
  {
    "objectID": "Lectures/Lecture11/CSSS508_Lecture10.html#broom",
    "href": "Lectures/Lecture11/CSSS508_Lecture10.html#broom",
    "title": "",
    "section": "broom",
    "text": "broom\nbroom is a package that “tidies up” the output from models such a lm() and glm().\nIt has a small number of key functions:\n\n\ntidy() - Creates a dataframe summary of a model.\n\naugment() - Adds columns—such as fitted values—to the data used in the model.\n\nglance() - Provides one row of fit statistics for models.\n\n\nlibrary(broom)"
  },
  {
    "objectID": "Lectures/Lecture11/CSSS508_Lecture10.html#model-output-is-a-list",
    "href": "Lectures/Lecture11/CSSS508_Lecture10.html#model-output-is-a-list",
    "title": "",
    "section": "Model Output is a List",
    "text": "Model Output is a List\nlm() and summary() produce lists as output, which cannot go directly into tidyverse functions, particularly those in ggplot2.\n\nlm_1 &lt;- lm(yn ~ num1 + fac1, data = ex_dat)\nsummary(lm_1)\n\n\nCall:\nlm(formula = yn ~ num1 + fac1, data = ex_dat)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-6.8123 -2.1536 -0.1674  2.3389  8.3875 \n\nCoefficients:\n            Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)   0.9352     0.4212   2.220 0.027546 *  \nnum1          0.4205     0.1128   3.726 0.000254 ***\nfac1B         1.1114     0.5552   2.002 0.046679 *  \nfac1C         2.3357     0.5883   3.970 0.000101 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 3.261 on 196 degrees of freedom\nMultiple R-squared:   0.13, Adjusted R-squared:  0.1166 \nF-statistic: 9.758 on 3 and 196 DF,  p-value: 4.964e-06\n...."
  },
  {
    "objectID": "Lectures/Lecture11/CSSS508_Lecture10.html#model-output-varies",
    "href": "Lectures/Lecture11/CSSS508_Lecture10.html#model-output-varies",
    "title": "",
    "section": "Model Output Varies!",
    "text": "Model Output Varies!\nEach type of model also produces somewhat different output, so you can’t just reuse the same code to handle output from every model.\n\nglm_1 &lt;- glm(yb ~ num1 + fac1, data = ex_dat, family=binomial(link=\"logit\"))\nsummary(glm_1)\n\n\nCall:\nglm(formula = yb ~ num1 + fac1, family = binomial(link = \"logit\"), \n    data = ex_dat)\n\nCoefficients:\n            Estimate Std. Error z value Pr(&gt;|z|)    \n(Intercept) -0.81130    0.28338  -2.863 0.004197 ** \nnum1         0.26552    0.07713   3.442 0.000577 ***\nfac1B        0.53217    0.35824   1.486 0.137411    \nfac1C        0.97608    0.38510   2.535 0.011258 *  \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n(Dispersion parameter for binomial family taken to be 1)\n\n    Null deviance: 277.08  on 199  degrees of freedom\nResidual deviance: 257.96  on 196  degrees of freedom\nAIC: 265.96\n\n...."
  },
  {
    "objectID": "Lectures/Lecture11/CSSS508_Lecture10.html#broomtidy",
    "href": "Lectures/Lecture11/CSSS508_Lecture10.html#broomtidy",
    "title": "",
    "section": "broom::tidy()",
    "text": "broom::tidy()\ntidy() produces similar output, but as a dataframe.\n\nlm_1 %&gt;% tidy()\n\n# A tibble: 4 × 5\n  term        estimate std.error statistic  p.value\n  &lt;chr&gt;          &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;\n1 (Intercept)    0.935     0.421      2.22 0.0275  \n2 num1           0.420     0.113      3.73 0.000254\n3 fac1B          1.11      0.555      2.00 0.0467  \n4 fac1C          2.34      0.588      3.97 0.000101\n\n\nEach type of model (e.g. glm, lmer) has a different method with its own additional arguments. See ?tidy.lm for an example."
  },
  {
    "objectID": "Lectures/Lecture11/CSSS508_Lecture10.html#broomtidy-1",
    "href": "Lectures/Lecture11/CSSS508_Lecture10.html#broomtidy-1",
    "title": "",
    "section": "broom::tidy()",
    "text": "broom::tidy()\nThis output is also completely identical between different models.\nThis can be very useful and important if running models with different test statistics… or just running a lot of models!\n\nglm_1 %&gt;% tidy()\n\n# A tibble: 4 × 5\n  term        estimate std.error statistic  p.value\n  &lt;chr&gt;          &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;\n1 (Intercept)   -0.811    0.283      -2.86 0.00420 \n2 num1           0.266    0.0771      3.44 0.000577\n3 fac1B          0.532    0.358       1.49 0.137   \n4 fac1C          0.976    0.385       2.53 0.0113"
  },
  {
    "objectID": "Lectures/Lecture11/CSSS508_Lecture10.html#broomglance",
    "href": "Lectures/Lecture11/CSSS508_Lecture10.html#broomglance",
    "title": "",
    "section": "broom::glance()",
    "text": "broom::glance()\nglance() produces dataframes of fit statistics for models.\nIf you run many models, you can compare each model row-by-row in each column… or even plot their different fit statistics to allow holistic comparison.\n\nglance(lm_1)\n\n# A tibble: 1 × 12\n  r.squared adj.r.squared sigma statistic    p.value    df logLik   AIC   BIC\n      &lt;dbl&gt;         &lt;dbl&gt; &lt;dbl&gt;     &lt;dbl&gt;      &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1     0.130         0.117  3.26      9.76 0.00000496     3  -518. 1046. 1063.\n# ℹ 3 more variables: deviance &lt;dbl&gt;, df.residual &lt;int&gt;, nobs &lt;int&gt;"
  },
  {
    "objectID": "Lectures/Lecture11/CSSS508_Lecture10.html#broomaugment",
    "href": "Lectures/Lecture11/CSSS508_Lecture10.html#broomaugment",
    "title": "",
    "section": "broom::augment()",
    "text": "broom::augment()\naugment() takes values generated by a model and adds them back to the original data. This includes fitted values, residuals, and leverage statistics.\n\naugment(lm_1) %&gt;% \n  head()\n\n# A tibble: 6 × 9\n     yn  num1 fac1  .fitted .resid   .hat .sigma   .cooksd .std.resid\n  &lt;dbl&gt; &lt;dbl&gt; &lt;fct&gt;   &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;     &lt;dbl&gt;      &lt;dbl&gt;\n1 4.39  1.33  B        2.61  1.78  0.0130   3.27 0.000995      0.549 \n2 1.36  2.81  A        2.12 -0.755 0.0206   3.27 0.000288     -0.234 \n3 0.113 1.06  A        1.38 -1.27  0.0159   3.27 0.000624     -0.393 \n4 1.60  1.49  B        2.67 -1.07  0.0131   3.27 0.000366     -0.332 \n5 0.313 0.958 B        2.45 -2.14  0.0130   3.27 0.00143      -0.659 \n6 5.46  4.67  C        5.23  0.227 0.0351   3.27 0.0000456     0.0708\n\n\nSee ?augment.lm for examples of what augment() can do."
  },
  {
    "objectID": "Lectures/Lecture11/CSSS508_Lecture10.html#the-power-of-broom",
    "href": "Lectures/Lecture11/CSSS508_Lecture10.html#the-power-of-broom",
    "title": "",
    "section": "The Power of broom\n",
    "text": "The Power of broom\n\nThe real advantage of broom becomes apparent when running many models at once. Here we run separate models for each level of fac1:\n\nex_dat %&gt;% \n  nest_by(fac1) %&gt;% #&lt;&lt;\n  mutate(model = list(lm(yn ~  num1 + fac2, data = data))) %&gt;%  \n  summarize(tidy(model), .groups = \"drop\")\n\n# A tibble: 9 × 6\n  fac1  term        estimate std.error statistic   p.value\n  &lt;fct&gt; &lt;chr&gt;          &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;\n1 A     (Intercept)    0.345     0.575     0.599 0.551    \n2 A     num1           0.329     0.199     1.65  0.104    \n3 A     fac2No         1.35      0.817     1.66  0.103    \n4 B     (Intercept)    2.34      0.534     4.38  0.0000387\n5 B     num1           0.294     0.174     1.69  0.0954   \n6 B     fac2No        -0.284     0.691    -0.410 0.683    \n7 C     (Intercept)    2.65      0.655     4.05  0.000157 \n8 C     num1           0.585     0.220     2.66  0.0101   \n9 C     fac2No         1.03      0.928     1.11  0.272    \n\n\n\n\nnest_by() nests data into a list column by levels of fac1."
  },
  {
    "objectID": "Lectures/Lecture11/CSSS508_Lecture10.html#geom_smooth",
    "href": "Lectures/Lecture11/CSSS508_Lecture10.html#geom_smooth",
    "title": "",
    "section": "geom_smooth()",
    "text": "geom_smooth()\nI have used geom_smooth() in many past examples.\ngeom_smooth() generates “smoothed conditional means” including loess curves and generalized additive models (GAMs).\n\nNote, however, that most regression models are conditional mean models, such as ordinary least squares and generalized linear models.\n\n\nWe can use geom_smooth() to add a layer depicting common bivariate models.\nWe’ll look at this with the gapminder data from Week 2.\n\nlibrary(gapminder)"
  },
  {
    "objectID": "Lectures/Lecture11/CSSS508_Lecture10.html#default-geom_smooth",
    "href": "Lectures/Lecture11/CSSS508_Lecture10.html#default-geom_smooth",
    "title": "",
    "section": "Default geom_smooth()\n",
    "text": "Default geom_smooth()\n\n\nggplot(data = gapminder, aes(x = year, y = lifeExp, color = continent)) +\n  geom_point(position = position_jitter(1, 0), size = 0.5) +\n  geom_smooth()\n\n\nBy default, geom_smooth() chooses either a loess smoother (N &lt; 1000) or a GAM depending on the number of observations."
  },
  {
    "objectID": "Lectures/Lecture11/CSSS508_Lecture10.html#linear-glm",
    "href": "Lectures/Lecture11/CSSS508_Lecture10.html#linear-glm",
    "title": "",
    "section": "Linear glm\n",
    "text": "Linear glm\n\n\nggplot(data = gapminder, aes(x = year, y = lifeExp, color = continent)) +\n  geom_point(position = position_jitter(1,0), size = 0.5) +\n  geom_smooth(method = \"glm\", formula = y ~ x)\n\n\nWe could also fit a standard linear model using either method = \"glm\" or method = \"lm\" and a formula like y ~ x."
  },
  {
    "objectID": "Lectures/Lecture11/CSSS508_Lecture10.html#polynomial-glm",
    "href": "Lectures/Lecture11/CSSS508_Lecture10.html#polynomial-glm",
    "title": "",
    "section": "Polynomial glm\n",
    "text": "Polynomial glm\n\n\nggplot(data = gapminder, aes(x = year, y = lifeExp, color = continent)) +\n  geom_point(position = position_jitter(1,0), size = 0.5) +\n  geom_smooth(method = \"glm\", formula = y ~ poly(x, 2)) \n\n\npoly(x, 2) produces a quadratic model which contains a linear term (x) and a quadratic term (x^2)."
  },
  {
    "objectID": "Lectures/Lecture11/CSSS508_Lecture10.html#more-complex-models",
    "href": "Lectures/Lecture11/CSSS508_Lecture10.html#more-complex-models",
    "title": "",
    "section": "More Complex Models",
    "text": "More Complex Models\nWhat if we want something more complex than a bivariate model?\nWhat if we have a statistically complex model, like nonlinear probability model or multilevel model?\nWe need to go beyond geom_smooth()!"
  },
  {
    "objectID": "Lectures/Lecture11/CSSS508_Lecture10.html#but-first-vocab",
    "href": "Lectures/Lecture11/CSSS508_Lecture10.html#but-first-vocab",
    "title": "",
    "section": "But first, vocab!",
    "text": "But first, vocab!\nWe are often interested in what might happen if some variables take particular values, often ones not seen in the actual data.\n\nWhen we set variables to certain values, we refer to them as counterfactual values or just counterfactuals.\n\n\nFor example, if we know nothing about a new observation, our prediction for that estimate is often based on assuming every variable is at its mean.\n\n\nSometimes, however, we might have very specific questions which require setting (possibly many) combinations of variables to particular values and making an estimate or prediction.\n\n\nProviding specific estimates, conditional on values of covariates, is a nice way to summarize results, particularly for models with unintuitive parameters (e.g. logit models)."
  },
  {
    "objectID": "Lectures/Lecture11/CSSS508_Lecture10.html#ggeffects-1",
    "href": "Lectures/Lecture11/CSSS508_Lecture10.html#ggeffects-1",
    "title": "",
    "section": "ggeffects",
    "text": "ggeffects\nIf we want to look at more complex models, we can use ggeffects to create and plot tidy marginal effects.\nThat is, tidy dataframes of ranges of predicted values that can be fed straight into ggplot2 for plotting model results.\nWe will focus on two ggeffects functions:\n\n\nggpredict() - Computes predicted values for the outcome variable at margins of specific variables.\n\nplot.ggeffects() - A plot method for ggeffects objects (like ggpredict() output)\n\n\nlibrary(ggeffects)"
  },
  {
    "objectID": "Lectures/Lecture11/CSSS508_Lecture10.html#quick-simulated-data",
    "href": "Lectures/Lecture11/CSSS508_Lecture10.html#quick-simulated-data",
    "title": "",
    "section": "Quick Simulated Data",
    "text": "Quick Simulated Data\nTo best show off ggeffects, I need a data frame with numeric and categorical variables with strong relationships. It is easiest to just simulate it:\n\nex_dat &lt;- data.frame(num1 = rnorm(200, 1, 2), \n                     fac1 = sample(c(1, 2, 3), 200, TRUE),\n                     num2 = rnorm(200, 0, 3),\n                     fac2 = sample(c(1, 2))) %&gt;%\n  mutate(yn = num1 * 0.5 + fac1 * 1.1 + num2 * 0.7 +\n              fac2 - 1.5  + rnorm(200, 0, 2)) %&gt;% \n  mutate(yb = as.numeric(yn &gt; mean(yn))) %&gt;%\n  mutate(fac1 = factor(fac1, labels = c(\"A\", \"B\", \"C\")),\n         fac2 = factor(fac2, labels = c(\"Yes\", \"No\")))\nglimpse(ex_dat)\n\nRows: 200\nColumns: 6\n$ num1 &lt;dbl&gt; 1.73948022, 1.26340231, -0.70101835, 1.37232943, -0.21396020, -0.…\n$ fac1 &lt;fct&gt; A, B, B, A, C, C, C, C, C, A, A, C, B, A, A, A, B, C, A, C, C, C,…\n$ num2 &lt;dbl&gt; -2.69662851, 7.07885940, 2.18307211, -4.98689137, 0.21804300, -3.…\n$ fac2 &lt;fct&gt; Yes, No, Yes, No, Yes, No, Yes, No, Yes, No, Yes, No, Yes, No, Ye…\n$ yn   &lt;dbl&gt; -3.69963710, 12.46092978, 6.53248529, -2.39113773, 0.29252644, 1.…\n$ yb   &lt;dbl&gt; 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0,…\n\n\nNow we can get ggpredicting!"
  },
  {
    "objectID": "Lectures/Lecture11/CSSS508_Lecture10.html#ggpredict",
    "href": "Lectures/Lecture11/CSSS508_Lecture10.html#ggpredict",
    "title": "",
    "section": "ggpredict()",
    "text": "ggpredict()\nWhen you run ggpredict(), it produces a dataframe with a row for every unique value of a supplied predictor (“independent”) variable (term).\nEach row contains an expected (estimated) value for the outcome (“dependent”) variable, plus confidence intervals.\n\nlm_1 &lt;- lm(yn ~ num1 + fac1, data = ex_dat)\nlm_1_est &lt;- ggpredict(lm_1, terms = \"num1\")\n\nIf desired, the argument interval = \"prediction\" will give predicted intervals instead."
  },
  {
    "objectID": "Lectures/Lecture11/CSSS508_Lecture10.html#ggpredict-output",
    "href": "Lectures/Lecture11/CSSS508_Lecture10.html#ggpredict-output",
    "title": "",
    "section": "\nggpredict() output",
    "text": "ggpredict() output\n\nlm_1_est\n\n# Predicted values of yn\n\nnum1 | Predicted |        95% CI\n--------------------------------\n  -6 |     -0.91 | [-2.58, 0.77]\n  -4 |     -0.28 | [-1.57, 1.01]\n  -2 |      0.35 | [-0.60, 1.29]\n   0 |      0.97 | [ 0.25, 1.69]\n   2 |      1.60 | [ 0.87, 2.32]\n   4 |      2.22 | [ 1.26, 3.18]\n   6 |      2.85 | [ 1.55, 4.15]\n   8 |      3.47 | [ 1.79, 5.16]\n\nAdjusted for:\n* fac1 = A"
  },
  {
    "objectID": "Lectures/Lecture11/CSSS508_Lecture10.html#plot-for-ggpredict",
    "href": "Lectures/Lecture11/CSSS508_Lecture10.html#plot-for-ggpredict",
    "title": "",
    "section": "\nplot() for ggpredict()\n",
    "text": "plot() for ggpredict()\n\nggeffects features a plot() method, plot.ggeffects(), which produces a ggplot when you give plot() output from ggpredict().\n\nplot(lm_1_est)"
  },
  {
    "objectID": "Lectures/Lecture11/CSSS508_Lecture10.html#grouping-with-ggpredict",
    "href": "Lectures/Lecture11/CSSS508_Lecture10.html#grouping-with-ggpredict",
    "title": "",
    "section": "Grouping with ggpredict()\n",
    "text": "Grouping with ggpredict()\n\nWhen using a vector of terms, ggeffects will plot the first along the x-axis and use others for grouping. Note we can pipe a model into ggpredict()!\n\nglm(yb ~ num1 + fac1 + num2 + fac2, data = ex_dat, family = binomial(link = \"logit\")) %&gt;%\n  ggpredict(terms = c(\"num1\", \"fac1\")) %&gt;% \n  plot()"
  },
  {
    "objectID": "Lectures/Lecture11/CSSS508_Lecture10.html#faceting-with-ggpredict",
    "href": "Lectures/Lecture11/CSSS508_Lecture10.html#faceting-with-ggpredict",
    "title": "",
    "section": "Faceting with ggpredict()\n",
    "text": "Faceting with ggpredict()\n\nYou can add facet = TRUE to the plot() call to facet over grouping terms.\n\nglm(yb ~ num1 + fac1 + num2 + fac2, data = ex_dat, family = binomial(link = \"logit\")) %&gt;%\n  ggpredict(terms = c(\"num1\", \"fac1\")) %&gt;% \n  plot(facet = TRUE)"
  },
  {
    "objectID": "Lectures/Lecture11/CSSS508_Lecture10.html#counterfactual-values",
    "href": "Lectures/Lecture11/CSSS508_Lecture10.html#counterfactual-values",
    "title": "",
    "section": "Counterfactual Values",
    "text": "Counterfactual Values\nYou can add values in square brackets in the terms = argument to specify counterfactual values.\n\nglm(yb ~ num1 + fac1 + num2 + fac2, data = ex_dat, family = binomial(link = \"logit\")) %&gt;%\n  ggpredict(terms = c(\"num1 [-1,0,1]\", \"fac1 [A,B]\")) %&gt;% plot(facet = TRUE)"
  },
  {
    "objectID": "Lectures/Lecture11/CSSS508_Lecture10.html#representative-values",
    "href": "Lectures/Lecture11/CSSS508_Lecture10.html#representative-values",
    "title": "",
    "section": "Representative Values",
    "text": "Representative Values\nYou can also use [meansd] or [minmax] to set representative values.\n\nglm(yb ~ num1 + fac1 + num2 + fac2, data = ex_dat, family = binomial(link = \"logit\")) %&gt;%\n  ggpredict(terms = c(\"num1 [meansd]\", \"num2 [minmax]\")) %&gt;% plot(facet = TRUE)"
  },
  {
    "objectID": "Lectures/Lecture11/CSSS508_Lecture10.html#dot-plots-with-ggpredict",
    "href": "Lectures/Lecture11/CSSS508_Lecture10.html#dot-plots-with-ggpredict",
    "title": "",
    "section": "Dot plots with ggpredict()\n",
    "text": "Dot plots with ggpredict()\n\nggpredict will produce dot plots with error bars for categorical predictors.\n\nlm(yn ~ fac1 + fac2, data = ex_dat) %&gt;% \n  ggpredict(terms = c(\"fac1\", \"fac2\")) %&gt;% \n  plot()"
  },
  {
    "objectID": "Lectures/Lecture11/CSSS508_Lecture10.html#notes-on-ggeffects",
    "href": "Lectures/Lecture11/CSSS508_Lecture10.html#notes-on-ggeffects",
    "title": "",
    "section": "Notes on ggeffects\n",
    "text": "Notes on ggeffects\n\nThere is a lot more to the ggeffects package that you can see in the package vignette and the github repository. This includes, but is not limited to:\n\nPredicted values for polynomial and interaction terms\nGetting predictions from models from dozens of other packages\nSending ggeffects objects to ggplot2 to freely modify plots"
  },
  {
    "objectID": "Lectures/Lecture11/CSSS508_Lecture10.html#pander-regression-tables",
    "href": "Lectures/Lecture11/CSSS508_Lecture10.html#pander-regression-tables",
    "title": "",
    "section": "\npander Regression Tables",
    "text": "pander Regression Tables\nWe’ve used pander to create nice tables for dataframes. But pander has methods to handle all sort of objects that you might want displayed nicely.\nThis includes model output, such as from lm(), glm(), and summary().\n\nlibrary(pander)"
  },
  {
    "objectID": "Lectures/Lecture11/CSSS508_Lecture10.html#pander-and-lm",
    "href": "Lectures/Lecture11/CSSS508_Lecture10.html#pander-and-lm",
    "title": "",
    "section": "\npander() and lm()\n",
    "text": "pander() and lm()\n\nYou can send an lm() object straight to pander:\n\npander(lm_1) # this creates an markdown-formatted chunk of text you can add to your qmd document\n\n\nFitting linear model: yn ~ num1 + fac1\n\n \nEstimate\nStd. Error\nt value\nPr(&gt;\n\n\n\n(Intercept)\n1.003\n0.3866\n2.594\n0.01019\n\n\nnum1\n0.6407\n0.1047\n6.118\n5.06e-09\n\n\nfac1B\n1.675\n0.5341\n3.137\n0.001972\n\n\nfac1C\n2.16\n0.5349\n4.038\n7.719e-05"
  },
  {
    "objectID": "Lectures/Lecture11/CSSS508_Lecture10.html#pander-and-summary",
    "href": "Lectures/Lecture11/CSSS508_Lecture10.html#pander-and-summary",
    "title": "",
    "section": "\npander() and summary()\n",
    "text": "pander() and summary()\n\nYou can do this with summary() as well, for added information:\n\npander(summary(lm_1))\n\n\n\n \nEstimate\nStd. Error\nt value\nPr(&gt;\n\n\n\n(Intercept)\n1.003\n0.3866\n2.594\n0.01019\n\n\nnum1\n0.6407\n0.1047\n6.118\n5.06e-09\n\n\nfac1B\n1.675\n0.5341\n3.137\n0.001972\n\n\nfac1C\n2.16\n0.5349\n4.038\n7.719e-05\n\n\n\n\nFitting linear model: yn ~ num1 + fac1\n\nObservations\nResidual Std. Error\n\\(R^2\\)\nAdjusted \\(R^2\\)\n\n\n\n200\n3.093\n0.2126\n0.2005"
  },
  {
    "objectID": "Lectures/Lecture11/CSSS508_Lecture10.html#advanced-tables",
    "href": "Lectures/Lecture11/CSSS508_Lecture10.html#advanced-tables",
    "title": "",
    "section": "Advanced Tables",
    "text": "Advanced Tables\npander tables are great for basic rmarkdown documents, but they’re not generally publication ready.\nWe’re going to talk about a few different approaches for making nicer tables:\n\ngt from RStudio for general table construction\nmodelsummary for creating model tables\ngtsummary for creating data summaries"
  },
  {
    "objectID": "Lectures/Lecture11/CSSS508_Lecture10.html#gt",
    "href": "Lectures/Lecture11/CSSS508_Lecture10.html#gt",
    "title": "",
    "section": "gt",
    "text": "gt\nIf you need to more customizability or different output types, RStudio’s gt package is a new and powerful system for creating tables from dataframes. We’ll use dplyr’s built-in starwars data for some examples.\n\nlibrary(gt)\ntes_chars &lt;- starwars %&gt;% \n  unnest(films) %&gt;% \n  unnest(starships, keep_empty = TRUE) %&gt;% \n  filter(films == \"The Empire Strikes Back\") %&gt;% \n  select(name, species, starships, mass, height) %&gt;%\n  distinct(name, .keep_all = TRUE) %&gt;%\n  mutate(starships = ifelse(name == \"Obi-Wan Kenobi\" | is.na(starships), \n                            \"No Ship\", starships))\nglimpse(tes_chars)\n\nRows: 16\nColumns: 5\n$ name      &lt;chr&gt; \"Luke Skywalker\", \"C-3PO\", \"R2-D2\", \"Darth Vader\", \"Leia Org…\n$ species   &lt;chr&gt; \"Human\", \"Droid\", \"Droid\", \"Human\", \"Human\", \"Human\", \"Wooki…\n$ starships &lt;chr&gt; \"X-wing\", \"No Ship\", \"No Ship\", \"TIE Advanced x1\", \"No Ship\"…\n$ mass      &lt;dbl&gt; 77.0, 75.0, 32.0, 136.0, 49.0, 77.0, 112.0, 80.0, 77.0, 17.0…\n$ height    &lt;int&gt; 172, 167, 96, 202, 150, 182, 228, 180, 170, 66, 170, 183, 20…"
  },
  {
    "objectID": "Lectures/Lecture11/CSSS508_Lecture10.html#initialize",
    "href": "Lectures/Lecture11/CSSS508_Lecture10.html#initialize",
    "title": "",
    "section": "Initialize",
    "text": "Initialize\n\n\n\ntes_chars %&gt;%\n  gt() \n\ngt() just renders the dataframe as a table using markdown.\n\n\n\n\n\n\n\n\nname\n      species\n      starships\n      mass\n      height\n    \n\n\nLuke Skywalker\nHuman\nX-wing\n77.0\n172\n\n\nC-3PO\nDroid\nNo Ship\n75.0\n167\n\n\nR2-D2\nDroid\nNo Ship\n32.0\n96\n\n\nDarth Vader\nHuman\nTIE Advanced x1\n136.0\n202\n\n\nLeia Organa\nHuman\nNo Ship\n49.0\n150\n\n\nObi-Wan Kenobi\nHuman\nNo Ship\n77.0\n182\n\n\nChewbacca\nWookiee\nMillennium Falcon\n112.0\n228\n\n\nHan Solo\nHuman\nMillennium Falcon\n80.0\n180\n\n\nWedge Antilles\nHuman\nX-wing\n77.0\n170\n\n\nYoda\nYoda's species\nNo Ship\n17.0\n66\n\n\nPalpatine\nHuman\nNo Ship\n75.0\n170\n\n\nBoba Fett\nHuman\nSlave 1\n78.2\n183\n\n\nIG-88\nDroid\nNo Ship\n140.0\n200\n\n\nBossk\nTrandoshan\nNo Ship\n113.0\n190\n\n\nLando Calrissian\nHuman\nMillennium Falcon\n79.0\n177\n\n\nLobot\nHuman\nNo Ship\n79.0\n175"
  },
  {
    "objectID": "Lectures/Lecture11/CSSS508_Lecture10.html#grouping",
    "href": "Lectures/Lecture11/CSSS508_Lecture10.html#grouping",
    "title": "",
    "section": "Grouping",
    "text": "Grouping\n\n\n\ntes_chars %&gt;% \n  group_by(starships) %&gt;%\n  gt()\n\nIf we group_by() first, the levels of the grouping variable become grouping rows in the table.\n\n\n\n\n\n\n\n\nname\n      species\n      mass\n      height\n    \n\n\nX-wing\n    \n\nLuke Skywalker\nHuman\n77.0\n172\n\n\nWedge Antilles\nHuman\n77.0\n170\n\n\nNo Ship\n    \n\nC-3PO\nDroid\n75.0\n167\n\n\nR2-D2\nDroid\n32.0\n96\n\n\nLeia Organa\nHuman\n49.0\n150\n\n\nObi-Wan Kenobi\nHuman\n77.0\n182\n\n\nYoda\nYoda's species\n17.0\n66\n\n\nPalpatine\nHuman\n75.0\n170\n\n\nIG-88\nDroid\n140.0\n200\n\n\nBossk\nTrandoshan\n113.0\n190\n\n\nLobot\nHuman\n79.0\n175\n\n\nTIE Advanced x1\n    \n\nDarth Vader\nHuman\n136.0\n202\n\n\nMillennium Falcon\n    \n\nChewbacca\nWookiee\n112.0\n228\n\n\nHan Solo\nHuman\n80.0\n180\n\n\nLando Calrissian\nHuman\n79.0\n177\n\n\nSlave 1\n    \n\nBoba Fett\nHuman\n78.2\n183"
  },
  {
    "objectID": "Lectures/Lecture11/CSSS508_Lecture10.html#rownames",
    "href": "Lectures/Lecture11/CSSS508_Lecture10.html#rownames",
    "title": "",
    "section": "Rownames",
    "text": "Rownames\n\n\n\ntes_chars %&gt;% \n  group_by(starships) %&gt;%\n  gt(rowname_col = \"name\")\n\nDesignating a rowname_col removes that column’s name and divides the values from the measures to the right.\n\n\n\n\n\n\n\n\n\n      species\n      mass\n      height\n    \n\n\nX-wing\n    \n\nLuke Skywalker\nHuman\n77.0\n172\n\n\nWedge Antilles\nHuman\n77.0\n170\n\n\nNo Ship\n    \n\nC-3PO\nDroid\n75.0\n167\n\n\nR2-D2\nDroid\n32.0\n96\n\n\nLeia Organa\nHuman\n49.0\n150\n\n\nObi-Wan Kenobi\nHuman\n77.0\n182\n\n\nYoda\nYoda's species\n17.0\n66\n\n\nPalpatine\nHuman\n75.0\n170\n\n\nIG-88\nDroid\n140.0\n200\n\n\nBossk\nTrandoshan\n113.0\n190\n\n\nLobot\nHuman\n79.0\n175\n\n\nTIE Advanced x1\n    \n\nDarth Vader\nHuman\n136.0\n202\n\n\nMillennium Falcon\n    \n\nChewbacca\nWookiee\n112.0\n228\n\n\nHan Solo\nHuman\n80.0\n180\n\n\nLando Calrissian\nHuman\n79.0\n177\n\n\nSlave 1\n    \n\nBoba Fett\nHuman\n78.2\n183"
  },
  {
    "objectID": "Lectures/Lecture11/CSSS508_Lecture10.html#header",
    "href": "Lectures/Lecture11/CSSS508_Lecture10.html#header",
    "title": "",
    "section": "Header",
    "text": "Header\n\n\n\ntes_chars %&gt;% \n  group_by(starships) %&gt;%\n  gt(rowname_col = \"name\") %&gt;%\n  tab_header(\n    title = \"Star Wars Characters\", \n    subtitle = \"The Empire Strikes Back\"\n  ) \n\ntab_header() can add titles and subtitles.\n\n\n\n\n\n\n\n\n\nStar Wars Characters\n    \n\nThe Empire Strikes Back\n    \n\n\n      species\n      mass\n      height\n    \n\n\n\nX-wing\n    \n\nLuke Skywalker\nHuman\n77.0\n172\n\n\nWedge Antilles\nHuman\n77.0\n170\n\n\nNo Ship\n    \n\nC-3PO\nDroid\n75.0\n167\n\n\nR2-D2\nDroid\n32.0\n96\n\n\nLeia Organa\nHuman\n49.0\n150\n\n\nObi-Wan Kenobi\nHuman\n77.0\n182\n\n\nYoda\nYoda's species\n17.0\n66\n\n\nPalpatine\nHuman\n75.0\n170\n\n\nIG-88\nDroid\n140.0\n200\n\n\nBossk\nTrandoshan\n113.0\n190\n\n\nLobot\nHuman\n79.0\n175\n\n\nTIE Advanced x1\n    \n\nDarth Vader\nHuman\n136.0\n202\n\n\nMillennium Falcon\n    \n\nChewbacca\nWookiee\n112.0\n228\n\n\nHan Solo\nHuman\n80.0\n180\n\n\nLando Calrissian\nHuman\n79.0\n177\n\n\nSlave 1\n    \n\nBoba Fett\nHuman\n78.2\n183"
  },
  {
    "objectID": "Lectures/Lecture11/CSSS508_Lecture10.html#spanner",
    "href": "Lectures/Lecture11/CSSS508_Lecture10.html#spanner",
    "title": "",
    "section": "Spanner",
    "text": "Spanner\n\n\n\ntes_chars %&gt;% \n  group_by(starships) %&gt;%\n  gt(rowname_col = \"name\") %&gt;%\n  tab_header(\n    title = \"Star Wars Characters\", \n    subtitle = \"The Empire Strikes Back\"\n  ) %&gt;%\n  tab_spanner(\n    label = \"Vitals\",\n    columns = vars(mass, height)\n  ) \n\nA tab_spanner() lets us group columns together.\n\n\n\n\n\n\n\n\n\nStar Wars Characters\n    \n\nThe Empire Strikes Back\n    \n\n\n      species\n      \n        Vitals\n      \n    \n\nmass\n      height\n    \n\n\n\nX-wing\n    \n\nLuke Skywalker\nHuman\n77.0\n172\n\n\nWedge Antilles\nHuman\n77.0\n170\n\n\nNo Ship\n    \n\nC-3PO\nDroid\n75.0\n167\n\n\nR2-D2\nDroid\n32.0\n96\n\n\nLeia Organa\nHuman\n49.0\n150\n\n\nObi-Wan Kenobi\nHuman\n77.0\n182\n\n\nYoda\nYoda's species\n17.0\n66\n\n\nPalpatine\nHuman\n75.0\n170\n\n\nIG-88\nDroid\n140.0\n200\n\n\nBossk\nTrandoshan\n113.0\n190\n\n\nLobot\nHuman\n79.0\n175\n\n\nTIE Advanced x1\n    \n\nDarth Vader\nHuman\n136.0\n202\n\n\nMillennium Falcon\n    \n\nChewbacca\nWookiee\n112.0\n228\n\n\nHan Solo\nHuman\n80.0\n180\n\n\nLando Calrissian\nHuman\n79.0\n177\n\n\nSlave 1\n    \n\nBoba Fett\nHuman\n78.2\n183"
  },
  {
    "objectID": "Lectures/Lecture11/CSSS508_Lecture10.html#column-labels",
    "href": "Lectures/Lecture11/CSSS508_Lecture10.html#column-labels",
    "title": "",
    "section": "Column Labels",
    "text": "Column Labels\n\n\n\ntes_chars %&gt;% \n  group_by(starships) %&gt;%\n  gt(rowname_col = \"name\") %&gt;%\n  tab_header(\n    title = \"Star Wars Characters\", \n    subtitle = \"The Empire Strikes Back\"\n  ) %&gt;%\n  tab_spanner(\n    label = \"Vitals\",\n    columns = vars(mass, height)\n  ) %&gt;%\n  cols_label(\n    mass = \"Mass (kg)\",\n    height = \"Height (cm)\",\n    species = \"Species\"\n  )\n\nWe can directly change column names with cols_label()\n\n\n\n\n\n\n\n\n\nStar Wars Characters\n    \n\nThe Empire Strikes Back\n    \n\n\n      Species\n      \n        Vitals\n      \n    \n\nMass (kg)\n      Height (cm)\n    \n\n\n\nX-wing\n    \n\nLuke Skywalker\nHuman\n77.0\n172\n\n\nWedge Antilles\nHuman\n77.0\n170\n\n\nNo Ship\n    \n\nC-3PO\nDroid\n75.0\n167\n\n\nR2-D2\nDroid\n32.0\n96\n\n\nLeia Organa\nHuman\n49.0\n150\n\n\nObi-Wan Kenobi\nHuman\n77.0\n182\n\n\nYoda\nYoda's species\n17.0\n66\n\n\nPalpatine\nHuman\n75.0\n170\n\n\nIG-88\nDroid\n140.0\n200\n\n\nBossk\nTrandoshan\n113.0\n190\n\n\nLobot\nHuman\n79.0\n175\n\n\nTIE Advanced x1\n    \n\nDarth Vader\nHuman\n136.0\n202\n\n\nMillennium Falcon\n    \n\nChewbacca\nWookiee\n112.0\n228\n\n\nHan Solo\nHuman\n80.0\n180\n\n\nLando Calrissian\nHuman\n79.0\n177\n\n\nSlave 1\n    \n\nBoba Fett\nHuman\n78.2\n183"
  },
  {
    "objectID": "Lectures/Lecture11/CSSS508_Lecture10.html#number-format",
    "href": "Lectures/Lecture11/CSSS508_Lecture10.html#number-format",
    "title": "",
    "section": "Number Format",
    "text": "Number Format\n\n\n\ntes_chars %&gt;% \n  group_by(starships) %&gt;%\n  gt(rowname_col = \"name\") %&gt;%\n  tab_header(\n    title = \"Star Wars Characters\", \n    subtitle = \"The Empire Strikes Back\"\n  ) %&gt;%\n  tab_spanner(\n    label = \"Vitals\",\n    columns = vars(mass, height)\n  ) %&gt;%\n  cols_label(\n    mass = \"Mass (kg)\",\n    height = \"Height (cm)\",\n    species = \"Species\"\n  ) %&gt;%\n  fmt_number(\n    columns = vars(mass),\n    decimals = 0) \n\nWe can adjust cell formats too.\n\n\n\n\n\n\n\n\n\nStar Wars Characters\n    \n\nThe Empire Strikes Back\n    \n\n\n      Species\n      \n        Vitals\n      \n    \n\nMass (kg)\n      Height (cm)\n    \n\n\n\nX-wing\n    \n\nLuke Skywalker\nHuman\n77\n172\n\n\nWedge Antilles\nHuman\n77\n170\n\n\nNo Ship\n    \n\nC-3PO\nDroid\n75\n167\n\n\nR2-D2\nDroid\n32\n96\n\n\nLeia Organa\nHuman\n49\n150\n\n\nObi-Wan Kenobi\nHuman\n77\n182\n\n\nYoda\nYoda's species\n17\n66\n\n\nPalpatine\nHuman\n75\n170\n\n\nIG-88\nDroid\n140\n200\n\n\nBossk\nTrandoshan\n113\n190\n\n\nLobot\nHuman\n79\n175\n\n\nTIE Advanced x1\n    \n\nDarth Vader\nHuman\n136\n202\n\n\nMillennium Falcon\n    \n\nChewbacca\nWookiee\n112\n228\n\n\nHan Solo\nHuman\n80\n180\n\n\nLando Calrissian\nHuman\n79\n177\n\n\nSlave 1\n    \n\nBoba Fett\nHuman\n78\n183"
  },
  {
    "objectID": "Lectures/Lecture11/CSSS508_Lecture10.html#align-columns",
    "href": "Lectures/Lecture11/CSSS508_Lecture10.html#align-columns",
    "title": "",
    "section": "Align Columns",
    "text": "Align Columns\n\n\n\ntes_chars %&gt;% \n  group_by(starships) %&gt;%\n  gt(rowname_col = \"name\") %&gt;%\n  tab_header(\n    title = \"Star Wars Characters\", \n    subtitle = \"The Empire Strikes Back\"\n  ) %&gt;%\n  tab_spanner(\n    label = \"Vitals\",\n    columns = vars(mass, height)\n  ) %&gt;%\n  cols_label(\n    mass = \"Mass (kg)\",\n    height = \"Height (cm)\",\n    species = \"Species\"\n  ) %&gt;%\n  fmt_number(\n    columns = vars(mass),\n    decimals = 0\n  ) %&gt;%\n  cols_align(\n    align = \"center\",\n    columns = vars(species, mass, height)\n  )\n\n\n\n\n\n\n\n\n\n\nStar Wars Characters\n    \n\nThe Empire Strikes Back\n    \n\n\n      Species\n      \n        Vitals\n      \n    \n\nMass (kg)\n      Height (cm)\n    \n\n\n\nX-wing\n    \n\nLuke Skywalker\nHuman\n77\n172\n\n\nWedge Antilles\nHuman\n77\n170\n\n\nNo Ship\n    \n\nC-3PO\nDroid\n75\n167\n\n\nR2-D2\nDroid\n32\n96\n\n\nLeia Organa\nHuman\n49\n150\n\n\nObi-Wan Kenobi\nHuman\n77\n182\n\n\nYoda\nYoda's species\n17\n66\n\n\nPalpatine\nHuman\n75\n170\n\n\nIG-88\nDroid\n140\n200\n\n\nBossk\nTrandoshan\n113\n190\n\n\nLobot\nHuman\n79\n175\n\n\nTIE Advanced x1\n    \n\nDarth Vader\nHuman\n136\n202\n\n\nMillennium Falcon\n    \n\nChewbacca\nWookiee\n112\n228\n\n\nHan Solo\nHuman\n80\n180\n\n\nLando Calrissian\nHuman\n79\n177\n\n\nSlave 1\n    \n\nBoba Fett\nHuman\n78\n183"
  },
  {
    "objectID": "Lectures/Lecture11/CSSS508_Lecture10.html#reorder-groups",
    "href": "Lectures/Lecture11/CSSS508_Lecture10.html#reorder-groups",
    "title": "",
    "section": "Reorder Groups",
    "text": "Reorder Groups\n\n\n\ntes_chars %&gt;% \n  group_by(starships) %&gt;%\n  gt(rowname_col = \"name\") %&gt;%\n  tab_header(\n    title = \"Star Wars Characters\", \n    subtitle = \"The Empire Strikes Back\"\n  ) %&gt;%\n  tab_spanner(\n    label = \"Vitals\",\n    columns = vars(mass, height)\n  ) %&gt;%\n  cols_label(\n    mass = \"Mass (kg)\",\n    height = \"Height (cm)\",\n    species = \"Species\"\n  ) %&gt;%\n  fmt_number(\n    columns = vars(mass),\n    decimals = 0\n  ) %&gt;%\n  cols_align(\n    align = \"center\",\n    columns = vars(species, mass, height)\n  ) %&gt;%\n  row_group_order(\n    groups = c(\"X-wing\", \n               \"Millennium Falcon\")\n  )\n\n\n\n\n\n\n\n\n\n\nStar Wars Characters\n    \n\nThe Empire Strikes Back\n    \n\n\n      Species\n      \n        Vitals\n      \n    \n\nMass (kg)\n      Height (cm)\n    \n\n\n\nX-wing\n    \n\nLuke Skywalker\nHuman\n77\n172\n\n\nWedge Antilles\nHuman\n77\n170\n\n\nMillennium Falcon\n    \n\nChewbacca\nWookiee\n112\n228\n\n\nHan Solo\nHuman\n80\n180\n\n\nLando Calrissian\nHuman\n79\n177\n\n\nNo Ship\n    \n\nC-3PO\nDroid\n75\n167\n\n\nR2-D2\nDroid\n32\n96\n\n\nLeia Organa\nHuman\n49\n150\n\n\nObi-Wan Kenobi\nHuman\n77\n182\n\n\nYoda\nYoda's species\n17\n66\n\n\nPalpatine\nHuman\n75\n170\n\n\nIG-88\nDroid\n140\n200\n\n\nBossk\nTrandoshan\n113\n190\n\n\nLobot\nHuman\n79\n175\n\n\nTIE Advanced x1\n    \n\nDarth Vader\nHuman\n136\n202\n\n\nSlave 1\n    \n\nBoba Fett\nHuman\n78\n183"
  },
  {
    "objectID": "Lectures/Lecture11/CSSS508_Lecture10.html#big-improvement",
    "href": "Lectures/Lecture11/CSSS508_Lecture10.html#big-improvement",
    "title": "",
    "section": "Big Improvement!",
    "text": "Big Improvement!\n\n\n\n\n\n\n\n\n\nname\n      species\n      starships\n      mass\n      height\n    \n\n\nLuke Skywalker\nHuman\nX-wing\n77.0\n172\n\n\nC-3PO\nDroid\nNo Ship\n75.0\n167\n\n\nR2-D2\nDroid\nNo Ship\n32.0\n96\n\n\nDarth Vader\nHuman\nTIE Advanced x1\n136.0\n202\n\n\nLeia Organa\nHuman\nNo Ship\n49.0\n150\n\n\nObi-Wan Kenobi\nHuman\nNo Ship\n77.0\n182\n\n\nChewbacca\nWookiee\nMillennium Falcon\n112.0\n228\n\n\nHan Solo\nHuman\nMillennium Falcon\n80.0\n180\n\n\nWedge Antilles\nHuman\nX-wing\n77.0\n170\n\n\nYoda\nYoda's species\nNo Ship\n17.0\n66\n\n\nPalpatine\nHuman\nNo Ship\n75.0\n170\n\n\nBoba Fett\nHuman\nSlave 1\n78.2\n183\n\n\nIG-88\nDroid\nNo Ship\n140.0\n200\n\n\nBossk\nTrandoshan\nNo Ship\n113.0\n190\n\n\nLando Calrissian\nHuman\nMillennium Falcon\n79.0\n177\n\n\nLobot\nHuman\nNo Ship\n79.0\n175\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nStar Wars Characters\n    \n\nThe Empire Strikes Back\n    \n\n\n      Species\n      \n        Vitals\n      \n    \n\nMass (kg)\n      Height (cm)\n    \n\n\n\nX-wing\n    \n\nLuke Skywalker\nHuman\n77\n172\n\n\nWedge Antilles\nHuman\n77\n170\n\n\nMillennium Falcon\n    \n\nChewbacca\nWookiee\n112\n228\n\n\nHan Solo\nHuman\n80\n180\n\n\nLando Calrissian\nHuman\n79\n177\n\n\nNo Ship\n    \n\nC-3PO\nDroid\n75\n167\n\n\nR2-D2\nDroid\n32\n96\n\n\nLeia Organa\nHuman\n49\n150\n\n\nObi-Wan Kenobi\nHuman\n77\n182\n\n\nYoda\nYoda's species\n17\n66\n\n\nPalpatine\nHuman\n75\n170\n\n\nIG-88\nDroid\n140\n200\n\n\nBossk\nTrandoshan\n113\n190\n\n\nLobot\nHuman\n79\n175\n\n\nTIE Advanced x1\n    \n\nDarth Vader\nHuman\n136\n202\n\n\nSlave 1\n    \n\nBoba Fett\nHuman\n78\n183"
  },
  {
    "objectID": "Lectures/Lecture11/CSSS508_Lecture10.html#latex-tables",
    "href": "Lectures/Lecture11/CSSS508_Lecture10.html#latex-tables",
    "title": "",
    "section": "\n\\(\\LaTeX\\) Tables",
    "text": "\\(\\LaTeX\\) Tables\ngt is a very new package and is somewhat finicky when used in .pdf documents.\nFor tables in \\(\\LaTeX\\)—as is needed for .pdf files—I recommend also looking into the kableExtra or flextable packages.\n\nLike gt, kableExtra and flextable allow the construction of complex tables in either HTML or \\(\\LaTeX\\) using additive syntax similar to ggplot2 and dplyr. flextable is also great for Word tables.\n\n\nIf you want to edit \\(\\LaTeX\\) documents, you can do it in R using Sweave documents (.Rnw). Alternatively, you may want to work in a dedicated \\(\\LaTeX\\) editor. I recommend Overleaf for this purpose.\n\n\nRMarkdown has support for a fair amount of basic \\(\\LaTeX\\) syntax if you aren’t trying to get too fancy!"
  },
  {
    "objectID": "Lectures/Lecture11/CSSS508_Lecture10.html#flextable",
    "href": "Lectures/Lecture11/CSSS508_Lecture10.html#flextable",
    "title": "",
    "section": "flextable",
    "text": "flextable\n\n\nThis is a table produced by flextable in Word format–including the embedded density images1!\nLook into flextable if you’ll be working in Word or want a table package that handles just about every format.\n\n\n\n\nEmbedding summary plots is a bit complicated and requires list columns"
  },
  {
    "objectID": "Lectures/Lecture11/CSSS508_Lecture10.html#modelsummary",
    "href": "Lectures/Lecture11/CSSS508_Lecture10.html#modelsummary",
    "title": "",
    "section": "modelsummary",
    "text": "modelsummary\nThe modelsummary package combines broom, gt, flextable, and kableExtra to produce tabular summaries of almost any model fit in R.\nAn advantage of this package is that it can produce output in every common format: HTML, Markdown, \\(\\LaTeX\\), raw text, and even images (.png or .jpg).\n\nlibrary(modelsummary)\n\nIts key function is msummary() or modelsummary() which creates summary tables of models.\nYou can then build on it using gt, flextable, or kableExtra functions, depending on the selected output format."
  },
  {
    "objectID": "Lectures/Lecture11/CSSS508_Lecture10.html#msummary",
    "href": "Lectures/Lecture11/CSSS508_Lecture10.html#msummary",
    "title": "",
    "section": "msummary",
    "text": "msummary\n\n\nLike pander(), msummary() takes a model as an object to make a table.\n\nmod_1 &lt;- lm(mpg ~ wt, data = mtcars)\nmsummary(mod_1)\n\nNote default modelsummary look like pander tables because they use Markdown.\n\n\n\n\n\n\n (1)\n\n\n\n(Intercept)\n37.285\n\n\n\n(1.878)\n\n\nwt\n−5.344\n\n\n\n(0.559)\n\n\nNum.Obs.\n32\n\n\nR2\n0.753\n\n\nR2 Adj.\n0.745\n\n\nAIC\n166.0\n\n\nBIC\n170.4\n\n\nLog.Lik.\n−80.015\n\n\nRMSE\n2.95"
  },
  {
    "objectID": "Lectures/Lecture11/CSSS508_Lecture10.html#msummary-1",
    "href": "Lectures/Lecture11/CSSS508_Lecture10.html#msummary-1",
    "title": "",
    "section": "msummary",
    "text": "msummary\n\n\nYou can present multiple models in msummary using named lists:\n\nmod_1 &lt;- lm(mpg ~ wt, data = mtcars)\nmod_2 &lt;- lm(mpg ~ hp + wt, data = mtcars)\nmod_3 &lt;- lm(mpg ~ hp + wt + factor(am), \n            data = mtcars)\nmodel_list &lt;- list(\"Model 1\" = mod_1, \n                   \"Model 2\" = mod_2, \n                   \"Model 3\" = mod_3)\nmsummary(model_list)\n\nThis allows you to produce the common (and often bad) journal format where one starts with a nonsensical “naive model” then works up to the “full model” justified by the front end of the paper.\n\n\n\n\n\n\nModel 1\n Model 2\n Model 3\n\n\n\n(Intercept)\n37.285\n37.227\n34.003\n\n\n\n(1.878)\n(1.599)\n(2.643)\n\n\nwt\n−5.344\n−3.878\n−2.879\n\n\n\n(0.559)\n(0.633)\n(0.905)\n\n\nhp\n\n−0.032\n−0.037\n\n\n\n\n(0.009)\n(0.010)\n\n\nfactor(am)1\n\n\n2.084\n\n\n\n\n\n(1.376)\n\n\nNum.Obs.\n32\n32\n32\n\n\nR2\n0.753\n0.827\n0.840\n\n\nR2 Adj.\n0.745\n0.815\n0.823\n\n\nAIC\n166.0\n156.7\n156.1\n\n\nBIC\n170.4\n162.5\n163.5\n\n\nLog.Lik.\n−80.015\n−74.326\n−73.067\n\n\nRMSE\n2.95\n2.47\n2.37"
  },
  {
    "objectID": "Lectures/Lecture11/CSSS508_Lecture10.html#pdf-output",
    "href": "Lectures/Lecture11/CSSS508_Lecture10.html#pdf-output",
    "title": "",
    "section": "PDF Output",
    "text": "PDF Output\noutput = \"latex\" produces kableExtra based output well-suited to PDFs.1\n\nmsummary(model_list, output = \"latex\")\n\n\nFor customization, I recommend referring to modelsummary’s documentation."
  },
  {
    "objectID": "Lectures/Lecture11/CSSS508_Lecture10.html#saving-a-modelsummary",
    "href": "Lectures/Lecture11/CSSS508_Lecture10.html#saving-a-modelsummary",
    "title": "",
    "section": "Saving a modelsummary\n",
    "text": "Saving a modelsummary\n\n\nmsummary(model_list, output = \"ex_table.png\")\n\nTo save a modelsummary object as a file, just provide a path to the output = argument.\nSpecifying a suffix (e.g., .png or .pdf) will control the output format."
  },
  {
    "objectID": "Lectures/Lecture11/CSSS508_Lecture10.html#modelsummary-and-gt",
    "href": "Lectures/Lecture11/CSSS508_Lecture10.html#modelsummary-and-gt",
    "title": "",
    "section": "\nmodelsummary and gt\n",
    "text": "modelsummary and gt\n\n\n\nYou can select gt output to enable modifying summaries with gt functions.\n\nmsummary(model_list, output = \"gt\") %&gt;%\n  tab_header(\n    title = \"Table 1. Linear Models\", \n    subtitle = \"DV: Miles per Gallon\"\n  )\n\nNote that gt’s support for PDF output is immature–this format is better for HTML or image output.\n\n\n\n\n\n\n\n\n\nTable 1. Linear Models\n    \n\nDV: Miles per Gallon\n    \n\n \n      Model 1\n      Model 2\n      Model 3\n    \n\n\n\n(Intercept)\n37.285\n37.227\n34.003\n\n\n\n(1.878)\n(1.599)\n(2.643)\n\n\nwt\n-5.344\n-3.878\n-2.879\n\n\n\n(0.559)\n(0.633)\n(0.905)\n\n\nhp\n\n-0.032\n-0.037\n\n\n\n\n(0.009)\n(0.010)\n\n\nfactor(am)1\n\n\n2.084\n\n\n\n\n\n(1.376)\n\n\nNum.Obs.\n32\n32\n32\n\n\nR2\n0.753\n0.827\n0.840\n\n\nR2 Adj.\n0.745\n0.815\n0.823\n\n\nAIC\n166.0\n156.7\n156.1\n\n\nBIC\n170.4\n162.5\n163.5\n\n\nLog.Lik.\n-80.015\n-74.326\n-73.067\n\n\nRMSE\n2.95\n2.47\n2.37"
  },
  {
    "objectID": "Lectures/Lecture11/CSSS508_Lecture10.html#gtsummary",
    "href": "Lectures/Lecture11/CSSS508_Lecture10.html#gtsummary",
    "title": "",
    "section": "gtsummary",
    "text": "gtsummary\nThe gtsummary package is similar to modelsummary in that it takes advantage of broom, gt, and kableExtra to provide a flexible table-making framework.\nWhile gtsummary can also produce model tables like modelsummary, it also produces descriptive statistic tables for dataframes1.\n\nlibrary(gtsummary)\n\nI prefer modelsummary’s syntax (or manual table building) for most model tables."
  },
  {
    "objectID": "Lectures/Lecture11/CSSS508_Lecture10.html#tbl_summary",
    "href": "Lectures/Lecture11/CSSS508_Lecture10.html#tbl_summary",
    "title": "",
    "section": "tbl_summary()",
    "text": "tbl_summary()\n\n\nBy default, gtsummary tables provide:\n\nFrequencies for categorical and binary variables\nQuantiles of the form “50% (25%, 75%)” for continuous variables\nSample size\n\n\nmtcars %&gt;% \n  select(1:9) %&gt;%\n  tbl_summary() \n\n\n\n\n\n\n\n\n\nCharacteristic\n      \nN = 321\n\n    \n\n\nmpg\n19.2 (15.4, 22.8)\n\n\ncyl\n\n\n\n    4\n11 (34%)\n\n\n    6\n7 (22%)\n\n\n    8\n14 (44%)\n\n\ndisp\n196 (121, 326)\n\n\nhp\n123 (97, 180)\n\n\ndrat\n3.70 (3.08, 3.92)\n\n\nwt\n3.33 (2.58, 3.61)\n\n\nqsec\n17.71 (16.89, 18.90)\n\n\nvs\n14 (44%)\n\n\nam\n13 (41%)\n\n\n\n\n1 Median (IQR); n (%)"
  },
  {
    "objectID": "Lectures/Lecture11/CSSS508_Lecture10.html#grouping-1",
    "href": "Lectures/Lecture11/CSSS508_Lecture10.html#grouping-1",
    "title": "",
    "section": "Grouping",
    "text": "Grouping\n\n\nYou can provide a by = argument to do grouped descriptives.\n\nmtcars %&gt;% \n  select(1:9) %&gt;%\n  tbl_summary(by = \"am\") \n\n\n\n\n\n\n\n\n\nCharacteristic\n      \n0, N = 191\n\n      \n1, N = 131\n\n    \n\n\nmpg\n17.3 (15.0, 19.2)\n22.8 (21.0, 30.4)\n\n\ncyl\n\n\n\n\n    4\n3 (16%)\n8 (62%)\n\n\n    6\n4 (21%)\n3 (23%)\n\n\n    8\n12 (63%)\n2 (15%)\n\n\ndisp\n276 (196, 360)\n120 (79, 160)\n\n\nhp\n175 (117, 193)\n109 (66, 113)\n\n\ndrat\n3.15 (3.07, 3.70)\n4.08 (3.85, 4.22)\n\n\nwt\n3.52 (3.44, 3.84)\n2.32 (1.94, 2.78)\n\n\nqsec\n17.82 (17.18, 19.17)\n17.02 (16.46, 18.61)\n\n\nvs\n7 (37%)\n7 (54%)\n\n\n\n\n1 Median (IQR); n (%)"
  },
  {
    "objectID": "Lectures/Lecture11/CSSS508_Lecture10.html#adding-gt",
    "href": "Lectures/Lecture11/CSSS508_Lecture10.html#adding-gt",
    "title": "",
    "section": "Adding gt\n",
    "text": "Adding gt\n\n\n\nIf you select gt output, you can dress it up with gt functions.\n\nmtcars %&gt;% \n  select(1:9) %&gt;%\n  tbl_summary(by = \"am\") %&gt;%\n  as_gt() %&gt;%\n  tab_spanner(\n    label = \"Transmission\", \n    columns = starts_with(\"stat_\")\n  ) %&gt;%\n  tab_header(\n    title = \"Motor Trend Cars\", \n    subtitle = \"Descriptive Statistics\"\n  )\n\nstarts\\_with(\"stat\\_\") here selects the statistic columns created by tbl_summary().\n\n\n\n\n\n\n\n\n\nMotor Trend Cars\n    \n\nDescriptive Statistics\n    \n\nCharacteristic\n      \n        Transmission\n      \n    \n\n\n0, N = 191\n\n      \n1, N = 131\n\n    \n\n\n\nmpg\n17.3 (15.0, 19.2)\n22.8 (21.0, 30.4)\n\n\ncyl\n\n\n\n\n    4\n3 (16%)\n8 (62%)\n\n\n    6\n4 (21%)\n3 (23%)\n\n\n    8\n12 (63%)\n2 (15%)\n\n\ndisp\n276 (196, 360)\n120 (79, 160)\n\n\nhp\n175 (117, 193)\n109 (66, 113)\n\n\ndrat\n3.15 (3.07, 3.70)\n4.08 (3.85, 4.22)\n\n\nwt\n3.52 (3.44, 3.84)\n2.32 (1.94, 2.78)\n\n\nqsec\n17.82 (17.18, 19.17)\n17.02 (16.46, 18.61)\n\n\nvs\n7 (37%)\n7 (54%)\n\n\n\n\n1 Median (IQR); n (%)"
  },
  {
    "objectID": "Lectures/Lecture11/CSSS508_Lecture10.html#bonus-corrplot",
    "href": "Lectures/Lecture11/CSSS508_Lecture10.html#bonus-corrplot",
    "title": "",
    "section": "Bonus: corrplot\n",
    "text": "Bonus: corrplot\n\nThe corrplot package has functions for displaying correlograms.\nThese make interpreting the correlations between variables in a data set easier than conventional correlation tables.\nThe first argument is a call to cor(), the base R function for generating a correlation matrix.\nSee the vignette for customization options.\n\nlibrary(corrplot)\ncorrplot(\n  cor(mtcars),\n  addCoef.col = \"white\",\n  addCoefasPercent=T,\n  type=\"upper\", \n  order=\"AOE\")"
  },
  {
    "objectID": "Lectures/Lecture11/CSSS508_Lecture10.html#correlogram",
    "href": "Lectures/Lecture11/CSSS508_Lecture10.html#correlogram",
    "title": "",
    "section": "Correlogram",
    "text": "Correlogram"
  },
  {
    "objectID": "Lectures/Lecture11/CSSS508_Lecture10.html#why-reproducibility",
    "href": "Lectures/Lecture11/CSSS508_Lecture10.html#why-reproducibility",
    "title": "",
    "section": "Why Reproducibility?",
    "text": "Why Reproducibility?\nReproducibility is not replication.\n\n\nReplication is running a new study to show if and how results of a prior study hold.\n\nReproducibility is about rerunning the same study and getting the same results.\n\n\nReproducible studies can still be wrong… and in fact reproducibility makes proving a study wrong much easier.\n\n\nReproducibility means:\n\nTransparent research practices.\nMinimal barriers to verifying your results.\n\n\n\nAny study that isn’t reproducible can be trusted only on faith."
  },
  {
    "objectID": "Lectures/Lecture11/CSSS508_Lecture10.html#reproducibility-definitions",
    "href": "Lectures/Lecture11/CSSS508_Lecture10.html#reproducibility-definitions",
    "title": "",
    "section": "Reproducibility Definitions",
    "text": "Reproducibility Definitions\nReproducibility comes in three forms (Stodden 2014):\n\n\n\n\nEmpirical: Repeatability in data collection.\n\nStatistical: Verification with alternate methods of inference.\n\nComputational: Reproducibility in cleaning, organizing, and presenting data and results.\n\n\n\n\nR is particularly well suited to enabling computational reproducibility1.\n\n\nThey will not fix flawed research design, nor offer a remedy for improper application of statistical methods.\nThose are the difficult, non-automatable things you want skills in.\n\n Python is equally well suited. Julia is an option as well."
  },
  {
    "objectID": "Lectures/Lecture11/CSSS508_Lecture10.html#computational-reproducibility",
    "href": "Lectures/Lecture11/CSSS508_Lecture10.html#computational-reproducibility",
    "title": "",
    "section": "Computational Reproducibility",
    "text": "Computational Reproducibility\nElements of computational reproducibility:\n\n\nShared data\n\nResearchers need your original data to verify and replicate your work.\n\n\nShared code\n\nYour code must be shared to make decisions transparent.\n\n\n\n\n\n\nDocumentation\n\nThe operation of code should be either self-documenting or have written descriptions to make its use clear.\n\n\n\n\n\n\n\nVersion Control\n\nDocuments the research process.\nPrevents losing work and facilitates sharing."
  },
  {
    "objectID": "Lectures/Lecture11/CSSS508_Lecture10.html#levels-of-reproducibility",
    "href": "Lectures/Lecture11/CSSS508_Lecture10.html#levels-of-reproducibility",
    "title": "",
    "section": "Levels of Reproducibility",
    "text": "Levels of Reproducibility\nFor academic papers, degrees of reproducibility vary:\n\n\n“Read the article”\nShared data with documentation\nShared data and all code\nInteractive document\nResearch compendium\nDocker compendium: Self-contained ecosystem"
  },
  {
    "objectID": "Lectures/Lecture11/CSSS508_Lecture10.html#interactive-documents",
    "href": "Lectures/Lecture11/CSSS508_Lecture10.html#interactive-documents",
    "title": "",
    "section": "Interactive Documents",
    "text": "Interactive Documents\nInteractive documents — like Quarto docs — combine code and text together into a self-contained document.\n\nLoad and process data\nRun models\nGenerate tables and plots in-line with text\nIn-text values automatically filled in\n\n\nInteractive documents allow a reader to examine your computational methods within the document itself; in effect, they are self-documenting.\n\n\nBy re-running the code, they reproduce your results on demand.\n\n\nCommon Platforms:\n\n\nR: Quarto\n\nPython: Jupyter Notebooks"
  },
  {
    "objectID": "Lectures/Lecture11/CSSS508_Lecture10.html#research-compendia",
    "href": "Lectures/Lecture11/CSSS508_Lecture10.html#research-compendia",
    "title": "",
    "section": "Research Compendia",
    "text": "Research Compendia\nA research compendium is a portable, reproducible distribution of an article or other project.\n\nResearch compendia feature:\n\nAn interactive document as the foundation\nFiles organized in a recognizable structure (e.g. an R package)\nClear separation of data, method, and output. Data are read only.\nA well-documented or even preserved computational environment (e.g. Docker)\n\n\n\nrrtools by UW’s Ben Markwick provides a simplified workflow to accomplish this in R."
  },
  {
    "objectID": "Lectures/Lecture11/CSSS508_Lecture10.html#bookdown",
    "href": "Lectures/Lecture11/CSSS508_Lecture10.html#bookdown",
    "title": "",
    "section": "Bookdown",
    "text": "Bookdown\nbookdown — which is integrated into rrtools — can generate documents in the proper format for articles, theses, books, or dissertations.\n\nbookdown provides an accessible alternative to writing \\(\\LaTeX\\) for typesetting and reference management.\n\n\nYou can integrate citations and automate reference page generation using bibtex files (such as produced by Zotero).\n\n\nbookdown supports .html output for ease and speed and also renders .pdf files through \\(\\LaTeX\\) for publication-ready documents.\n\n\nFor University of Washington theses and dissertations, consider Ben Marwick’s huskydown package which uses Markdown but renders via a UW approved \\(\\LaTeX\\) template."
  },
  {
    "objectID": "Lectures/Lecture11/CSSS508_Lecture10.html#organization-and-portability",
    "href": "Lectures/Lecture11/CSSS508_Lecture10.html#organization-and-portability",
    "title": "",
    "section": "Organization and Portability",
    "text": "Organization and Portability"
  },
  {
    "objectID": "Lectures/Lecture11/CSSS508_Lecture10.html#organization-systems",
    "href": "Lectures/Lecture11/CSSS508_Lecture10.html#organization-systems",
    "title": "",
    "section": "Organization Systems",
    "text": "Organization Systems\nOrganizing research projects is something you either do accidentally — and badly — or purposefully with some upfront labor.\n\nUniform organization makes switching between or revisiting projects easier.\n\n\nI suggest something like the following:\n\n\nproject/\n   readme.md\n   data/\n     derived/\n       processed_data.RData\n     raw/\n       core_data.csv\n   docs/\n     paper.Rmd\n   syntax/\n     functions.R\n     models.R\n\n\nThere is a clear hierarchy\n\nWritten content is in docs\n\nCode is in syntax\n\nData is in data\n\n\n\nNaming is uniform\n\nAll lower case\nWords separated by underscores\n\n\nNames are self-descriptive"
  },
  {
    "objectID": "Lectures/Lecture11/CSSS508_Lecture10.html#workflow-versus-project",
    "href": "Lectures/Lecture11/CSSS508_Lecture10.html#workflow-versus-project",
    "title": "",
    "section": "Workflow versus Project",
    "text": "Workflow versus Project\nTo summarize Jenny Bryan, one should separate workflow from projects.\n\n\n\n\nWorkflow\n\nThe software you use to write your code (e.g. RStudio)\nThe location you store a project\nThe specific computer you use\nThe code you ran earlier or typed into your console\n\n\nProject\n\nThe raw data\nThe code that operates on your raw data\nThe packages you use\nThe output files or documents\n\n\n\n\n\n\nProjects should not modify anything outside of the project nor need to be modified by someone else (or future you) to run.\nProjects should be independent of your workflow."
  },
  {
    "objectID": "Lectures/Lecture11/CSSS508_Lecture10.html#portability",
    "href": "Lectures/Lecture11/CSSS508_Lecture10.html#portability",
    "title": "",
    "section": "Portability",
    "text": "Portability\nFor research to be reproducible, it must also be portable. Portable software operates independently of workflow such as fixed file locations.\n\n\nDo Not:\nDo:\n\n\n\n\nUse setwd() in scripts or .Rmd files.\nUse absolute paths except for fixed, immovable sources (secure data).\n\nread_csv(\"C:/my_project/data/my_data.csv\")\n\n\nUse install.packages() in script or .Rmd files.\nUse rm(list=ls()) anywhere but your console.\n\n\n\n\nUse RStudio projects (or the here package) to set directories.\nUse relative paths to load and save files:\n\nread_csv(\"./data/my_data.csv\")\n\n\nLoad all required packages using library().\nClear your workspace when closing RStudio.\n\nSet Tools &gt; Global Options… &gt; Save workspace… to Never"
  },
  {
    "objectID": "Lectures/Lecture11/CSSS508_Lecture10.html#divide-and-conquer",
    "href": "Lectures/Lecture11/CSSS508_Lecture10.html#divide-and-conquer",
    "title": "",
    "section": "Divide and Conquer",
    "text": "Divide and Conquer\nOften you do not want to include all code for a project in one .qmd file:\n\nThe code takes too long to knit.\nThe file is so long it is difficult to read.\n\n\nThere are two ways to deal with this:\n\n\nUse separate .R scripts or .qmd files which save results from complicated parts of a project, then load these results in the main .qmd file.\n\nThis is good for loading and cleaning large data.\nAlso for running slow models.\n\n\n\n\n\n\n\nUse source() to run external .R scripts when the .qmd renders\n\nThis can be used to run large files that aren’t impractically slow.\nAlso good for loading project-specific functions."
  },
  {
    "objectID": "Lectures/Lecture11/CSSS508_Lecture10.html#the-way-of-many-files",
    "href": "Lectures/Lecture11/CSSS508_Lecture10.html#the-way-of-many-files",
    "title": "",
    "section": "The Way of Many Files",
    "text": "The Way of Many Files\nI find it beneficial to break projects into many files:\n\nScripts with specialized functions.\nScripts to load and clean each set of variables.\nScripts to run each set of models and make tables and plots.\nA main .qmd that runs some or all of these to reproduce the entire project.\n\n\nSplitting up a project carries benefits:\n\nOnce a portion of the project is done and in its own file, it is out of your way.\n\nIf you need to make changes, you don’t need to search through huge files.\nEntire sections of the project can be added or removed quickly (e.g. converted to an appendix of an article)\nIt is the only way to build a proper 2 for a project."
  },
  {
    "objectID": "Lectures/Lecture11/CSSS508_Lecture10.html#pipelines",
    "href": "Lectures/Lecture11/CSSS508_Lecture10.html#pipelines",
    "title": "",
    "section": "Pipelines",
    "text": "Pipelines\nProfessional researchers and teams design projects as a pipeline.\n\nA pipeline is a series of consecutive processing elements (scripts and functions in R).\n\n\nEach stage of a pipeline…\n\nHas clearly defined inputs and outputs\nDoes not modify its inputs.\nProduces the exact same output every time it is re-run.\n\n\n\nThis means…\n\nWhen you modify one stage, you only need to rerun subsequent stages.\nDifferent people can work on each stage.\nProblems are isolated within stages.\nYou can depict your project as a directed graph of dependencies."
  },
  {
    "objectID": "Lectures/Lecture11/CSSS508_Lecture10.html#example-pipeline",
    "href": "Lectures/Lecture11/CSSS508_Lecture10.html#example-pipeline",
    "title": "",
    "section": "Example Pipeline",
    "text": "Example Pipeline\nEvery stage (oval) has an unambiguous input and output. Everything that precedes a given stage is a dependency — something required to run it.\n\n\n\nNote: targets is a great package for managing R research pipelines."
  },
  {
    "objectID": "Lectures/Lecture11/CSSS508_Lecture10.html#on-formats",
    "href": "Lectures/Lecture11/CSSS508_Lecture10.html#on-formats",
    "title": "",
    "section": "On Formats",
    "text": "On Formats\nAvoid “closed” or commercial software and file formats except where absolutely necessary.\n\nUse open source software and file formats.\n\n\n\n\nIt is always better for science:\n\nPeople should be able to explore your research without buying commercial software.\nYou do not want your research to be inaccessible when software is updated.\n\n\n\n\n\n\n\nIt is often just better.\n\nIt is usually updated more quickly\nIt tends to be more secure\nIt is rarely abandoned\n\n\n\n\n\nThe ideal: Use software that reads and writes raw text."
  },
  {
    "objectID": "Lectures/Lecture11/CSSS508_Lecture10.html#text",
    "href": "Lectures/Lecture11/CSSS508_Lecture10.html#text",
    "title": "",
    "section": "Text",
    "text": "Text\nWriting and formatting documents are two completely separate jobs.\n\nWrite first\nFormat later\n\nMarkdown was made for this\n\n\nWord processors — like Microsoft Word — try to do both at the same time, usually badly.\nThey waste time by leading you to format instead of writing.\n\n\nFind a good modular text editor and learn to use it:\n\nAtom\n\nSublime (Commercial)\nEmacs\nVim"
  },
  {
    "objectID": "Lectures/Lecture11/CSSS508_Lecture10.html#version-control-1",
    "href": "Lectures/Lecture11/CSSS508_Lecture10.html#version-control-1",
    "title": "",
    "section": "Version Control",
    "text": "Version Control\nVersion control originates in collaborative software development.\nThe Idea: All changes ever made to a piece of software are documented, saved automatically, and revertible.\n\nVersion control allows all decisions ever made in a research project to be documented automatically.\n\n\nVersion control can:\n\nProtect your work from destructive changes\nSimplify collaboration by merging changes\nDocument design decisions\nMake your research process transparent"
  },
  {
    "objectID": "Lectures/Lecture11/CSSS508_Lecture10.html#git-and-github",
    "href": "Lectures/Lecture11/CSSS508_Lecture10.html#git-and-github",
    "title": "",
    "section": "Git and GitHub",
    "text": "Git and GitHub\ngit is the dominant platform for version control, and GitHub is a free (and now Microsoft owned) platform for hosting repositories.\n\nRepositories are folders on your computer where all changes are tracked by Git.\n\n\nOnce satisfied with changes, you “commit” them then “push” them to a remote repository that stores your project.\n\n\nOthers can copy your project (“pull”), and if you permit, make suggestions for changes.\n\n\nConstantly committing and pulling changes automatically generates a running “history” that documents the evolution of a project.\n\n\ngit is integrated into RStudio under the Tools menu. It requires some setup.1\n\nYou can also use the GitHub desktop application."
  },
  {
    "objectID": "Lectures/Lecture11/CSSS508_Lecture10.html#github-as-a-cv",
    "href": "Lectures/Lecture11/CSSS508_Lecture10.html#github-as-a-cv",
    "title": "",
    "section": "GitHub as a CV",
    "text": "GitHub as a CV\nBeyond archiving projects and allowing sharing, GitHub also serves as a sort of curriculum vitae for the programmer.\n\nBy allowing others to view your projects, you can display competence in programming and research.\n\n\nIf you are planning on working in the private sector, an active GitHub profile will give you a leg up on the competition.\n\n\nIf you are aiming for academia, a GitHub account signals technical competence and an interest in research transparency."
  },
  {
    "objectID": "Lectures/Lecture11/CSSS508_Lecture10.html#what-youve-learned",
    "href": "Lectures/Lecture11/CSSS508_Lecture10.html#what-youve-learned",
    "title": "",
    "section": "What You’ve Learned",
    "text": "What You’ve Learned\nA lot!\n\nHow to get data into R from a variety of formats\nHow to do “data custodian” work to manipulate and clean data\nHow to make pretty visualizations\nHow to automate with loops and functions\nHow to combine text, calculations, plots, and tables into dynamic R Markdown reports"
  },
  {
    "objectID": "Lectures/Lecture11/CSSS508_Lecture10.html#what-comes-next",
    "href": "Lectures/Lecture11/CSSS508_Lecture10.html#what-comes-next",
    "title": "",
    "section": "What Comes Next?",
    "text": "What Comes Next?\n\nStatistical inference (e.g. more CSSS courses)\n\nFunctions for hypothesis testing, hierarchical/mixed effect models, machine learning, survey design, etc. are straightforward to use… once data are clean\nAccess output by working with list structures (like from regression models) or using broom and ggeffects\n\n\n\nPractice, practice, practice!\n\nReplicate analyses you’ve done in Excel, SPSS, or Stata\nThink about data using dplyr verbs, tidy data principles\nQuarto for reproducibility\n\n\nMore advanced projects\n\nUsing version control (git) in RStudio\nInteractive Shiny web apps\nWrite your own functions and put them in a package"
  },
  {
    "objectID": "Lectures/Lecture11/CSSS508_Lecture10.html#course-plugs",
    "href": "Lectures/Lecture11/CSSS508_Lecture10.html#course-plugs",
    "title": "",
    "section": "Course Plugs",
    "text": "Course Plugs\nIf you…\n\nhave no stats background yet - SOC504: Applied Social Statistics\n\nhave (only) finished SOC506 - CSSS510: Maximum Likelihood\n\nwant to master visualization - CSSS569: Visualizing Data\n\nstudy events or durations - CSSS544: Event History Analysis1\n\nwant to use network data - CSSS567: Social Network Analysis\n\nwant to work with spatial data - CSSS554: Spatial Statistics\n\nwant to work with time series - CSSS512: Time Series and Panel Data\n\nAlso a great maximum likelihood introduction."
  },
  {
    "objectID": "Lectures/Lecture11/CSSS508_Lecture10.html#sjplot",
    "href": "Lectures/Lecture11/CSSS508_Lecture10.html#sjplot",
    "title": "",
    "section": "sjPlot",
    "text": "sjPlot\npander tables are great for basic rmarkdown documents, but they’re not generally publication ready.\nThe sjPlot package produces html tables that look more like those you may find in journal articles.\n\nlibrary(sjPlot)"
  },
  {
    "objectID": "Lectures/Lecture11/CSSS508_Lecture10.html#sjplot-tables",
    "href": "Lectures/Lecture11/CSSS508_Lecture10.html#sjplot-tables",
    "title": "",
    "section": "\nsjPlot Tables",
    "text": "sjPlot Tables\ntab_model() will produce tables for most models.\n\nmodel_1 &lt;- lm(mpg ~ wt, data = mtcars)\ntab_model(model_1)\n\n\n\n \nmpg\n\n\nPredictors\nEstimates\nCI\np\n\n\n(Intercept)\n37.29\n33.45 – 41.12\n&lt;0.001\n\n\nwt\n-5.34\n-6.49 – -4.20\n&lt;0.001\n\n\nObservations\n32\n\n\nR2 / R2 adjusted\n0.753 / 0.745"
  },
  {
    "objectID": "Lectures/Lecture11/CSSS508_Lecture10.html#multi-model-tables-with-sjtable",
    "href": "Lectures/Lecture11/CSSS508_Lecture10.html#multi-model-tables-with-sjtable",
    "title": "",
    "section": "Multi-Model Tables with sjTable\n",
    "text": "Multi-Model Tables with sjTable\n\nOften in journal articles you will see a single table that compares multiple models.\nTypically, authors will start with a simple model on the left, then add variables, until they have their most complex model on the right.\nThe sjPlot package makes this easy to do: just give tab_model() more models!"
  },
  {
    "objectID": "Lectures/Lecture11/CSSS508_Lecture10.html#multiple-tab_model",
    "href": "Lectures/Lecture11/CSSS508_Lecture10.html#multiple-tab_model",
    "title": "",
    "section": "Multiple tab_model()\n",
    "text": "Multiple tab_model()\n\n\nmodel_2 &lt;- lm(mpg ~ hp + wt, data = mtcars)\nmodel_3 &lt;- lm(mpg ~ hp + wt + factor(am), data = mtcars)\ntab_model(model_1, model_2, model_3)\n\n\n\n \nmpg\nmpg\nmpg\n\n\nPredictors\nEstimates\nCI\np\nEstimates\nCI\np\nEstimates\nCI\np\n\n\n(Intercept)\n37.29\n33.45 – 41.12\n&lt;0.001\n37.23\n33.96 – 40.50\n&lt;0.001\n34.00\n28.59 – 39.42\n&lt;0.001\n\n\nwt\n-5.34\n-6.49 – -4.20\n&lt;0.001\n-3.88\n-5.17 – -2.58\n&lt;0.001\n-2.88\n-4.73 – -1.02\n0.004\n\n\nhp\n\n\n\n-0.03\n-0.05 – -0.01\n0.001\n-0.04\n-0.06 – -0.02\n0.001\n\n\nam [1]\n\n\n\n\n\n\n2.08\n-0.74 – 4.90\n0.141\n\n\nObservations\n32\n32\n32\n\n\nR2 / R2 adjusted\n0.753 / 0.745\n0.827 / 0.815\n0.840 / 0.823"
  },
  {
    "objectID": "Lectures/Lecture11/CSSS508_Lecture10.html#sjplot-does-a-lot-more",
    "href": "Lectures/Lecture11/CSSS508_Lecture10.html#sjplot-does-a-lot-more",
    "title": "",
    "section": "\nsjPlot does a lot more",
    "text": "sjPlot does a lot more\nThe sjPlot package does a lot more than just make pretty tables. It is a rabbit holeof incredibly powerful and useful functions for displaying descriptive and inferential results.\nView the package website for extensive documentation.\nsjPlot is a bit more complicated than ggeffects but can do just about everything it can do as well; they were written by the same author!\nsjPlot is fairly new but offers a fairly comprehensive solution for ggplot based publication-ready social science data visualization. All graphical functions in sjPlot are based on ggplot2, so it should not take terribly long to figure out."
  },
  {
    "objectID": "Lectures/Lecture11/CSSS508_Lecture10.html#sjplot-example-likert-plots",
    "href": "Lectures/Lecture11/CSSS508_Lecture10.html#sjplot-example-likert-plots",
    "title": "",
    "section": "\nsjPlot Example: Likert plots",
    "text": "sjPlot Example: Likert plots"
  },
  {
    "objectID": "Lectures/Lecture11/CSSS508_Lecture10.html#sjplot-example-crosstabs",
    "href": "Lectures/Lecture11/CSSS508_Lecture10.html#sjplot-example-crosstabs",
    "title": "",
    "section": "\nsjPlot Example: Crosstabs",
    "text": "sjPlot Example: Crosstabs"
  },
  {
    "objectID": "Lectures/Lecture9/CSSS508_Lecture9.html#title-slide",
    "href": "Lectures/Lecture9/CSSS508_Lecture9.html#title-slide",
    "title": "Roadmap",
    "section": "",
    "text": "Iteration\nCS&SS 508 • Lecture 9\n28 November 2023\nVictoria Sass"
  },
  {
    "objectID": "Lectures/Lecture9/CSSS508_Lecture9.html#bad-repetition",
    "href": "Lectures/Lecture9/CSSS508_Lecture9.html#bad-repetition",
    "title": "Roadmap",
    "section": "Bad Repetition",
    "text": "Bad Repetition\nIf someone doesn’t know better, they might find the means of variables in the swiss data by typing in a line of code for each column:\n\nmean1 &lt;- mean(swiss$Fertility)\nmean2 &lt;- mean(swiss$Agriculture)\nmean3 &lt;- mean(swissExamination)\nmean4 &lt;- mean(swiss$Fertility)\nmean5 &lt;- mean(swiss$Catholic)\nmean5 &lt;- mean(swiss$Infant.Mortality)\nc(mean1, mean2 mean3, mean4, mean5, man6)\n\nCan you spot the problems?\n. . .\nHow upset would they be if the swiss data had 200 columns instead of 6?"
  },
  {
    "objectID": "Lectures/Lecture9/CSSS508_Lecture9.html#good-repetition",
    "href": "Lectures/Lecture9/CSSS508_Lecture9.html#good-repetition",
    "title": "Roadmap",
    "section": "Good Repetition",
    "text": "Good Repetition\nYou will learn a better way to calculate column means today using loops!\n\nmeans &lt;- rep(NA, ncol(swiss))\nfor(i in 1:ncol(swiss)){\n  means[i] &lt;- mean(swiss[,i])\n}\ndata.frame(Variable=names(swiss),Mean=means)\n\n          Variable Mean\n1        Fertility 70.1\n2      Agriculture 50.7\n3      Examination 16.5\n4        Education 11.0\n5         Catholic 41.1\n6 Infant.Mortality 19.9\n\n\nDon’t worry about the details yet!\n. . ."
  },
  {
    "objectID": "Lectures/Lecture9/CSSS508_Lecture9.html#dont-repeat-yourself-dry",
    "href": "Lectures/Lecture9/CSSS508_Lecture9.html#dont-repeat-yourself-dry",
    "title": "Roadmap",
    "section": "Don’t Repeat Yourself (DRY)!",
    "text": "Don’t Repeat Yourself (DRY)!\nThe DRY idea: Computers are much better at doing the same thing over and over again than we are.\n\n\nWriting code to repeat tasks for us reduces the most common human coding mistakes.\nIt also substantially reduces the time and effort involved in processing large volumes of data.\nLastly, compact code is more readable and easier to troubleshoot."
  },
  {
    "objectID": "Lectures/Lecture9/CSSS508_Lecture9.html#the-for-loop",
    "href": "Lectures/Lecture9/CSSS508_Lecture9.html#the-for-loop",
    "title": "Roadmap",
    "section": "The for() Loop",
    "text": "The for() Loop\nfor() loops are the most general kind of loop, found in pretty much every programming language.\n“For each of these values – in order – do this”\n. . .\nConceptually:\nGiven a set of values…\n\nSet an index variable (often i) equal to the first value\nDo something (perhaps depending on i)\nIs there a next value?\n\nYES: Update to next value, go back to 2.\nNO: Exit loop\n\n\nWe are looping through values and repeating some actions."
  },
  {
    "objectID": "Lectures/Lecture9/CSSS508_Lecture9.html#for-loop-diagram",
    "href": "Lectures/Lecture9/CSSS508_Lecture9.html#for-loop-diagram",
    "title": "Roadmap",
    "section": "for() Loop: Diagram",
    "text": "for() Loop: Diagram\nGiven a set of values…"
  },
  {
    "objectID": "Lectures/Lecture9/CSSS508_Lecture9.html#for-loop-example",
    "href": "Lectures/Lecture9/CSSS508_Lecture9.html#for-loop-example",
    "title": "Roadmap",
    "section": "for() Loop: Example",
    "text": "for() Loop: Example\n\nfor(i in 1:5) {\n    # inside for, output won't show up without print()\n    print(i^2) \n}\n\n[1] 1\n[1] 4\n[1] 9\n[1] 16\n[1] 25\n\n\nNote this runs 5 separate print commands, which is why each line starts with [1]."
  },
  {
    "objectID": "Lectures/Lecture9/CSSS508_Lecture9.html#these-do-the-same-thing",
    "href": "Lectures/Lecture9/CSSS508_Lecture9.html#these-do-the-same-thing",
    "title": "Roadmap",
    "section": "These Do the Same Thing",
    "text": "These Do the Same Thing\n\n\n\nfor(i in 1:3) {\n    print(i^2) \n}\n\n[1] 1\n[1] 4\n[1] 9\n\n\n\n\ni &lt;- 1\nprint(i^2) \ni &lt;- 2\nprint(i^2)\ni &lt;- 3\nprint(i^2)\n\n[1] 1\n[1] 4\n[1] 9"
  },
  {
    "objectID": "Lectures/Lecture9/CSSS508_Lecture9.html#iteration-conventions",
    "href": "Lectures/Lecture9/CSSS508_Lecture9.html#iteration-conventions",
    "title": "Roadmap",
    "section": "Iteration Conventions",
    "text": "Iteration Conventions\n\n\nWe call what happens in the loop for a particular value one iteration.\nIterating over indices 1:n is very common. n might be the length of a vector, the number of rows or columns in a matrix or data frame, or the length of a list.\nCommon notation: i is the object that holds the current value inside the loop.\n\nIf loops are nested, you will often see j and k used for the inner loops.\nThis notation is similar to indexing in mathematical symbols (e.g \\(\\sum\\limits_{i=1}^n\\))\n\nNote i (and j,k, etc) are just normal objects. You can use any other names you want.\n\nEx: When iterating over rows and/or columns, I often use row and/or col!"
  },
  {
    "objectID": "Lectures/Lecture9/CSSS508_Lecture9.html#iterate-over-characters",
    "href": "Lectures/Lecture9/CSSS508_Lecture9.html#iterate-over-characters",
    "title": "Roadmap",
    "section": "Iterate Over Characters",
    "text": "Iterate Over Characters\nWhat we iterate over doesn’t have to be numbers 1:n or numbers at all! You can also iterate over a character vector in R:\n\nfor(i in letters[1:3]) {\n    print(i)\n}\n\n[1] \"a\"\n[1] \"b\"\n[1] \"c\"\n\ni # in R, this will exist outside of the loop!\n\n[1] \"c\""
  },
  {
    "objectID": "Lectures/Lecture9/CSSS508_Lecture9.html#pre-allocation",
    "href": "Lectures/Lecture9/CSSS508_Lecture9.html#pre-allocation",
    "title": "Roadmap",
    "section": "Pre-Allocation",
    "text": "Pre-Allocation\nUsually in a for() loop, you aren’t just printing output, but want to store results from calculations in each iteration somewhere.\n. . .\nTo do that, figure out what you want to store, and pre-allocate an object of the right size as a placeholder (typically with missing values as placeholders).\n. . .\nExamples of what to pre-allocate based on what you store:\n\n\nSingle numeric value per iteration:\n\nrep(NA, num_iter_iters)\n\nNumeric vector per iteration:\n\nmatrix(NA, nrow = num_of_iters, ncol = length_of_vector)"
  },
  {
    "objectID": "Lectures/Lecture9/CSSS508_Lecture9.html#pre-allocation-numeric",
    "href": "Lectures/Lecture9/CSSS508_Lecture9.html#pre-allocation-numeric",
    "title": "Roadmap",
    "section": "Pre-Allocation: Numeric",
    "text": "Pre-Allocation: Numeric\n\niters &lt;- 10 # Set number of interations\noutput &lt;- rep(NA,iters) # Pre-allocate numeric vector \noutput\n\n [1] NA NA NA NA NA NA NA NA NA NA\n\nfor(i in 1:iters) { # Run code below iters times\n    output[i] &lt;- (i-1)^2 + (i-2)^2\n}\noutput # Display output\n\n [1]   1   1   5  13  25  41  61  85 113 145\n\n\nSteps:\n\nSet a number of iterations\nPre-allocate a numeric vector of that length\nRun ten iterations where the output is a mathematical function of each iteration number."
  },
  {
    "objectID": "Lectures/Lecture9/CSSS508_Lecture9.html#pre-allocation-numeric-vector-per-iteration-matrix",
    "href": "Lectures/Lecture9/CSSS508_Lecture9.html#pre-allocation-numeric-vector-per-iteration-matrix",
    "title": "Roadmap",
    "section": "Pre-Allocation: Numeric Vector per Iteration Matrix",
    "text": "Pre-Allocation: Numeric Vector per Iteration Matrix\n\nrownums &lt;- 3\ncolnums &lt;- 6\noutput &lt;- matrix(NA,nrow=rownums,ncol=colnums)\n\nfor(i in 1:rownums){\n  for(j in 1:colnums){\n    output[i,j] &lt;- i + j\n  }\n}\noutput\n\n     [,1] [,2] [,3] [,4] [,5] [,6]\n[1,]    2    3    4    5    6    7\n[2,]    3    4    5    6    7    8\n[3,]    4    5    6    7    8    9"
  },
  {
    "objectID": "Lectures/Lecture9/CSSS508_Lecture9.html#aside-ifelse-statements",
    "href": "Lectures/Lecture9/CSSS508_Lecture9.html#aside-ifelse-statements",
    "title": "Roadmap",
    "section": "Aside: If/Else Statements",
    "text": "Aside: If/Else Statements\nTo test a logical statement and then conditionally execute a set of actions, use if() and else. The structure is:\n\nif(CONDITION){\n  SOME CALCULATION\n} else{\n  A DIFFERENT CALCULATION\n}\n\nWarning! else needs to be on same line as the closing brace } of previous if()."
  },
  {
    "objectID": "Lectures/Lecture9/CSSS508_Lecture9.html#ifelse-simple-example",
    "href": "Lectures/Lecture9/CSSS508_Lecture9.html#ifelse-simple-example",
    "title": "Roadmap",
    "section": "If/Else Simple Example",
    "text": "If/Else Simple Example\n\nif(8  &lt; 10){\n  print(\"Less than 10!\")\n}else{\n  print(\"Not less than 10!\")\n}\n\n[1] \"Less than 10!\""
  },
  {
    "objectID": "Lectures/Lecture9/CSSS508_Lecture9.html#more-complex-ifelse",
    "href": "Lectures/Lecture9/CSSS508_Lecture9.html#more-complex-ifelse",
    "title": "Roadmap",
    "section": "More Complex If/Else",
    "text": "More Complex If/Else\nWe can nest together multiple if/elses! if we wish:\n\ni &lt;- 13\nif(i &lt;= 10) { \n  print(\"i is less than or equal to 10!\")\n} else if(i &lt;= 14) {\n  print(\"i is greater than 10, less than or equal to 14\")\n} else {\n  print(\"i is greater than or equal to 15\")\n}\n\n[1] \"i is greater than 10, less than or equal to 14\""
  },
  {
    "objectID": "Lectures/Lecture9/CSSS508_Lecture9.html#loops-with-ifelse-statements",
    "href": "Lectures/Lecture9/CSSS508_Lecture9.html#loops-with-ifelse-statements",
    "title": "Roadmap",
    "section": "Loops with If/Else Statements",
    "text": "Loops with If/Else Statements\nSuppose we want to take the numbers between 1 and 5, and divide the evens by 2 and multiply the odds by 2. We could do that using a loop with if/else statements!\n\nfor(i in 1:5){\n  if(i %% 2 == 0){ #check for even numbers\n    print(i / 2)\n  }else{\n    print(i * 2)\n  }\n}\n\n[1] 2\n[1] 1\n[1] 6\n[1] 2\n[1] 10"
  },
  {
    "objectID": "Lectures/Lecture9/CSSS508_Lecture9.html#handling-special-cases",
    "href": "Lectures/Lecture9/CSSS508_Lecture9.html#handling-special-cases",
    "title": "Roadmap",
    "section": "Handling Special Cases",
    "text": "Handling Special Cases\nAside from the previous toy example, if() statements are useful when you have to handle special cases.\nif() statements can be used to make a loop ignore or fix problematic cases.\nThey are also useful for producing error messages, by generating a message if an input value is not what is expected."
  },
  {
    "objectID": "Lectures/Lecture9/CSSS508_Lecture9.html#while",
    "href": "Lectures/Lecture9/CSSS508_Lecture9.html#while",
    "title": "Roadmap",
    "section": "while()",
    "text": "while()\nA lesser-used looping structure is the while() loop.\nRather than iterating over a predefined vector, the loop keeps going until some condition is no longer true.\n. . .\nHere is the structure:\n\nwhile(COND IS MET){\n  RUN CODE\n}\n\nIf you’re not careful, the while loop will run forever!!"
  },
  {
    "objectID": "Lectures/Lecture9/CSSS508_Lecture9.html#simple-while-loop-example",
    "href": "Lectures/Lecture9/CSSS508_Lecture9.html#simple-while-loop-example",
    "title": "Roadmap",
    "section": "Simple while() loop example:",
    "text": "Simple while() loop example:\n\nx &lt;- 0 \nwhile(x &lt; 3){\n  x &lt;- x + 1\n  print(x)\n}\n\n[1] 1\n[1] 2\n[1] 3\n\n\nWhat happened in each iteration?"
  },
  {
    "objectID": "Lectures/Lecture9/CSSS508_Lecture9.html#these-do-the-same-thing-1",
    "href": "Lectures/Lecture9/CSSS508_Lecture9.html#these-do-the-same-thing-1",
    "title": "Roadmap",
    "section": "These Do the Same Thing",
    "text": "These Do the Same Thing\n\n\n\nx &lt;- 0 \nwhile(x &lt; 3){\n  x &lt;- x + 1\n  print(x)\n}\n\n[1] 1\n[1] 2\n[1] 3\n\n\n\n\nx &lt;- 0\nx &lt;- x+1\nprint(x)\nx &lt;- x+1\nprint(x)\nx &lt;- x+1\nprint(x)\n\n[1] 1\n[1] 2\n[1] 3"
  },
  {
    "objectID": "Lectures/Lecture9/CSSS508_Lecture9.html#more-complex-example",
    "href": "Lectures/Lecture9/CSSS508_Lecture9.html#more-complex-example",
    "title": "Roadmap",
    "section": "More Complex Example",
    "text": "More Complex Example\nLet’s see how many times we need to flip a coin to get 4 heads:\n\nnum_heads &lt;- 0\nnum_flips &lt;- 0\n\nwhile(num_heads &lt; 4) {\n  # simulating a coin flip\n  coin_flip &lt;- rbinom(n = 1, size = 1, prob = 0.5) \n\n  # keep track of heads\n  if (coin_flip == 1) { \n    num_heads &lt;- num_heads + 1 \n  }\n  \n  # update number of coin flips\n  num_flips &lt;- num_flips + 1 \n}\n\nnum_flips # follows negative binomial distribution\n\n[1] 12"
  },
  {
    "objectID": "Lectures/Lecture9/CSSS508_Lecture9.html#summary",
    "href": "Lectures/Lecture9/CSSS508_Lecture9.html#summary",
    "title": "Roadmap",
    "section": "Summary",
    "text": "Summary\n\nWhy Loops?\n\n\nTo make our lives easier!\n\n\nfor() loops:\n\n\nFor iterating over a fixed number of items\n\n\nwhile() loops:\n\n\nFor iterating until some condition is met\n\nLet’s take a 10 minute break, then return for some activities!"
  },
  {
    "objectID": "Lectures/Lecture9/CSSS508_Lecture9.html#activity-1",
    "href": "Lectures/Lecture9/CSSS508_Lecture9.html#activity-1",
    "title": "Roadmap",
    "section": "Activity 1",
    "text": "Activity 1\n\nCreate a for loop to calculate the maximum value of each variable in the swiss data. What are the maximum values of each variable?\nUsing your previous answer as a starting point, create a nested for loop to calculate the maximum value for each variable in the swiss data (outer loop), and then divide that maximum by 1, 2, and 4 (inner loop). Print the output after each step.\nUsing your previous answer as a starting point, write a loop that does the same calculations as before but stores the values in a matrix with ncol(swiss) columns and 3 rows. How will you “pre-allocate” space for the results?"
  },
  {
    "objectID": "Lectures/Lecture9/CSSS508_Lecture9.html#activity-1-answers",
    "href": "Lectures/Lecture9/CSSS508_Lecture9.html#activity-1-answers",
    "title": "Roadmap",
    "section": "Activity 1: Answers",
    "text": "Activity 1: Answers\nQuestion 1:\n\nfor(i in 1:ncol(swiss)) {\n  curr_max &lt;- max(swiss[,i])\n  print(curr_max)\n}\n\n[1] 92.5\n[1] 89.7\n[1] 37\n[1] 53\n[1] 100\n[1] 26.6"
  },
  {
    "objectID": "Lectures/Lecture9/CSSS508_Lecture9.html#activity-1-answers-1",
    "href": "Lectures/Lecture9/CSSS508_Lecture9.html#activity-1-answers-1",
    "title": "Roadmap",
    "section": "Activity 1: Answers",
    "text": "Activity 1: Answers\nQuestion 2:\n\nfor(i in 1:ncol(swiss)) {\n  curr_max &lt;- max(swiss[,i])\n  for(j in c(1,2,4)){\n    print(curr_max/j)\n  }\n}\n\n[1] 92.5\n[1] 46.2\n[1] 23.1\n[1] 89.7\n[1] 44.9\n[1] 22.4\n[1] 37\n[1] 18.5\n[1] 9.25\n[1] 53\n[1] 26.5\n[1] 13.2\n[1] 100\n[1] 50\n[1] 25\n[1] 26.6\n[1] 13.3\n[1] 6.65"
  },
  {
    "objectID": "Lectures/Lecture9/CSSS508_Lecture9.html#activity-1-answers-2",
    "href": "Lectures/Lecture9/CSSS508_Lecture9.html#activity-1-answers-2",
    "title": "Roadmap",
    "section": "Activity 1: Answers",
    "text": "Activity 1: Answers\nQuestion 3:\n\nresults &lt;- matrix(NA, ncol=ncol(swiss),nrow=3)\nfor(i in 1:ncol(swiss)) {\n  curr_max &lt;- max(swiss[,i])\n  for(j in 1:3){\n    curr_divisor &lt;- c(1,2,4)[j]\n    results[j,i] &lt;- curr_max/curr_divisor\n  }\n}\nresults\n\n     [,1] [,2]  [,3] [,4] [,5]  [,6]\n[1,] 92.5 89.7 37.00 53.0  100 26.60\n[2,] 46.2 44.9 18.50 26.5   50 13.30\n[3,] 23.1 22.4  9.25 13.2   25  6.65"
  },
  {
    "objectID": "Lectures/Lecture9/CSSS508_Lecture9.html#activity-2",
    "href": "Lectures/Lecture9/CSSS508_Lecture9.html#activity-2",
    "title": "Roadmap",
    "section": "Activity 2",
    "text": "Activity 2\n1. Consider the vector vec &lt;- c(1,2,NA,3,NA). Write a for loop that includes an if/else function so that for each value x in vec, we print “Missing!” if x is NA, and x^3 otherwise.\n2. What will happen if I run the following loop:\n\nx &lt;- 1\nwhile(x &lt; 10){\n  print(x + 1)\n}\n\n3. Write a while() loop that starts with x &lt;- 1 and doubles x each iteration, while x &lt; 100. Print x after each iteration."
  },
  {
    "objectID": "Lectures/Lecture9/CSSS508_Lecture9.html#activity-2-answers",
    "href": "Lectures/Lecture9/CSSS508_Lecture9.html#activity-2-answers",
    "title": "Roadmap",
    "section": "Activity 2: Answers",
    "text": "Activity 2: Answers\n1.\n\nfor(x in c(1,2,NA,3,NA)){\n  if(is.na(x)){\n    print(\"Missing!\")\n  } else{\n    print(x^3)\n  }\n}\n\n[1] 1\n[1] 8\n[1] \"Missing!\"\n[1] 27\n[1] \"Missing!\""
  },
  {
    "objectID": "Lectures/Lecture9/CSSS508_Lecture9.html#activity-2-answers-1",
    "href": "Lectures/Lecture9/CSSS508_Lecture9.html#activity-2-answers-1",
    "title": "Roadmap",
    "section": "Activity 2: Answers",
    "text": "Activity 2: Answers\n2. What will happen if I run the following loop:\n\nx &lt;- 1\nwhile(x &lt; 10){\n  print(x + 1)\n}\n\n\nAnswer: The while loop will run forever printing 1, since we are not updating x!!"
  },
  {
    "objectID": "Lectures/Lecture9/CSSS508_Lecture9.html#activity-2-answers-2",
    "href": "Lectures/Lecture9/CSSS508_Lecture9.html#activity-2-answers-2",
    "title": "Roadmap",
    "section": "Activity 2: Answers",
    "text": "Activity 2: Answers\n3. Write a while() loop that starts with x &lt;- 1 and doubles x each iteration, while x &lt; 100. Print x after each iteration.\n\nx &lt;- 1\nwhile(x &lt;100){\n  x &lt;- x * 2\n  print(x)\n}\n\n[1] 2\n[1] 4\n[1] 8\n[1] 16\n[1] 32\n[1] 64\n[1] 128\n\n\nWhy does x reach 128?!"
  },
  {
    "objectID": "Lectures/Lecture9/CSSS508_Lecture9.html#homework-6",
    "href": "Lectures/Lecture9/CSSS508_Lecture9.html#homework-6",
    "title": "Roadmap",
    "section": "Homework 6",
    "text": "Homework 6\nHW 6 will be posted on the website shortly! Remember that it is a continuation of HW 5!"
  },
  {
    "objectID": "Lectures/Lecture9/CSSS508_Lecture9.html#due-dates",
    "href": "Lectures/Lecture9/CSSS508_Lecture9.html#due-dates",
    "title": "Roadmap",
    "section": "Due dates",
    "text": "Due dates\n\n\n\n\n\n\n  \n    \n    \n      #\n      \n        Section AA\n      \n      \n        Section AB\n      \n    \n    \n      Homework Due\n      Peer Review Due\n      Homework Due\n      Peer Review Due\n    \n  \n  \n    1\n10 October\n15 October\n12 October\n17 October\n    2\n17 October\n22 October\n19 October\n24 October\n    3\n24 October\n29 October\n26 October\n31 October\n    4\n31 October\n5 November\n2 November\n7 November\n    5\n7 November\n12 November\n9 November\n14 November\n    6\n14 November\n19 November\n16 November\n21 November\n    7\n21 November\n26 November\n23 November\n28 November\n    8\n28 November\n3 November\n30 November\n5 November\n    9\n5 December\n10 December\n7 December\n12 December"
  },
  {
    "objectID": "Lectures/Lecture7/CSSS508_Lecture8.html#title-slide",
    "href": "Lectures/Lecture7/CSSS508_Lecture8.html#title-slide",
    "title": "",
    "section": "",
    "text": "Writing Functions\nCS&SS 508 • Lecture 8\n21 November 2023\nVictoria Sass"
  },
  {
    "objectID": "Lectures/Lecture7/CSSS508_Lecture8.html#why-functions",
    "href": "Lectures/Lecture7/CSSS508_Lecture8.html#why-functions",
    "title": "",
    "section": "Why Functions?",
    "text": "Why Functions?\nR (as well as mathematics in general) is full of functions!\n\nWe use functions to:\n\nCompute summary statistics (mean(), sd(), min())\nFit models to data (lm(Fertility~Agriculture,data=swiss))\nLoad data (read_csv())\nCreate ggplots (ggplot())\nAnd so much more!!"
  },
  {
    "objectID": "Lectures/Lecture7/CSSS508_Lecture8.html#examples-of-existing-functions",
    "href": "Lectures/Lecture7/CSSS508_Lecture8.html#examples-of-existing-functions",
    "title": "",
    "section": "Examples of Existing Functions",
    "text": "Examples of Existing Functions\n\n\n\nmean():\n\nInput: a vector\nOutput: a single number\n\n\n\ndplyr::filter():\n\nInput: a data frame, logical conditions\nOutput: a data frame with rows removed using those conditions\n\n\n\nreadr::read_csv():\n\nInput: a file path, optionally variable names or types\nOutput: a data frame containing info read in from file\n\n\n\n\n\nEach function requires inputs, and returns outputs"
  },
  {
    "objectID": "Lectures/Lecture7/CSSS508_Lecture8.html#why-write-your-own-functions",
    "href": "Lectures/Lecture7/CSSS508_Lecture8.html#why-write-your-own-functions",
    "title": "",
    "section": "Why Write Your Own Functions?",
    "text": "Why Write Your Own Functions?\nFunctions encapsulate actions you might perform often, such as:\n\nGiven a vector, compute some special summary stats\nGiven a vector and definition of “invalid” values, replace with NA\n\nDefining a new logical operator\n\n\nAdvanced function applications (not covered in this class):\n\nParallel processing\nGenerating other functions\nMaking custom packages containing your functions"
  },
  {
    "objectID": "Lectures/Lecture7/CSSS508_Lecture8.html#anatomy-of-a-function",
    "href": "Lectures/Lecture7/CSSS508_Lecture8.html#anatomy-of-a-function",
    "title": "",
    "section": "Anatomy of a Function",
    "text": "Anatomy of a Function\n\nNAME &lt;- function(ARGUMENT1, ARGUMENT2=DEFAULT){\n  BODY\n  return(OUTPUT)\n}\n\n\n\n\nName: What you call the function so you can use it later\n\nArguments (aka inputs, parameters): things the user passes to the function that affect how it works\n\ne.g. ARGUMENT1, ARGUMENT2\n\n\nARGUMENT2=DEFAULT is example of setting a default value\nIn this example, ARGUMENT1, ARGUMENT2 values won’t exist outside of the function\n\n\n\nBody: The actual operations inside the function.\n\nOutput: The object inside return(). Could be anything (or nothing!)\n\nIf unspecified, will be the last thing calculated"
  },
  {
    "objectID": "Lectures/Lecture7/CSSS508_Lecture8.html#example-1-doubling-a-number",
    "href": "Lectures/Lecture7/CSSS508_Lecture8.html#example-1-doubling-a-number",
    "title": "",
    "section": "Example 1: Doubling A Number",
    "text": "Example 1: Doubling A Number\n\ndouble_x &lt;- function(x){\n  double_x &lt;- x * 2\n  return(double_x)\n}\n\n\nLet’s run it!\n\ndouble_x(5)\n\n[1] 10\n\ndouble_x(NA)\n\n[1] NA\n\ndouble_x(1:2)\n\n[1] 2 4"
  },
  {
    "objectID": "Lectures/Lecture7/CSSS508_Lecture8.html#example-2-extract-firstlast",
    "href": "Lectures/Lecture7/CSSS508_Lecture8.html#example-2-extract-firstlast",
    "title": "",
    "section": "Example 2: Extract First/Last",
    "text": "Example 2: Extract First/Last\n\nfirst_and_last &lt;- function(x) {\n    first &lt;- x[1]\n    last  &lt;- x[length(x)]\n    return(c(\"first\" = first, \"last\" = last))\n}\n\n\nTest it out:\n\nfirst_and_last(c(4, 3, 1, 8))\n\nfirst  last \n    4     8"
  },
  {
    "objectID": "Lectures/Lecture7/CSSS508_Lecture8.html#example-2-testing-first_and_last",
    "href": "Lectures/Lecture7/CSSS508_Lecture8.html#example-2-testing-first_and_last",
    "title": "",
    "section": "Example 2: Testing first_and_last\n",
    "text": "Example 2: Testing first_and_last\n\nWhat if I give first_and_last() a vector of length 1?\n\nfirst_and_last(7)\n\nfirst  last \n    7     7 \n\n\n\nOf length 0?\n\nfirst_and_last(numeric(0))\n\nfirst \n   NA \n\n\n\n\nMaybe we want it to be a little smarter."
  },
  {
    "objectID": "Lectures/Lecture7/CSSS508_Lecture8.html#example-3-checking-inputs",
    "href": "Lectures/Lecture7/CSSS508_Lecture8.html#example-3-checking-inputs",
    "title": "",
    "section": "Example 3: Checking Inputs",
    "text": "Example 3: Checking Inputs\nLet’s make sure we get an error message when the vector is too small:\n\nsmarter_first_and_last &lt;- function(x) {\n    if(length(x) &lt; 2){\n      stop(\"Input is not long enough!\")\n    } else{\n      first &lt;- x[1]\n      last  &lt;- x[length(x)]\n      return(c(\"first\" = first, \"last\" = last))    \n    }\n}\n\n\n\nstop() ceases running the function and prints the text inside as an error message."
  },
  {
    "objectID": "Lectures/Lecture7/CSSS508_Lecture8.html#example-3-testing-smarter-function",
    "href": "Lectures/Lecture7/CSSS508_Lecture8.html#example-3-testing-smarter-function",
    "title": "",
    "section": "Example 3: Testing Smarter Function",
    "text": "Example 3: Testing Smarter Function\n\nsmarter_first_and_last(NA)\n\nError in smarter_first_and_last(NA): Input is not long enough!\n\nsmarter_first_and_last(c(4, 3, 1, 8))\n\nfirst  last \n    4     8"
  },
  {
    "objectID": "Lectures/Lecture7/CSSS508_Lecture8.html#cracking-open-functions",
    "href": "Lectures/Lecture7/CSSS508_Lecture8.html#cracking-open-functions",
    "title": "",
    "section": "Cracking Open Functions",
    "text": "Cracking Open Functions\nIf you type a function name without any parentheses or arguments, you can see its contents:\n\nsmarter_first_and_last\n\nfunction(x) {\n    if(length(x) &lt; 2){\n      stop(\"Input is not long enough!\")\n    } else{\n      first &lt;- x[1]\n      last  &lt;- x[length(x)]\n      return(c(\"first\" = first, \"last\" = last))    \n    }\n}\n&lt;bytecode: 0x7fbf1e2fb190&gt;"
  },
  {
    "objectID": "Lectures/Lecture7/CSSS508_Lecture8.html#applying-functions-multiple-times",
    "href": "Lectures/Lecture7/CSSS508_Lecture8.html#applying-functions-multiple-times",
    "title": "",
    "section": "Applying Functions Multiple Times?",
    "text": "Applying Functions Multiple Times?\nLast week, we saw an example where we wanted to take the mean of each column in the swiss data:\n\nfor(col_index in 1:ncol(swiss)){\n  mean_swiss_col &lt;- mean(swiss[,col_index])\n  names_swiss_col &lt;- names(swiss)[col_index]\n  print(c(names_swiss_col,round(mean_swiss_col,3)))\n}\n\n[1] \"Fertility\" \"70.143\"   \n[1] \"Agriculture\" \"50.66\"      \n[1] \"Examination\" \"16.489\"     \n[1] \"Education\" \"10.979\"   \n[1] \"Catholic\" \"41.144\"  \n[1] \"Infant.Mortality\" \"19.943\"          \n\n\nIsn’t this kind of complex?!"
  },
  {
    "objectID": "Lectures/Lecture7/CSSS508_Lecture8.html#apply-dont-loop",
    "href": "Lectures/Lecture7/CSSS508_Lecture8.html#apply-dont-loop",
    "title": "",
    "section": "\napply(), don’t loop!",
    "text": "apply(), don’t loop!\nWriting loops can be challenging and prone to bugs!!\n\nThe apply() can solve this issue:\n\n\napply a function to values in each row or column of a matrix\nDoesn’t require preallocation\nCan take built-in functions or user-created functions."
  },
  {
    "objectID": "Lectures/Lecture7/CSSS508_Lecture8.html#structure-of-apply",
    "href": "Lectures/Lecture7/CSSS508_Lecture8.html#structure-of-apply",
    "title": "",
    "section": "Structure of apply()\n",
    "text": "Structure of apply()\n\napply() takes 3 arguments:\n\nData (a matrix or data frame)\nMargin (1 applies function to each row, 2 applies to each column)\nFunction\n\n\napply(DATA, MARGIN, FUNCTION)\n\n\nFor example,\n\napply(swiss, 2, mean)\n\n       Fertility      Agriculture      Examination        Education \n        70.14255         50.65957         16.48936         10.97872 \n        Catholic Infant.Mortality \n        41.14383         19.94255"
  },
  {
    "objectID": "Lectures/Lecture7/CSSS508_Lecture8.html#example-1",
    "href": "Lectures/Lecture7/CSSS508_Lecture8.html#example-1",
    "title": "",
    "section": "Example 1",
    "text": "Example 1\n\nrow_max &lt;- apply(swiss,1,max) # maximum in each row\nhead(row_max, 20)\n\n  Courtelary     Delemont Franches-Mnt      Moutier   Neuveville   Porrentruy \n       80.20        84.84        93.40        85.80        76.90        90.57 \n       Broye        Glane      Gruyere       Sarine      Veveyse        Aigle \n       92.85        97.16        97.67        91.38        98.61        64.10 \n     Aubonne     Avenches     Cossonay    Echallens     Grandson     Lausanne \n       67.50        68.90        69.30        72.60        71.70        55.70 \n   La Vallee       Lavaux \n       54.30        73.00"
  },
  {
    "objectID": "Lectures/Lecture7/CSSS508_Lecture8.html#example-2",
    "href": "Lectures/Lecture7/CSSS508_Lecture8.html#example-2",
    "title": "",
    "section": "Example 2",
    "text": "Example 2\n\napply(swiss, 2, summary) # summary of each column\n\n        Fertility Agriculture Examination Education  Catholic Infant.Mortality\nMin.     35.00000     1.20000     3.00000   1.00000   2.15000         10.80000\n1st Qu.  64.70000    35.90000    12.00000   6.00000   5.19500         18.15000\nMedian   70.40000    54.10000    16.00000   8.00000  15.14000         20.00000\nMean     70.14255    50.65957    16.48936  10.97872  41.14383         19.94255\n3rd Qu.  78.45000    67.65000    22.00000  12.00000  93.12500         21.70000\nMax.     92.50000    89.70000    37.00000  53.00000 100.00000         26.60000\n\n\n**Note:* Matrix output!"
  },
  {
    "objectID": "Lectures/Lecture7/CSSS508_Lecture8.html#example-3-user-created-function",
    "href": "Lectures/Lecture7/CSSS508_Lecture8.html#example-3-user-created-function",
    "title": "",
    "section": "Example 3: User-Created Function",
    "text": "Example 3: User-Created Function\n\nscores &lt;- matrix(1:21, nrow=3)\nprint(scores)\n\n     [,1] [,2] [,3] [,4] [,5] [,6] [,7]\n[1,]    1    4    7   10   13   16   19\n[2,]    2    5    8   11   14   17   20\n[3,]    3    6    9   12   15   18   21\n\nmy_function &lt;- function(x){ mean(x+10, na.rm = T) }\napply(scores, 1, my_function)\n\n[1] 20 21 22"
  },
  {
    "objectID": "Lectures/Lecture7/CSSS508_Lecture8.html#activity-writing-a-function",
    "href": "Lectures/Lecture7/CSSS508_Lecture8.html#activity-writing-a-function",
    "title": "",
    "section": "Activity: Writing A Function",
    "text": "Activity: Writing A Function\nIn Olympic diving, a panel of 7 judges provide scores. After removing the worst and best scores, the mean of the remaining scores is given to the diver. We’ll write code to calculate this score!\n\nSuppose I get you a vector, x, of length 7. Write code that will sort the vector from least to greatest, then keep the 2nd-6th elements1.\n\nWrite a function to calculate a diver’s score:\n\nInput: Vector of length 7\nChecks: Check that the vector has length 7 (if not, stop!)\nOutput: Mean score after removing the lowest and greatest scores.\n\n\nCalculate the diver’s score given x &lt;- c(2, 1:5, 3)\nHINT: Use the sort() function and square brackets [ ] for subsetting"
  },
  {
    "objectID": "Lectures/Lecture7/CSSS508_Lecture8.html#activity-solution",
    "href": "Lectures/Lecture7/CSSS508_Lecture8.html#activity-solution",
    "title": "",
    "section": "Activity: Solution",
    "text": "Activity: Solution\n\nSort and extract elements 2 through 6:\n\n\nAnswer: Given vector x, use sort(x)[2:6]\n\n\n\nFunction\n\n\ndivers_score &lt;- function(x){\n  if(length(x) != 7){\n    stop(\"x is not of length 7!\")\n  } else{\n    x_nofirst_nolast &lt;- sort(x)[2:6]\n    return(mean(x_nofirst_nolast))\n  }\n}\n\n\n\nCalculate the diver’s score given x &lt;- c(2, 1:5, 3)\n\n\n\ndivers_score(x = c(2,1:5,3) )\n\n[1] 2.8"
  },
  {
    "objectID": "Lectures/Lecture7/CSSS508_Lecture8.html#activity",
    "href": "Lectures/Lecture7/CSSS508_Lecture8.html#activity",
    "title": "",
    "section": "Activity",
    "text": "Activity\nThese are homework questions!!\n\nPreallocate a matrix of NAs with 3 rows and 8 columns, called double_matrix. Manually specify the first column equal to the values 1, 2, and 3. Using a nested loop, fill in the matrix, row by row, such that each value is double that to its left.\nWrite an apply() function to take the median value of each column in the cars dataset\nUsing ggplot, make a scatterplot of the speed and dist variables in cars. Then, add an appropriate horizontal and vertical line symbolizing the median value of each variable1.\nHint: Using the layers geom_vline(xintercept = ) and geom_hline(yintercept = )"
  },
  {
    "objectID": "Lectures/Lecture7/CSSS508_Lecture8.html#answers",
    "href": "Lectures/Lecture7/CSSS508_Lecture8.html#answers",
    "title": "",
    "section": "Answers",
    "text": "Answers\n\nPreallocate a matrix of NAs with 3 rows and 8 columns, called double_matrix. Manually specify the first column equal to the values 1, 2, and 3. Using a nested loop, fill in the matrix, row by row, such that each value is double that to its left.\n\n\ndouble_matrix &lt;- matrix(NA, nrow = 3,ncol = 8)\ndouble_matrix[ , 1] &lt;- 1:3\nfor(row in 1:3){\n  for(col in 2:8){\n    double_matrix[row, col] &lt;- double_matrix[row, col-1] * 2\n  }\n}\ndouble_matrix\n\n     [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8]\n[1,]    1    2    4    8   16   32   64  128\n[2,]    2    4    8   16   32   64  128  256\n[3,]    3    6   12   24   48   96  192  384"
  },
  {
    "objectID": "Lectures/Lecture7/CSSS508_Lecture8.html#answers-1",
    "href": "Lectures/Lecture7/CSSS508_Lecture8.html#answers-1",
    "title": "",
    "section": "Answers",
    "text": "Answers\n2. Write an apply() function to take the median value of each column in the cars dataset\n\nmedian_cars &lt;- apply(cars, 2, median)\nmedian_cars\n\nspeed  dist \n   15    36"
  },
  {
    "objectID": "Lectures/Lecture7/CSSS508_Lecture8.html#answers-2",
    "href": "Lectures/Lecture7/CSSS508_Lecture8.html#answers-2",
    "title": "",
    "section": "Answers",
    "text": "Answers\n3. Make a ggplot\n\n\nCode\nPlot\n\n\n\n\nlibrary(ggplot2)\nggplot(cars, aes(speed, dist)) + \n  geom_point() +\n  geom_vline(xintercept = median_cars[1]) +\n  geom_hline(yintercept = median_cars[2])"
  },
  {
    "objectID": "Lectures/Lecture7/CSSS508_Lecture8.html#homework-7",
    "href": "Lectures/Lecture7/CSSS508_Lecture8.html#homework-7",
    "title": "",
    "section": "Homework 7",
    "text": "Homework 7\nTime to work on Homework 7!"
  },
  {
    "objectID": "Lectures/Lecture7/CSSS508_Lecture8.html#due-dates",
    "href": "Lectures/Lecture7/CSSS508_Lecture8.html#due-dates",
    "title": "",
    "section": "Due Dates",
    "text": "Due Dates\n\n\nSection AA:\n\nHomework #4 due Tuesday, November 21st (before lecture)\nPeer grading due Sunday, November 26th (by 4:30pm)\n\n\n\n\n\n\nSection AB:\n\nHomework #4 due Thursday, November 23rd (before lab)\nPeer grading due Tuesday, November 28th (before lecture)"
  },
  {
    "objectID": "Lectures/Lecture8/CSSS508_Lecture7.html#title-slide",
    "href": "Lectures/Lecture8/CSSS508_Lecture7.html#title-slide",
    "title": "",
    "section": "",
    "text": "Working with Text Data\nCS&SS 508 • Lecture 7\n14 November 2023\nVictoria Sass"
  },
  {
    "objectID": "Lectures/Lecture8/CSSS508_Lecture7.html#basics-of-strings-1",
    "href": "Lectures/Lecture8/CSSS508_Lecture7.html#basics-of-strings-1",
    "title": "",
    "section": "Basics of Strings",
    "text": "Basics of Strings\n\n\nA general programming term for a unit of character data is a string\n\nStrings are a sequence of characters\n\nIn R, “strings” and “character data” are mostly interchangeable.\nSome languages have more precise distinctions, but we won’t worry about that here!\n\n\n\n\n\n\nWe can create strings by surrounding text, numbers, spaces, or symbols with quotes!\n\nExamples: \"Hello! My name is Vic\" or \"%*$#01234\""
  },
  {
    "objectID": "Lectures/Lecture8/CSSS508_Lecture7.html#basics-of-strings-2",
    "href": "Lectures/Lecture8/CSSS508_Lecture7.html#basics-of-strings-2",
    "title": "",
    "section": "Basics of Strings",
    "text": "Basics of Strings\nR can treat strings in funny ways!\n\n\"01\" == \"1\"\n\n[1] FALSE\n\n\"01\" == 1\n\n[1] FALSE\n\n\"1\" == 1\n\n[1] TRUE\n\n\n\nReminder: We can check data types using the class() function!\n\nc(class(\"1\"), class(1))\n\n[1] \"character\" \"numeric\""
  },
  {
    "objectID": "Lectures/Lecture8/CSSS508_Lecture7.html#data-king-county-restaurant-inspections",
    "href": "Lectures/Lecture8/CSSS508_Lecture7.html#data-king-county-restaurant-inspections",
    "title": "",
    "section": "Data: King County Restaurant Inspections!",
    "text": "Data: King County Restaurant Inspections!\nToday we’ll study real data on food safety inspections in King County, collected from data.kingcounty.gov.\nNote these data are fairly large. The following code can be used to download the data directly from my Github page:\n\nrestaurants &lt;- read_csv(file = \"https://raw.githubusercontent.com/vsass/CSSS508/main/Lectures/Lecture8/data/restaurants.csv\")"
  },
  {
    "objectID": "Lectures/Lecture8/CSSS508_Lecture7.html#quick-examination-of-the-data",
    "href": "Lectures/Lecture8/CSSS508_Lecture7.html#quick-examination-of-the-data",
    "title": "",
    "section": "Quick Examination of the Data",
    "text": "Quick Examination of the Data\n\nnames(restaurants)\n\n [1] \"Name\"                       \"Program Identifier\"        \n [3] \"Inspection Date\"            \"Description\"               \n [5] \"Address\"                    \"City\"                      \n [7] \"Zip Code\"                   \"Phone\"                     \n [9] \"Longitude\"                  \"Latitude\"                  \n[11] \"Inspection Business Name\"   \"Inspection Type\"           \n[13] \"Inspection Score\"           \"Inspection Result\"         \n[15] \"Inspection Closed Business\" \"Violation Type\"            \n[17] \"Violation Description\"      \"Violation Points\"          \n[19] \"Business_ID\"                \"Inspection_Serial_Num\"     \n[21] \"Violation_Record_ID\"        \"Grade\"                     \n\ndim(restaurants)\n\n[1] 255270     22"
  },
  {
    "objectID": "Lectures/Lecture8/CSSS508_Lecture7.html#quick-examination-of-the-data-1",
    "href": "Lectures/Lecture8/CSSS508_Lecture7.html#quick-examination-of-the-data-1",
    "title": "",
    "section": "Quick Examination of the Data",
    "text": "Quick Examination of the Data\nGood Questions to Ask:\n\nWhat does each row represent?\nIs the data in long or wide format?\nWhat are the key variables?\nHow are the data stored? (data type)"
  },
  {
    "objectID": "Lectures/Lecture8/CSSS508_Lecture7.html#nchar",
    "href": "Lectures/Lecture8/CSSS508_Lecture7.html#nchar",
    "title": "",
    "section": "nchar()",
    "text": "nchar()\nThe nchar() function calculates the number of characters in a given string.\n\n\nlength() doesn’t work with strings!!\n\nWhy not?\n\n\n\n\n\nnchar(\"Victoria Sass\")\n\n[1] 13\n\nlength(\"Victoria Sass\")\n\n[1] 1\n\n\n\n\nIn our restaurants data, let’s see how many characters are in each zip code:\n\nlength_zip &lt;- nchar(restaurants$`Zip Code`) # notice when a variable name has spaces we need to contain it within backticks so R knows it is a singular entity\ntable(length_zip)\n\nlength_zip\n     4      5      6 \n    15 255248      1"
  },
  {
    "objectID": "Lectures/Lecture8/CSSS508_Lecture7.html#substr",
    "href": "Lectures/Lecture8/CSSS508_Lecture7.html#substr",
    "title": "",
    "section": "substr()",
    "text": "substr()\nThe substr() function allows us to extract characters from a string.\n\nFor example, we can extract the third through fifth elements of a string as follows:\n\nsubstr(\"98126\", 3, 5)\n\n[1] \"126\""
  },
  {
    "objectID": "Lectures/Lecture8/CSSS508_Lecture7.html#substr-1",
    "href": "Lectures/Lecture8/CSSS508_Lecture7.html#substr-1",
    "title": "",
    "section": "substr()",
    "text": "substr()\nLet’s extract the first five characters from each zip code in the restaurants data, and add it to our dataset.\n\nlibrary(dplyr)\nrestaurants$ZIP_5 &lt;- substr(restaurants$`Zip Code`, 1, 5) \nrestaurants %&gt;% \n  distinct(ZIP_5) %&gt;% \n  head()\n\n# A tibble: 6 × 1\n  ZIP_5\n  &lt;chr&gt;\n1 98105\n2 98103\n3 98104\n4 98109\n5 98101\n6 98052"
  },
  {
    "objectID": "Lectures/Lecture8/CSSS508_Lecture7.html#paste",
    "href": "Lectures/Lecture8/CSSS508_Lecture7.html#paste",
    "title": "",
    "section": "paste()",
    "text": "paste()\nWe combine strings together using paste(). By default, it puts a space between different strings.\n\nFor example, we can combine \"Victoria\" and \"Sass\" as follows:\n\npaste(\"Victoria\", \"Sass\")\n\n[1] \"Victoria Sass\""
  },
  {
    "objectID": "Lectures/Lecture8/CSSS508_Lecture7.html#more-complex-paste-commands",
    "href": "Lectures/Lecture8/CSSS508_Lecture7.html#more-complex-paste-commands",
    "title": "",
    "section": "More complex paste() commands",
    "text": "More complex paste() commands\nThere are two additional common arguments to use with paste():\n\n\nsep = controls what separates vectors, entry-wise\n\ncollapse = controls if/how multiple outputs are collapsed into a single string.\n\n\nExamples:\n\npaste(\"CSSS\", \"508\", sep = \"_\")\n\n[1] \"CSSS_508\"\n\npaste(c(\"CSSS\", \"STAT\"), \"508\", sep = \"_\")\n\n[1] \"CSSS_508\" \"STAT_508\"\n\npaste(c(\"CSSS\", \"STAT\"), \"508\", sep = \"_\", collapse = \" , \")\n\n[1] \"CSSS_508 , STAT_508\"\n\n\nWhen do we get one string as output vs. two?"
  },
  {
    "objectID": "Lectures/Lecture8/CSSS508_Lecture7.html#paste-1",
    "href": "Lectures/Lecture8/CSSS508_Lecture7.html#paste-1",
    "title": "",
    "section": "paste()",
    "text": "paste()\nLet’s use paste() to create complete mailing addresses for each restaurant:\n\n\nrestaurants$mailing_address &lt;- paste(restaurants$Address, \", \", restaurants$City, \n                                     \", WA \", restaurants$ZIP_5, sep = \"\")\nrestaurants %&gt;% \n  distinct(mailing_address) %&gt;% \n  head()\n\n# A tibble: 6 × 1\n  mailing_address                                  \n  &lt;chr&gt;                                            \n1 2746 NE 45TH ST, SEATTLE, WA 98105               \n2 1906 N 34TH ST, SEATTLE, WA 98103                \n3 122 2ND AVE S, SEATTLE, WA 98104                 \n4 1001 FAIRVIEW AVE N Unit 1700A, SEATTLE, WA 98109\n5 1225 1ST AVE, SEATTLE, WA 98101                  \n6 15364 NE 96TH PL, REDMOND, WA 98052"
  },
  {
    "objectID": "Lectures/Lecture8/CSSS508_Lecture7.html#stringr",
    "href": "Lectures/Lecture8/CSSS508_Lecture7.html#stringr",
    "title": "",
    "section": "stringr",
    "text": "stringr\nstringr is yet another R package from the Tidyverse (like ggplot2, dplyr, tidyr, lubridate, readr).\n\nIt provides TONS of functions for working with strings:\n\nSome are equivalent/better versions of Base R functions\nSome can do fancier tricks with strings\n\n\n\nMost stringr functions begin with “str_” to make RStudio auto-complete more useful.\n\n\nWe’ll cover the basics today, but know there’s much more out there!\n\nlibrary(stringr)"
  },
  {
    "objectID": "Lectures/Lecture8/CSSS508_Lecture7.html#equivalencies-str_length",
    "href": "Lectures/Lecture8/CSSS508_Lecture7.html#equivalencies-str_length",
    "title": "",
    "section": "Equivalencies: str_length()\n",
    "text": "Equivalencies: str_length()\n\nstr_length() is equivalent to nchar():\n\nnchar(\"weasels\")\n\n[1] 7\n\nstr_length(\"weasels\")\n\n[1] 7"
  },
  {
    "objectID": "Lectures/Lecture8/CSSS508_Lecture7.html#equivalencies-str_sub",
    "href": "Lectures/Lecture8/CSSS508_Lecture7.html#equivalencies-str_sub",
    "title": "",
    "section": "Equivalencies: str_sub()\n",
    "text": "Equivalencies: str_sub()\n\nstr_sub() is like substr():\n\nstr_sub(\"Washington\", 2, 4)\n\n[1] \"ash\"\n\n\n\nstr_sub() also lets you put in negative values to count backwards from the end (-1 is the end, -3 is third from end):\n\nstr_sub(\"Washington\", 4, -3)\n\n[1] \"hingt\""
  },
  {
    "objectID": "Lectures/Lecture8/CSSS508_Lecture7.html#equivalencies-str_c",
    "href": "Lectures/Lecture8/CSSS508_Lecture7.html#equivalencies-str_c",
    "title": "",
    "section": "Equivalencies: str_c()\n",
    "text": "Equivalencies: str_c()\n\nstr_c() (“string combine”) is just like paste() but where the default is sep = \"\" (no space!)\n\nstr_c(c(\"CSSS\",\"STAT\"), 508)\n\n[1] \"CSSS508\" \"STAT508\"\n\nstr_c(c(\"CSSS\",\"STAT\"), 508, sep = \" \")\n\n[1] \"CSSS 508\" \"STAT 508\"\n\nstr_c(c(\"CSSS\",\"STAT\"), 508, sep = \" \", collapse = \", \")\n\n[1] \"CSSS 508, STAT 508\""
  },
  {
    "objectID": "Lectures/Lecture8/CSSS508_Lecture7.html#changing-cases",
    "href": "Lectures/Lecture8/CSSS508_Lecture7.html#changing-cases",
    "title": "",
    "section": "Changing Cases",
    "text": "Changing Cases\nstr_to_upper(), str_to_lower(), str_to_title() convert cases, which is often a good idea to do before searching for values:\n\nunique_cities &lt;- unique(restaurants$City)\nunique_cities %&gt;% \n  head()\n\n[1] \"SEATTLE\" \"REDMOND\" \"KENT\"    \"KENMORE\" \"Seattle\" \"RENTON\" \n\nstr_to_upper(unique_cities) %&gt;% \n  head()\n\n[1] \"SEATTLE\" \"REDMOND\" \"KENT\"    \"KENMORE\" \"SEATTLE\" \"RENTON\" \n\nstr_to_lower(unique_cities) %&gt;% \n  head()\n\n[1] \"seattle\" \"redmond\" \"kent\"    \"kenmore\" \"seattle\" \"renton\" \n\nstr_to_title(unique_cities) %&gt;% \n  head()\n\n[1] \"Seattle\" \"Redmond\" \"Kent\"    \"Kenmore\" \"Seattle\" \"Renton\""
  },
  {
    "objectID": "Lectures/Lecture8/CSSS508_Lecture7.html#whitespace-str_trim",
    "href": "Lectures/Lecture8/CSSS508_Lecture7.html#whitespace-str_trim",
    "title": "",
    "section": "Whitespace: str_trim()\n",
    "text": "Whitespace: str_trim()\n\nExtra leading or trailing whitespace is common in text data:\n\nunique_names &lt;- unique(restaurants$Name)\nunique_names %&gt;% \n  head(3)\n\n[1] \"#807 TUTTA BELLA\" \"+MAS CAFE\"        \"?al?al Cafe\"     \n\n\nWe can remove the whitespace using str_trim():\n\nstr_trim(unique_names) %&gt;% \n  head(3)\n\n[1] \"#807 TUTTA BELLA\" \"+MAS CAFE\"        \"?al?al Cafe\""
  },
  {
    "objectID": "Lectures/Lecture8/CSSS508_Lecture7.html#patterns",
    "href": "Lectures/Lecture8/CSSS508_Lecture7.html#patterns",
    "title": "",
    "section": "Patterns!",
    "text": "Patterns!\nIt’s common to want to see if a string satisfies a certain pattern.\n\nWe did this with numeric values earlier in this course!\n\ncars %&gt;% \n  filter(speed &lt; 5 | speed &gt; 24)\n\n  speed dist\n1     4    2\n2     4   10\n3    25   85\n\ncars %&gt;% \n  filter(dist &gt; 2 & dist &lt;= 10)\n\n  speed dist\n1     4   10\n2     7    4\n3     9   10"
  },
  {
    "objectID": "Lectures/Lecture8/CSSS508_Lecture7.html#patterns-str_detect",
    "href": "Lectures/Lecture8/CSSS508_Lecture7.html#patterns-str_detect",
    "title": "",
    "section": "Patterns: str_detect()\n",
    "text": "Patterns: str_detect()\n\nWe can do similar pattern-checking using str_detect():\n\nstr_detect(string, pattern)\n\n\n\nstring is the character string (or vector of strings) we want to examine\n\npattern is the pattern that we’re checking for inside string\n\nOutput: TRUE/FALSE vector indicating if pattern was found\n\n\n\nstr_detect(string = c(\"Hello\", \"my middle name\", \"is Anne\"),\n           pattern = \"a\")\n\n[1] FALSE  TRUE FALSE\n\nstr_detect(string = c(\"Hello\", \"my middle name\", \"is Anne\"),\n           pattern = \"A\")\n\n[1] FALSE FALSE  TRUE\n\n\nResults are case-sensitive!!"
  },
  {
    "objectID": "Lectures/Lecture8/CSSS508_Lecture7.html#patterns-str_detect-1",
    "href": "Lectures/Lecture8/CSSS508_Lecture7.html#patterns-str_detect-1",
    "title": "",
    "section": "Patterns: str_detect()\n",
    "text": "Patterns: str_detect()\n\nLet’s see which phone numbers are in the 206 area code:\n\nunique_phones &lt;- unique(restaurants$Phone)\nunique_phones %&gt;% tail(4)\n\n[1] \"(206) 257-0857\" \"(206) 390-9205\" \"(415) 385-1379\" \"(206) 779-0528\"\n\nstr_detect(unique_phones, \"206\") %&gt;% tail(4)\n\n[1]  TRUE  TRUE FALSE  TRUE"
  },
  {
    "objectID": "Lectures/Lecture8/CSSS508_Lecture7.html#replacement-str_replace",
    "href": "Lectures/Lecture8/CSSS508_Lecture7.html#replacement-str_replace",
    "title": "",
    "section": "Replacement: str_replace()\n",
    "text": "Replacement: str_replace()\n\nWhat about if you want to replace a string with something else? Use str_replace()!\n\nThis function works very similarly to str_detect(), but with one extra argument:\n\nstr_replace(string, pattern, replacement)\n\n\n\nreplacement is what pattern is substituted for.\n\n\n\n\nstr_replace(string = \"Hi, I'm Vic\",\n            pattern = \"Hi\", replacement = \"Hello\")\n\n[1] \"Hello, I'm Vic\""
  },
  {
    "objectID": "Lectures/Lecture8/CSSS508_Lecture7.html#replacement-str_replace-1",
    "href": "Lectures/Lecture8/CSSS508_Lecture7.html#replacement-str_replace-1",
    "title": "",
    "section": "Replacement: str_replace()\n",
    "text": "Replacement: str_replace()\n\nIn the Date variable, let’s replace each dash (“-”) with an underscore (“_“)\n\ndates &lt;- restaurants$`Inspection Date`\ndates %&gt;% \n  tail(3)\n\n[1] \"01/23/2023\" \"01/23/2023\" \"07/28/2022\"\n\nstr_replace(dates, \"/\", \"_\") %&gt;% \n  tail(3)\n\n[1] \"01_23/2023\" \"01_23/2023\" \"07_28/2022\"\n\n\nWait, what?"
  },
  {
    "objectID": "Lectures/Lecture8/CSSS508_Lecture7.html#replacement-str_replace_all",
    "href": "Lectures/Lecture8/CSSS508_Lecture7.html#replacement-str_replace_all",
    "title": "",
    "section": "Replacement: str_replace_all()\n",
    "text": "Replacement: str_replace_all()\n\nstr_replace() only changes the first instance of a pattern in each string!\n\nIf we want to replace all patterns, use str_replace_all()\n\ndates &lt;- restaurants$`Inspection Date`\ndates %&gt;% tail(3)\n\n[1] \"01/23/2023\" \"01/23/2023\" \"07/28/2022\"\n\nstr_replace_all(dates, \"/\", \"_\") %&gt;% \n  tail(3)\n\n[1] \"01_23_2023\" \"01_23_2023\" \"07_28_2022\""
  },
  {
    "objectID": "Lectures/Lecture8/CSSS508_Lecture7.html#quick-summary",
    "href": "Lectures/Lecture8/CSSS508_Lecture7.html#quick-summary",
    "title": "",
    "section": "Quick Summary",
    "text": "Quick Summary\nWe’ve seen lots of functions today!\nDon’t try to memorize them! Instead, use this page as a reference.\n\nCharacter Length: nchar and str_length\n\nSubsetting: substr and str_sub\n\nCombining: paste and str_c\n\nCase Changes: str_to_upper(), str_to_lower(), and str_to_title()\n\nRemoving Whitespace: str_trim\n\nPattern Detection/Replacement: str_detect() and str_replace()"
  },
  {
    "objectID": "Lectures/Lecture8/CSSS508_Lecture7.html#activity-1-base-r-functions",
    "href": "Lectures/Lecture8/CSSS508_Lecture7.html#activity-1-base-r-functions",
    "title": "",
    "section": "Activity 1: Base R Functions",
    "text": "Activity 1: Base R Functions\nThe variable Inspection Date is in the format “MM/DD/YYYY”. In this question, we’ll change the format using functions for strings.\n\nHow long is each character string in this variable?\nUse substr() to extract the month of each entry and save it to an object called “months”\nUse substr() to extract the year of each entry and save it to an object called “years”\nUse paste() to combine each month and year, separated by an underscore (_). Save this as a new variable in the data called “Inspection_Date_Formatted”"
  },
  {
    "objectID": "Lectures/Lecture8/CSSS508_Lecture7.html#activity-answers",
    "href": "Lectures/Lecture8/CSSS508_Lecture7.html#activity-answers",
    "title": "",
    "section": "Activity: Answers",
    "text": "Activity: Answers\nThe variable Inspection_Date is in the format “MM/DD/YYYY”. In this question, we’ll change the format using functions for strings.\n\nHow long is each character string in this variable?\n\n\ntable(nchar(restaurants$`Inspection Date`))\n\n\n    10 \n254624 \n\n\n\n\nUse substr() to extract the month of each entry and save it to an object called “months”\n\n\nmonths &lt;- substr(restaurants$`Inspection Date`, 1, 2)\nmonths |&gt; \n  head(5)\n\n[1] \"03\" \"03\" \"08\" \"08\" \"01\""
  },
  {
    "objectID": "Lectures/Lecture8/CSSS508_Lecture7.html#activity-answers-1",
    "href": "Lectures/Lecture8/CSSS508_Lecture7.html#activity-answers-1",
    "title": "",
    "section": "Activity: Answers",
    "text": "Activity: Answers\n\nUse substr() to extract the year of each entry and save it to an object called “years”\n\n\nyears &lt;- substr(restaurants$`Inspection Date`, 7, 10)\nyears |&gt; \n  head(5)\n\n[1] \"2023\" \"2023\" \"2022\" \"2022\" \"2022\"\n\n\n\n\nUse paste() to combine each month and year, separated by an underscore (_). Save this as a new variable in the data called “Inspection_Date_Formatted”\n\n\nrestaurants$Inspection_Date_Formatted &lt;- paste(months, years, sep = \"_\")\n\nrestaurants %&gt;% \n  select(Name, `Inspection Date`, Inspection_Date_Formatted) %&gt;%\n  head(5)\n\n# A tibble: 5 × 3\n  Name             `Inspection Date` Inspection_Date_Formatted\n  &lt;chr&gt;            &lt;chr&gt;             &lt;chr&gt;                    \n1 #807 TUTTA BELLA 03/02/2023        03_2023                  \n2 #807 TUTTA BELLA 03/02/2023        03_2023                  \n3 #807 TUTTA BELLA 08/31/2022        08_2022                  \n4 #807 TUTTA BELLA 08/31/2022        08_2022                  \n5 #807 TUTTA BELLA 01/13/2022        01_2022"
  },
  {
    "objectID": "Lectures/Lecture8/CSSS508_Lecture7.html#activity-2-hw-8",
    "href": "Lectures/Lecture8/CSSS508_Lecture7.html#activity-2-hw-8",
    "title": "",
    "section": "Activity 2: HW 8",
    "text": "Activity 2: HW 8\nLet’s examine the coffee shops of King County!\n\nFilter your data to only include rows in which the Name includes the word “coffee” (in any case!)\n\n2.. Create a new variable in your data which includes the length of the business name, after removing beginning/trailing whitespace.\n\nCreate a new variable in your data for the inspection year, using a stringr function!\nCreate side-by-side boxplots for the length of business name vs. year.\nCalculate the maximum Inspection Score by business and year.\nCreate a line plot of maximum score (“MaxScore”) over time (“Year”), by business (“Name”). That is, you should have a single line for each business. (Don’t try to label them, as there are far too many!)"
  },
  {
    "objectID": "Lectures/Lecture8/CSSS508_Lecture7.html#activity-solutions",
    "href": "Lectures/Lecture8/CSSS508_Lecture7.html#activity-solutions",
    "title": "",
    "section": "Activity: Solutions",
    "text": "Activity: Solutions\n1. Filter your data to only include rows in which the Name includes the word “coffee” (in any case!)\n\ncoffee &lt;- restaurants\ncoffee$Name &lt;- str_to_lower(coffee$Name)\ncoffee &lt;- coffee %&gt;% \n  filter(str_detect(Name, \"coffee\"))\ncoffee |&gt; \n  head(5)\n\n# A tibble: 5 × 25\n  Name          `Program Identifier` `Inspection Date` Description Address City \n  &lt;chr&gt;         &lt;chr&gt;                &lt;chr&gt;             &lt;chr&gt;       &lt;chr&gt;   &lt;chr&gt;\n1 203 degrees … 203 DEGREES FAHRENH… 06/08/2023        Seating 13… 11901 … KIRK…\n2 203 degrees … 203 DEGREES FAHRENH… 06/08/2023        Seating 13… 11901 … KIRK…\n3 203 degrees … 203 DEGREES FAHRENH… 01/26/2022        Seating 13… 11901 … KIRK…\n4 203 degrees … 203 DEGREES FAHRENH… 08/11/2021        Seating 13… 11901 … KIRK…\n5 203 degrees … 203 DEGREES FAHRENH… 01/23/2020        Seating 13… 11901 … KIRK…\n# ℹ 19 more variables: `Zip Code` &lt;dbl&gt;, Phone &lt;chr&gt;, Longitude &lt;dbl&gt;,\n#   Latitude &lt;dbl&gt;, `Inspection Business Name` &lt;chr&gt;, `Inspection Type` &lt;chr&gt;,\n#   `Inspection Score` &lt;dbl&gt;, `Inspection Result` &lt;chr&gt;,\n#   `Inspection Closed Business` &lt;lgl&gt;, `Violation Type` &lt;chr&gt;,\n#   `Violation Description` &lt;chr&gt;, `Violation Points` &lt;dbl&gt;, Business_ID &lt;chr&gt;,\n#   Inspection_Serial_Num &lt;chr&gt;, Violation_Record_ID &lt;chr&gt;, Grade &lt;dbl&gt;,\n#   ZIP_5 &lt;chr&gt;, mailing_address &lt;chr&gt;, Inspection_Date_Formatted &lt;chr&gt;"
  },
  {
    "objectID": "Lectures/Lecture8/CSSS508_Lecture7.html#activity-solutions-1",
    "href": "Lectures/Lecture8/CSSS508_Lecture7.html#activity-solutions-1",
    "title": "",
    "section": "Activity: Solutions",
    "text": "Activity: Solutions\n2.Create a new variable in your data which includes the length of the business name, after removing beginning/trailing whitespace.\n\ncoffee$NameLength &lt;- str_length(str_trim(coffee$Name))\ncoffee |&gt; \n  select(Name, NameLength) |&gt; \n  slice(1:10)\n\n# A tibble: 10 × 2\n   Name                          NameLength\n   &lt;chr&gt;                              &lt;int&gt;\n 1 203 degrees fahrenheit coffee         29\n 2 203 degrees fahrenheit coffee         29\n 3 203 degrees fahrenheit coffee         29\n 4 203 degrees fahrenheit coffee         29\n 5 203 degrees fahrenheit coffee         29\n 6 203 degrees fahrenheit coffee         29\n 7 909 coffee and wine                   19\n 8 909 coffee and wine                   19\n 9 909 coffee and wine                   19\n10 909 coffee and wine                   19"
  },
  {
    "objectID": "Lectures/Lecture8/CSSS508_Lecture7.html#activity-solutions-2",
    "href": "Lectures/Lecture8/CSSS508_Lecture7.html#activity-solutions-2",
    "title": "",
    "section": "Activity: Solutions",
    "text": "Activity: Solutions\n3. Create a new variable in your data for the inspection year.\n\ncoffee$Year &lt;- str_sub(coffee$`Inspection Date`,-4,-1)\ncoffee$Year |&gt; \n  head(5)\n\n[1] \"2023\" \"2023\" \"2022\" \"2021\" \"2020\""
  },
  {
    "objectID": "Lectures/Lecture8/CSSS508_Lecture7.html#activity-solutions-3",
    "href": "Lectures/Lecture8/CSSS508_Lecture7.html#activity-solutions-3",
    "title": "",
    "section": "Activity: Solutions",
    "text": "Activity: Solutions\n4. Create side-by-side boxplots for the length of business name vs. year.\n\nlibrary(ggplot2)\nggplot(coffee, aes(Year, NameLength)) + \n  geom_boxplot()"
  },
  {
    "objectID": "Lectures/Lecture8/CSSS508_Lecture7.html#activity-solutions-4",
    "href": "Lectures/Lecture8/CSSS508_Lecture7.html#activity-solutions-4",
    "title": "",
    "section": "Activity: Solutions",
    "text": "Activity: Solutions\n5. Calculate the maximum Inspection Score by business and year.\n\ncoffee_summary &lt;- coffee %&gt;% \n  group_by(Name, Year) %&gt;% \n  summarize(MaxScore = max(`Inspection Score`))\ncoffee_summary |&gt; \n  head(5)\n\n# A tibble: 5 × 3\n# Groups:   Name [1]\n  Name                          Year  MaxScore\n  &lt;chr&gt;                         &lt;chr&gt;    &lt;dbl&gt;\n1 203 degrees fahrenheit coffee 2019         0\n2 203 degrees fahrenheit coffee 2020        10\n3 203 degrees fahrenheit coffee 2021         0\n4 203 degrees fahrenheit coffee 2022         0\n5 203 degrees fahrenheit coffee 2023        15"
  },
  {
    "objectID": "Lectures/Lecture8/CSSS508_Lecture7.html#activity-solutions-5",
    "href": "Lectures/Lecture8/CSSS508_Lecture7.html#activity-solutions-5",
    "title": "",
    "section": "Activity: Solutions",
    "text": "Activity: Solutions\n6. Create a line plot of maximum score (“MaxScore”) over time (“Year”), by business (“Name”). That is, you should have a single line for each business. (Don’t try to label them, as there are far too many!)\n\nggplot(coffee_summary, aes(Year, MaxScore, group = Name)) +\n  geom_line(alpha = .2)"
  },
  {
    "objectID": "Lectures/Lecture8/CSSS508_Lecture7.html#homework-8",
    "href": "Lectures/Lecture8/CSSS508_Lecture7.html#homework-8",
    "title": "",
    "section": "Homework 8",
    "text": "Homework 8"
  },
  {
    "objectID": "Lectures/Lecture8/CSSS508_Lecture7.html#due-dates",
    "href": "Lectures/Lecture8/CSSS508_Lecture7.html#due-dates",
    "title": "",
    "section": "Due Dates",
    "text": "Due Dates\n\n\nSection AA:\n\nHomework #4 due Tuesday, November 28st (before lecture)\nPeer grading due Sunday, December 3rd (by 4:30pm)\n\n\n\n\n\n\nSection AB:\n\nHomework #4 due Thursday, November 30th (before lab)\nPeer grading due Tuesday, December 5th (before lecture)"
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture6.html#title-slide",
    "href": "Lectures/Lecture4/CSSS508_Lecture6.html#title-slide",
    "title": "",
    "section": "",
    "text": "Data Structures & Types\nCS&SS 508 • Lecture 6\n7 November 2023\nVictoria Sass"
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture6.html#how-is-my-data-stored",
    "href": "Lectures/Lecture4/CSSS508_Lecture6.html#how-is-my-data-stored",
    "title": "",
    "section": "How is my data stored?",
    "text": "How is my data stored?\nUnder the hood, R stores different types of data in different ways.\n\n\ne.g., R knows that 4.0 is a number, and that \"Vic\" is not a number.\n\n\n\nSo what exactly are the common data types, and how do we know what R is doing?"
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture6.html#data-types",
    "href": "Lectures/Lecture4/CSSS508_Lecture6.html#data-types",
    "title": "",
    "section": "Data Types",
    "text": "Data Types\n\n\nnumeric: c(1, 10*3, 4, -3.14)\n\n\n\n\n\ncharacter: c(\"red\", \"blue\", \"blue\")\n\n\n\n\n\n\nfactor: factor(c(\"red\", \"blue\", \"blue\"))\n\n\n\n\n\n\nlogical: c(FALSE, TRUE, TRUE)"
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture6.html#note-on-factor-vectors",
    "href": "Lectures/Lecture4/CSSS508_Lecture6.html#note-on-factor-vectors",
    "title": "",
    "section": "Note on Factor Vectors",
    "text": "Note on Factor Vectors\nFactors are categorical data that encode a (modest) number of levels, like for experimental group or geographic region:\n\ntest_group &lt;- factor(c(\"Treatment\", \"Placebo\", \"Placebo\", \"Treatment\"))\ntest_group\n\n[1] Treatment Placebo   Placebo   Treatment\nLevels: Placebo Treatment\n\n\n\nWhy use factor instead of character? Because factor data can go into a statistical model1.\n\nMost R models will automatically convert character data to factors. The default reference is chosen alphabetically."
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture6.html#note-on-logical-vectors",
    "href": "Lectures/Lecture4/CSSS508_Lecture6.html#note-on-logical-vectors",
    "title": "",
    "section": "Note on Logical Vectors",
    "text": "Note on Logical Vectors\nRemember that logical data in R takes on boolean TRUE or FALSE values.\n\nYou can do math with logical values, because R makes TRUE = 1 and FALSE = 0:\n\nmy_booleans &lt;- c(TRUE, TRUE, FALSE, FALSE, FALSE)\nsum(my_booleans)\n\n[1] 2\n\nmean(my_booleans)\n\n[1] 0.4"
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture6.html#missing-or-infinite-data-types",
    "href": "Lectures/Lecture4/CSSS508_Lecture6.html#missing-or-infinite-data-types",
    "title": "",
    "section": "Missing or Infinite Data Types",
    "text": "Missing or Infinite Data Types\nYour data may otherwise be missing or infinite:\n\n\nNot Applicable NA\n\nUsed when data simply is missing or “not available”\n\n\n\n\n\n\nNot a Number NaN\n\nUsed when you try to perform a bad math operation, e.g., 0 / 0\n\n\n\n\n\n\n\n\nInfinite Inf, -Inf\n\nUsed when you divide by 0, e.g., -5/0 or 5/0"
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture6.html#checking-data-types",
    "href": "Lectures/Lecture4/CSSS508_Lecture6.html#checking-data-types",
    "title": "",
    "section": "Checking Data Types",
    "text": "Checking Data Types\nclass() tells us what type of data we have:\n\nclass4     &lt;- class(4)\nclassAB    &lt;- class(c(\"A\", \"B\"))\nclassABFac &lt;- class(factor(\"A\", \"B\"))\nclassTRUE  &lt;- class(TRUE)\n\nc(class4, classAB, classABFac, classTRUE)\n\n[1] \"numeric\"   \"character\" \"factor\"    \"logical\""
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture6.html#testing-data-types",
    "href": "Lectures/Lecture4/CSSS508_Lecture6.html#testing-data-types",
    "title": "",
    "section": "Testing Data Types",
    "text": "Testing Data Types\nThere are also functions to test for certain data types:\n\nc(is.numeric(5),  is.character(\"A\"))\n\n[1] TRUE TRUE\n\nis.logical(TRUE)\n\n[1] TRUE\n\nc(is.infinite(-Inf),  is.na(NA),  is.nan(NaN))\n\n[1] TRUE TRUE TRUE\n\n\nWarning: NA is not NaN!!!"
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture6.html#making-vectors",
    "href": "Lectures/Lecture4/CSSS508_Lecture6.html#making-vectors",
    "title": "",
    "section": "Making Vectors",
    "text": "Making Vectors\nIn R, we call a set of values of the same type a vector. We can create vectors using the c() function (“c” for combine or concatenate).\n\nc(1, 3, 7, -0.5)\n\n[1]  1.0  3.0  7.0 -0.5\n\n\n\nVectors have one dimension: length\n\nlength(c(1, 3, 7, -0.5))\n\n[1] 4\n\n\n\n\nAll elements of a vector are the same type (e.g. numeric or character)!\nIf you mix character and numeric data, it will convert everything to characters!"
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture6.html#generating-numeric-vectors",
    "href": "Lectures/Lecture4/CSSS508_Lecture6.html#generating-numeric-vectors",
    "title": "",
    "section": "Generating Numeric Vectors",
    "text": "Generating Numeric Vectors\nThere are shortcuts for generating numeric vectors:\n\n1:10\n\n [1]  1  2  3  4  5  6  7  8  9 10\n\n\n\n\nseq(-3, 6, by = 1.75) # Sequence from -3 to 6, increments of 1.75\n\n[1] -3.00 -1.25  0.50  2.25  4.00  5.75\n\n\n\n\n\nrep(c(0, 1), times = 3) # Repeat c(0,1) 3 times\n\n[1] 0 1 0 1 0 1\n\nrep(c(0, 1), each = 3) # Repeat each element 3 times\n\n[1] 0 0 0 1 1 1"
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture6.html#element-wise-vector-math",
    "href": "Lectures/Lecture4/CSSS508_Lecture6.html#element-wise-vector-math",
    "title": "",
    "section": "Element-wise Vector Math",
    "text": "Element-wise Vector Math\nWhen doing arithmetic operations on vectors, R handles these element-wise:\n\nc(1, 2, 3) + c(4, 5, 6)\n\n[1] 5 7 9\n\nc(1, 2, 3, 4)^3 # exponentiation with ^\n\n[1]  1  8 27 64\n\n\nCommon operations: *, /, exp() = \\(e^x\\), log() = \\(\\log_e(x)\\)"
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture6.html#vector-recycling",
    "href": "Lectures/Lecture4/CSSS508_Lecture6.html#vector-recycling",
    "title": "",
    "section": "Vector Recycling",
    "text": "Vector Recycling\nIf we work with vectors of different lengths, R will recycle the shorter one by repeating it to make it match up with the longer one:\n\nc(0.5, 3) * c(1, 2, 3, 4)\n\n[1]  0.5  6.0  1.5 12.0\n\nc(0.5, 3, 0.5, 3) * c(1, 2, 3, 4) # same thing\n\n[1]  0.5  6.0  1.5 12.0"
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture6.html#scalars-as-recycling",
    "href": "Lectures/Lecture4/CSSS508_Lecture6.html#scalars-as-recycling",
    "title": "",
    "section": "Scalars as Recycling",
    "text": "Scalars as Recycling\nA special case of recycling involves arithmetic with scalars (a single number). These are vectors of length 1 that are recycled to make a longer vector:\n\n3 * c(-1, 0, 1, 2) + 1\n\n[1] -2  1  4  7"
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture6.html#warning-on-recycling",
    "href": "Lectures/Lecture4/CSSS508_Lecture6.html#warning-on-recycling",
    "title": "",
    "section": "Warning on Recycling",
    "text": "Warning on Recycling\nRecycling doesn’t work so well with vectors of incommensurate lengths:\n\nc(1,2) + c(100,200,300)\n\nWarning in c(1, 2) + c(100, 200, 300): longer object length is not a\nmultiple of shorter object length\n\n\n[1] 101 202 301\n\n\nBe careful!!"
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture6.html#example-standardizing-data",
    "href": "Lectures/Lecture4/CSSS508_Lecture6.html#example-standardizing-data",
    "title": "",
    "section": "Example: Standardizing Data",
    "text": "Example: Standardizing Data\nLet’s say we had some test scores and we wanted to put these on a standardized scale:\n\\[z_i = \\frac{x_i - \\text{mean}(x)}{\\text{SD}(x)}\\]\n\n\nx &lt;- c(97, 68, 75, 77, 69, 81)\nz &lt;- (x - mean(x)) / sd(x)\nround(z, 2)\n\n[1]  1.81 -0.93 -0.27 -0.08 -0.83  0.30"
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture6.html#math-with-missing-values",
    "href": "Lectures/Lecture4/CSSS508_Lecture6.html#math-with-missing-values",
    "title": "",
    "section": "Math with Missing Values",
    "text": "Math with Missing Values\nEven one NA “poisons the well”: You’ll get NA out of your calculations unless you add the extra argument na.rm = TRUE (availabe in some functions):\n\n\nvector_w_missing &lt;- c(1, 2, NA, 4, 5, 6, NA)\nmean(vector_w_missing)\n\n[1] NA\n\nmean(vector_w_missing, na.rm = TRUE)\n\n[1] 3.6"
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture6.html#subsetting-vectors",
    "href": "Lectures/Lecture4/CSSS508_Lecture6.html#subsetting-vectors",
    "title": "",
    "section": "Subsetting Vectors",
    "text": "Subsetting Vectors\nWe can subset a vector in a number of ways:\n\nPassing a single index or vector of entries to keep:\n\n\nfirst_names &lt;- c(\"Andre\", \"Brady\", \"Cecilia\", \"Danni\", \"Edgar\", \"Francie\")\nfirst_names[1]\n\n[1] \"Andre\"\n\nfirst_names[c(1, 2)]\n\n[1] \"Andre\" \"Brady\"\n\n\n\n\nPassing a single index or vector of entries to drop:\n\n\nfirst_names[-3]\n\n[1] \"Andre\"   \"Brady\"   \"Danni\"   \"Edgar\"   \"Francie\""
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture6.html#matrices-two-dimensions",
    "href": "Lectures/Lecture4/CSSS508_Lecture6.html#matrices-two-dimensions",
    "title": "",
    "section": "Matrices: Two Dimensions",
    "text": "Matrices: Two Dimensions\nMatrices extend vectors to two dimensions: rows and columns. We can construct them directly using matrix.\nR fills in a matrix column-by-column (not row-by-row!)\n\na_matrix &lt;- matrix(first_names, nrow = 2, ncol = 3)\na_matrix\n\n     [,1]    [,2]      [,3]     \n[1,] \"Andre\" \"Cecilia\" \"Edgar\"  \n[2,] \"Brady\" \"Danni\"   \"Francie\""
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture6.html#binding-vectors",
    "href": "Lectures/Lecture4/CSSS508_Lecture6.html#binding-vectors",
    "title": "",
    "section": "Binding Vectors",
    "text": "Binding Vectors\nWe can also make matrices by binding vectors together with rbind() (row bind) and cbind() (column bind).\n\nb_matrix &lt;- cbind(c(1, 2), c(3, 4), c(5, 6))\nb_matrix\n\n     [,1] [,2] [,3]\n[1,]    1    3    5\n[2,]    2    4    6\n\nc_matrix &lt;- rbind(c(1, 2, 3), c(4, 5, 6))\nc_matrix\n\n     [,1] [,2] [,3]\n[1,]    1    2    3\n[2,]    4    5    6"
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture6.html#subsetting-matrices",
    "href": "Lectures/Lecture4/CSSS508_Lecture6.html#subsetting-matrices",
    "title": "",
    "section": "Subsetting Matrices",
    "text": "Subsetting Matrices\nWe subset matrices using the same methods as with vectors, except we index them with [rows, columns]:\n\na_matrix[1, 2] # row 1, column 2\n\n[1] \"Cecilia\"\n\na_matrix[1, c(2,3)] # row 1, columns 2 and 3\n\n[1] \"Cecilia\" \"Edgar\"  \n\n\n\nWe can obtain the dimensions of a matrix using dim().\n\ndim(a_matrix)\n\n[1] 2 3"
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture6.html#matrices-becoming-vectors",
    "href": "Lectures/Lecture4/CSSS508_Lecture6.html#matrices-becoming-vectors",
    "title": "",
    "section": "Matrices Becoming Vectors",
    "text": "Matrices Becoming Vectors\nIf a matrix ends up having just one row or column after subsetting, by default R will make it into a vector.\n\na_matrix[, 1] \n\n[1] \"Andre\" \"Brady\"\n\n\n\nYou can prevent this behavior using drop = FALSE.\n\na_matrix[, 1, drop = FALSE] \n\n     [,1]   \n[1,] \"Andre\"\n[2,] \"Brady\""
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture6.html#matrix-data-type-warning",
    "href": "Lectures/Lecture4/CSSS508_Lecture6.html#matrix-data-type-warning",
    "title": "",
    "section": "Matrix Data Type Warning",
    "text": "Matrix Data Type Warning\nMatrices can contain numeric, integer, factor, character, or logical. But just like vectors, all elements must be the same data type.\n\nbad_matrix &lt;- cbind(1:2, c(\"Victoria\", \"Sass\"))\nbad_matrix\n\n     [,1] [,2]      \n[1,] \"1\"  \"Victoria\"\n[2,] \"2\"  \"Sass\"    \n\n\nIn this case, everything was converted to characters!"
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture6.html#matrix-dimension-names",
    "href": "Lectures/Lecture4/CSSS508_Lecture6.html#matrix-dimension-names",
    "title": "",
    "section": "Matrix Dimension Names",
    "text": "Matrix Dimension Names\nWe can access dimension names or name them ourselves:\n\nrownames(bad_matrix) &lt;- c(\"First\", \"Last\")\ncolnames(bad_matrix) &lt;- c(\"Number\", \"Name\")\nbad_matrix\n\n      Number Name      \nFirst \"1\"    \"Victoria\"\nLast  \"2\"    \"Sass\"    \n\nbad_matrix[ ,\"Name\", drop = FALSE]\n\n      Name      \nFirst \"Victoria\"\nLast  \"Sass\""
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture6.html#matrix-arithmetic",
    "href": "Lectures/Lecture4/CSSS508_Lecture6.html#matrix-arithmetic",
    "title": "",
    "section": "Matrix Arithmetic",
    "text": "Matrix Arithmetic\nMatrices of the same dimensions can have math performed entry-wise with the usual arithmetic operators:\n\nmatrix(c(2, 4, 6, 8),nrow = 2, ncol = 2) / matrix(c(2, 1, 3, 1),nrow = 2, ncol = 2)\n\n     [,1] [,2]\n[1,]    1    2\n[2,]    4    8"
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture6.html#proper-matrix-math",
    "href": "Lectures/Lecture4/CSSS508_Lecture6.html#proper-matrix-math",
    "title": "",
    "section": "“Proper” Matrix Math",
    "text": "“Proper” Matrix Math\nTo do matrix transpositions, use t().\n\ne_matrix &lt;- t(c_matrix)\ne_matrix\n\n     [,1] [,2]\n[1,]    1    4\n[2,]    2    5\n[3,]    3    6\n\n\n\nTo do actual matrix multiplication (not entry-wise), use %*%.\n\nf_matrix &lt;- c_matrix %*% e_matrix\nf_matrix\n\n     [,1] [,2]\n[1,]   14   32\n[2,]   32   77"
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture6.html#proper-matrix-math-cont.",
    "href": "Lectures/Lecture4/CSSS508_Lecture6.html#proper-matrix-math-cont.",
    "title": "",
    "section": "“Proper” Matrix Math (cont.)",
    "text": "“Proper” Matrix Math (cont.)\nTo invert an invertible square matrix, use solve().\n\ng_matrix &lt;- solve(f_matrix)\ng_matrix\n\n           [,1]       [,2]\n[1,]  1.4259259 -0.5925926\n[2,] -0.5925926  0.2592593"
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture6.html#matrices-vs.-data.frames-and-tibbles",
    "href": "Lectures/Lecture4/CSSS508_Lecture6.html#matrices-vs.-data.frames-and-tibbles",
    "title": "",
    "section": "Matrices vs. data.frames and tibbles",
    "text": "Matrices vs. data.frames and tibbles\nAll of these structures display data in two dimensions\n\n\nmatrix\n\nBase R\nSingle data type allowed\n\n\n\n\n\n\ndata.frame\n\nBase R (default for data storage)\nStores multiple data types\n\n\n\n\n\n\n\ntibbles\n\ntidyverse\nStores multiple data types\nDisplays nicely\n\n\n\n\n\nIn practice, data.frames and tibbles are very similar!"
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture6.html#creating-data.frames",
    "href": "Lectures/Lecture4/CSSS508_Lecture6.html#creating-data.frames",
    "title": "",
    "section": "Creating data.frames",
    "text": "Creating data.frames\nWe create a data.frame by specifying the columns separately:\n\ndata.frame(Column1Name = c(1,2,3),\n           Column2Name = c(\"A\",\"B\",\"C\"))\n\n  Column1Name Column2Name\n1           1           A\n2           2           B\n3           3           C\n\n\nNote: data.frames allow for mixed data types!"
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture6.html#what-are-lists",
    "href": "Lectures/Lecture4/CSSS508_Lecture6.html#what-are-lists",
    "title": "",
    "section": "What are Lists?",
    "text": "What are Lists?\nLists are objects that can store multiple types of data.\n\nmy_list &lt;- list(\"first_thing\"  = 1:5,\n                 \"second_thing\" = matrix(8:11, nrow = 2))\nmy_list\n\n$first_thing\n[1] 1 2 3 4 5\n\n$second_thing\n     [,1] [,2]\n[1,]    8   10\n[2,]    9   11"
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture6.html#accessing-list-elements",
    "href": "Lectures/Lecture4/CSSS508_Lecture6.html#accessing-list-elements",
    "title": "",
    "section": "Accessing List Elements",
    "text": "Accessing List Elements\nYou can access a list element by its name or number in [[ ]], or a $ followed by its name:\n\nmy_list[[\"first_thing\"]]\n\n[1] 1 2 3 4 5\n\nmy_list[[1]]\n\n[1] 1 2 3 4 5\n\nmy_list$first_thing\n\n[1] 1 2 3 4 5"
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture6.html#why-two-brackets",
    "href": "Lectures/Lecture4/CSSS508_Lecture6.html#why-two-brackets",
    "title": "",
    "section": "Why Two Brackets [[ ]]?",
    "text": "Why Two Brackets [[ ]]?\nDouble brackets get the actual element — as whatever data type it is stored as, in that location in the list.\n\nstr(my_list[[1]])\n\n int [1:5] 1 2 3 4 5\n\n\n\nIf you use single brackets to access list elements, you get a list back.\n\nstr(my_list[1])\n\nList of 1\n $ first_thing: int [1:5] 1 2 3 4 5"
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture6.html#names-and-list-elements",
    "href": "Lectures/Lecture4/CSSS508_Lecture6.html#names-and-list-elements",
    "title": "",
    "section": "\nnames() and List Elements",
    "text": "names() and List Elements\nYou can use names() to get a vector of list element names:\n\nnames(my_list)\n\n[1] \"first_thing\"  \"second_thing\""
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture6.html#example-regression-output",
    "href": "Lectures/Lecture4/CSSS508_Lecture6.html#example-regression-output",
    "title": "",
    "section": "Example: Regression Output",
    "text": "Example: Regression Output\nWhen you perform linear regression in R, the output is a list!\n\nlm_output &lt;- lm(speed ~ dist, data = cars)\nis.list(lm_output)\n\n[1] TRUE\n\nnames(lm_output)\n\n [1] \"coefficients\"  \"residuals\"     \"effects\"       \"rank\"         \n [5] \"fitted.values\" \"assign\"        \"qr\"            \"df.residual\"  \n [9] \"xlevels\"       \"call\"          \"terms\"         \"model\"        \n\nlm_output$coefficients\n\n(Intercept)        dist \n  8.2839056   0.1655676"
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture6.html#mini-check-1-types-of-data",
    "href": "Lectures/Lecture4/CSSS508_Lecture6.html#mini-check-1-types-of-data",
    "title": "",
    "section": "Mini-Check 1: Types of Data",
    "text": "Mini-Check 1: Types of Data\nIn each case, what will R return?\n\n\n\nis.numeric(3.14)\n\nTRUE\n\n\n\nis.numeric(pi)\n\nTRUE\n\n\n\nis.logical(FALSE)\n\nTRUE\n\n\n\nis.nan(NA)\n\nFALSE"
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture6.html#mini-check-2-vectors",
    "href": "Lectures/Lecture4/CSSS508_Lecture6.html#mini-check-2-vectors",
    "title": "",
    "section": "Mini-Check 2: Vectors",
    "text": "Mini-Check 2: Vectors\n\n\nWhat does sum(c(1, 2, NA)) output?\n\n\nNA. The code sum(c(1, 2, NA), na.rm = TRUE) would output 3.\n\n\n\n\n\n\n\nWhat does rep(c(0, 1), times = 2) output?\n\nc(0, 1, 0, 1)\n\n\n\n\n\n\n\nI want to get the first and second elements of my vector, a_vector. What’s wrong with the code a_vector[1, 2] ?\n\na_vector[c(1, 2)]"
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture6.html#activity-matrices-and-lists",
    "href": "Lectures/Lecture4/CSSS508_Lecture6.html#activity-matrices-and-lists",
    "title": "",
    "section": "Activity: Matrices and Lists",
    "text": "Activity: Matrices and Lists\n\nWrite code to create the following matrix:\n\n\n\n     [,1] [,2] [,3]\n[1,] \"A\"  \"B\"  \"C\" \n[2,] \"D\"  \"E\"  \"F\" \n\n\n\nWrite a line of code to extract the second column. Ensure the output is still a matrix.\n\n\n\n     [,1]\n[1,] \"B\" \n[2,] \"E\" \n\n\n\nComplete the following sentence: “Lists are to vectors, what data frames are to…”\n\nCreate a list that contains 3 elements:\n\n“ten_numbers” (integers between 1 and 10)\n“my_name” (your name as a character)\n“booleans” (vector of TRUE and FALSE alternating three times)"
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture6.html#answers",
    "href": "Lectures/Lecture4/CSSS508_Lecture6.html#answers",
    "title": "",
    "section": "Answers",
    "text": "Answers\n1. Write code to create the following matrix:\n\nmat_test &lt;- matrix(c(\"A\", \"B\", \"C\", \"D\", \"E\", \"F\"), nrow = 2, byrow = TRUE)\nmat_test\n\n     [,1] [,2] [,3]\n[1,] \"A\"  \"B\"  \"C\" \n[2,] \"D\"  \"E\"  \"F\" \n\n\n\n2. Write a line of code to extract the second column. Ensure the output is still a matrix.\n\nmat_test[ ,2, drop = FALSE]\n\n     [,1]\n[1,] \"B\" \n[2,] \"E\""
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture6.html#answers-1",
    "href": "Lectures/Lecture4/CSSS508_Lecture6.html#answers-1",
    "title": "",
    "section": "Answers",
    "text": "Answers\n3. Complete the following sentence: “Lists are to vectors, what data frames are to…Matrices!1”\n\n4. Create a list that contains 3 elements:\n\nmy_new_list &lt;- list(\"ten_numbers\" = 1:10,\n                    \"my_name\" = \"Victoria Sass\",\n                    \"booleans\" = rep(c(TRUE, FALSE), times = 3))\nmy_new_list\n\n$ten_numbers\n [1]  1  2  3  4  5  6  7  8  9 10\n\n$my_name\n[1] \"Victoria Sass\"\n\n$booleans\n[1]  TRUE FALSE  TRUE FALSE  TRUE FALSE\n\n\n\nLists and data frames can contain mixed data types, while vectors and matrices can only contain one data type."
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture6.html#homework-4",
    "href": "Lectures/Lecture4/CSSS508_Lecture6.html#homework-4",
    "title": "",
    "section": "Homework 4",
    "text": "Homework 4\nFor Homework 4, you will fill in an Quarto template on our course website that walks you through the process of creating, accessing, and manipulating R data structures. Enter values in the qmd document and Render it to check your answers!\n\nRender after entering each answer!! If you get an error, check to see if undoing your last edit solves the problem. Coding an assignment to handle all possible mistakes is really hard!\nThis assignment is long, so start early.\n\nOn the due date, I will provide a key for the written answers. You will grade those answers as part of your peer review. In addition, you’ll be asked to comment on the style of your peer’s code and what you yourself did similarly/different. Please remember to provide a numerical grade (0-3), as always."
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture6.html#due-dates",
    "href": "Lectures/Lecture4/CSSS508_Lecture6.html#due-dates",
    "title": "",
    "section": "Due Dates",
    "text": "Due Dates\n\n\nSection AA:\n\nHomework #4 due Tuesday, October 31st (before lecture)\nPeer grading due Sunday, November 5th (by 4:30pm)\n\n\n\n\n\n\nSection AB:\n\nHomework #4 due Thursday, November 2nd (before lab)\nPeer grading due Tuesday, November 7th (before lecture)"
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture5.html#title-slide",
    "href": "Lectures/Lecture3/CSSS508_Lecture5.html#title-slide",
    "title": "",
    "section": "",
    "text": "Manipulating and Summarizing Data\nCS&SS 508 • Lecture 5\n31 October 2023\nVictoria Sass"
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture5.html#death-to-spreadsheets",
    "href": "Lectures/Lecture3/CSSS508_Lecture5.html#death-to-spreadsheets",
    "title": "",
    "section": "Death to Spreadsheets",
    "text": "Death to Spreadsheets\nTools like Excel or Google Sheets lets you manipulate spreadsheets using functions.\n\nSpreadsheets are not reproducible: It’s hard to know how someone changed the raw data!\nIt’s hard to catch mistakes when you use spreadsheets. Don’t be the next sad Research Assistant who makes headlines with an Excel error! (Reinhart & Rogoff, 2010)\n\nToday, we’ll use R to manipulate data more transparently and reproducibly."
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture5.html#logical-operators",
    "href": "Lectures/Lecture3/CSSS508_Lecture5.html#logical-operators",
    "title": "",
    "section": "Logical Operators",
    "text": "Logical Operators\nLogical operators refer to base functions which allow us to test a connection between two objects.\n\nFor example, we may test\n\nIs A equal to B?\nIs A greater than B?\nIs A within B?\n\nand many others!"
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture5.html#logical-operators-in-code",
    "href": "Lectures/Lecture3/CSSS508_Lecture5.html#logical-operators-in-code",
    "title": "",
    "section": "Logical Operators in Code",
    "text": "Logical Operators in Code\n\n\n==: is equal to (note: there are TWO equal signs here!)\n\n\n\n\n!=: not equal to\n\n\n\n\n\n&gt;, &gt;=, &lt;, &lt;=: less than, less than or equal to, etc.\n\n\n\n\n\n%in%: used with checking equal to one of several values"
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture5.html#examples-of-logical-operators",
    "href": "Lectures/Lecture3/CSSS508_Lecture5.html#examples-of-logical-operators",
    "title": "",
    "section": "Examples of Logical Operators",
    "text": "Examples of Logical Operators\nLet’s create two objects, A and B\n\nA &lt;- c(5,10,15)\nB &lt;- c(5,15,25)\n\n\n\nA == B\n\n[1]  TRUE FALSE FALSE\n\nA &gt;  B\n\n[1] FALSE FALSE FALSE\n\nA %in% B\n\n[1]  TRUE FALSE  TRUE"
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture5.html#combining-logical-operators",
    "href": "Lectures/Lecture3/CSSS508_Lecture5.html#combining-logical-operators",
    "title": "",
    "section": "Combining Logical Operators",
    "text": "Combining Logical Operators\nWe have three main ways to combine logical operators:\n\n\n&: both conditions need to hold (AND)\n\n\n\n\n|: at least one condition needs to hold (OR)\n\n\n\n\n\n!: inverts a logical condition (TRUE becomes FALSE, FALSE becomes TRUE)"
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture5.html#examples",
    "href": "Lectures/Lecture3/CSSS508_Lecture5.html#examples",
    "title": "",
    "section": "Examples",
    "text": "Examples\n\nA &lt;- c(5,10,15)\nB &lt;- c(5,15,25)\n\n\n\nA &gt; 5 & A &lt;= B\n\n[1] FALSE  TRUE  TRUE\n\nB &lt; 10 | B &gt; 20\n\n[1]  TRUE FALSE  TRUE\n\n!(A == 10)\n\n[1]  TRUE FALSE  TRUE"
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture5.html#building-block-of-dplyr-pipes",
    "href": "Lectures/Lecture3/CSSS508_Lecture5.html#building-block-of-dplyr-pipes",
    "title": "",
    "section": "Building Block of dplyr: Pipes",
    "text": "Building Block of dplyr: Pipes\ndplyr allows us to “pipe” data between functions using the (%&gt;%) operator. So instead of nesting functions like this:\n\nlog(mean(gapminder$pop))\n\n[1] 17.20333\n\n\n\nWe can pipe them like this:\n\ngapminder$pop %&gt;% mean() %&gt;% log()\n\n[1] 17.20333\n\n\n\n\n\nPipes read “left to right.” (intuitive)\nNested functions read “inside to out.” (kinda weird; gets unwieldy the more nested your code becomes)"
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture5.html#subset-rows-filter",
    "href": "Lectures/Lecture3/CSSS508_Lecture5.html#subset-rows-filter",
    "title": "",
    "section": "Subset Rows: filter\n",
    "text": "Subset Rows: filter\n\nWe often get big datasets, and we only want some of the entries. We can subset rows using filter.\n\n\ngapminder |&gt; \n  filter(country == \"China\") |&gt;\n  head(4) # display first four rows\n\n# A tibble: 4 × 6\n  country continent  year lifeExp       pop gdpPercap\n  &lt;fct&gt;   &lt;fct&gt;     &lt;int&gt;   &lt;dbl&gt;     &lt;int&gt;     &lt;dbl&gt;\n1 China   Asia       1952    44   556263527      400.\n2 China   Asia       1957    50.5 637408000      576.\n3 China   Asia       1962    44.5 665770000      488.\n4 China   Asia       1967    58.4 754550000      613.\n\nChina &lt;- gapminder |&gt; \n  filter(country == \"China\")\n\n(Now, China is an object in our environment which contains rows corresponding to China.)"
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture5.html#subset-columns-select",
    "href": "Lectures/Lecture3/CSSS508_Lecture5.html#subset-columns-select",
    "title": "",
    "section": "Subset Columns: select\n",
    "text": "Subset Columns: select\n\nWhat if we want to keep each entry, but only use certain variables? Use select!\n\n\ngapminder |&gt; \n  select(country,continent,year,lifeExp) |&gt; \n  head(4)\n\n# A tibble: 4 × 4\n  country     continent  year lifeExp\n  &lt;fct&gt;       &lt;fct&gt;     &lt;int&gt;   &lt;dbl&gt;\n1 Afghanistan Asia       1952    28.8\n2 Afghanistan Asia       1957    30.3\n3 Afghanistan Asia       1962    32.0\n4 Afghanistan Asia       1967    34.0"
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture5.html#dropping-columns-with-select",
    "href": "Lectures/Lecture3/CSSS508_Lecture5.html#dropping-columns-with-select",
    "title": "",
    "section": "Dropping columns with select\n",
    "text": "Dropping columns with select\n\nAlternatively, we can use select() to drop variables using a - sign:\n\ngapminder |&gt; \n  select(-continent, -pop, -lifeExp) |&gt; \n  head(4)\n\n# A tibble: 4 × 3\n  country      year gdpPercap\n  &lt;fct&gt;       &lt;int&gt;     &lt;dbl&gt;\n1 Afghanistan  1952      779.\n2 Afghanistan  1957      821.\n3 Afghanistan  1962      853.\n4 Afghanistan  1967      836."
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture5.html#finding-unique-rows-distinct",
    "href": "Lectures/Lecture3/CSSS508_Lecture5.html#finding-unique-rows-distinct",
    "title": "",
    "section": "Finding Unique Rows: distinct\n",
    "text": "Finding Unique Rows: distinct\n\nYou may want to find the unique combinations of variables in a dataset. Use distinct\n\n\ngapminder |&gt; \n  distinct(continent, year) |&gt; \n  head(6)\n\n# A tibble: 6 × 2\n  continent  year\n  &lt;fct&gt;     &lt;int&gt;\n1 Asia       1952\n2 Asia       1957\n3 Asia       1962\n4 Asia       1967\n5 Asia       1972\n6 Asia       1977"
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture5.html#distinct-drops-variables",
    "href": "Lectures/Lecture3/CSSS508_Lecture5.html#distinct-drops-variables",
    "title": "",
    "section": "\ndistinct drops variables!",
    "text": "distinct drops variables!\nBy default, distinct() drops unused variables. If you don’t want to drop them, add the argument .keep_all = TRUE:\n\ngapminder |&gt; \n  distinct(continent, year, .keep_all=TRUE) |&gt; \n  head(6)\n\n# A tibble: 6 × 6\n  country     continent  year lifeExp      pop gdpPercap\n  &lt;fct&gt;       &lt;fct&gt;     &lt;int&gt;   &lt;dbl&gt;    &lt;int&gt;     &lt;dbl&gt;\n1 Afghanistan Asia       1952    28.8  8425333      779.\n2 Afghanistan Asia       1957    30.3  9240934      821.\n3 Afghanistan Asia       1962    32.0 10267083      853.\n4 Afghanistan Asia       1967    34.0 11537966      836.\n5 Afghanistan Asia       1972    36.1 13079460      740.\n6 Afghanistan Asia       1977    38.4 14880372      786."
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture5.html#sorting-data-by-rows-arrange",
    "href": "Lectures/Lecture3/CSSS508_Lecture5.html#sorting-data-by-rows-arrange",
    "title": "",
    "section": "Sorting data by rows: arrange\n",
    "text": "Sorting data by rows: arrange\n\nSometimes it’s useful to sort rows in your data, in ascending (low to high) or descending (high to low) order. We do that with arrange.\n\n\nUS_and_Canada &lt;- gapminder |&gt; \n  filter(country %in% c(\"United States\",\"Canada\"))\nUS_and_Canada |&gt; \n  arrange(year,lifeExp) |&gt; \n  head(4)\n\n# A tibble: 4 × 6\n  country       continent  year lifeExp       pop gdpPercap\n  &lt;fct&gt;         &lt;fct&gt;     &lt;int&gt;   &lt;dbl&gt;     &lt;int&gt;     &lt;dbl&gt;\n1 United States Americas   1952    68.4 157553000    13990.\n2 Canada        Americas   1952    68.8  14785584    11367.\n3 United States Americas   1957    69.5 171984000    14847.\n4 Canada        Americas   1957    70.0  17010154    12490."
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture5.html#sorting-data-by-rows-arrange-1",
    "href": "Lectures/Lecture3/CSSS508_Lecture5.html#sorting-data-by-rows-arrange-1",
    "title": "",
    "section": "Sorting data by rows: arrange\n",
    "text": "Sorting data by rows: arrange\n\nTo sort in descending order, using desc() within arrange\n\nUS_and_Canada |&gt; \n  arrange(desc(pop)) |&gt; \n  head(4)\n\n# A tibble: 4 × 6\n  country       continent  year lifeExp       pop gdpPercap\n  &lt;fct&gt;         &lt;fct&gt;     &lt;int&gt;   &lt;dbl&gt;     &lt;int&gt;     &lt;dbl&gt;\n1 United States Americas   2007    78.2 301139947    42952.\n2 United States Americas   2002    77.3 287675526    39097.\n3 United States Americas   1997    76.8 272911760    35767.\n4 United States Americas   1992    76.1 256894189    32004."
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture5.html#rename-variables-rename",
    "href": "Lectures/Lecture3/CSSS508_Lecture5.html#rename-variables-rename",
    "title": "",
    "section": "Rename variables: rename\n",
    "text": "Rename variables: rename\n\nYou may receive data with unintuitive variable names. You can change them using rename().\n\n\nUS_and_Canada |&gt; \n  rename(life_expectancy = lifeExp) |&gt;\n  head(4)\n\n# A tibble: 4 × 6\n  country continent  year life_expectancy      pop gdpPercap\n  &lt;fct&gt;   &lt;fct&gt;     &lt;int&gt;           &lt;dbl&gt;    &lt;int&gt;     &lt;dbl&gt;\n1 Canada  Americas   1952            68.8 14785584    11367.\n2 Canada  Americas   1957            70.0 17010154    12490.\n3 Canada  Americas   1962            71.3 18985849    13462.\n4 Canada  Americas   1967            72.1 20819767    16077.\n\n\n\n\n\n* NOTE 1: I did not re-save the object US_and_Canada, so the name change is not permanent!\n* NOTE 2: I recommend against using spaces in a name! It makes things really hard sometimes!!"
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture5.html#create-new-columns-mutate",
    "href": "Lectures/Lecture3/CSSS508_Lecture5.html#create-new-columns-mutate",
    "title": "",
    "section": "Create new columns: mutate\n",
    "text": "Create new columns: mutate\n\nYou can add new columns to a data frame using mutate().\n\nFor example, perhaps we wish to state the population in millions:\n\nUS_and_Canada |&gt; \n  select(country, year, pop) |&gt;\n  mutate(pop_millions = pop / 1000000) |&gt; \n  head(5)\n\n# A tibble: 5 × 4\n  country  year      pop pop_millions\n  &lt;fct&gt;   &lt;int&gt;    &lt;int&gt;        &lt;dbl&gt;\n1 Canada   1952 14785584         14.8\n2 Canada   1957 17010154         17.0\n3 Canada   1962 18985849         19.0\n4 Canada   1967 20819767         20.8\n5 Canada   1972 22284500         22.3"
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture5.html#summarizing-data-summarize",
    "href": "Lectures/Lecture3/CSSS508_Lecture5.html#summarizing-data-summarize",
    "title": "",
    "section": "Summarizing data: summarize\n",
    "text": "Summarizing data: summarize\n\nsummarize() calculates summaries of variables in your data:\n\nCount the number of rows\nCalculate the mean\nCalculate the sum\nFind the minimum or maximum value\n\nYou can use any function inside summarize() that aggregates multiple values into a single value (like sd(), mean(), or max())."
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture5.html#summarize-example",
    "href": "Lectures/Lecture3/CSSS508_Lecture5.html#summarize-example",
    "title": "",
    "section": "\nsummarize() Example",
    "text": "summarize() Example\nFor the year 1982, let’s summarize some values in gapminder\n\ngapminder |&gt; \n  filter(year == 1982) |&gt;\n  summarize(number_observations = n(),\n            max_lifeexp = max(lifeExp),\n            mean_pop = mean(pop),\n            sd_pop = sd(pop))\n\n# A tibble: 1 × 4\n  number_observations max_lifeexp  mean_pop     sd_pop\n                &lt;int&gt;       &lt;dbl&gt;     &lt;dbl&gt;      &lt;dbl&gt;\n1                 142        77.1 30207302. 105098650."
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture5.html#summarizing-data-by-groups-group_by",
    "href": "Lectures/Lecture3/CSSS508_Lecture5.html#summarizing-data-by-groups-group_by",
    "title": "",
    "section": "Summarizing data by groups: group_by\n",
    "text": "Summarizing data by groups: group_by\n\nWhat if we want to summarize data by category? Use group_by and summarize\n\nFunctions after group_by() are computed within each group as defined by variables given, rather than over all rows at once."
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture5.html#group_by-example",
    "href": "Lectures/Lecture3/CSSS508_Lecture5.html#group_by-example",
    "title": "",
    "section": "\ngroup_by() Example",
    "text": "group_by() Example\n\nUS_and_Canada |&gt; group_by(year) |&gt;  \n  summarize(total_pop = sum(pop)) |&gt; \n  head(4)\n\n# A tibble: 4 × 2\n   year total_pop\n  &lt;int&gt;     &lt;int&gt;\n1  1952 172338584\n2  1957 188994154\n3  1962 205523849\n4  1967 219531767\n\n\nBecause we did group_by() with year then used summarize(), we get one row per value of year!"
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture5.html#why-merge",
    "href": "Lectures/Lecture3/CSSS508_Lecture5.html#why-merge",
    "title": "",
    "section": "Why merge?!",
    "text": "Why merge?!\nIn practice, we often collect data from different sources. To analyze the data, we usually must first combine (merge) them.\n\nFor example, imagine you would like to study county-level patterns with respect to age and grocery spending. However, you can only find,\n\nCounty level age data from the US Census, and\nCounty level grocery spending data from the US Department of Agriculture\n\n\n\nMerge the data!!"
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture5.html#merging-in-concept",
    "href": "Lectures/Lecture3/CSSS508_Lecture5.html#merging-in-concept",
    "title": "",
    "section": "Merging in Concept",
    "text": "Merging in Concept\nWhen merging datasets A and B, ask yourself the following two questions:\n\n\n\nWhich rows do I want to keep?\n\nAll rows in A?\nAll rows in both A and B?\n\n\n\n\n\n\n\nHow do my datasets connect?\n\nIs there a specific variable they have in common?\nMultiple variables they have in common?"
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture5.html#which-rows-to-keep",
    "href": "Lectures/Lecture3/CSSS508_Lecture5.html#which-rows-to-keep",
    "title": "",
    "section": "Which Rows to Keep:",
    "text": "Which Rows to Keep:\nWe’ll focus on two types of joins1:\n\nA |&gt; left_join(B): keeps A and adds variables from B after matching.\nA |&gt; full_join(B): keeps all of A and B, but combines rows when possible.\nOther types include right_join, inner_join, semi_join, and anti_join, but we won’t study those here."
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture5.html#matching-criteria",
    "href": "Lectures/Lecture3/CSSS508_Lecture5.html#matching-criteria",
    "title": "",
    "section": "Matching Criteria",
    "text": "Matching Criteria\nWe have to tell R which variables to use when merging datasets! Rows are matched when the values in matching variables are equivalent.\n\n\n\nby = c(\"County\"): Both datasets have a County variable, match on this!\n\n\n\n\n\nby = c(\"CountyName\" = \"County_Name\"): Match CountyName in A with County_Name in B"
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture5.html#example-nycflights13-data",
    "href": "Lectures/Lecture3/CSSS508_Lecture5.html#example-nycflights13-data",
    "title": "",
    "section": "Example: nycflights13 Data",
    "text": "Example: nycflights13 Data\nThe nycflights13 package includes five data frames, some of which contain missing data (NA):\n\n\nflights: flights leaving JFK, LGA, or EWR in 2013\n\nairlines: airline abbreviations\n\nairports: airport metadata\n\nplanes: airplane metadata\n\nweather: hourly weather data for JFK, LGA, and EWR\n\n\n# install.packages(\"nycflights13\") # remember to do this in the console, not in your .R or .qmd document\nlibrary(nycflights13)"
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture5.html#join-example-1",
    "href": "Lectures/Lecture3/CSSS508_Lecture5.html#join-example-1",
    "title": "",
    "section": "Join Example 1",
    "text": "Join Example 1\nflights has one row per flight, with abbreviated airline names.\n\nflights |&gt; \n  select(flight,origin,dest,carrier) |&gt; \n  head(2)\n\n# A tibble: 2 × 4\n  flight origin dest  carrier\n   &lt;int&gt; &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt;  \n1   1545 EWR    IAH   UA     \n2   1714 LGA    IAH   UA     \n\n\n\nairlines has one row per airline, with airline abbreviations and full names\n\nairlines |&gt; \n  head(2)\n\n# A tibble: 2 × 2\n  carrier name                  \n  &lt;chr&gt;   &lt;chr&gt;                 \n1 9E      Endeavor Air Inc.     \n2 AA      American Airlines Inc."
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture5.html#join-example-1-continued",
    "href": "Lectures/Lecture3/CSSS508_Lecture5.html#join-example-1-continued",
    "title": "",
    "section": "Join Example 1 (continued)",
    "text": "Join Example 1 (continued)\nLet’s left join flights with airlines to add full airline name to each flight record!\n\nflights |&gt; \n  select(flight,origin,dest,carrier) |&gt;\n  left_join(airlines, by = \"carrier\")  |&gt; \n  head(5)\n\n# A tibble: 5 × 5\n  flight origin dest  carrier name                  \n   &lt;int&gt; &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt;   &lt;chr&gt;                 \n1   1545 EWR    IAH   UA      United Air Lines Inc. \n2   1714 LGA    IAH   UA      United Air Lines Inc. \n3   1141 JFK    MIA   AA      American Airlines Inc.\n4    725 JFK    BQN   B6      JetBlue Airways       \n5    461 LGA    ATL   DL      Delta Air Lines Inc.  \n\n\nWe now have one row per flight, with both carrier abbreviations and full names!"
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture5.html#join-example-2",
    "href": "Lectures/Lecture3/CSSS508_Lecture5.html#join-example-2",
    "title": "",
    "section": "Join Example #2",
    "text": "Join Example #2\nflights also includes a tailnum variable for each plane’s tail number.\n\nflights |&gt; \n  select(flight,origin,dest,tailnum) |&gt; \n  head(2)\n\n# A tibble: 2 × 4\n  flight origin dest  tailnum\n   &lt;int&gt; &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt;  \n1   1545 EWR    IAH   N14228 \n2   1714 LGA    IAH   N24211 \n\n\n\nplanes includes a row for each plane type, including the manufacturer.\n\nplanes |&gt; \n  select(tailnum,year,manufacturer,model) |&gt; \n  head(2)\n\n# A tibble: 2 × 4\n  tailnum  year manufacturer     model    \n  &lt;chr&gt;   &lt;int&gt; &lt;chr&gt;            &lt;chr&gt;    \n1 N10156   2004 EMBRAER          EMB-145XR\n2 N102UW   1998 AIRBUS INDUSTRIE A320-214"
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture5.html#join-example-2-continued",
    "href": "Lectures/Lecture3/CSSS508_Lecture5.html#join-example-2-continued",
    "title": "",
    "section": "Join Example 2 (continued)",
    "text": "Join Example 2 (continued)\nLet’s left join flights with planes to add manufacture to each flight record!\n\nflights |&gt; \n  select(flight,origin,dest,tailnum) |&gt;\n  left_join(planes, by = \"tailnum\")  |&gt; \n  head(5)\n\n# A tibble: 5 × 12\n  flight origin dest  tailnum  year type  manufacturer model engines seats speed\n   &lt;int&gt; &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt;   &lt;int&gt; &lt;chr&gt; &lt;chr&gt;        &lt;chr&gt;   &lt;int&gt; &lt;int&gt; &lt;int&gt;\n1   1545 EWR    IAH   N14228   1999 Fixe… BOEING       737-…       2   149    NA\n2   1714 LGA    IAH   N24211   1998 Fixe… BOEING       737-…       2   149    NA\n3   1141 JFK    MIA   N619AA   1990 Fixe… BOEING       757-…       2   178    NA\n4    725 JFK    BQN   N804JB   2012 Fixe… AIRBUS       A320…       2   200    NA\n5    461 LGA    ATL   N668DN   1991 Fixe… BOEING       757-…       2   178    NA\n# ℹ 1 more variable: engine &lt;chr&gt;\n\n\nA bunch of columns from planes are now in the dataset!"
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture5.html#join-example-2-continued-1",
    "href": "Lectures/Lecture3/CSSS508_Lecture5.html#join-example-2-continued-1",
    "title": "",
    "section": "Join Example 2 (continued)",
    "text": "Join Example 2 (continued)\nLet’s remove some of the “spare” columns\n\nflights |&gt; \n  select(flight, origin, dest, tailnum) |&gt;\n  left_join(planes, by = \"tailnum\")  |&gt; \n  select(flight, origin, dest, manufacturer, model) |&gt;\n  head(5)\n\n# A tibble: 5 × 5\n  flight origin dest  manufacturer model   \n   &lt;int&gt; &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt;        &lt;chr&gt;   \n1   1545 EWR    IAH   BOEING       737-824 \n2   1714 LGA    IAH   BOEING       737-824 \n3   1141 JFK    MIA   BOEING       757-223 \n4    725 JFK    BQN   AIRBUS       A320-232\n5    461 LGA    ATL   BOEING       757-232"
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture5.html#activity",
    "href": "Lectures/Lecture3/CSSS508_Lecture5.html#activity",
    "title": "",
    "section": "Activity",
    "text": "Activity\n\nCreate a new object that contains gapminder (1) observations from China, India, and United States after 1980, and (2) variables corresponding to country, year, population, and life expectancy.\nHow many rows and columns does the object contain?\nSave over your object after sorting the rows by year (ascending order) and population (descending order). Print the first 6 rows.\nAdd a new variable that contains population in billions.\nBy year, calculate the total population (in billions) across these three countries\nIn ggplot, create a line plot showing life expectancy over time by country. Make the plot visually appealing!"
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture5.html#answers",
    "href": "Lectures/Lecture3/CSSS508_Lecture5.html#answers",
    "title": "",
    "section": "Answers",
    "text": "Answers\nQuestion 1:\n\nsubset_gapminder &lt;- gapminder |&gt; \n  filter(country %in% c(\"China\",\"India\",\"United States\"),  year &gt; 1980 ) |&gt;\n  select(country, year, pop, lifeExp)\nsubset_gapminder |&gt; head(n = 5)\n\n# A tibble: 5 × 4\n  country  year        pop lifeExp\n  &lt;fct&gt;   &lt;int&gt;      &lt;int&gt;   &lt;dbl&gt;\n1 China    1982 1000281000    65.5\n2 China    1987 1084035000    67.3\n3 China    1992 1164970000    68.7\n4 China    1997 1230075000    70.4\n5 China    2002 1280400000    72.0"
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture5.html#answers-1",
    "href": "Lectures/Lecture3/CSSS508_Lecture5.html#answers-1",
    "title": "",
    "section": "Answers",
    "text": "Answers\nQuestion 2:\n\n# Option 1\nc(nrow(subset_gapminder), ncol(subset_gapminder))\n\n[1] 18  4\n\n# Option 2\nglimpse(subset_gapminder)\n\nRows: 18\nColumns: 4\n$ country &lt;fct&gt; \"China\", \"China\", \"China\", \"China\", \"China\", \"China\", \"India\",…\n$ year    &lt;int&gt; 1982, 1987, 1992, 1997, 2002, 2007, 1982, 1987, 1992, 1997, 20…\n$ pop     &lt;int&gt; 1000281000, 1084035000, 1164970000, 1230075000, 1280400000, 13…\n$ lifeExp &lt;dbl&gt; 65.525, 67.274, 68.690, 70.426, 72.028, 72.961, 56.596, 58.553…\n\n# Option 3\ndim(subset_gapminder)\n\n[1] 18  4"
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture5.html#answers-2",
    "href": "Lectures/Lecture3/CSSS508_Lecture5.html#answers-2",
    "title": "",
    "section": "Answers",
    "text": "Answers\nQuestion 3:\n\nsubset_gapminder &lt;- subset_gapminder |&gt; \n  arrange(year, desc(pop))\n\nsubset_gapminder |&gt; head(6)\n\n# A tibble: 6 × 4\n  country        year        pop lifeExp\n  &lt;fct&gt;         &lt;int&gt;      &lt;int&gt;   &lt;dbl&gt;\n1 China          1982 1000281000    65.5\n2 India          1982  708000000    56.6\n3 United States  1982  232187835    74.6\n4 China          1987 1084035000    67.3\n5 India          1987  788000000    58.6\n6 United States  1987  242803533    75.0"
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture5.html#answers-3",
    "href": "Lectures/Lecture3/CSSS508_Lecture5.html#answers-3",
    "title": "",
    "section": "Answers",
    "text": "Answers\nQuestion 4:\n\nsubset_gapminder &lt;- subset_gapminder |&gt; \n  mutate(pop_billions = pop/1000000000)\n\nsubset_gapminder |&gt; head(n = 5)\n\n# A tibble: 5 × 5\n  country        year        pop lifeExp pop_billions\n  &lt;fct&gt;         &lt;int&gt;      &lt;int&gt;   &lt;dbl&gt;        &lt;dbl&gt;\n1 China          1982 1000281000    65.5        1.00 \n2 India          1982  708000000    56.6        0.708\n3 United States  1982  232187835    74.6        0.232\n4 China          1987 1084035000    67.3        1.08 \n5 India          1987  788000000    58.6        0.788"
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture5.html#answers-4",
    "href": "Lectures/Lecture3/CSSS508_Lecture5.html#answers-4",
    "title": "",
    "section": "Answers",
    "text": "Answers\nQuestion 5:\n\n\nClassic syntax\nNew syntax (dplyr 1.1.0)\n\n\n\n\nsubset_gapminder |&gt; \n  group_by(year) |&gt; \n  summarize(TotalPop_Billions = sum(pop_billions))\n\n# A tibble: 6 × 2\n   year TotalPop_Billions\n  &lt;int&gt;             &lt;dbl&gt;\n1  1982              1.94\n2  1987              2.11\n3  1992              2.29\n4  1997              2.46\n5  2002              2.60\n6  2007              2.73\n\n\n\n\n\nsubset_gapminder |&gt; \n  summarize(TotalPop_Billions = sum(pop_billions), \n            .by = year)\n\n# A tibble: 6 × 2\n   year TotalPop_Billions\n  &lt;int&gt;             &lt;dbl&gt;\n1  1982              1.94\n2  1987              2.11\n3  1992              2.29\n4  1997              2.46\n5  2002              2.60\n6  2007              2.73\n\n\nThis new syntax allows for per-operation grouping which means it is only active within a single verb at a time (as opposed to being applied to the entire tibble until ungroup() is called). You can more about this new feature here)"
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture5.html#answers-5",
    "href": "Lectures/Lecture3/CSSS508_Lecture5.html#answers-5",
    "title": "",
    "section": "Answers",
    "text": "Answers\nQuestion 6:\n\n\nCode\nPlot\n\n\n\n\nlibrary(ggplot2) \n# install.packages(\"ggthemes\") # run in console\nlibrary(ggthemes)\nggplot(subset_gapminder, aes(year, lifeExp, color = country, group = country)) +\n  theme_tufte(base_size = 20) + \n  geom_point() + \n  geom_line() +\n  xlab(\"Year\") + \n  ylab(\"Life Expectancy (years)\") +\n  ggtitle(\"Life Expectancy (1982-2007)\",\"China, India, and United States\") +\n  scale_x_continuous(breaks = c(1982, 1987, 1992, 1997, 2002, 2007), minor_breaks = c()) +\n  ylim(c(50, 80)) + \n  scale_color_discrete(name = \"Country\") + \n  theme(legend.position = \"bottom\")"
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture5.html#homework-3",
    "href": "Lectures/Lecture3/CSSS508_Lecture5.html#homework-3",
    "title": "",
    "section": "Homework 3",
    "text": "Homework 3\nCreate a qmd file (from scratch this time!) in which you answer each of the following questions. Be sure to display all your code in the knitted version (use throughout echo: false).\nRemember, the package nycflights13 contains data on flights originating in NYC during the year 2013. There are three airports servicing NYC: JFK, LGA (“LaGuardia”), and EWR (“Newark”).\n\nChoose an airport outside New York, and count how many flights went to that airport from NYC in 2013. How many of those flights started at JFK, LGA, and EWR? (Hint: Use filter, group_by, and summarize)\nThe variable arr_delay contains arrival delays in minutes (negative values represent early arrivals). Make a ggplot histogram displaying arrival delays for 2013 flights from NYC to the airport you chose.\nUse left_join to add weather data at departure to the subsetted data1. Calculate the mean temperature by month at departure (temp) across all flights2.\nInvestigate if there is a relationship between departure delay (dep_delay) and wind speed (wind_speed). Is the relationship different between JFK, LGA, and EWR? I suggest answering this question by making a plot and writing down a one-sentence interpretation.\n\nAs always, submit both the .qmd and knitted .html to Canvas.\n\nHint 1: Match on origin, year, month, day, and hour!!Hint 2: Use mean(temp, na.rm=T) to have R calculate an average after ignoring missing data values"
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture5.html#due-dates",
    "href": "Lectures/Lecture3/CSSS508_Lecture5.html#due-dates",
    "title": "",
    "section": "Due dates",
    "text": "Due dates\n\n\nSection AA:\n\nHomework #3 due Tuesday, October 24th (before lecture)\nPeer grading due Sunday, October 29nd (by 4:30pm)\n\n\n\n\n\n\nSection AB:\n\nHomework #3 due Thursday, October 26th (before lab)\nPeer grading due Tuesday, October 31th (before lecture)"
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture4.html#title-slide",
    "href": "Lectures/Lecture5/CSSS508_Lecture4.html#title-slide",
    "title": "",
    "section": "",
    "text": "Importing, Exporting, and Cleaning Data\nCS&SS 508 • Lecture 4\n24 October 2023\nVictoria Sass"
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture4.html#data-packages",
    "href": "Lectures/Lecture5/CSSS508_Lecture4.html#data-packages",
    "title": "",
    "section": "Data Packages",
    "text": "Data Packages\nR has a big user base. If you are working with a popular data source, it will often have a devoted R package on CRAN or Github.\n\nExamples:\n\n\nWDI: World Development Indicators (World Bank)\n\nWHO: World Health Organization API\n\ntidycensus: Census and American Community Survey\n\nquantmod: financial data from Yahoo, FRED, Google\n\n\n\nIf you have an actual data file, you’ll have to import it yourself…"
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture4.html#delimited-text-files",
    "href": "Lectures/Lecture5/CSSS508_Lecture4.html#delimited-text-files",
    "title": "",
    "section": "Delimited Text Files",
    "text": "Delimited Text Files\nBesides a package, it’s easiest when data is stored in a text file.\n\nAn example of a comma-separated values (.csv) file is below:\n\"Subject\",\"Depression\",\"Sex\",\"Week\",\"HamD\",\"Imipramine\"\n101,\"Non-endogenous\",\"Second\",0,26,NA\n101,\"Non-endogenous\",\"Second\",1,22,NA\n101,\"Non-endogenous\",\"Second\",2,18,4.04305\n101,\"Non-endogenous\",\"Second\",3,7,3.93183\n101,\"Non-endogenous\",\"Second\",4,4,4.33073\n101,\"Non-endogenous\",\"Second\",5,3,4.36945\n103,\"Non-endogenous\",\"First\",0,33,NA\n103,\"Non-endogenous\",\"First\",1,24,NA\n103,\"Non-endogenous\",\"First\",2,15,2.77259"
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture4.html#readr",
    "href": "Lectures/Lecture5/CSSS508_Lecture4.html#readr",
    "title": "",
    "section": "readr",
    "text": "readr\nR has some built-in functions for importing data, such as read.table() and read.csv().\n\nThe readr package provides similar functions, like read_csv(), that have slightly better features:\n\nFaster!\nBetter defaults (e.g. doesn’t convert characters to factors)\nA little smarter about dates and times\nLoading bars for large files\n\n\nlibrary(readr)"
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture4.html#readr-importing-example",
    "href": "Lectures/Lecture5/CSSS508_Lecture4.html#readr-importing-example",
    "title": "",
    "section": "\nreadr Importing Example",
    "text": "readr Importing Example\nLet’s import some data about song ranks on the Billboard Hot 100 in 2000:\n\nbillboard_2000_raw &lt;- read_csv(file = \"https://raw.githubusercontent.com/vsass/CSSS508/main/Lectures/Lecture5/data/billboard.csv\")"
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture4.html#did-it-load",
    "href": "Lectures/Lecture5/CSSS508_Lecture4.html#did-it-load",
    "title": "",
    "section": "Did It Load?",
    "text": "Did It Load?\n\nlibrary(dplyr)\ndim(billboard_2000_raw)\n\n[1] 317  81\n\nnames(billboard_2000_raw) %&gt;% \n  head(20)\n\n [1] \"year\"         \"artist\"       \"track\"        \"time\"         \"date.entered\"\n [6] \"wk1\"          \"wk2\"          \"wk3\"          \"wk4\"          \"wk5\"         \n[11] \"wk6\"          \"wk7\"          \"wk8\"          \"wk9\"          \"wk10\"        \n[16] \"wk11\"         \"wk12\"         \"wk13\"         \"wk14\"         \"wk15\""
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture4.html#alternate-solution",
    "href": "Lectures/Lecture5/CSSS508_Lecture4.html#alternate-solution",
    "title": "",
    "section": "Alternate Solution",
    "text": "Alternate Solution\nImport the data manually!\nIn the upper right-hand pane of RStudio (make sure you’re in the Environment tab), select:\nImport Dataset &gt; From Text (readr)\n\nOnce you’ve imported the data, you can copy/paste the import code from the console into your file!!\nThis makes the process reproducible!"
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture4.html#importing-other-data-types",
    "href": "Lectures/Lecture5/CSSS508_Lecture4.html#importing-other-data-types",
    "title": "",
    "section": "Importing Other Data Types",
    "text": "Importing Other Data Types\n\nFor Excel files (.xls or .xlsx), use package readxl\n\nFor Google Docs Spreadsheets, use package googlesheets4\n\nFor Stata, SPSS, and SAS files, use package haven (tidyverse)\nFor Stata, SPSS, and Minitab, use package foreign\n\n\n\n\nNote: You won’t keep text formatting, color, comments, or merged cells!!"
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture4.html#writing-delimited-files",
    "href": "Lectures/Lecture5/CSSS508_Lecture4.html#writing-delimited-files",
    "title": "",
    "section": "Writing Delimited Files",
    "text": "Writing Delimited Files\nGetting data out of R into a delimited file is very similar to getting it into R:\n\nwrite_csv(billboard_2000_raw, path = \"billboard_data.csv\")\n\nThis saved the data we pulled off the web in a file called billboard_data.csv in my working directory."
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture4.html#initial-spot-checks",
    "href": "Lectures/Lecture5/CSSS508_Lecture4.html#initial-spot-checks",
    "title": "",
    "section": "Initial Spot Checks",
    "text": "Initial Spot Checks\nFirst things to check after loading new data:\n\n\nDid all the rows/columns from the original file make it in?\n\nCheck using dim() or str()\n\n\n\nAre the column names in good shape?\n\nUse names() to check; fix with rename()\n\n\n\nAre there “decorative” blank rows or columns to remove?\n\n\nfilter() or select() out those rows/columns"
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture4.html#tidy-data",
    "href": "Lectures/Lecture5/CSSS508_Lecture4.html#tidy-data",
    "title": "",
    "section": "Tidy Data",
    "text": "Tidy Data\nTidy data (aka “long data”) are such that:\n\n\nThe values for a single observation are in their own row.\nThe values for a single variable are in their own column.\nThere is only one value per cell.\n\n\n\nWhy do we want tidy data?\n\n\nEasier to understand many rows than many columns\nRequired for plotting in ggplot2\n\nRequired for many types of statistical procedures (e.g. hierarchical or mixed effects models)\nFewer issues with missing values and “imbalanced” repeated measures data"
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture4.html#slightly-messy-data",
    "href": "Lectures/Lecture5/CSSS508_Lecture4.html#slightly-messy-data",
    "title": "",
    "section": "Slightly “Messy” Data",
    "text": "Slightly “Messy” Data\n\n\n\n\nProgram\nFirst Year\nSecond Year\n\n\n\nEvans School\n10\n6\n\n\nArts & Sciences\n5\n6\n\n\nPublic Health\n2\n3\n\n\nOther\n5\n1\n\n\n\n\n\nWhat is an observation?\n\nA group of students from a program of a given year\n\n\nWhat are the variables?\n\nProgram, Year\n\n\nWhat are the values?\n\nProgram: Evans School, Arts & Sciences, Public Health, Other\nYear: First, Second – in column headings. Bad!\n\nCount: spread over two columns!"
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture4.html#tidy-version",
    "href": "Lectures/Lecture5/CSSS508_Lecture4.html#tidy-version",
    "title": "",
    "section": "Tidy Version",
    "text": "Tidy Version\n\n\n\n\nProgram\nYear\nCount\n\n\n\nEvans School\nFirst\n10\n\n\nEvans School\nSecond\n6\n\n\nArts & Sciences\nFirst\n5\n\n\nArts & Sciences\nSecond\n6\n\n\nPublic Health\nFirst\n2\n\n\nPublic Health\nSecond\n3\n\n\nOther\nFirst\n5\n\n\nOther\nSecond\n1\n\n\n\n\n\nEach variable is a column.\nEach observation is a row.\nEach cell has a single value."
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture4.html#billboard-is-just-ugly-messy",
    "href": "Lectures/Lecture5/CSSS508_Lecture4.html#billboard-is-just-ugly-messy",
    "title": "",
    "section": "Billboard is Just Ugly-Messy",
    "text": "Billboard is Just Ugly-Messy\n\n\n# A tibble: 10 × 81\n    year artist     track time  date.entered   wk1   wk2   wk3   wk4   wk5   wk6\n   &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt; &lt;tim&gt; &lt;date&gt;       &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1  2000 2 Pac      Baby… 04:22 2000-02-26      87    82    72    77    87    94\n 2  2000 2Ge+her    The … 03:15 2000-09-02      91    87    92    NA    NA    NA\n 3  2000 3 Doors D… Kryp… 03:53 2000-04-08      81    70    68    67    66    57\n 4  2000 3 Doors D… Loser 04:24 2000-10-21      76    76    72    69    67    65\n 5  2000 504 Boyz   Wobb… 03:35 2000-04-15      57    34    25    17    17    31\n 6  2000 98^0       Give… 03:24 2000-08-19      51    39    34    26    26    19\n 7  2000 A*Teens    Danc… 03:44 2000-07-08      97    97    96    95   100    NA\n 8  2000 Aaliyah    I Do… 04:15 2000-01-29      84    62    51    41    38    35\n 9  2000 Aaliyah    Try … 04:03 2000-03-18      59    53    38    28    21    18\n10  2000 Adams, Yo… Open… 05:30 2000-08-26      76    76    74    69    68    67\n# ℹ 70 more variables: wk7 &lt;dbl&gt;, wk8 &lt;dbl&gt;, wk9 &lt;dbl&gt;, wk10 &lt;dbl&gt;, wk11 &lt;dbl&gt;,\n#   wk12 &lt;dbl&gt;, wk13 &lt;dbl&gt;, wk14 &lt;dbl&gt;, wk15 &lt;dbl&gt;, wk16 &lt;dbl&gt;, wk17 &lt;dbl&gt;,\n#   wk18 &lt;dbl&gt;, wk19 &lt;dbl&gt;, wk20 &lt;dbl&gt;, wk21 &lt;dbl&gt;, wk22 &lt;dbl&gt;, wk23 &lt;dbl&gt;,\n#   wk24 &lt;dbl&gt;, wk25 &lt;dbl&gt;, wk26 &lt;dbl&gt;, wk27 &lt;dbl&gt;, wk28 &lt;dbl&gt;, wk29 &lt;dbl&gt;,\n#   wk30 &lt;dbl&gt;, wk31 &lt;dbl&gt;, wk32 &lt;dbl&gt;, wk33 &lt;dbl&gt;, wk34 &lt;dbl&gt;, wk35 &lt;dbl&gt;,\n#   wk36 &lt;dbl&gt;, wk37 &lt;dbl&gt;, wk38 &lt;dbl&gt;, wk39 &lt;dbl&gt;, wk40 &lt;dbl&gt;, wk41 &lt;dbl&gt;,\n#   wk42 &lt;dbl&gt;, wk43 &lt;dbl&gt;, wk44 &lt;dbl&gt;, wk45 &lt;dbl&gt;, wk46 &lt;dbl&gt;, wk47 &lt;dbl&gt;, …\n\n\n\n\nWeek columns continue up to wk76!"
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture4.html#billboard",
    "href": "Lectures/Lecture5/CSSS508_Lecture4.html#billboard",
    "title": "",
    "section": "Billboard",
    "text": "Billboard\n\n\nWhat are the observations in the data?\n\nSong on the Billboard chart each week\n\n\nWhat are the variables in the data?\n\nYear, artist, track, song length, date entered Hot 100, week since first entered Hot 100 (spread over many columns), rank during week (spread over many columns)\n\n\nWhat are the values in the data?\n\ne.g. 2000; 3 Doors Down; Kryptonite; 3 minutes 53 seconds; April 8, 2000; Week 3 (stuck in column headings); rank 68 (spread over many columns)"
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture4.html#tidyr",
    "href": "Lectures/Lecture5/CSSS508_Lecture4.html#tidyr",
    "title": "",
    "section": "tidyr",
    "text": "tidyr\nThe tidyr package provides functions to tidy up data.\n\nKey functions:\n\n\npivot_longer(): takes a set of columns and pivots them down (“longer”) to make two new columns (which you can name yourself):\n\nA name column that stores the original column names\nA value with the values in those original columns\n\n\n\n\n\n\n\npivot_wider(): inverts pivot_longer() by taking two columns and pivoting them up and across (“wider”) into multiple columns\n\n\n\nWe’re going to focus only on pivot_longer here, but know that it can be reversed!"
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture4.html#pivot_longer",
    "href": "Lectures/Lecture5/CSSS508_Lecture4.html#pivot_longer",
    "title": "",
    "section": "pivot_longer()",
    "text": "pivot_longer()\nThis function usually takes three arguments:\n\n\ncols: The columns we want to modify\n\nnames_to: New variable name to store original columns\n\nvalues_to: New variable name to store original values"
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture4.html#example-of-pivot_longer",
    "href": "Lectures/Lecture5/CSSS508_Lecture4.html#example-of-pivot_longer",
    "title": "",
    "section": "Example of pivot_longer()\n",
    "text": "Example of pivot_longer()\n\n\nlibrary(tidyr)\nbillboard_2000 &lt;- billboard_2000_raw %&gt;%\n  pivot_longer(cols=wk1:wk76,\n               names_to =\"week\",\n               values_to = \"rank\")\nbillboard_2000 %&gt;% \n  head(5)\n\n# A tibble: 5 × 7\n   year artist track                   time   date.entered week   rank\n  &lt;dbl&gt; &lt;chr&gt;  &lt;chr&gt;                   &lt;time&gt; &lt;date&gt;       &lt;chr&gt; &lt;dbl&gt;\n1  2000 2 Pac  Baby Don't Cry (Keep... 04:22  2000-02-26   wk1      87\n2  2000 2 Pac  Baby Don't Cry (Keep... 04:22  2000-02-26   wk2      82\n3  2000 2 Pac  Baby Don't Cry (Keep... 04:22  2000-02-26   wk3      72\n4  2000 2 Pac  Baby Don't Cry (Keep... 04:22  2000-02-26   wk4      77\n5  2000 2 Pac  Baby Don't Cry (Keep... 04:22  2000-02-26   wk5      87\n\n\nNow we have a single week column!"
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture4.html#lots-of-missing-values",
    "href": "Lectures/Lecture5/CSSS508_Lecture4.html#lots-of-missing-values",
    "title": "",
    "section": "Lots of missing values?!",
    "text": "Lots of missing values?!\n\nsummary(billboard_2000$rank)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n   1.00   26.00   51.00   51.05   76.00  100.00   18785 \n\n\nWe don’t want to keep the 18785 rows with missing ranks."
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture4.html#pivoting-better-values_drop_na",
    "href": "Lectures/Lecture5/CSSS508_Lecture4.html#pivoting-better-values_drop_na",
    "title": "",
    "section": "Pivoting Better: values_drop_na\n",
    "text": "Pivoting Better: values_drop_na\n\nAdding the argument values_drop_na = TRUE to pivot_longer() will remove rows with missing ranks.\n\nbillboard_2000 &lt;- billboard_2000_raw %&gt;%\n  pivot_longer(cols = wk1:wk76, \n               names_to = \"week\", \n               values_to = \"rank\", \n               values_drop_na = TRUE)\nsummary(billboard_2000$rank)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   1.00   26.00   51.00   51.05   76.00  100.00 \n\n\n\nNo more NA values!\n\ndim(billboard_2000)\n\n[1] 5307    7\n\n\nAnd way fewer rows!"
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture4.html#parse_number",
    "href": "Lectures/Lecture5/CSSS508_Lecture4.html#parse_number",
    "title": "",
    "section": "parse_number()",
    "text": "parse_number()\nThe week column is of they type character, but it should be numeric.\n\nhead(billboard_2000$week)\n\n[1] \"wk1\" \"wk2\" \"wk3\" \"wk4\" \"wk5\" \"wk6\"\n\n\n\nparse_number() grabs just the numeric information from a character string:\n\nbillboard_2000 &lt;- billboard_2000 %&gt;%\n    mutate(week = parse_number(week))\nsummary(billboard_2000$week)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   1.00    5.00   10.00   11.47   16.00   65.00 \n\n\nMore sophisticated tools for character strings will be covered later in this course!"
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture4.html#lubridate",
    "href": "Lectures/Lecture5/CSSS508_Lecture4.html#lubridate",
    "title": "",
    "section": "lubridate",
    "text": "lubridate\nThe package lubridate (part of the tidyverse!) has a very large number of functions you can use!\n\n\nConverting dates/times between formats (DD-MM-YY to YY-MM-DD)\nExtracting dates/times (day of week, month, leap years, etc.)\nMath with dates/times (time zone conversions, etc.)\n\n\n\nThere’s too much to cover all of it, but I’ll run through a few examples."
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture4.html#dates-in-billboard_2000",
    "href": "Lectures/Lecture5/CSSS508_Lecture4.html#dates-in-billboard_2000",
    "title": "",
    "section": "Dates in billboard_2000\n",
    "text": "Dates in billboard_2000\n\n\nbillboard_2000 %&gt;% \n  select(date.entered) %&gt;% \n  head(10)\n\n# A tibble: 10 × 1\n   date.entered\n   &lt;date&gt;      \n 1 2000-02-26  \n 2 2000-02-26  \n 3 2000-02-26  \n 4 2000-02-26  \n 5 2000-02-26  \n 6 2000-02-26  \n 7 2000-02-26  \n 8 2000-09-02  \n 9 2000-09-02  \n10 2000-09-02"
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture4.html#extracting-year-month-or-day",
    "href": "Lectures/Lecture5/CSSS508_Lecture4.html#extracting-year-month-or-day",
    "title": "",
    "section": "Extracting Year, Month, or Day",
    "text": "Extracting Year, Month, or Day\n\nlibrary(lubridate)\nhead(billboard_2000$date.entered, 5)\n\n[1] \"2000-02-26\" \"2000-02-26\" \"2000-02-26\" \"2000-02-26\" \"2000-02-26\"\n\nyear(billboard_2000$date.entered) %&gt;% \n  head(5)\n\n[1] 2000 2000 2000 2000 2000\n\nmonth(billboard_2000$date.entered) %&gt;% \n  head(5)\n\n[1] 2 2 2 2 2\n\nday(billboard_2000$date.entered) %&gt;% \n  head(5)\n\n[1] 26 26 26 26 26"
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture4.html#extracting-weekday-quarter-and-leap-year-boolean",
    "href": "Lectures/Lecture5/CSSS508_Lecture4.html#extracting-weekday-quarter-and-leap-year-boolean",
    "title": "",
    "section": "Extracting Weekday, Quarter, and Leap Year Boolean",
    "text": "Extracting Weekday, Quarter, and Leap Year Boolean\n\nwday(billboard_2000$date.entered) %&gt;% \n  head(5)\n\n[1] 7 7 7 7 7\n\nquarter(billboard_2000$date.entered) %&gt;% \n  head(5)\n\n[1] 1 1 1 1 1\n\nleap_year(billboard_2000$date.entered) %&gt;% \n   head(5)\n\n[1] TRUE TRUE TRUE TRUE TRUE"
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture4.html#summary",
    "href": "Lectures/Lecture5/CSSS508_Lecture4.html#summary",
    "title": "",
    "section": "Summary",
    "text": "Summary\n\nImporting/Exporting Data: readr\n\nReshaping data: tidyr\n\nDates and times lubridate\n\n\nLet’s take a 10 minute break, then reconvene for an activity!"
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture4.html#activity",
    "href": "Lectures/Lecture5/CSSS508_Lecture4.html#activity",
    "title": "",
    "section": "Activity!",
    "text": "Activity!\nIn groups of 2-3, you will use the Billboard data to investigate a question:\n\n\nWrite down a question of interest that could be studied with this data\n\nWhich/how many artists had #1 hits?\nHow does rank for each song change over time?\nIs there a relationship between highest rank and length of song?\n\n\nMake the Billboard data tidy, perhaps using the code from this lecture.\n\nPerform additional steps (if necessary) to help answer your question:\n\nPerhaps using filter, select, group_by, mutate, summarize, etc.\n\n\nMake a plot or table that answers your question and write down your answer in a sentence.\nSend me your question, plot/table, and written answer on Canvas"
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture4.html#example-question",
    "href": "Lectures/Lecture5/CSSS508_Lecture4.html#example-question",
    "title": "",
    "section": "Example: Question",
    "text": "Example: Question\nQuestion: Do songs that hit #1 have a different trajectory than those that don’t?\n\nbillboard_2000_question &lt;- billboard_2000 %&gt;%\n    group_by(artist, track) %&gt;%\n    mutate(`Weeks at #1` = sum(rank == 1),\n           `Peak Rank`   = ifelse(any(rank == 1),\n                                  \"Hit #1\",\n                                  \"Didn't hit #1\")) \n\n\n\nNote: any(rank==1) checks to see if any value of rank is equal to one for the given artist and track"
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture4.html#example-visualization",
    "href": "Lectures/Lecture5/CSSS508_Lecture4.html#example-visualization",
    "title": "",
    "section": "Example Visualization",
    "text": "Example Visualization\n\n\nCode\nCharts of 2000: Beauty!\n\n\n\n\nlibrary(ggplot2)\nlibrary(ggthemes)\nbillboard_trajectories &lt;- \n  ggplot(data = billboard_2000_question,\n         aes(x = week, y = rank, group = track,\n             color = `Peak Rank`)) +\n  geom_line(aes(size = `Peak Rank`), alpha = 0.4) +\n  theme_tufte() +\n  xlab(\"Week\") + ylab(\"Rank\") +\n  scale_color_manual(values = c(\"black\", \"red\")) +\n  scale_size_manual(values = c(0.25, 1)) +\n  theme(legend.position = c(0.90, 0.75),\n        legend.background = element_rect(fill = \"transparent\"))\n\n\n\n\nbillboard_trajectories\n\n\n\n\n\n\n\n\n\nSongs that reach #1 on the Billboard charts appear to last &gt;20 weeks on the charts, while other songs very rarely make it past that point."
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture4.html#homework-5",
    "href": "Lectures/Lecture5/CSSS508_Lecture4.html#homework-5",
    "title": "",
    "section": "Homework 5",
    "text": "Homework 5\n*On Course Website!*"
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture4.html#due-dates",
    "href": "Lectures/Lecture5/CSSS508_Lecture4.html#due-dates",
    "title": "",
    "section": "Due Dates",
    "text": "Due Dates\n\n\nSection AA:\n\nHomework #4 due Tuesday, November 7th (before lecture)\nPeer grading due Sunday, November 12th (by 4:30pm)\n\n\n\n\n\n\nSection AB:\n\nHomework #4 due Thursday, November 9th (before lab)\nPeer grading due Tuesday, November 14th (before lecture)"
  },
  {
    "objectID": "Lectures/Lecture10/CSSS508_Lecture3.html#title-slide",
    "href": "Lectures/Lecture10/CSSS508_Lecture3.html#title-slide",
    "title": "",
    "section": "",
    "text": "Workflow & Reproducibility\nCS&SS 508 • Lecture 3\n17 October 2023\nVictoria Sass"
  },
  {
    "objectID": "Lectures/Lecture10/CSSS508_Lecture3.html#naming-variables",
    "href": "Lectures/Lecture10/CSSS508_Lecture3.html#naming-variables",
    "title": "",
    "section": "Naming Variables",
    "text": "Naming Variables\nIt’s good practice to name variables using only lowercase letters, numbers, and _ (to separate words).\n\nRemember to give them descriptive names, even if that means they’re longer.\n\n\nIf you have many related variables, try and be consistent with your naming convention.\n\nA common prefix is preferable to a common suffix due to RStudio’s autocomplete feature.\n\n\n# Code goal: \nshort_flights &lt;- flights |&gt; \n  filter(air_time &lt; 60)\n\n# Code foul: \nSHORTFLIGHTS &lt;- flights |&gt; \n  filter(air_time &lt; 60)"
  },
  {
    "objectID": "Lectures/Lecture10/CSSS508_Lecture3.html#spacing",
    "href": "Lectures/Lecture10/CSSS508_Lecture3.html#spacing",
    "title": "",
    "section": "Spacing",
    "text": "Spacing\nFor readability you’ll want to put spaces around all mathematical operators1 (i.e. +, -, ==, &lt;, etc.) as well as the assignment operator (&lt;-).\n\n# Code goals: \nz &lt;- (a + b)^2 / d\nmean(x, na.rm = TRUE)\n\n# Code foul: \nz&lt;-( a + b ) ^ 2/d\nmean (x ,na.rm=TRUE)\n\n\nTo make code easier to skim quickly it’s alright to add extra space for better alignment.\n\nflights |&gt; \n  mutate(\n    speed      = distance / air_time,\n    dep_hour   = dep_time %/% 100,\n    dep_minute = dep_time %%  100\n  )\n\n\nexcept for ^"
  },
  {
    "objectID": "Lectures/Lecture10/CSSS508_Lecture3.html#pipes",
    "href": "Lectures/Lecture10/CSSS508_Lecture3.html#pipes",
    "title": "",
    "section": "Pipes",
    "text": "Pipes\nAs you begin to use more functions, sequentially, it can start to get unclear what’s happening when, and to what.\n\nmedian(sqrt(log(mean(gapminder$pop))))\n\n\nWith nested functions, like those above, you need to read the order of operations inside out, which is a bit awkward. It becomes even more confusing the more function calls you have, especially when they have multiple arguments each.\n\n\nEnter the pipe1: |&gt;\nPipes read “left to right” which is much more intuitive!\n\ngapminder$pop |&gt; mean() |&gt; log() |&gt; sqrt() |&gt; median()\n\n\n\nThe above code takes what’s on the left-hand side of |&gt; and gives it as the first unnamed argument to the first function (mean()).\nThe result of that function call is then “piped” to the first unnamed argument of the second function (log()).\n\n\n\nCeci n’est pas une pipe."
  },
  {
    "objectID": "Lectures/Lecture10/CSSS508_Lecture3.html#pipes-1",
    "href": "Lectures/Lecture10/CSSS508_Lecture3.html#pipes-1",
    "title": "",
    "section": "Pipes",
    "text": "Pipes\nAs you can see, pipes allow us to “chain” many function calls together easily.\n\nThe so-called “native pipe” (i.e. built into base R) is relatively new. Before this, the pipe was a function from the magrittr package that looks like this: %&gt;%.\n\n\nThis latter version continues to work and has a different functionality than the new, native pipe.\n\n\nMost importantly, while both the magrittr pipe and the native pipe take the RHS (right-hand side) and “pipe” it to the LHS (left-hand side), they operate differently when it comes to explicitly specifying which argument of the LHS to pipe the RHS into.\n\n\n\n# magrittr pipe\na %&gt;% gsub('A', '-', x = .)\n\n# native pipe\na |&gt; gsub('A','-', x = _) # _ is the placeholder for |&gt; \na |&gt; gsub(pattern = 'A', replacement = '-') # leaving the \"piped\" argument as the only unnamed argument also works \na |&gt; (\\(.) gsub('A', '-', x = .))() # using an anonymous function call allow you to be explicit while specifying your own placeholder\n\n\n\n\n\n\nYou can read more about the differences between |&gt; and %&gt;% here and anonymous functions here. Code above comes from responses to this stackoverflow post."
  },
  {
    "objectID": "Lectures/Lecture10/CSSS508_Lecture3.html#pipes-2",
    "href": "Lectures/Lecture10/CSSS508_Lecture3.html#pipes-2",
    "title": "",
    "section": "Pipes",
    "text": "Pipes\nSome good syntax practices:\n\nYou should always put a space before |&gt; and it should usually be the last thing on a line.\n\nNew functions should be on a new line, indented 2 spaces (RStudio will automatically do this for you)\nNamed arguments within a function should also get their own line\n\n\n# code goals\nflights |&gt;  \n  group_by(tailnum) |&gt; \n  summarize(\n    delay = mean(arr_delay, na.rm = TRUE),\n    n = n()\n  )\n\n# code fouls\nflights |&gt;\n  group_by(\n    tailnum\n  ) |&gt; \n  summarize(delay = mean(arr_delay, na.rm = TRUE), n = n())"
  },
  {
    "objectID": "Lectures/Lecture10/CSSS508_Lecture3.html#r-scripts",
    "href": "Lectures/Lecture10/CSSS508_Lecture3.html#r-scripts",
    "title": "",
    "section": ".R scripts",
    "text": ".R scripts\nWe’ve been working with Quarto documents but you’ll sometimes simply want to use an R script, which is basically an entire file that is just a code chunk.\n\n\nWhy would you prefer an .R file over a .qmd file?\nWhen might you use a .qmd file?\n\n\n\n\nYou just need to run code, without the need for accompanying text output and plots in the same document. Examples include:\n\nReading in and cleaning/manipulating your data before analysis\nWriting functions you’ll use throughout your project\nGetting descriptive statistics/making descriptive plots of data\nRunning models and generating tables/plots of their results\n\n\n\n\n\n\nHomework assignments (like for this class) that require you to show code, describe your process for arriving at your solution, and include any results (i.e. tables, statistics, visualizations)\nAcademic articles\nPresentations for class, conferences, talks, etc.\nTheses/dissertations\nInteractive visualizations (i.e. widgets)\nBuilding your own website"
  },
  {
    "objectID": "Lectures/Lecture10/CSSS508_Lecture3.html#file-naming",
    "href": "Lectures/Lecture10/CSSS508_Lecture3.html#file-naming",
    "title": "",
    "section": "File naming",
    "text": "File naming\nFile names should:\n\nbe machine readable: avoid spaces, symbols, and special characters. Don’t rely on case sensitivity to distinguish files.\nbe human readable: use file names to describe what’s in the file.\nplay well with default ordering: start file names with numbers so that alphabetical sorting puts them in the order they get used."
  },
  {
    "objectID": "Lectures/Lecture10/CSSS508_Lecture3.html#file-naming-1",
    "href": "Lectures/Lecture10/CSSS508_Lecture3.html#file-naming-1",
    "title": "",
    "section": "File naming",
    "text": "File naming\n\n\nGood Example directory\nBad Example directory\n\n\n\n01-load-data.R\n02-exploratory-analysis.R\n03-model-approach-1.R\n04-model-approach-2.R\nfig-01.png\nfig-02.png\nreport-2022-03-20.qmd\nreport-2022-04-02.qmd\nreport-draft-notes.txt\n\n\n\nNumbering scripts makes it clear in which order they should be run.\nConsistent naming scheme makes it easy to see what things are grouped together and what varies.\nWith many files in one directory you should go a step further and create subfolders for different types of files (i.e. scripts, figures, tables, etc.)\n\n\n\n\nalternative model.R\ncode for exploratory analysis.r\nfinalreport.qmd\nFinalReport.qmd\nfig 1.png\nFigure_02.png\nmodel_first_try.R\nrun-first.r\ntemp.txt\n\n\n\nOrdering of the files is unclear\nInconsistent naming is confusing (which final report is THE final report?)\nNon-descriptive naming means more work for you in trying to decipher its contents"
  },
  {
    "objectID": "Lectures/Lecture10/CSSS508_Lecture3.html#working-directory",
    "href": "Lectures/Lecture10/CSSS508_Lecture3.html#working-directory",
    "title": "",
    "section": "Working directory",
    "text": "Working directory\nYour working directory is where R will look for any files that you ask it to load and where it’ll put anything you ask it to save. It is literally just a folder somewhere on your computer or the remote server/cloud you’re working within.\n\nYou can ask R what your current working directory is by running getwd() (get working directory).\n\n\n\ngetwd()\n\n[1] \"/Users/victoriasass/Desktop/GitHub/CSSS508/Lectures/Lecture10\"\n\n\nYou can see above that this lecture was created in a lecture-specific folder within a lectures folder, in a directory for this class, which is in a folder called GitHub on the Desktop of my laptop.\n\n\nWhile you can technically set your working directory using setwd() and giving R a filepath, in the name of reproducible research I strongly advise an alternative: RStudio projects."
  },
  {
    "objectID": "Lectures/Lecture10/CSSS508_Lecture3.html#projects",
    "href": "Lectures/Lecture10/CSSS508_Lecture3.html#projects",
    "title": "",
    "section": "Projects",
    "text": "Projects\n\n\n\n\n\n\n\nYou can create a project by clicking\n\n\nFile &gt; New Project…\n\n\n in the upper-left corner of RStudio\nthe dropdown menu in the upper-right corner of RStudio and selecting New Project…"
  },
  {
    "objectID": "Lectures/Lecture10/CSSS508_Lecture3.html#projects-1",
    "href": "Lectures/Lecture10/CSSS508_Lecture3.html#projects-1",
    "title": "",
    "section": "Projects",
    "text": "Projects\nA “project” is RStudio’s built-in organizational support system which keeps all the files associated with a given project (i.e. data, R scripts, figures, results) together in one directory.\n\nCreating a new project quite basically creates a new folder in a place that you specify. But it also does a few of other extremely useful things:\n\n\n\n\nCreates a .Rproj file which tracks your command history and all the files in your project folder.\nContains all the files needed to reproduce your work\n\ni.e. you can send a project folder to someone and they will be able to run it on their local machine\n\n\nFacilitates version control with built-in git/GitHub connection (more on this later in the course)"
  },
  {
    "objectID": "Lectures/Lecture7/CSSS508_Lecture7.html",
    "href": "Lectures/Lecture7/CSSS508_Lecture7.html",
    "title": "Roadmap",
    "section": "",
    "text": "Working with Text Data\nCS&SS 508 • Lecture 7\n14 November 2023\nVictoria Sass"
  },
  {
    "objectID": "Lectures/Lecture7/CSSS508_Lecture7.html#basics-of-strings-1",
    "href": "Lectures/Lecture7/CSSS508_Lecture7.html#basics-of-strings-1",
    "title": "Roadmap",
    "section": "Basics of Strings",
    "text": "Basics of Strings\n\n\nA general programming term for a unit of character data is a string\n\nStrings are a sequence of characters\nIn R, “strings” and “character data” are mostly interchangeable.\nSome languages have more precise distinctions, but we won’t worry about that here!\n\n\n\n\n\nWe can create strings by surrounding text, numbers, spaces, or symbols with quotes!\n\nExamples: \"Hello! My name is Vic\" or \"%*$#01234\""
  },
  {
    "objectID": "Lectures/Lecture7/CSSS508_Lecture7.html#basics-of-strings-2",
    "href": "Lectures/Lecture7/CSSS508_Lecture7.html#basics-of-strings-2",
    "title": "Roadmap",
    "section": "Basics of Strings",
    "text": "Basics of Strings\nR can treat strings in funny ways!\n\n\"01\" == \"1\"\n\n[1] FALSE\n\n\"01\" == 1\n\n[1] FALSE\n\n\"1\" == 1\n\n[1] TRUE\n\n\n. . .\nReminder: We can check data types using the class() function!\n\nc(class(\"1\"), class(1))\n\n[1] \"character\" \"numeric\""
  },
  {
    "objectID": "Lectures/Lecture7/CSSS508_Lecture7.html#data-king-county-restaurant-inspections",
    "href": "Lectures/Lecture7/CSSS508_Lecture7.html#data-king-county-restaurant-inspections",
    "title": "Roadmap",
    "section": "Data: King County Restaurant Inspections!",
    "text": "Data: King County Restaurant Inspections!\nToday we’ll study real data on food safety inspections in King County, collected from data.kingcounty.gov.\nNote these data are fairly large. The following code can be used to download the data directly from my Github page:\n\nrestaurants &lt;- read_csv(file = \"https://raw.githubusercontent.com/vsass/CSSS508/main/Lectures/Lecture8/data/restaurants.csv\")"
  },
  {
    "objectID": "Lectures/Lecture7/CSSS508_Lecture7.html#quick-examination-of-the-data",
    "href": "Lectures/Lecture7/CSSS508_Lecture7.html#quick-examination-of-the-data",
    "title": "Roadmap",
    "section": "Quick Examination of the Data",
    "text": "Quick Examination of the Data\n\nnames(restaurants)\n\n [1] \"Name\"                       \"Program Identifier\"        \n [3] \"Inspection Date\"            \"Description\"               \n [5] \"Address\"                    \"City\"                      \n [7] \"Zip Code\"                   \"Phone\"                     \n [9] \"Longitude\"                  \"Latitude\"                  \n[11] \"Inspection Business Name\"   \"Inspection Type\"           \n[13] \"Inspection Score\"           \"Inspection Result\"         \n[15] \"Inspection Closed Business\" \"Violation Type\"            \n[17] \"Violation Description\"      \"Violation Points\"          \n[19] \"Business_ID\"                \"Inspection_Serial_Num\"     \n[21] \"Violation_Record_ID\"        \"Grade\"                     \n\ndim(restaurants)\n\n[1] 255270     22"
  },
  {
    "objectID": "Lectures/Lecture7/CSSS508_Lecture7.html#quick-examination-of-the-data-1",
    "href": "Lectures/Lecture7/CSSS508_Lecture7.html#quick-examination-of-the-data-1",
    "title": "Roadmap",
    "section": "Quick Examination of the Data",
    "text": "Quick Examination of the Data\nGood Questions to Ask:\n\nWhat does each row represent?\nIs the data in long or wide format?\nWhat are the key variables?\nHow are the data stored? (data type)"
  },
  {
    "objectID": "Lectures/Lecture7/CSSS508_Lecture7.html#nchar",
    "href": "Lectures/Lecture7/CSSS508_Lecture7.html#nchar",
    "title": "Roadmap",
    "section": "nchar()",
    "text": "nchar()\nThe nchar() function calculates the number of characters in a given string.\n\nlength() doesn’t work with strings!!\n\nWhy not?\n\n\n. . .\n\nnchar(\"Victoria Sass\")\n\n[1] 13\n\nlength(\"Victoria Sass\")\n\n[1] 1\n\n\n. . .\nIn our restaurants data, let’s see how many characters are in each zip code:\n\nlength_zip &lt;- nchar(restaurants$`Zip Code`) # notice when a variable name has spaces we need to contain it within backticks so R knows it is a singular entity\ntable(length_zip)\n\nlength_zip\n     4      5      6 \n    15 255248      1 \n\n\n. . ."
  },
  {
    "objectID": "Lectures/Lecture7/CSSS508_Lecture7.html#substr",
    "href": "Lectures/Lecture7/CSSS508_Lecture7.html#substr",
    "title": "Roadmap",
    "section": "substr()",
    "text": "substr()\nThe substr() function allows us to extract characters from a string.\n. . .\nFor example, we can extract the third through fifth elements of a string as follows:\n\nsubstr(\"98126\", 3, 5)\n\n[1] \"126\""
  },
  {
    "objectID": "Lectures/Lecture7/CSSS508_Lecture7.html#substr-1",
    "href": "Lectures/Lecture7/CSSS508_Lecture7.html#substr-1",
    "title": "Roadmap",
    "section": "substr()",
    "text": "substr()\nLet’s extract the first five characters from each zip code in the restaurants data, and add it to our dataset.\n\nlibrary(dplyr)\nrestaurants$ZIP_5 &lt;- substr(restaurants$`Zip Code`, 1, 5) \nrestaurants %&gt;% \n  distinct(ZIP_5) %&gt;% \n  head()\n\n# A tibble: 6 × 1\n  ZIP_5\n  &lt;chr&gt;\n1 98105\n2 98103\n3 98104\n4 98109\n5 98101\n6 98052"
  },
  {
    "objectID": "Lectures/Lecture7/CSSS508_Lecture7.html#paste",
    "href": "Lectures/Lecture7/CSSS508_Lecture7.html#paste",
    "title": "Roadmap",
    "section": "paste()",
    "text": "paste()\nWe combine strings together using paste(). By default, it puts a space between different strings.\n. . .\nFor example, we can combine \"Victoria\" and \"Sass\" as follows:\n\npaste(\"Victoria\", \"Sass\")\n\n[1] \"Victoria Sass\""
  },
  {
    "objectID": "Lectures/Lecture7/CSSS508_Lecture7.html#more-complex-paste-commands",
    "href": "Lectures/Lecture7/CSSS508_Lecture7.html#more-complex-paste-commands",
    "title": "Roadmap",
    "section": "More complex paste() commands",
    "text": "More complex paste() commands\nThere are two additional common arguments to use with paste():\n\nsep = controls what separates vectors, entry-wise\ncollapse = controls if/how multiple outputs are collapsed into a single string.\n\n. . .\nExamples:\n\npaste(\"CSSS\", \"508\", sep = \"_\")\n\n[1] \"CSSS_508\"\n\npaste(c(\"CSSS\", \"STAT\"), \"508\", sep = \"_\")\n\n[1] \"CSSS_508\" \"STAT_508\"\n\npaste(c(\"CSSS\", \"STAT\"), \"508\", sep = \"_\", collapse = \" , \")\n\n[1] \"CSSS_508 , STAT_508\"\n\n\nWhen do we get one string as output vs. two?"
  },
  {
    "objectID": "Lectures/Lecture7/CSSS508_Lecture7.html#paste-1",
    "href": "Lectures/Lecture7/CSSS508_Lecture7.html#paste-1",
    "title": "",
    "section": "paste()",
    "text": "paste()\nLet’s use paste() to create complete mailing addresses for each restaurant:\n\n\nrestaurants$mailing_address &lt;- paste(restaurants$Address, \", \", restaurants$City, \n                                     \", WA \", restaurants$ZIP_5, sep = \"\")\nrestaurants %&gt;% \n  distinct(mailing_address) %&gt;% \n  head()\n\n# A tibble: 6 × 1\n  mailing_address                                  \n  &lt;chr&gt;                                            \n1 2746 NE 45TH ST, SEATTLE, WA 98105               \n2 1906 N 34TH ST, SEATTLE, WA 98103                \n3 122 2ND AVE S, SEATTLE, WA 98104                 \n4 1001 FAIRVIEW AVE N Unit 1700A, SEATTLE, WA 98109\n5 1225 1ST AVE, SEATTLE, WA 98101                  \n6 15364 NE 96TH PL, REDMOND, WA 98052"
  },
  {
    "objectID": "Lectures/Lecture7/CSSS508_Lecture7.html#stringr",
    "href": "Lectures/Lecture7/CSSS508_Lecture7.html#stringr",
    "title": "Roadmap",
    "section": "stringr",
    "text": "stringr\nstringr is yet another R package from the Tidyverse (like ggplot2, dplyr, tidyr, lubridate, readr).\n. . .\nIt provides TONS of functions for working with strings:\n\nSome are equivalent/better versions of Base R functions\nSome can do fancier tricks with strings\n\n. . .\nMost stringr functions begin with “str_” to make RStudio auto-complete more useful.\n. . .\nWe’ll cover the basics today, but know there’s much more out there!\n\nlibrary(stringr)"
  },
  {
    "objectID": "Lectures/Lecture7/CSSS508_Lecture7.html#equivalencies-str_length",
    "href": "Lectures/Lecture7/CSSS508_Lecture7.html#equivalencies-str_length",
    "title": "Roadmap",
    "section": "Equivalencies: str_length()",
    "text": "Equivalencies: str_length()\nstr_length() is equivalent to nchar():\n\nnchar(\"weasels\")\n\n[1] 7\n\nstr_length(\"weasels\")\n\n[1] 7\n\n\n. . ."
  },
  {
    "objectID": "Lectures/Lecture7/CSSS508_Lecture7.html#equivalencies-str_sub",
    "href": "Lectures/Lecture7/CSSS508_Lecture7.html#equivalencies-str_sub",
    "title": "Roadmap",
    "section": "Equivalencies: str_sub()",
    "text": "Equivalencies: str_sub()\nstr_sub() is like substr():\n\nstr_sub(\"Washington\", 2, 4)\n\n[1] \"ash\"\n\n\n. . .\nstr_sub() also lets you put in negative values to count backwards from the end (-1 is the end, -3 is third from end):\n\nstr_sub(\"Washington\", 4, -3)\n\n[1] \"hingt\""
  },
  {
    "objectID": "Lectures/Lecture7/CSSS508_Lecture7.html#equivalencies-str_c",
    "href": "Lectures/Lecture7/CSSS508_Lecture7.html#equivalencies-str_c",
    "title": "Roadmap",
    "section": "Equivalencies: str_c()",
    "text": "Equivalencies: str_c()\nstr_c() (“string combine”) is just like paste() but where the default is sep = \"\" (no space!)\n\nstr_c(c(\"CSSS\",\"STAT\"), 508)\n\n[1] \"CSSS508\" \"STAT508\"\n\nstr_c(c(\"CSSS\",\"STAT\"), 508, sep = \" \")\n\n[1] \"CSSS 508\" \"STAT 508\"\n\nstr_c(c(\"CSSS\",\"STAT\"), 508, sep = \" \", collapse = \", \")\n\n[1] \"CSSS 508, STAT 508\""
  },
  {
    "objectID": "Lectures/Lecture7/CSSS508_Lecture7.html#changing-cases",
    "href": "Lectures/Lecture7/CSSS508_Lecture7.html#changing-cases",
    "title": "Roadmap",
    "section": "Changing Cases",
    "text": "Changing Cases\nstr_to_upper(), str_to_lower(), str_to_title() convert cases, which is often a good idea to do before searching for values:\n\nunique_cities &lt;- unique(restaurants$City)\nunique_cities %&gt;% \n  head()\n\n[1] \"SEATTLE\" \"REDMOND\" \"KENT\"    \"KENMORE\" \"Seattle\" \"RENTON\" \n\nstr_to_upper(unique_cities) %&gt;% \n  head()\n\n[1] \"SEATTLE\" \"REDMOND\" \"KENT\"    \"KENMORE\" \"SEATTLE\" \"RENTON\" \n\nstr_to_lower(unique_cities) %&gt;% \n  head()\n\n[1] \"seattle\" \"redmond\" \"kent\"    \"kenmore\" \"seattle\" \"renton\" \n\nstr_to_title(unique_cities) %&gt;% \n  head()\n\n[1] \"Seattle\" \"Redmond\" \"Kent\"    \"Kenmore\" \"Seattle\" \"Renton\""
  },
  {
    "objectID": "Lectures/Lecture7/CSSS508_Lecture7.html#whitespace-str_trim",
    "href": "Lectures/Lecture7/CSSS508_Lecture7.html#whitespace-str_trim",
    "title": "Roadmap",
    "section": "Whitespace: str_trim()",
    "text": "Whitespace: str_trim()\nExtra leading or trailing whitespace is common in text data:\n\nunique_names &lt;- unique(restaurants$Name)\nunique_names %&gt;% \n  head(3)\n\n[1] \"#807 TUTTA BELLA\" \"+MAS CAFE\"        \"?al?al Cafe\"     \n\n\nWe can remove the whitespace using str_trim():\n\nstr_trim(unique_names) %&gt;% \n  head(3)\n\n[1] \"#807 TUTTA BELLA\" \"+MAS CAFE\"        \"?al?al Cafe\""
  },
  {
    "objectID": "Lectures/Lecture7/CSSS508_Lecture7.html#patterns",
    "href": "Lectures/Lecture7/CSSS508_Lecture7.html#patterns",
    "title": "Roadmap",
    "section": "Patterns!",
    "text": "Patterns!\nIt’s common to want to see if a string satisfies a certain pattern.\n. . .\nWe did this with numeric values earlier in this course!\n\ncars %&gt;% \n  filter(speed &lt; 5 | speed &gt; 24)\n\n  speed dist\n1     4    2\n2     4   10\n3    25   85\n\ncars %&gt;% \n  filter(dist &gt; 2 & dist &lt;= 10)\n\n  speed dist\n1     4   10\n2     7    4\n3     9   10"
  },
  {
    "objectID": "Lectures/Lecture7/CSSS508_Lecture7.html#patterns-str_detect",
    "href": "Lectures/Lecture7/CSSS508_Lecture7.html#patterns-str_detect",
    "title": "Roadmap",
    "section": "Patterns: str_detect()",
    "text": "Patterns: str_detect()\nWe can do similar pattern-checking using str_detect():\n\nstr_detect(string, pattern)\n\n\nstring is the character string (or vector of strings) we want to examine\npattern is the pattern that we’re checking for inside string\nOutput: TRUE/FALSE vector indicating if pattern was found\n\n. . .\n\nstr_detect(string = c(\"Hello\", \"my middle name\", \"is Anne\"),\n           pattern = \"a\")\n\n[1] FALSE  TRUE FALSE\n\nstr_detect(string = c(\"Hello\", \"my middle name\", \"is Anne\"),\n           pattern = \"A\")\n\n[1] FALSE FALSE  TRUE\n\n\nResults are case-sensitive!!"
  },
  {
    "objectID": "Lectures/Lecture7/CSSS508_Lecture7.html#patterns-str_detect-1",
    "href": "Lectures/Lecture7/CSSS508_Lecture7.html#patterns-str_detect-1",
    "title": "Roadmap",
    "section": "Patterns: str_detect()",
    "text": "Patterns: str_detect()\nLet’s see which phone numbers are in the 206 area code:\n\nunique_phones &lt;- unique(restaurants$Phone)\nunique_phones %&gt;% tail(4)\n\n[1] \"(206) 257-0857\" \"(206) 390-9205\" \"(415) 385-1379\" \"(206) 779-0528\"\n\nstr_detect(unique_phones, \"206\") %&gt;% tail(4)\n\n[1]  TRUE  TRUE FALSE  TRUE"
  },
  {
    "objectID": "Lectures/Lecture7/CSSS508_Lecture7.html#replacement-str_replace",
    "href": "Lectures/Lecture7/CSSS508_Lecture7.html#replacement-str_replace",
    "title": "Roadmap",
    "section": "Replacement: str_replace()",
    "text": "Replacement: str_replace()\nWhat about if you want to replace a string with something else? Use str_replace()!\n. . .\nThis function works very similarly to str_detect(), but with one extra argument:\n\nstr_replace(string, pattern, replacement)\n\n\nreplacement is what pattern is substituted for.\n\n. . .\n\nstr_replace(string = \"Hi, I'm Vic\",\n            pattern = \"Hi\", replacement = \"Hello\")\n\n[1] \"Hello, I'm Vic\""
  },
  {
    "objectID": "Lectures/Lecture7/CSSS508_Lecture7.html#replacement-str_replace-1",
    "href": "Lectures/Lecture7/CSSS508_Lecture7.html#replacement-str_replace-1",
    "title": "Roadmap",
    "section": "Replacement: str_replace()",
    "text": "Replacement: str_replace()\nIn the Date variable, let’s replace each dash (“-”) with an underscore (“_“)\n\ndates &lt;- restaurants$`Inspection Date`\ndates %&gt;% \n  tail(3)\n\n[1] \"01/23/2023\" \"01/23/2023\" \"07/28/2022\"\n\nstr_replace(dates, \"/\", \"_\") %&gt;% \n  tail(3)\n\n[1] \"01_23/2023\" \"01_23/2023\" \"07_28/2022\"\n\n\nWait, what?"
  },
  {
    "objectID": "Lectures/Lecture7/CSSS508_Lecture7.html#replacement-str_replace_all",
    "href": "Lectures/Lecture7/CSSS508_Lecture7.html#replacement-str_replace_all",
    "title": "Roadmap",
    "section": "Replacement: str_replace_all()",
    "text": "Replacement: str_replace_all()\nstr_replace() only changes the first instance of a pattern in each string!\n. . .\nIf we want to replace all patterns, use str_replace_all()\n\ndates &lt;- restaurants$`Inspection Date`\ndates %&gt;% tail(3)\n\n[1] \"01/23/2023\" \"01/23/2023\" \"07/28/2022\"\n\nstr_replace_all(dates, \"/\", \"_\") %&gt;% \n  tail(3)\n\n[1] \"01_23_2023\" \"01_23_2023\" \"07_28_2022\""
  },
  {
    "objectID": "Lectures/Lecture7/CSSS508_Lecture7.html#quick-summary",
    "href": "Lectures/Lecture7/CSSS508_Lecture7.html#quick-summary",
    "title": "Roadmap",
    "section": "Quick Summary",
    "text": "Quick Summary\nWe’ve seen lots of functions today!\nDon’t try to memorize them! Instead, use this page as a reference.\n\nCharacter Length: nchar and str_length\nSubsetting: substr and str_sub\nCombining: paste and str_c\nCase Changes: str_to_upper(), str_to_lower(), and str_to_title()\nRemoving Whitespace: str_trim\nPattern Detection/Replacement: str_detect() and str_replace()"
  },
  {
    "objectID": "Lectures/Lecture7/CSSS508_Lecture7.html#activity-1-base-r-functions",
    "href": "Lectures/Lecture7/CSSS508_Lecture7.html#activity-1-base-r-functions",
    "title": "Roadmap",
    "section": "Activity 1: Base R Functions",
    "text": "Activity 1: Base R Functions\nThe variable Inspection Date is in the format “MM/DD/YYYY”. In this question, we’ll change the format using functions for strings.\n\nHow long is each character string in this variable?\nUse substr() to extract the month of each entry and save it to an object called “months”\nUse substr() to extract the year of each entry and save it to an object called “years”\nUse paste() to combine each month and year, separated by an underscore (_). Save this as a new variable in the data called “Inspection_Date_Formatted”"
  },
  {
    "objectID": "Lectures/Lecture7/CSSS508_Lecture7.html#activity-answers",
    "href": "Lectures/Lecture7/CSSS508_Lecture7.html#activity-answers",
    "title": "Roadmap",
    "section": "Activity: Answers",
    "text": "Activity: Answers\nThe variable Inspection_Date is in the format “MM/DD/YYYY”. In this question, we’ll change the format using functions for strings.\n\nHow long is each character string in this variable?\n\n\ntable(nchar(restaurants$`Inspection Date`))\n\n\n    10 \n254624 \n\n\n. . .\n\nUse substr() to extract the month of each entry and save it to an object called “months”\n\n\nmonths &lt;- substr(restaurants$`Inspection Date`, 1, 2)\nmonths |&gt; \n  head(5)\n\n[1] \"03\" \"03\" \"08\" \"08\" \"01\""
  },
  {
    "objectID": "Lectures/Lecture7/CSSS508_Lecture7.html#activity-answers-1",
    "href": "Lectures/Lecture7/CSSS508_Lecture7.html#activity-answers-1",
    "title": "Roadmap",
    "section": "Activity: Answers",
    "text": "Activity: Answers\n\nUse substr() to extract the year of each entry and save it to an object called “years”\n\n\nyears &lt;- substr(restaurants$`Inspection Date`, 7, 10)\nyears |&gt; \n  head(5)\n\n[1] \"2023\" \"2023\" \"2022\" \"2022\" \"2022\"\n\n\n. . .\n\nUse paste() to combine each month and year, separated by an underscore (_). Save this as a new variable in the data called “Inspection_Date_Formatted”\n\n\nrestaurants$Inspection_Date_Formatted &lt;- paste(months, years, sep = \"_\")\n\nrestaurants %&gt;% \n  select(Name, `Inspection Date`, Inspection_Date_Formatted) %&gt;%\n  head(5)\n\n# A tibble: 5 × 3\n  Name             `Inspection Date` Inspection_Date_Formatted\n  &lt;chr&gt;            &lt;chr&gt;             &lt;chr&gt;                    \n1 #807 TUTTA BELLA 03/02/2023        03_2023                  \n2 #807 TUTTA BELLA 03/02/2023        03_2023                  \n3 #807 TUTTA BELLA 08/31/2022        08_2022                  \n4 #807 TUTTA BELLA 08/31/2022        08_2022                  \n5 #807 TUTTA BELLA 01/13/2022        01_2022"
  },
  {
    "objectID": "Lectures/Lecture7/CSSS508_Lecture7.html#activity-2-hw-8",
    "href": "Lectures/Lecture7/CSSS508_Lecture7.html#activity-2-hw-8",
    "title": "Roadmap",
    "section": "Activity 2: HW 8",
    "text": "Activity 2: HW 8\nLet’s examine the coffee shops of King County!\n\nFilter your data to only include rows in which the Name includes the word “coffee” (in any case!)\n\n2.. Create a new variable in your data which includes the length of the business name, after removing beginning/trailing whitespace.\n\nCreate a new variable in your data for the inspection year, using a stringr function!\nCreate side-by-side boxplots for the length of business name vs. year.\nCalculate the maximum Inspection Score by business and year.\nCreate a line plot of maximum score (“MaxScore”) over time (“Year”), by business (“Name”). That is, you should have a single line for each business. (Don’t try to label them, as there are far too many!)"
  },
  {
    "objectID": "Lectures/Lecture7/CSSS508_Lecture7.html#activity-solutions",
    "href": "Lectures/Lecture7/CSSS508_Lecture7.html#activity-solutions",
    "title": "Roadmap",
    "section": "Activity: Solutions",
    "text": "Activity: Solutions\n1. Filter your data to only include rows in which the Name includes the word “coffee” (in any case!)\n\ncoffee &lt;- restaurants\ncoffee$Name &lt;- str_to_lower(coffee$Name)\ncoffee &lt;- coffee %&gt;% \n  filter(str_detect(Name, \"coffee\"))\ncoffee |&gt; \n  head(5)\n\n# A tibble: 5 × 25\n  Name          `Program Identifier` `Inspection Date` Description Address City \n  &lt;chr&gt;         &lt;chr&gt;                &lt;chr&gt;             &lt;chr&gt;       &lt;chr&gt;   &lt;chr&gt;\n1 203 degrees … 203 DEGREES FAHRENH… 06/08/2023        Seating 13… 11901 … KIRK…\n2 203 degrees … 203 DEGREES FAHRENH… 06/08/2023        Seating 13… 11901 … KIRK…\n3 203 degrees … 203 DEGREES FAHRENH… 01/26/2022        Seating 13… 11901 … KIRK…\n4 203 degrees … 203 DEGREES FAHRENH… 08/11/2021        Seating 13… 11901 … KIRK…\n5 203 degrees … 203 DEGREES FAHRENH… 01/23/2020        Seating 13… 11901 … KIRK…\n# ℹ 19 more variables: `Zip Code` &lt;dbl&gt;, Phone &lt;chr&gt;, Longitude &lt;dbl&gt;,\n#   Latitude &lt;dbl&gt;, `Inspection Business Name` &lt;chr&gt;, `Inspection Type` &lt;chr&gt;,\n#   `Inspection Score` &lt;dbl&gt;, `Inspection Result` &lt;chr&gt;,\n#   `Inspection Closed Business` &lt;lgl&gt;, `Violation Type` &lt;chr&gt;,\n#   `Violation Description` &lt;chr&gt;, `Violation Points` &lt;dbl&gt;, Business_ID &lt;chr&gt;,\n#   Inspection_Serial_Num &lt;chr&gt;, Violation_Record_ID &lt;chr&gt;, Grade &lt;dbl&gt;,\n#   ZIP_5 &lt;chr&gt;, mailing_address &lt;chr&gt;, Inspection_Date_Formatted &lt;chr&gt;"
  },
  {
    "objectID": "Lectures/Lecture7/CSSS508_Lecture7.html#activity-solutions-1",
    "href": "Lectures/Lecture7/CSSS508_Lecture7.html#activity-solutions-1",
    "title": "Roadmap",
    "section": "Activity: Solutions",
    "text": "Activity: Solutions\n2.Create a new variable in your data which includes the length of the business name, after removing beginning/trailing whitespace.\n\ncoffee$NameLength &lt;- str_length(str_trim(coffee$Name))\ncoffee |&gt; \n  select(Name, NameLength) |&gt; \n  slice(1:10)\n\n# A tibble: 10 × 2\n   Name                          NameLength\n   &lt;chr&gt;                              &lt;int&gt;\n 1 203 degrees fahrenheit coffee         29\n 2 203 degrees fahrenheit coffee         29\n 3 203 degrees fahrenheit coffee         29\n 4 203 degrees fahrenheit coffee         29\n 5 203 degrees fahrenheit coffee         29\n 6 203 degrees fahrenheit coffee         29\n 7 909 coffee and wine                   19\n 8 909 coffee and wine                   19\n 9 909 coffee and wine                   19\n10 909 coffee and wine                   19"
  },
  {
    "objectID": "Lectures/Lecture7/CSSS508_Lecture7.html#activity-solutions-2",
    "href": "Lectures/Lecture7/CSSS508_Lecture7.html#activity-solutions-2",
    "title": "Roadmap",
    "section": "Activity: Solutions",
    "text": "Activity: Solutions\n3. Create a new variable in your data for the inspection year.\n\ncoffee$Year &lt;- str_sub(coffee$`Inspection Date`,-4,-1)\ncoffee$Year |&gt; \n  head(5)\n\n[1] \"2023\" \"2023\" \"2022\" \"2021\" \"2020\""
  },
  {
    "objectID": "Lectures/Lecture7/CSSS508_Lecture7.html#activity-solutions-3",
    "href": "Lectures/Lecture7/CSSS508_Lecture7.html#activity-solutions-3",
    "title": "Roadmap",
    "section": "Activity: Solutions",
    "text": "Activity: Solutions\n4. Create side-by-side boxplots for the length of business name vs. year.\n\nlibrary(ggplot2)\nggplot(coffee, aes(Year, NameLength)) + \n  geom_boxplot()"
  },
  {
    "objectID": "Lectures/Lecture7/CSSS508_Lecture7.html#activity-solutions-4",
    "href": "Lectures/Lecture7/CSSS508_Lecture7.html#activity-solutions-4",
    "title": "Roadmap",
    "section": "Activity: Solutions",
    "text": "Activity: Solutions\n5. Calculate the maximum Inspection Score by business and year.\n\ncoffee_summary &lt;- coffee %&gt;% \n  group_by(Name, Year) %&gt;% \n  summarize(MaxScore = max(`Inspection Score`))\ncoffee_summary |&gt; \n  head(5)\n\n# A tibble: 5 × 3\n# Groups:   Name [1]\n  Name                          Year  MaxScore\n  &lt;chr&gt;                         &lt;chr&gt;    &lt;dbl&gt;\n1 203 degrees fahrenheit coffee 2019         0\n2 203 degrees fahrenheit coffee 2020        10\n3 203 degrees fahrenheit coffee 2021         0\n4 203 degrees fahrenheit coffee 2022         0\n5 203 degrees fahrenheit coffee 2023        15"
  },
  {
    "objectID": "Lectures/Lecture7/CSSS508_Lecture7.html#activity-solutions-5",
    "href": "Lectures/Lecture7/CSSS508_Lecture7.html#activity-solutions-5",
    "title": "Roadmap",
    "section": "Activity: Solutions",
    "text": "Activity: Solutions\n6. Create a line plot of maximum score (“MaxScore”) over time (“Year”), by business (“Name”). That is, you should have a single line for each business. (Don’t try to label them, as there are far too many!)\n\nggplot(coffee_summary, aes(Year, MaxScore, group = Name)) +\n  geom_line(alpha = .2)"
  },
  {
    "objectID": "Lectures/Lecture7/CSSS508_Lecture7.html#homework-8",
    "href": "Lectures/Lecture7/CSSS508_Lecture7.html#homework-8",
    "title": "Roadmap",
    "section": "Homework 8",
    "text": "Homework 8"
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html",
    "title": "Roadmap",
    "section": "",
    "text": "Workflow & Reproducibility\nCS&SS 508 • Lecture 3\n17 October 2023\nVictoria Sass"
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#naming-variables",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#naming-variables",
    "title": "",
    "section": "Naming Variables",
    "text": "Naming Variables\nIt’s good practice to name variables using only lowercase letters, numbers, and _ (to separate words).\n\nRemember to give them descriptive names, even if that means they’re longer.\n\n\nIf you have many related variables, try and be consistent with your naming convention.\n\nA common prefix is preferable to a common suffix due to RStudio’s autocomplete feature.\n\n\n# Code goal: \nshort_flights &lt;- flights |&gt; \n  filter(air_time &lt; 60)\n\n# Code foul: \nSHORTFLIGHTS &lt;- flights |&gt; \n  filter(air_time &lt; 60)"
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#spacing",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#spacing",
    "title": "",
    "section": "Spacing",
    "text": "Spacing\nFor readability you’ll want to put spaces around all mathematical operators1 (i.e. +, -, ==, &lt;, etc.) as well as the assignment operator (&lt;-).\n\n# Code goals: \nz &lt;- (a + b)^2 / d\nmean(x, na.rm = TRUE)\n\n# Code foul: \nz&lt;-( a + b ) ^ 2/d\nmean (x ,na.rm=TRUE)\n\n\nTo make code easier to skim quickly it’s alright to add extra space for better alignment.\n\nflights |&gt; \n  mutate(\n    speed      = distance / air_time,\n    dep_hour   = dep_time %/% 100,\n    dep_minute = dep_time %%  100\n  )\n\n\nexcept for ^"
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#pipes",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#pipes",
    "title": "",
    "section": "Pipes",
    "text": "Pipes\nAs you begin to use more functions, sequentially, it can start to get unclear what’s happening when, and to what.\n\nmedian(sqrt(log(mean(gapminder$pop))))\n\n\nWith nested functions, like those above, you need to read the order of operations inside out, which is a bit awkward. It becomes even more confusing the more function calls you have, especially when they have multiple arguments each.\n\n\nEnter the pipe1: |&gt;\nPipes read “left to right” which is much more intuitive!\n\ngapminder$pop |&gt; mean() |&gt; log() |&gt; sqrt() |&gt; median()\n\n\n\nThe above code takes what’s on the left-hand side of |&gt; and gives it as the first unnamed argument to the first function (mean()).\nThe result of that function call is then “piped” to the first unnamed argument of the second function (log())…\n\n\n\nCeci n’est pas une pipe."
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#pipes-1",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#pipes-1",
    "title": "",
    "section": "Pipes",
    "text": "Pipes\nAs you can see, pipes allow us to “chain” many function calls together easily.\n\nThe so-called “native pipe” (i.e. built into base R) is relatively new. Before this, the pipe was a function from the magrittr package that looks like this: %&gt;%.\n\n\nThis latter version continues to work but has a different functionality than the new, native pipe.\n\n\nMost importantly, while both the magrittr pipe and the native pipe take the LHS (left-hand side) and “pipe” it to the RHS (right-hand side), they operate differently when it comes to explicitly specifying which argument of the RHS to pipe the LHS into.\n\n\n\na &lt;- c(\"Z\", NA, \"C\", \"G\", \"A\")\n# magrittr pipe\na %&gt;% gsub('A', '-', x = .)\n\n# native pipe\na |&gt; gsub('A','-', x = _) # _ is the placeholder for |&gt; \na |&gt; gsub(pattern = 'A', replacement = '-') # leaving the \"piped\" argument as the only unnamed argument also works \na |&gt; (\\(.) gsub('A', '-', x = .))() # using an anonymous function call allows you to be explicit while specifying your own placeholder\n\n\n\n\nYou can read more about the differences between |&gt; and %&gt;% here and anonymous functions here. Code above comes from responses to this stackoverflow post."
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#pipes-2",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#pipes-2",
    "title": "",
    "section": "Pipes",
    "text": "Pipes\nSome good syntax practices:\n\n\nYou should always put a space before |&gt; and it should usually be the last thing on a line.\n\nNew functions should be on a new line, indented 2 spaces (RStudio will automatically do this for you)\nNamed arguments within a function should also get their own line\n\n\n\n# code goals\nflights |&gt;  \n  group_by(tailnum) |&gt; \n  summarize(\n    delay = mean(arr_delay, na.rm = TRUE),\n    n = n()\n  )\n\n# code fouls\nflights |&gt;\n  group_by(\n    tailnum\n  ) |&gt; \n  summarize(delay = mean(arr_delay, na.rm = TRUE), n = n())"
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#r-scripts",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#r-scripts",
    "title": "",
    "section": ".R scripts",
    "text": ".R scripts\nWe’ve been working with Quarto documents but you’ll sometimes simply want to use an R script, which is basically an entire file that is just a code chunk.\n\n\n\nWhy would you prefer an .R file over a .qmd file?\nWhen might you use a .qmd file?\n\n\n\n\nYou just need to run code, without the need for accompanying text output and plots in the same document. Examples include:\n\nReading in and cleaning/manipulating your data before analysis\nWriting functions you’ll use throughout your project\nGetting descriptive statistics/making descriptive plots of data\nRunning models and generating tables/plots of their results\n\n\n\n\n\n\nHomework assignments (like for this class) that require you to show code, describe your process for arriving at your solution, and include any results (i.e. tables, statistics, visualizations)\nAcademic articles\nPresentations for class, conferences, talks, etc.\nTheses/dissertations\nInteractive visualizations (i.e. widgets)\nBuilding your own website"
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#file-naming",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#file-naming",
    "title": "",
    "section": "File naming",
    "text": "File naming\nFile names should:\n\n\nbe machine readable: avoid spaces, symbols, and special characters. Don’t rely on case sensitivity to distinguish files.\nbe human readable: use file names to describe what’s in the file.\nplay well with default ordering: start file names with numbers so that alphabetical sorting puts them in the order they get used."
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#file-naming-1",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#file-naming-1",
    "title": "",
    "section": "File naming",
    "text": "File naming\n\n\nGood Example directory\nBad Example directory\n\n\n\n01-load-data.R\n02-exploratory-analysis.R\n03-model-approach-1.R\n04-model-approach-2.R\nfig-01.png\nfig-02.png\nreport-2022-03-20.qmd\nreport-2022-04-02.qmd\nreport-draft-notes.txt\n\n\n\nNumbering scripts makes it clear in which order they should be run.\nConsistent naming scheme makes it easy to see what things are grouped together and what varies.\nWith many files in one directory you should go a step further and create subfolders for different types of files (i.e. scripts, figures, tables, etc.)\n\n\n\n\nalternative model.R\ncode for exploratory analysis.r\nfinalreport.qmd\nFinalReport.qmd\nfig 1.png\nFigure_02.png\nmodel_first_try.R\nrun-first.r\ntemp.txt\n\n\n\nOrdering of the files is unclear\nInconsistent naming is confusing (which final report is THE final report?)\nNon-descriptive naming means more work for you in trying to decipher its contents"
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#working-directory",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#working-directory",
    "title": "",
    "section": "Working directory",
    "text": "Working directory\nYour working directory is where R will look for any files that you ask it to load and where it’ll put anything you ask it to save. It is literally just a folder somewhere on your computer or the remote server/cloud you’re working within.\n\nYou can ask R what your current working directory is by running getwd() (get working directory).\n\n\n\ngetwd()\n\n\n\n[1] \"/Users/victoriasass/Desktop/GitHub/CSSS508/Lectures/Lecture3\"\n\n\nYou can see above that this lecture was created in a lecture-specific folder within a lectures folder, in a directory for this class, which is in a folder called GitHub on the Desktop of my laptop.\n\n\nWhile you can technically set your working directory using setwd() (set working directory) and giving R a filepath, in the name of reproducible research DO NOT DO THIS! I strongly advise an alternative: RStudio Projects."
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#projects",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#projects",
    "title": "",
    "section": "Projects",
    "text": "Projects\nA “project” is RStudio’s built-in organizational support system which keeps all the files associated with a given project (i.e. data, R scripts, figures, results) together in one directory.\n\nCreating a new project quite basically creates a new folder in a place that you specify. But it also does a few of other extremely useful things:\n\n\nCreates a .Rproj file which tracks your command history and all the files in your project folder.\nContains all the files needed to reproduce your work\n\ni.e. you can send a project folder to someone and they will be able to run it on their local machine\n\n\nFacilitates version control with built-in git/GitHub connection (more on this later in the course)"
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#projects-1",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#projects-1",
    "title": "",
    "section": "Projects",
    "text": "Projects\nA “project” is RStudio’s built-in organizational support system which keeps all the files associated with a given project (i.e. data, R scripts, figures, results) together in one directory.\n\nCreating a new project quite basically creates a new folder in a place that you specify. But it also does a few of other extremely useful things:\n\n\nCreates a .Rproj file which tracks your command history and all the files in your project folder.\nContains all the files needed to reproduce your work\n\ni.e. you can send a project folder to someone and they will be able to run it on their local machine\n\n\nFacilitates version control with built-in git/GitHub connection (more on this later in the course)"
  },
  {
    "objectID": "Lectures/Lecture10/CSSS508_Lecture10.html#topics-for-today",
    "href": "Lectures/Lecture10/CSSS508_Lecture10.html#topics-for-today",
    "title": "Roadmap",
    "section": "Topics for Today",
    "text": "Topics for Today\n\nWorking with Model Results\n\nTidy model output with broom\nVisualizing models with ggeffects\nTables with gt, modelsummary, and gtsummary\n\n\n\nReproducible Research\n\n\nBest Practices\n\nOrganization\nPortability\nVersion Control\n\n\n\nWrapping up the course"
  },
  {
    "objectID": "Lectures/Lecture10/CSSS508_Lecture10.html#broom",
    "href": "Lectures/Lecture10/CSSS508_Lecture10.html#broom",
    "title": "Roadmap",
    "section": "broom",
    "text": "broom\nbroom is a package that “tidies up” the output from models such a lm() and glm().\nIt has a small number of key functions:\n\ntidy() - Creates a dataframe summary of a model.\naugment() - Adds columns—such as fitted values—to the data used in the model.\nglance() - Provides one row of fit statistics for models.\n\n\nlibrary(broom)"
  },
  {
    "objectID": "Lectures/Lecture10/CSSS508_Lecture10.html#model-output-is-a-list",
    "href": "Lectures/Lecture10/CSSS508_Lecture10.html#model-output-is-a-list",
    "title": "Roadmap",
    "section": "Model Output is a List",
    "text": "Model Output is a List\nlm() and summary() produce lists as output, which cannot go directly into tidyverse functions, particularly those in ggplot2.\n\nlm_1 &lt;- lm(yn ~ num1 + fac1, data = ex_dat)\nsummary(lm_1)\n\n\nCall:\nlm(formula = yn ~ num1 + fac1, data = ex_dat)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-7.5398 -1.7750 -0.1222  1.9793  7.9677 \n\nCoefficients:\n            Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)   0.9592     0.3773   2.543 0.011774 *  \nnum1          0.3686     0.1067   3.455 0.000675 ***\nfac1B         1.3516     0.4875   2.772 0.006102 ** \nfac1C         2.2902     0.5342   4.287 2.84e-05 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 2.896 on 196 degrees of freedom\nMultiple R-squared:  0.1474,    Adjusted R-squared:  0.1344 \nF-statistic:  11.3 on 3 and 196 DF,  p-value: 7.199e-07\n...."
  },
  {
    "objectID": "Lectures/Lecture10/CSSS508_Lecture10.html#model-output-varies",
    "href": "Lectures/Lecture10/CSSS508_Lecture10.html#model-output-varies",
    "title": "Roadmap",
    "section": "Model Output Varies!",
    "text": "Model Output Varies!\nEach type of model also produces somewhat different output, so you can’t just reuse the same code to handle output from every model.\n\nglm_1 &lt;- glm(yb ~ num1 + fac1, data = ex_dat, family=binomial(link=\"logit\"))\nsummary(glm_1)\n\n\nCall:\nglm(formula = yb ~ num1 + fac1, family = binomial(link = \"logit\"), \n    data = ex_dat)\n\nCoefficients:\n            Estimate Std. Error z value Pr(&gt;|z|)    \n(Intercept) -0.95473    0.28992  -3.293 0.000991 ***\nnum1         0.18362    0.08026   2.288 0.022150 *  \nfac1B        0.86181    0.35561   2.423 0.015372 *  \nfac1C        1.55773    0.40261   3.869 0.000109 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n(Dispersion parameter for binomial family taken to be 1)\n\n    Null deviance: 277.18  on 199  degrees of freedom\nResidual deviance: 254.04  on 196  degrees of freedom\nAIC: 262.04\n\n...."
  },
  {
    "objectID": "Lectures/Lecture10/CSSS508_Lecture10.html#broomtidy",
    "href": "Lectures/Lecture10/CSSS508_Lecture10.html#broomtidy",
    "title": "Roadmap",
    "section": "broom::tidy()",
    "text": "broom::tidy()\ntidy() produces similar output, but as a dataframe.\n\nlm_1 %&gt;% tidy()\n\n# A tibble: 4 × 5\n  term        estimate std.error statistic   p.value\n  &lt;chr&gt;          &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;\n1 (Intercept)    0.959     0.377      2.54 0.0118   \n2 num1           0.369     0.107      3.45 0.000675 \n3 fac1B          1.35      0.488      2.77 0.00610  \n4 fac1C          2.29      0.534      4.29 0.0000284\n\n\nEach type of model (e.g. glm, lmer) has a different method with its own additional arguments. See ?tidy.lm for an example."
  },
  {
    "objectID": "Lectures/Lecture10/CSSS508_Lecture10.html#broomtidy-1",
    "href": "Lectures/Lecture10/CSSS508_Lecture10.html#broomtidy-1",
    "title": "Roadmap",
    "section": "broom::tidy()",
    "text": "broom::tidy()\nThis output is also completely identical between different models.\nThis can be very useful and important if running models with different test statistics… or just running a lot of models!\n\nglm_1 %&gt;% tidy()\n\n# A tibble: 4 × 5\n  term        estimate std.error statistic  p.value\n  &lt;chr&gt;          &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;\n1 (Intercept)   -0.955    0.290      -3.29 0.000991\n2 num1           0.184    0.0803      2.29 0.0222  \n3 fac1B          0.862    0.356       2.42 0.0154  \n4 fac1C          1.56     0.403       3.87 0.000109"
  },
  {
    "objectID": "Lectures/Lecture10/CSSS508_Lecture10.html#broomglance",
    "href": "Lectures/Lecture10/CSSS508_Lecture10.html#broomglance",
    "title": "Roadmap",
    "section": "broom::glance()",
    "text": "broom::glance()\nglance() produces dataframes of fit statistics for models.\nIf you run many models, you can compare each model row-by-row in each column… or even plot their different fit statistics to allow holistic comparison.\n\nglance(lm_1)\n\n# A tibble: 1 × 12\n  r.squared adj.r.squared sigma statistic     p.value    df logLik   AIC   BIC\n      &lt;dbl&gt;         &lt;dbl&gt; &lt;dbl&gt;     &lt;dbl&gt;       &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1     0.147         0.134  2.90      11.3 0.000000720     3  -494.  999. 1015.\n# ℹ 3 more variables: deviance &lt;dbl&gt;, df.residual &lt;int&gt;, nobs &lt;int&gt;"
  },
  {
    "objectID": "Lectures/Lecture10/CSSS508_Lecture10.html#broomaugment",
    "href": "Lectures/Lecture10/CSSS508_Lecture10.html#broomaugment",
    "title": "Roadmap",
    "section": "broom::augment()",
    "text": "broom::augment()\naugment() takes values generated by a model and adds them back to the original data. This includes fitted values, residuals, and leverage statistics.\n\naugment(lm_1) %&gt;% \n  head()\n\n# A tibble: 6 × 9\n     yn   num1 fac1  .fitted .resid   .hat .sigma   .cooksd .std.resid\n  &lt;dbl&gt;  &lt;dbl&gt; &lt;fct&gt;   &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;     &lt;dbl&gt;      &lt;dbl&gt;\n1 0.512  2.61  A        1.92 -1.41  0.0199   2.90 0.00123      -0.492 \n2 2.85   2.78  C        4.27 -1.42  0.0206   2.90 0.00129      -0.495 \n3 5.43   4.82  C        5.03  0.407 0.0341   2.90 0.000180      0.143 \n4 2.58   1.32  B        2.80 -0.215 0.0124   2.90 0.0000174    -0.0746\n5 0.787  0.781 B        2.60 -1.81  0.0126   2.90 0.00126      -0.629 \n6 0.918 -3.49  B        1.02 -0.106 0.0422   2.90 0.0000154    -0.0374\n\n\nSee ?augment.lm for examples of what augment() can do."
  },
  {
    "objectID": "Lectures/Lecture10/CSSS508_Lecture10.html#the-power-of-broom",
    "href": "Lectures/Lecture10/CSSS508_Lecture10.html#the-power-of-broom",
    "title": "Roadmap",
    "section": "The Power of broom",
    "text": "The Power of broom\nThe real advantage of broom becomes apparent when running many models at once. Here we run separate models for each level of fac1:\n\nex_dat %&gt;% \n  nest_by(fac1) %&gt;% #&lt;&lt;\n  mutate(model = list(lm(yn ~  num1 + fac2, data = data))) %&gt;%  \n  summarize(tidy(model), .groups = \"drop\")\n\n# A tibble: 9 × 6\n  fac1  term        estimate std.error statistic    p.value\n  &lt;fct&gt; &lt;chr&gt;          &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;      &lt;dbl&gt;\n1 A     (Intercept)   0.840      0.472    1.78   0.0803    \n2 A     num1          0.486      0.157    3.09   0.00306   \n3 A     fac2No        0.0279     0.643    0.0434 0.966     \n4 B     (Intercept)   0.884      0.524    1.69   0.0952    \n5 B     num1          0.309      0.178    1.74   0.0865    \n6 B     fac2No        2.89       0.652    4.43   0.0000302 \n7 C     (Intercept)   2.78       0.559    4.97   0.00000742\n8 C     num1          0.339      0.192    1.76   0.0834    \n9 C     fac2No        1.06       0.733    1.45   0.153     \n\n\n\n\nnest_by() nests data into a list column by levels of fac1."
  },
  {
    "objectID": "Lectures/Lecture10/CSSS508_Lecture10.html#geom_smooth",
    "href": "Lectures/Lecture10/CSSS508_Lecture10.html#geom_smooth",
    "title": "Roadmap",
    "section": "geom_smooth()",
    "text": "geom_smooth()\nI have used geom_smooth() in many past examples.\ngeom_smooth() generates “smoothed conditional means” including loess curves and generalized additive models (GAMs).\n. . .\nNote, however, that most regression models are conditional mean models, such as ordinary least squares and generalized linear models.\n. . .\nWe can use geom_smooth() to add a layer depicting common bivariate models.\nWe’ll look at this with the gapminder data from Week 2.\n\nlibrary(gapminder)\n\n. . ."
  },
  {
    "objectID": "Lectures/Lecture10/CSSS508_Lecture10.html#default-geom_smooth",
    "href": "Lectures/Lecture10/CSSS508_Lecture10.html#default-geom_smooth",
    "title": "Roadmap",
    "section": "Default geom_smooth()",
    "text": "Default geom_smooth()\n\nggplot(data = gapminder, aes(x = year, y = lifeExp, color = continent)) +\n  geom_point(position = position_jitter(1, 0), size = 0.5) +\n  geom_smooth()\n\n\n\n\n\n\n\n\nBy default, geom_smooth() chooses either a loess smoother (N &lt; 1000) or a GAM depending on the number of observations."
  },
  {
    "objectID": "Lectures/Lecture10/CSSS508_Lecture10.html#linear-glm",
    "href": "Lectures/Lecture10/CSSS508_Lecture10.html#linear-glm",
    "title": "Roadmap",
    "section": "Linear glm",
    "text": "Linear glm\n\nggplot(data = gapminder, aes(x = year, y = lifeExp, color = continent)) +\n  geom_point(position = position_jitter(1,0), size = 0.5) +\n  geom_smooth(method = \"glm\", formula = y ~ x)\n\n\n\n\n\n\n\n\nWe could also fit a standard linear model using either method = \"glm\" or method = \"lm\" and a formula like y ~ x."
  },
  {
    "objectID": "Lectures/Lecture10/CSSS508_Lecture10.html#polynomial-glm",
    "href": "Lectures/Lecture10/CSSS508_Lecture10.html#polynomial-glm",
    "title": "Roadmap",
    "section": "Polynomial glm",
    "text": "Polynomial glm\n\nggplot(data = gapminder, aes(x = year, y = lifeExp, color = continent)) +\n  geom_point(position = position_jitter(1,0), size = 0.5) +\n  geom_smooth(method = \"glm\", formula = y ~ poly(x, 2)) \n\n\n\n\n\n\n\n\npoly(x, 2) produces a quadratic model which contains a linear term (x) and a quadratic term (x^2)."
  },
  {
    "objectID": "Lectures/Lecture10/CSSS508_Lecture10.html#more-complex-models",
    "href": "Lectures/Lecture10/CSSS508_Lecture10.html#more-complex-models",
    "title": "Roadmap",
    "section": "More Complex Models",
    "text": "More Complex Models\nWhat if we want something more complex than a bivariate model?\nWhat if we have a statistically complex model, like nonlinear probability model or multilevel model?\nWe need to go beyond geom_smooth()!"
  },
  {
    "objectID": "Lectures/Lecture10/CSSS508_Lecture10.html#but-first-vocab",
    "href": "Lectures/Lecture10/CSSS508_Lecture10.html#but-first-vocab",
    "title": "Roadmap",
    "section": "But first, vocab!",
    "text": "But first, vocab!\nWe are often interested in what might happen if some variables take particular values, often ones not seen in the actual data.\n. . .\nWhen we set variables to certain values, we refer to them as counterfactual values or just counterfactuals.\n. . .\nFor example, if we know nothing about a new observation, our prediction for that estimate is often based on assuming every variable is at its mean.\n. . .\nSometimes, however, we might have very specific questions which require setting (possibly many) combinations of variables to particular values and making an estimate or prediction.\n. . .\nProviding specific estimates, conditional on values of covariates, is a nice way to summarize results, particularly for models with unintuitive parameters (e.g. logit models)."
  },
  {
    "objectID": "Lectures/Lecture10/CSSS508_Lecture10.html#ggeffects-1",
    "href": "Lectures/Lecture10/CSSS508_Lecture10.html#ggeffects-1",
    "title": "Roadmap",
    "section": "ggeffects",
    "text": "ggeffects\nIf we want to look at more complex models, we can use ggeffects to create and plot tidy marginal effects.\nThat is, tidy dataframes of ranges of predicted values that can be fed straight into ggplot2 for plotting model results.\nWe will focus on two ggeffects functions:\n\nggpredict() - Computes predicted values for the outcome variable at margins of specific variables.\nplot.ggeffects() - A plot method for ggeffects objects (like ggpredict() output)\n\n\nlibrary(ggeffects)"
  },
  {
    "objectID": "Lectures/Lecture10/CSSS508_Lecture10.html#quick-simulated-data",
    "href": "Lectures/Lecture10/CSSS508_Lecture10.html#quick-simulated-data",
    "title": "Roadmap",
    "section": "Quick Simulated Data",
    "text": "Quick Simulated Data\nTo best show off ggeffects, I need a data frame with numeric and categorical variables with strong relationships. It is easiest to just simulate it:\n\nex_dat &lt;- data.frame(num1 = rnorm(200, 1, 2), \n                     fac1 = sample(c(1, 2, 3), 200, TRUE),\n                     num2 = rnorm(200, 0, 3),\n                     fac2 = sample(c(1, 2))) %&gt;%\n  mutate(yn = num1 * 0.5 + fac1 * 1.1 + num2 * 0.7 +\n              fac2 - 1.5  + rnorm(200, 0, 2)) %&gt;% \n  mutate(yb = as.numeric(yn &gt; mean(yn))) %&gt;%\n  mutate(fac1 = factor(fac1, labels = c(\"A\", \"B\", \"C\")),\n         fac2 = factor(fac2, labels = c(\"Yes\", \"No\")))\nglimpse(ex_dat)\n\nRows: 200\nColumns: 6\n$ num1 &lt;dbl&gt; 0.4517033, 2.9128200, -0.0706158, 0.7521852, 1.2500180, 1.5466221…\n$ fac1 &lt;fct&gt; A, B, A, B, A, A, C, B, C, B, C, C, A, B, B, C, B, A, C, B, A, A,…\n$ num2 &lt;dbl&gt; -3.3564287, 0.8053290, 0.1212927, 3.2189114, 0.1910908, -0.403625…\n$ fac2 &lt;fct&gt; No, Yes, No, Yes, No, Yes, No, Yes, No, Yes, No, Yes, No, Yes, No…\n$ yn   &lt;dbl&gt; 1.553391, 4.847864, 3.767852, 6.637048, 1.820537, 1.125651, 2.333…\n$ yb   &lt;dbl&gt; 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0,…\n\n\nNow we can get ggpredicting!"
  },
  {
    "objectID": "Lectures/Lecture10/CSSS508_Lecture10.html#ggpredict",
    "href": "Lectures/Lecture10/CSSS508_Lecture10.html#ggpredict",
    "title": "Roadmap",
    "section": "ggpredict()",
    "text": "ggpredict()\nWhen you run ggpredict(), it produces a dataframe with a row for every unique value of a supplied predictor (“independent”) variable (term).\nEach row contains an expected (estimated) value for the outcome (“dependent”) variable, plus confidence intervals.\n\nlm_1 &lt;- lm(yn ~ num1 + fac1, data = ex_dat)\nlm_1_est &lt;- ggpredict(lm_1, terms = \"num1\")\n\nIf desired, the argument interval = \"prediction\" will give predicted intervals instead."
  },
  {
    "objectID": "Lectures/Lecture10/CSSS508_Lecture10.html#ggpredict-output",
    "href": "Lectures/Lecture10/CSSS508_Lecture10.html#ggpredict-output",
    "title": "Roadmap",
    "section": "ggpredict() output",
    "text": "ggpredict() output\n\nlm_1_est\n\n# Predicted values of yn\n\nnum1 | Predicted |        95% CI\n--------------------------------\n  -6 |     -1.39 | [-2.98, 0.20]\n  -4 |     -0.58 | [-1.80, 0.64]\n  -2 |      0.23 | [-0.65, 1.12]\n   0 |      1.04 | [ 0.39, 1.69]\n   2 |      1.85 | [ 1.23, 2.48]\n   4 |      2.66 | [ 1.83, 3.49]\n   6 |      3.47 | [ 2.31, 4.63]\n\nAdjusted for:\n* fac1 = A"
  },
  {
    "objectID": "Lectures/Lecture10/CSSS508_Lecture10.html#plot-for-ggpredict",
    "href": "Lectures/Lecture10/CSSS508_Lecture10.html#plot-for-ggpredict",
    "title": "Roadmap",
    "section": "plot() for ggpredict()",
    "text": "plot() for ggpredict()\nggeffects features a plot() method, plot.ggeffects(), which produces a ggplot when you give plot() output from ggpredict().\n\nplot(lm_1_est)"
  },
  {
    "objectID": "Lectures/Lecture10/CSSS508_Lecture10.html#grouping-with-ggpredict",
    "href": "Lectures/Lecture10/CSSS508_Lecture10.html#grouping-with-ggpredict",
    "title": "Roadmap",
    "section": "Grouping with ggpredict()",
    "text": "Grouping with ggpredict()\nWhen using a vector of terms, ggeffects will plot the first along the x-axis and use others for grouping. Note we can pipe a model into ggpredict()!\n\nglm(yb ~ num1 + fac1 + num2 + fac2, data = ex_dat, family = binomial(link = \"logit\")) %&gt;%\n  ggpredict(terms = c(\"num1\", \"fac1\")) %&gt;% \n  plot()"
  },
  {
    "objectID": "Lectures/Lecture10/CSSS508_Lecture10.html#faceting-with-ggpredict",
    "href": "Lectures/Lecture10/CSSS508_Lecture10.html#faceting-with-ggpredict",
    "title": "Roadmap",
    "section": "Faceting with ggpredict()",
    "text": "Faceting with ggpredict()\nYou can add facet = TRUE to the plot() call to facet over grouping terms.\n\nglm(yb ~ num1 + fac1 + num2 + fac2, data = ex_dat, family = binomial(link = \"logit\")) %&gt;%\n  ggpredict(terms = c(\"num1\", \"fac1\")) %&gt;% \n  plot(facet = TRUE)"
  },
  {
    "objectID": "Lectures/Lecture10/CSSS508_Lecture10.html#counterfactual-values",
    "href": "Lectures/Lecture10/CSSS508_Lecture10.html#counterfactual-values",
    "title": "Roadmap",
    "section": "Counterfactual Values",
    "text": "Counterfactual Values\nYou can add values in square brackets in the terms = argument to specify counterfactual values.\n\nglm(yb ~ num1 + fac1 + num2 + fac2, data = ex_dat, family = binomial(link = \"logit\")) %&gt;%\n  ggpredict(terms = c(\"num1 [-1,0,1]\", \"fac1 [A,B]\")) %&gt;% plot(facet = TRUE)"
  },
  {
    "objectID": "Lectures/Lecture10/CSSS508_Lecture10.html#representative-values",
    "href": "Lectures/Lecture10/CSSS508_Lecture10.html#representative-values",
    "title": "Roadmap",
    "section": "Representative Values",
    "text": "Representative Values\nYou can also use [meansd] or [minmax] to set representative values.\n\nglm(yb ~ num1 + fac1 + num2 + fac2, data = ex_dat, family = binomial(link = \"logit\")) %&gt;%\n  ggpredict(terms = c(\"num1 [meansd]\", \"num2 [minmax]\")) %&gt;% plot(facet = TRUE)"
  },
  {
    "objectID": "Lectures/Lecture10/CSSS508_Lecture10.html#dot-plots-with-ggpredict",
    "href": "Lectures/Lecture10/CSSS508_Lecture10.html#dot-plots-with-ggpredict",
    "title": "Roadmap",
    "section": "Dot plots with ggpredict()",
    "text": "Dot plots with ggpredict()\nggpredict will produce dot plots with error bars for categorical predictors.\n\nlm(yn ~ fac1 + fac2, data = ex_dat) %&gt;% \n  ggpredict(terms = c(\"fac1\", \"fac2\")) %&gt;% \n  plot()"
  },
  {
    "objectID": "Lectures/Lecture10/CSSS508_Lecture10.html#notes-on-ggeffects",
    "href": "Lectures/Lecture10/CSSS508_Lecture10.html#notes-on-ggeffects",
    "title": "Roadmap",
    "section": "Notes on ggeffects",
    "text": "Notes on ggeffects\nThere is a lot more to the ggeffects package that you can see in the package vignette and the github repository. This includes, but is not limited to:\n\nPredicted values for polynomial and interaction terms\nGetting predictions from models from dozens of other packages\nSending ggeffects objects to ggplot2 to freely modify plots"
  },
  {
    "objectID": "Lectures/Lecture10/CSSS508_Lecture10.html#pander-regression-tables",
    "href": "Lectures/Lecture10/CSSS508_Lecture10.html#pander-regression-tables",
    "title": "Roadmap",
    "section": "pander Regression Tables",
    "text": "pander Regression Tables\nWe’ve used pander to create nice tables for dataframes. But pander has methods to handle all sort of objects that you might want displayed nicely.\nThis includes model output, such as from lm(), glm(), and summary().\n\nlibrary(pander)"
  },
  {
    "objectID": "Lectures/Lecture10/CSSS508_Lecture10.html#pander-and-lm",
    "href": "Lectures/Lecture10/CSSS508_Lecture10.html#pander-and-lm",
    "title": "Roadmap",
    "section": "pander() and lm()",
    "text": "pander() and lm()\nYou can send an lm() object straight to pander:\n\npander(lm_1) # this creates an markdown-formatted chunk of text you can add to your qmd document\n\n\nFitting linear model: yn ~ num1 + fac1\n\n\n \nEstimate\nStd. Error\nt value\nPr(&gt;\n\n\n\n\n(Intercept)\n1.003\n0.3866\n2.594\n0.01019\n\n\nnum1\n0.6407\n0.1047\n6.118\n5.06e-09\n\n\nfac1B\n1.675\n0.5341\n3.137\n0.001972\n\n\nfac1C\n2.16\n0.5349\n4.038\n7.719e-05"
  },
  {
    "objectID": "Lectures/Lecture10/CSSS508_Lecture10.html#pander-and-summary",
    "href": "Lectures/Lecture10/CSSS508_Lecture10.html#pander-and-summary",
    "title": "Roadmap",
    "section": "pander() and summary()",
    "text": "pander() and summary()\nYou can do this with summary() as well, for added information:\n\npander(summary(lm_1))\n\n\n\n\n \nEstimate\nStd. Error\nt value\nPr(&gt;\n\n\n\n\n(Intercept)\n1.003\n0.3866\n2.594\n0.01019\n\n\nnum1\n0.6407\n0.1047\n6.118\n5.06e-09\n\n\nfac1B\n1.675\n0.5341\n3.137\n0.001972\n\n\nfac1C\n2.16\n0.5349\n4.038\n7.719e-05\n\n\n\n\nFitting linear model: yn ~ num1 + fac1\n\n\nObservations\nResidual Std. Error\n\\(R^2\\)\nAdjusted \\(R^2\\)\n\n\n\n\n200\n3.093\n0.2126\n0.2005"
  },
  {
    "objectID": "Lectures/Lecture10/CSSS508_Lecture10.html#advanced-tables",
    "href": "Lectures/Lecture10/CSSS508_Lecture10.html#advanced-tables",
    "title": "Roadmap",
    "section": "Advanced Tables",
    "text": "Advanced Tables\npander tables are great for basic rmarkdown documents, but they’re not generally publication ready.\nWe’re going to talk about a few different approaches for making nicer tables:\n\ngt from RStudio for general table construction\nmodelsummary for creating model tables\ngtsummary for creating data summaries"
  },
  {
    "objectID": "Lectures/Lecture10/CSSS508_Lecture10.html#gt",
    "href": "Lectures/Lecture10/CSSS508_Lecture10.html#gt",
    "title": "Roadmap",
    "section": "gt",
    "text": "gt\nIf you need to more customizability or different output types, RStudio’s gt package is a new and powerful system for creating tables from dataframes. We’ll use dplyr’s built-in starwars data for some examples.\n\nlibrary(gt)\ntes_chars &lt;- starwars %&gt;% \n  unnest(films) %&gt;% \n  unnest(starships, keep_empty = TRUE) %&gt;% \n  filter(films == \"The Empire Strikes Back\") %&gt;% \n  select(name, species, starships, mass, height) %&gt;%\n  distinct(name, .keep_all = TRUE) %&gt;%\n  mutate(starships = ifelse(name == \"Obi-Wan Kenobi\" | is.na(starships), \n                            \"No Ship\", starships))\nglimpse(tes_chars)\n\nRows: 16\nColumns: 5\n$ name      &lt;chr&gt; \"Luke Skywalker\", \"C-3PO\", \"R2-D2\", \"Darth Vader\", \"Leia Org…\n$ species   &lt;chr&gt; \"Human\", \"Droid\", \"Droid\", \"Human\", \"Human\", \"Human\", \"Wooki…\n$ starships &lt;chr&gt; \"X-wing\", \"No Ship\", \"No Ship\", \"TIE Advanced x1\", \"No Ship\"…\n$ mass      &lt;dbl&gt; 77.0, 75.0, 32.0, 136.0, 49.0, 77.0, 112.0, 80.0, 77.0, 17.0…\n$ height    &lt;int&gt; 172, 167, 96, 202, 150, 182, 228, 180, 170, 66, 170, 183, 20…"
  },
  {
    "objectID": "Lectures/Lecture10/CSSS508_Lecture10.html#initialize",
    "href": "Lectures/Lecture10/CSSS508_Lecture10.html#initialize",
    "title": "Roadmap",
    "section": "Initialize",
    "text": "Initialize\n\n\n\ntes_chars %&gt;%\n  gt() \n\ngt() just renders the dataframe as a table using markdown.\n\n\n\n\n\n\n\n  \n    \n    \n      name\n      species\n      starships\n      mass\n      height\n    \n  \n  \n    Luke Skywalker\nHuman\nX-wing\n77.0\n172\n    C-3PO\nDroid\nNo Ship\n75.0\n167\n    R2-D2\nDroid\nNo Ship\n32.0\n96\n    Darth Vader\nHuman\nTIE Advanced x1\n136.0\n202\n    Leia Organa\nHuman\nNo Ship\n49.0\n150\n    Obi-Wan Kenobi\nHuman\nNo Ship\n77.0\n182\n    Chewbacca\nWookiee\nMillennium Falcon\n112.0\n228\n    Han Solo\nHuman\nMillennium Falcon\n80.0\n180\n    Wedge Antilles\nHuman\nX-wing\n77.0\n170\n    Yoda\nYoda's species\nNo Ship\n17.0\n66\n    Palpatine\nHuman\nNo Ship\n75.0\n170\n    Boba Fett\nHuman\nSlave 1\n78.2\n183\n    IG-88\nDroid\nNo Ship\n140.0\n200\n    Bossk\nTrandoshan\nNo Ship\n113.0\n190\n    Lando Calrissian\nHuman\nMillennium Falcon\n79.0\n177\n    Lobot\nHuman\nNo Ship\n79.0\n175"
  },
  {
    "objectID": "Lectures/Lecture10/CSSS508_Lecture10.html#grouping",
    "href": "Lectures/Lecture10/CSSS508_Lecture10.html#grouping",
    "title": "Roadmap",
    "section": "Grouping",
    "text": "Grouping\n\n\n\ntes_chars %&gt;% \n  group_by(starships) %&gt;%\n  gt()\n\nIf we group_by() first, the levels of the grouping variable become grouping rows in the table.\n\n\n\n\n\n\n\n  \n    \n    \n      name\n      species\n      mass\n      height\n    \n  \n  \n    \n      X-wing\n    \n    Luke Skywalker\nHuman\n77.0\n172\n    Wedge Antilles\nHuman\n77.0\n170\n    \n      No Ship\n    \n    C-3PO\nDroid\n75.0\n167\n    R2-D2\nDroid\n32.0\n96\n    Leia Organa\nHuman\n49.0\n150\n    Obi-Wan Kenobi\nHuman\n77.0\n182\n    Yoda\nYoda's species\n17.0\n66\n    Palpatine\nHuman\n75.0\n170\n    IG-88\nDroid\n140.0\n200\n    Bossk\nTrandoshan\n113.0\n190\n    Lobot\nHuman\n79.0\n175\n    \n      TIE Advanced x1\n    \n    Darth Vader\nHuman\n136.0\n202\n    \n      Millennium Falcon\n    \n    Chewbacca\nWookiee\n112.0\n228\n    Han Solo\nHuman\n80.0\n180\n    Lando Calrissian\nHuman\n79.0\n177\n    \n      Slave 1\n    \n    Boba Fett\nHuman\n78.2\n183"
  },
  {
    "objectID": "Lectures/Lecture10/CSSS508_Lecture10.html#rownames",
    "href": "Lectures/Lecture10/CSSS508_Lecture10.html#rownames",
    "title": "Roadmap",
    "section": "Rownames",
    "text": "Rownames\n\n\n\ntes_chars %&gt;% \n  group_by(starships) %&gt;%\n  gt(rowname_col = \"name\")\n\nDesignating a rowname_col removes that column’s name and divides the values from the measures to the right.\n\n\n\n\n\n\n\n  \n    \n    \n      \n      species\n      mass\n      height\n    \n  \n  \n    \n      X-wing\n    \n    Luke Skywalker\nHuman\n77.0\n172\n    Wedge Antilles\nHuman\n77.0\n170\n    \n      No Ship\n    \n    C-3PO\nDroid\n75.0\n167\n    R2-D2\nDroid\n32.0\n96\n    Leia Organa\nHuman\n49.0\n150\n    Obi-Wan Kenobi\nHuman\n77.0\n182\n    Yoda\nYoda's species\n17.0\n66\n    Palpatine\nHuman\n75.0\n170\n    IG-88\nDroid\n140.0\n200\n    Bossk\nTrandoshan\n113.0\n190\n    Lobot\nHuman\n79.0\n175\n    \n      TIE Advanced x1\n    \n    Darth Vader\nHuman\n136.0\n202\n    \n      Millennium Falcon\n    \n    Chewbacca\nWookiee\n112.0\n228\n    Han Solo\nHuman\n80.0\n180\n    Lando Calrissian\nHuman\n79.0\n177\n    \n      Slave 1\n    \n    Boba Fett\nHuman\n78.2\n183"
  },
  {
    "objectID": "Lectures/Lecture10/CSSS508_Lecture10.html#header",
    "href": "Lectures/Lecture10/CSSS508_Lecture10.html#header",
    "title": "Roadmap",
    "section": "Header",
    "text": "Header\n\n\n\ntes_chars %&gt;% \n  group_by(starships) %&gt;%\n  gt(rowname_col = \"name\") %&gt;%\n  tab_header(\n    title = \"Star Wars Characters\", \n    subtitle = \"The Empire Strikes Back\"\n  ) \n\ntab_header() can add titles and subtitles.\n\n\n\n\n\n\n\n  \n    \n      Star Wars Characters\n    \n    \n      The Empire Strikes Back\n    \n    \n      \n      species\n      mass\n      height\n    \n  \n  \n    \n      X-wing\n    \n    Luke Skywalker\nHuman\n77.0\n172\n    Wedge Antilles\nHuman\n77.0\n170\n    \n      No Ship\n    \n    C-3PO\nDroid\n75.0\n167\n    R2-D2\nDroid\n32.0\n96\n    Leia Organa\nHuman\n49.0\n150\n    Obi-Wan Kenobi\nHuman\n77.0\n182\n    Yoda\nYoda's species\n17.0\n66\n    Palpatine\nHuman\n75.0\n170\n    IG-88\nDroid\n140.0\n200\n    Bossk\nTrandoshan\n113.0\n190\n    Lobot\nHuman\n79.0\n175\n    \n      TIE Advanced x1\n    \n    Darth Vader\nHuman\n136.0\n202\n    \n      Millennium Falcon\n    \n    Chewbacca\nWookiee\n112.0\n228\n    Han Solo\nHuman\n80.0\n180\n    Lando Calrissian\nHuman\n79.0\n177\n    \n      Slave 1\n    \n    Boba Fett\nHuman\n78.2\n183"
  },
  {
    "objectID": "Lectures/Lecture10/CSSS508_Lecture10.html#spanner",
    "href": "Lectures/Lecture10/CSSS508_Lecture10.html#spanner",
    "title": "Roadmap",
    "section": "Spanner",
    "text": "Spanner\n\n\n\ntes_chars %&gt;% \n  group_by(starships) %&gt;%\n  gt(rowname_col = \"name\") %&gt;%\n  tab_header(\n    title = \"Star Wars Characters\", \n    subtitle = \"The Empire Strikes Back\"\n  ) %&gt;%\n  tab_spanner(\n    label = \"Vitals\",\n    columns = vars(mass, height)\n  ) \n\nA tab_spanner() lets us group columns together.\n\n\n\n\n\n\n\n  \n    \n      Star Wars Characters\n    \n    \n      The Empire Strikes Back\n    \n    \n      \n      species\n      \n        Vitals\n      \n    \n    \n      mass\n      height\n    \n  \n  \n    \n      X-wing\n    \n    Luke Skywalker\nHuman\n77.0\n172\n    Wedge Antilles\nHuman\n77.0\n170\n    \n      No Ship\n    \n    C-3PO\nDroid\n75.0\n167\n    R2-D2\nDroid\n32.0\n96\n    Leia Organa\nHuman\n49.0\n150\n    Obi-Wan Kenobi\nHuman\n77.0\n182\n    Yoda\nYoda's species\n17.0\n66\n    Palpatine\nHuman\n75.0\n170\n    IG-88\nDroid\n140.0\n200\n    Bossk\nTrandoshan\n113.0\n190\n    Lobot\nHuman\n79.0\n175\n    \n      TIE Advanced x1\n    \n    Darth Vader\nHuman\n136.0\n202\n    \n      Millennium Falcon\n    \n    Chewbacca\nWookiee\n112.0\n228\n    Han Solo\nHuman\n80.0\n180\n    Lando Calrissian\nHuman\n79.0\n177\n    \n      Slave 1\n    \n    Boba Fett\nHuman\n78.2\n183"
  },
  {
    "objectID": "Lectures/Lecture10/CSSS508_Lecture10.html#column-labels",
    "href": "Lectures/Lecture10/CSSS508_Lecture10.html#column-labels",
    "title": "Roadmap",
    "section": "Column Labels",
    "text": "Column Labels\n\n\n\ntes_chars %&gt;% \n  group_by(starships) %&gt;%\n  gt(rowname_col = \"name\") %&gt;%\n  tab_header(\n    title = \"Star Wars Characters\", \n    subtitle = \"The Empire Strikes Back\"\n  ) %&gt;%\n  tab_spanner(\n    label = \"Vitals\",\n    columns = vars(mass, height)\n  ) %&gt;%\n  cols_label(\n    mass = \"Mass (kg)\",\n    height = \"Height (cm)\",\n    species = \"Species\"\n  )\n\nWe can directly change column names with cols_label()\n\n\n\n\n\n\n\n  \n    \n      Star Wars Characters\n    \n    \n      The Empire Strikes Back\n    \n    \n      \n      Species\n      \n        Vitals\n      \n    \n    \n      Mass (kg)\n      Height (cm)\n    \n  \n  \n    \n      X-wing\n    \n    Luke Skywalker\nHuman\n77.0\n172\n    Wedge Antilles\nHuman\n77.0\n170\n    \n      No Ship\n    \n    C-3PO\nDroid\n75.0\n167\n    R2-D2\nDroid\n32.0\n96\n    Leia Organa\nHuman\n49.0\n150\n    Obi-Wan Kenobi\nHuman\n77.0\n182\n    Yoda\nYoda's species\n17.0\n66\n    Palpatine\nHuman\n75.0\n170\n    IG-88\nDroid\n140.0\n200\n    Bossk\nTrandoshan\n113.0\n190\n    Lobot\nHuman\n79.0\n175\n    \n      TIE Advanced x1\n    \n    Darth Vader\nHuman\n136.0\n202\n    \n      Millennium Falcon\n    \n    Chewbacca\nWookiee\n112.0\n228\n    Han Solo\nHuman\n80.0\n180\n    Lando Calrissian\nHuman\n79.0\n177\n    \n      Slave 1\n    \n    Boba Fett\nHuman\n78.2\n183"
  },
  {
    "objectID": "Lectures/Lecture10/CSSS508_Lecture10.html#number-format",
    "href": "Lectures/Lecture10/CSSS508_Lecture10.html#number-format",
    "title": "Roadmap",
    "section": "Number Format",
    "text": "Number Format\n\n\n\ntes_chars %&gt;% \n  group_by(starships) %&gt;%\n  gt(rowname_col = \"name\") %&gt;%\n  tab_header(\n    title = \"Star Wars Characters\", \n    subtitle = \"The Empire Strikes Back\"\n  ) %&gt;%\n  tab_spanner(\n    label = \"Vitals\",\n    columns = vars(mass, height)\n  ) %&gt;%\n  cols_label(\n    mass = \"Mass (kg)\",\n    height = \"Height (cm)\",\n    species = \"Species\"\n  ) %&gt;%\n  fmt_number(\n    columns = vars(mass),\n    decimals = 0) \n\nWe can adjust cell formats too.\n\n\n\n\n\n\n\n  \n    \n      Star Wars Characters\n    \n    \n      The Empire Strikes Back\n    \n    \n      \n      Species\n      \n        Vitals\n      \n    \n    \n      Mass (kg)\n      Height (cm)\n    \n  \n  \n    \n      X-wing\n    \n    Luke Skywalker\nHuman\n77\n172\n    Wedge Antilles\nHuman\n77\n170\n    \n      No Ship\n    \n    C-3PO\nDroid\n75\n167\n    R2-D2\nDroid\n32\n96\n    Leia Organa\nHuman\n49\n150\n    Obi-Wan Kenobi\nHuman\n77\n182\n    Yoda\nYoda's species\n17\n66\n    Palpatine\nHuman\n75\n170\n    IG-88\nDroid\n140\n200\n    Bossk\nTrandoshan\n113\n190\n    Lobot\nHuman\n79\n175\n    \n      TIE Advanced x1\n    \n    Darth Vader\nHuman\n136\n202\n    \n      Millennium Falcon\n    \n    Chewbacca\nWookiee\n112\n228\n    Han Solo\nHuman\n80\n180\n    Lando Calrissian\nHuman\n79\n177\n    \n      Slave 1\n    \n    Boba Fett\nHuman\n78\n183"
  },
  {
    "objectID": "Lectures/Lecture10/CSSS508_Lecture10.html#align-columns",
    "href": "Lectures/Lecture10/CSSS508_Lecture10.html#align-columns",
    "title": "Roadmap",
    "section": "Align Columns",
    "text": "Align Columns\n\n\n\ntes_chars %&gt;% \n  group_by(starships) %&gt;%\n  gt(rowname_col = \"name\") %&gt;%\n  tab_header(\n    title = \"Star Wars Characters\", \n    subtitle = \"The Empire Strikes Back\"\n  ) %&gt;%\n  tab_spanner(\n    label = \"Vitals\",\n    columns = vars(mass, height)\n  ) %&gt;%\n  cols_label(\n    mass = \"Mass (kg)\",\n    height = \"Height (cm)\",\n    species = \"Species\"\n  ) %&gt;%\n  fmt_number(\n    columns = vars(mass),\n    decimals = 0\n  ) %&gt;%\n  cols_align(\n    align = \"center\",\n    columns = vars(species, mass, height)\n  )\n\n\n\n\n\n\n\n\n  \n    \n      Star Wars Characters\n    \n    \n      The Empire Strikes Back\n    \n    \n      \n      Species\n      \n        Vitals\n      \n    \n    \n      Mass (kg)\n      Height (cm)\n    \n  \n  \n    \n      X-wing\n    \n    Luke Skywalker\nHuman\n77\n172\n    Wedge Antilles\nHuman\n77\n170\n    \n      No Ship\n    \n    C-3PO\nDroid\n75\n167\n    R2-D2\nDroid\n32\n96\n    Leia Organa\nHuman\n49\n150\n    Obi-Wan Kenobi\nHuman\n77\n182\n    Yoda\nYoda's species\n17\n66\n    Palpatine\nHuman\n75\n170\n    IG-88\nDroid\n140\n200\n    Bossk\nTrandoshan\n113\n190\n    Lobot\nHuman\n79\n175\n    \n      TIE Advanced x1\n    \n    Darth Vader\nHuman\n136\n202\n    \n      Millennium Falcon\n    \n    Chewbacca\nWookiee\n112\n228\n    Han Solo\nHuman\n80\n180\n    Lando Calrissian\nHuman\n79\n177\n    \n      Slave 1\n    \n    Boba Fett\nHuman\n78\n183"
  },
  {
    "objectID": "Lectures/Lecture10/CSSS508_Lecture10.html#reorder-groups",
    "href": "Lectures/Lecture10/CSSS508_Lecture10.html#reorder-groups",
    "title": "Roadmap",
    "section": "Reorder Groups",
    "text": "Reorder Groups\n\n\n\ntes_chars %&gt;% \n  group_by(starships) %&gt;%\n  gt(rowname_col = \"name\") %&gt;%\n  tab_header(\n    title = \"Star Wars Characters\", \n    subtitle = \"The Empire Strikes Back\"\n  ) %&gt;%\n  tab_spanner(\n    label = \"Vitals\",\n    columns = vars(mass, height)\n  ) %&gt;%\n  cols_label(\n    mass = \"Mass (kg)\",\n    height = \"Height (cm)\",\n    species = \"Species\"\n  ) %&gt;%\n  fmt_number(\n    columns = vars(mass),\n    decimals = 0\n  ) %&gt;%\n  cols_align(\n    align = \"center\",\n    columns = vars(species, mass, height)\n  ) %&gt;%\n  row_group_order(\n    groups = c(\"X-wing\", \n               \"Millennium Falcon\")\n  )\n\n\n\n\n\n\n\n\n  \n    \n      Star Wars Characters\n    \n    \n      The Empire Strikes Back\n    \n    \n      \n      Species\n      \n        Vitals\n      \n    \n    \n      Mass (kg)\n      Height (cm)\n    \n  \n  \n    \n      X-wing\n    \n    Luke Skywalker\nHuman\n77\n172\n    Wedge Antilles\nHuman\n77\n170\n    \n      Millennium Falcon\n    \n    Chewbacca\nWookiee\n112\n228\n    Han Solo\nHuman\n80\n180\n    Lando Calrissian\nHuman\n79\n177\n    \n      No Ship\n    \n    C-3PO\nDroid\n75\n167\n    R2-D2\nDroid\n32\n96\n    Leia Organa\nHuman\n49\n150\n    Obi-Wan Kenobi\nHuman\n77\n182\n    Yoda\nYoda's species\n17\n66\n    Palpatine\nHuman\n75\n170\n    IG-88\nDroid\n140\n200\n    Bossk\nTrandoshan\n113\n190\n    Lobot\nHuman\n79\n175\n    \n      TIE Advanced x1\n    \n    Darth Vader\nHuman\n136\n202\n    \n      Slave 1\n    \n    Boba Fett\nHuman\n78\n183"
  },
  {
    "objectID": "Lectures/Lecture10/CSSS508_Lecture10.html#big-improvement",
    "href": "Lectures/Lecture10/CSSS508_Lecture10.html#big-improvement",
    "title": "Roadmap",
    "section": "Big Improvement!",
    "text": "Big Improvement!\n\n\n\n\n\n\n\n\n  \n    \n    \n      name\n      species\n      starships\n      mass\n      height\n    \n  \n  \n    Luke Skywalker\nHuman\nX-wing\n77.0\n172\n    C-3PO\nDroid\nNo Ship\n75.0\n167\n    R2-D2\nDroid\nNo Ship\n32.0\n96\n    Darth Vader\nHuman\nTIE Advanced x1\n136.0\n202\n    Leia Organa\nHuman\nNo Ship\n49.0\n150\n    Obi-Wan Kenobi\nHuman\nNo Ship\n77.0\n182\n    Chewbacca\nWookiee\nMillennium Falcon\n112.0\n228\n    Han Solo\nHuman\nMillennium Falcon\n80.0\n180\n    Wedge Antilles\nHuman\nX-wing\n77.0\n170\n    Yoda\nYoda's species\nNo Ship\n17.0\n66\n    Palpatine\nHuman\nNo Ship\n75.0\n170\n    Boba Fett\nHuman\nSlave 1\n78.2\n183\n    IG-88\nDroid\nNo Ship\n140.0\n200\n    Bossk\nTrandoshan\nNo Ship\n113.0\n190\n    Lando Calrissian\nHuman\nMillennium Falcon\n79.0\n177\n    Lobot\nHuman\nNo Ship\n79.0\n175\n  \n  \n  \n\n\n\n\n\n\n\n\n\n\n\n  \n    \n      Star Wars Characters\n    \n    \n      The Empire Strikes Back\n    \n    \n      \n      Species\n      \n        Vitals\n      \n    \n    \n      Mass (kg)\n      Height (cm)\n    \n  \n  \n    \n      X-wing\n    \n    Luke Skywalker\nHuman\n77\n172\n    Wedge Antilles\nHuman\n77\n170\n    \n      Millennium Falcon\n    \n    Chewbacca\nWookiee\n112\n228\n    Han Solo\nHuman\n80\n180\n    Lando Calrissian\nHuman\n79\n177\n    \n      No Ship\n    \n    C-3PO\nDroid\n75\n167\n    R2-D2\nDroid\n32\n96\n    Leia Organa\nHuman\n49\n150\n    Obi-Wan Kenobi\nHuman\n77\n182\n    Yoda\nYoda's species\n17\n66\n    Palpatine\nHuman\n75\n170\n    IG-88\nDroid\n140\n200\n    Bossk\nTrandoshan\n113\n190\n    Lobot\nHuman\n79\n175\n    \n      TIE Advanced x1\n    \n    Darth Vader\nHuman\n136\n202\n    \n      Slave 1\n    \n    Boba Fett\nHuman\n78\n183"
  },
  {
    "objectID": "Lectures/Lecture10/CSSS508_Lecture10.html#latex-tables",
    "href": "Lectures/Lecture10/CSSS508_Lecture10.html#latex-tables",
    "title": "Roadmap",
    "section": "\\(\\LaTeX\\) Tables",
    "text": "\\(\\LaTeX\\) Tables\ngt is a very new package and is somewhat finicky when used in .pdf documents.\nFor tables in \\(\\LaTeX\\)—as is needed for .pdf files—I recommend also looking into the kableExtra or flextable packages.\n. . .\nLike gt, kableExtra and flextable allow the construction of complex tables in either HTML or \\(\\LaTeX\\) using additive syntax similar to ggplot2 and dplyr. flextable is also great for Word tables.\n. . .\nIf you want to edit \\(\\LaTeX\\) documents, you can do it in R using Sweave documents (.Rnw). Alternatively, you may want to work in a dedicated \\(\\LaTeX\\) editor. I recommend Overleaf for this purpose.\n. . .\nRMarkdown has support for a fair amount of basic \\(\\LaTeX\\) syntax if you aren’t trying to get too fancy!"
  },
  {
    "objectID": "Lectures/Lecture10/CSSS508_Lecture10.html#flextable",
    "href": "Lectures/Lecture10/CSSS508_Lecture10.html#flextable",
    "title": "Roadmap",
    "section": "flextable",
    "text": "flextable\n\n\nThis is a table produced by flextable in Word format–including the embedded density images1!\nLook into flextable if you’ll be working in Word or want a table package that handles just about every format."
  },
  {
    "objectID": "Lectures/Lecture10/CSSS508_Lecture10.html#modelsummary",
    "href": "Lectures/Lecture10/CSSS508_Lecture10.html#modelsummary",
    "title": "Roadmap",
    "section": "modelsummary",
    "text": "modelsummary\nThe modelsummary package combines broom, gt, flextable, and kableExtra to produce tabular summaries of almost any model fit in R.\nAn advantage of this package is that it can produce output in every common format: HTML, Markdown, \\(\\LaTeX\\), raw text, and even images (.png or .jpg).\n\nlibrary(modelsummary)\n\nIts key function is msummary() or modelsummary() which creates summary tables of models.\nYou can then build on it using gt, flextable, or kableExtra functions, depending on the selected output format."
  },
  {
    "objectID": "Lectures/Lecture10/CSSS508_Lecture10.html#msummary",
    "href": "Lectures/Lecture10/CSSS508_Lecture10.html#msummary",
    "title": "Roadmap",
    "section": "msummary",
    "text": "msummary\n\n\nLike pander(), msummary() takes a model as an object to make a table.\n\nmod_1 &lt;- lm(mpg ~ wt, data = mtcars)\nmsummary(mod_1)\n\nNote default modelsummary look like pander tables because they use Markdown.\n\n\n\n\n\n\n\n (1)\n\n\n\n\n(Intercept)\n37.285\n\n\n\n(1.878)\n\n\nwt\n−5.344\n\n\n\n(0.559)\n\n\nNum.Obs.\n32\n\n\nR2\n0.753\n\n\nR2 Adj.\n0.745\n\n\nAIC\n166.0\n\n\nBIC\n170.4\n\n\nLog.Lik.\n−80.015\n\n\nRMSE\n2.95"
  },
  {
    "objectID": "Lectures/Lecture10/CSSS508_Lecture10.html#msummary-1",
    "href": "Lectures/Lecture10/CSSS508_Lecture10.html#msummary-1",
    "title": "Roadmap",
    "section": "msummary",
    "text": "msummary\n\n\nYou can present multiple models in msummary using named lists:\n\nmod_1 &lt;- lm(mpg ~ wt, data = mtcars)\nmod_2 &lt;- lm(mpg ~ hp + wt, data = mtcars)\nmod_3 &lt;- lm(mpg ~ hp + wt + factor(am), \n            data = mtcars)\nmodel_list &lt;- list(\"Model 1\" = mod_1, \n                   \"Model 2\" = mod_2, \n                   \"Model 3\" = mod_3)\nmsummary(model_list)\n\nThis allows you to produce the common (and often bad) journal format where one starts with a nonsensical “naive model” then works up to the “full model” justified by the front end of the paper.\n\n\n\n\n\n\n\nModel 1\n Model 2\n Model 3\n\n\n\n\n(Intercept)\n37.285\n37.227\n34.003\n\n\n\n(1.878)\n(1.599)\n(2.643)\n\n\nwt\n−5.344\n−3.878\n−2.879\n\n\n\n(0.559)\n(0.633)\n(0.905)\n\n\nhp\n\n−0.032\n−0.037\n\n\n\n\n(0.009)\n(0.010)\n\n\nfactor(am)1\n\n\n2.084\n\n\n\n\n\n(1.376)\n\n\nNum.Obs.\n32\n32\n32\n\n\nR2\n0.753\n0.827\n0.840\n\n\nR2 Adj.\n0.745\n0.815\n0.823\n\n\nAIC\n166.0\n156.7\n156.1\n\n\nBIC\n170.4\n162.5\n163.5\n\n\nLog.Lik.\n−80.015\n−74.326\n−73.067\n\n\nRMSE\n2.95\n2.47\n2.37"
  },
  {
    "objectID": "Lectures/Lecture10/CSSS508_Lecture10.html#pdf-output",
    "href": "Lectures/Lecture10/CSSS508_Lecture10.html#pdf-output",
    "title": "Roadmap",
    "section": "PDF Output",
    "text": "PDF Output\noutput = \"latex\" produces kableExtra based output well-suited to PDFs.1\n\nmsummary(model_list, output = \"latex\")\n\n\nFor customization, I recommend referring to modelsummary’s documentation."
  },
  {
    "objectID": "Lectures/Lecture10/CSSS508_Lecture10.html#saving-a-modelsummary",
    "href": "Lectures/Lecture10/CSSS508_Lecture10.html#saving-a-modelsummary",
    "title": "Roadmap",
    "section": "Saving a modelsummary",
    "text": "Saving a modelsummary\n\nmsummary(model_list, output = \"ex_table.png\")\n\nTo save a modelsummary object as a file, just provide a path to the output = argument.\nSpecifying a suffix (e.g., .png or .pdf) will control the output format."
  },
  {
    "objectID": "Lectures/Lecture10/CSSS508_Lecture10.html#modelsummary-and-gt",
    "href": "Lectures/Lecture10/CSSS508_Lecture10.html#modelsummary-and-gt",
    "title": "Roadmap",
    "section": "modelsummary and gt",
    "text": "modelsummary and gt\n\n\nYou can select gt output to enable modifying summaries with gt functions.\n\nmsummary(model_list, output = \"gt\") %&gt;%\n  tab_header(\n    title = \"Table 1. Linear Models\", \n    subtitle = \"DV: Miles per Gallon\"\n  )\n\nNote that gt’s support for PDF output is immature–this format is better for HTML or image output.\n\n\n\n\n\n\n\n  \n    \n      Table 1. Linear Models\n    \n    \n      DV: Miles per Gallon\n    \n    \n       \n      Model 1\n      Model 2\n      Model 3\n    \n  \n  \n    (Intercept)\n37.285\n37.227\n34.003\n    \n(1.878)\n(1.599)\n(2.643)\n    wt\n-5.344\n-3.878\n-2.879\n    \n(0.559)\n(0.633)\n(0.905)\n    hp\n\n-0.032\n-0.037\n    \n\n(0.009)\n(0.010)\n    factor(am)1\n\n\n2.084\n    \n\n\n(1.376)\n    Num.Obs.\n32\n32\n32\n    R2\n0.753\n0.827\n0.840\n    R2 Adj.\n0.745\n0.815\n0.823\n    AIC\n166.0\n156.7\n156.1\n    BIC\n170.4\n162.5\n163.5\n    Log.Lik.\n-80.015\n-74.326\n-73.067\n    RMSE\n2.95\n2.47\n2.37"
  },
  {
    "objectID": "Lectures/Lecture10/CSSS508_Lecture10.html#gtsummary",
    "href": "Lectures/Lecture10/CSSS508_Lecture10.html#gtsummary",
    "title": "Roadmap",
    "section": "gtsummary",
    "text": "gtsummary\nThe gtsummary package is similar to modelsummary in that it takes advantage of broom, gt, and kableExtra to provide a flexible table-making framework.\nWhile gtsummary can also produce model tables like modelsummary, it also produces descriptive statistic tables for dataframes2.\n\nlibrary(gtsummary)"
  },
  {
    "objectID": "Lectures/Lecture10/CSSS508_Lecture10.html#tbl_summary",
    "href": "Lectures/Lecture10/CSSS508_Lecture10.html#tbl_summary",
    "title": "Roadmap",
    "section": "tbl_summary()",
    "text": "tbl_summary()\n\n\nBy default, gtsummary tables provide:\n\nFrequencies for categorical and binary variables\nQuantiles of the form “50% (25%, 75%)” for continuous variables\nSample size\n\n\nmtcars %&gt;% \n  select(1:9) %&gt;%\n  tbl_summary() \n\n\n\n\n\n\n\n\n  \n    \n    \n      Characteristic\n      N = 321\n    \n  \n  \n    mpg\n19.2 (15.4, 22.8)\n    cyl\n\n        4\n11 (34%)\n        6\n7 (22%)\n        8\n14 (44%)\n    disp\n196 (121, 326)\n    hp\n123 (97, 180)\n    drat\n3.70 (3.08, 3.92)\n    wt\n3.33 (2.58, 3.61)\n    qsec\n17.71 (16.89, 18.90)\n    vs\n14 (44%)\n    am\n13 (41%)\n  \n  \n  \n    \n      1 Median (IQR); n (%)"
  },
  {
    "objectID": "Lectures/Lecture10/CSSS508_Lecture10.html#grouping-1",
    "href": "Lectures/Lecture10/CSSS508_Lecture10.html#grouping-1",
    "title": "Roadmap",
    "section": "Grouping",
    "text": "Grouping\n\n\nYou can provide a by = argument to do grouped descriptives.\n\nmtcars %&gt;% \n  select(1:9) %&gt;%\n  tbl_summary(by = \"am\") \n\n\n\n\n\n\n\n\n  \n    \n    \n      Characteristic\n      0, N = 191\n      1, N = 131\n    \n  \n  \n    mpg\n17.3 (15.0, 19.2)\n22.8 (21.0, 30.4)\n    cyl\n\n\n        4\n3 (16%)\n8 (62%)\n        6\n4 (21%)\n3 (23%)\n        8\n12 (63%)\n2 (15%)\n    disp\n276 (196, 360)\n120 (79, 160)\n    hp\n175 (117, 193)\n109 (66, 113)\n    drat\n3.15 (3.07, 3.70)\n4.08 (3.85, 4.22)\n    wt\n3.52 (3.44, 3.84)\n2.32 (1.94, 2.78)\n    qsec\n17.82 (17.18, 19.17)\n17.02 (16.46, 18.61)\n    vs\n7 (37%)\n7 (54%)\n  \n  \n  \n    \n      1 Median (IQR); n (%)"
  },
  {
    "objectID": "Lectures/Lecture10/CSSS508_Lecture10.html#adding-gt",
    "href": "Lectures/Lecture10/CSSS508_Lecture10.html#adding-gt",
    "title": "Roadmap",
    "section": "Adding gt",
    "text": "Adding gt\n\n\nIf you select gt output, you can dress it up with gt functions.\n\nmtcars %&gt;% \n  select(1:9) %&gt;%\n  tbl_summary(by = \"am\") %&gt;%\n  as_gt() %&gt;%\n  tab_spanner(\n    label = \"Transmission\", \n    columns = starts_with(\"stat_\")\n  ) %&gt;%\n  tab_header(\n    title = \"Motor Trend Cars\", \n    subtitle = \"Descriptive Statistics\"\n  )\n\nstarts\\_with(\"stat\\_\") here selects the statistic columns created by tbl_summary().\n\n\n\n\n\n\n\n  \n    \n      Motor Trend Cars\n    \n    \n      Descriptive Statistics\n    \n    \n      Characteristic\n      \n        Transmission\n      \n    \n    \n      0, N = 191\n      1, N = 131\n    \n  \n  \n    mpg\n17.3 (15.0, 19.2)\n22.8 (21.0, 30.4)\n    cyl\n\n\n        4\n3 (16%)\n8 (62%)\n        6\n4 (21%)\n3 (23%)\n        8\n12 (63%)\n2 (15%)\n    disp\n276 (196, 360)\n120 (79, 160)\n    hp\n175 (117, 193)\n109 (66, 113)\n    drat\n3.15 (3.07, 3.70)\n4.08 (3.85, 4.22)\n    wt\n3.52 (3.44, 3.84)\n2.32 (1.94, 2.78)\n    qsec\n17.82 (17.18, 19.17)\n17.02 (16.46, 18.61)\n    vs\n7 (37%)\n7 (54%)\n  \n  \n  \n    \n      1 Median (IQR); n (%)"
  },
  {
    "objectID": "Lectures/Lecture10/CSSS508_Lecture10.html#bonus-corrplot",
    "href": "Lectures/Lecture10/CSSS508_Lecture10.html#bonus-corrplot",
    "title": "Roadmap",
    "section": "Bonus: corrplot",
    "text": "Bonus: corrplot\nThe corrplot package has functions for displaying correlograms.\nThese make interpreting the correlations between variables in a data set easier than conventional correlation tables.\nThe first argument is a call to cor(), the base R function for generating a correlation matrix.\nSee the vignette for customization options.\n\nlibrary(corrplot)\ncorrplot(\n  cor(mtcars),\n  addCoef.col = \"white\",\n  addCoefasPercent=T,\n  type=\"upper\", \n  order=\"AOE\")"
  },
  {
    "objectID": "Lectures/Lecture10/CSSS508_Lecture10.html#correlogram",
    "href": "Lectures/Lecture10/CSSS508_Lecture10.html#correlogram",
    "title": "Roadmap",
    "section": "Correlogram",
    "text": "Correlogram"
  },
  {
    "objectID": "Lectures/Lecture10/CSSS508_Lecture10.html#why-reproducibility",
    "href": "Lectures/Lecture10/CSSS508_Lecture10.html#why-reproducibility",
    "title": "",
    "section": "Why Reproducibility?",
    "text": "Why Reproducibility?\nReproducibility is not replication.\n\n\nReplication is running a new study to show if and how results of a prior study hold.\n\nReproducibility is about rerunning the same study and getting the same results.\n\n\nReproducible studies can still be wrong… and in fact reproducibility makes proving a study wrong much easier.\n\n\nReproducibility means:\n\nTransparent research practices.\nMinimal barriers to verifying your results.\n\n\n\nAny study that isn’t reproducible can be trusted only on faith."
  },
  {
    "objectID": "Lectures/Lecture10/CSSS508_Lecture10.html#reproducibility-definitions",
    "href": "Lectures/Lecture10/CSSS508_Lecture10.html#reproducibility-definitions",
    "title": "",
    "section": "Reproducibility Definitions",
    "text": "Reproducibility Definitions\nReproducibility comes in three forms (Stodden 2014):\n\n\n\n\nEmpirical: Repeatability in data collection.\n\nStatistical: Verification with alternate methods of inference.\n\nComputational: Reproducibility in cleaning, organizing, and presenting data and results.\n\n\n\n\nR is particularly well suited to enabling computational reproducibility1.\n\n\nThey will not fix flawed research design, nor offer a remedy for improper application of statistical methods.\nThose are the difficult, non-automatable things you want skills in.\n\n Python is equally well suited. Julia is an option as well."
  },
  {
    "objectID": "Lectures/Lecture10/CSSS508_Lecture10.html#computational-reproducibility",
    "href": "Lectures/Lecture10/CSSS508_Lecture10.html#computational-reproducibility",
    "title": "",
    "section": "Computational Reproducibility",
    "text": "Computational Reproducibility\nElements of computational reproducibility:\n\n\nShared data\n\nResearchers need your original data to verify and replicate your work.\n\n\nShared code\n\nYour code must be shared to make decisions transparent.\n\n\n\n\n\n\nDocumentation\n\nThe operation of code should be either self-documenting or have written descriptions to make its use clear.\n\n\n\n\n\n\n\nVersion Control\n\nDocuments the research process.\nPrevents losing work and facilitates sharing."
  },
  {
    "objectID": "Lectures/Lecture10/CSSS508_Lecture10.html#levels-of-reproducibility",
    "href": "Lectures/Lecture10/CSSS508_Lecture10.html#levels-of-reproducibility",
    "title": "",
    "section": "Levels of Reproducibility",
    "text": "Levels of Reproducibility\nFor academic papers, degrees of reproducibility vary:\n\n\n“Read the article”\nShared data with documentation\nShared data and all code\nInteractive document\nResearch compendium\nDocker compendium: Self-contained ecosystem"
  },
  {
    "objectID": "Lectures/Lecture10/CSSS508_Lecture10.html#interactive-documents",
    "href": "Lectures/Lecture10/CSSS508_Lecture10.html#interactive-documents",
    "title": "",
    "section": "Interactive Documents",
    "text": "Interactive Documents\nInteractive documents — like Quarto docs — combine code and text together into a self-contained document.\n\nLoad and process data\nRun models\nGenerate tables and plots in-line with text\nIn-text values automatically filled in\n\n\nInteractive documents allow a reader to examine your computational methods within the document itself; in effect, they are self-documenting.\n\n\nBy re-running the code, they reproduce your results on demand.\n\n\nCommon Platforms:\n\n\nR: Quarto\n\nPython: Jupyter Notebooks"
  },
  {
    "objectID": "Lectures/Lecture10/CSSS508_Lecture10.html#research-compendia",
    "href": "Lectures/Lecture10/CSSS508_Lecture10.html#research-compendia",
    "title": "Roadmap",
    "section": "Research Compendia",
    "text": "Research Compendia\nA research compendium is a portable, reproducible distribution of an article or other project.\n. . .\nResearch compendia feature:\n\nAn interactive document as the foundation\nFiles organized in a recognizable structure (e.g. an R package)\nClear separation of data, method, and output. Data are read only.\nA well-documented or even preserved computational environment (e.g. Docker)\n\n. . .\nrrtools by UW’s Ben Markwick provides a simplified workflow to accomplish this in R."
  },
  {
    "objectID": "Lectures/Lecture10/CSSS508_Lecture10.html#bookdown",
    "href": "Lectures/Lecture10/CSSS508_Lecture10.html#bookdown",
    "title": "Roadmap",
    "section": "Bookdown",
    "text": "Bookdown\nbookdown — which is integrated into rrtools — can generate documents in the proper format for articles, theses, books, or dissertations.\n. . .\nbookdown provides an accessible alternative to writing \\(\\LaTeX\\) for typesetting and reference management.\n. . .\nYou can integrate citations and automate reference page generation using bibtex files (such as produced by Zotero).\n. . .\nbookdown supports .html output for ease and speed and also renders .pdf files through \\(\\LaTeX\\) for publication-ready documents.\n. . .\nFor University of Washington theses and dissertations, consider Ben Marwick’s huskydown package which uses Markdown but renders via a UW approved \\(\\LaTeX\\) template."
  },
  {
    "objectID": "Lectures/Lecture10/CSSS508_Lecture10.html#organization-and-portability",
    "href": "Lectures/Lecture10/CSSS508_Lecture10.html#organization-and-portability",
    "title": "",
    "section": "Organization and Portability",
    "text": "Organization and Portability"
  },
  {
    "objectID": "Lectures/Lecture10/CSSS508_Lecture10.html#organization-systems",
    "href": "Lectures/Lecture10/CSSS508_Lecture10.html#organization-systems",
    "title": "",
    "section": "Organization Systems",
    "text": "Organization Systems\nOrganizing research projects is something you either do accidentally — and badly — or purposefully with some upfront labor.\n\nUniform organization makes switching between or revisiting projects easier.\n\n\nI suggest something like the following:\n\n\nproject/\n   readme.md\n   data/\n     derived/\n       processed_data.RData\n     raw/\n       core_data.csv\n   docs/\n     paper.Rmd\n   syntax/\n     functions.R\n     models.R\n\n\nThere is a clear hierarchy\n\nWritten content is in docs\n\nCode is in syntax\n\nData is in data\n\n\n\nNaming is uniform\n\nAll lower case\nWords separated by underscores\n\n\nNames are self-descriptive"
  },
  {
    "objectID": "Lectures/Lecture10/CSSS508_Lecture10.html#workflow-versus-project",
    "href": "Lectures/Lecture10/CSSS508_Lecture10.html#workflow-versus-project",
    "title": "",
    "section": "Workflow versus Project",
    "text": "Workflow versus Project\nTo summarize Jenny Bryan, one should separate workflow from projects.\n\n\n\n\nWorkflow\n\nThe software you use to write your code (e.g. RStudio)\nThe location you store a project\nThe specific computer you use\nThe code you ran earlier or typed into your console\n\n\nProject\n\nThe raw data\nThe code that operates on your raw data\nThe packages you use\nThe output files or documents\n\n\n\n\n\n\nProjects should not modify anything outside of the project nor need to be modified by someone else (or future you) to run.\nProjects should be independent of your workflow."
  },
  {
    "objectID": "Lectures/Lecture10/CSSS508_Lecture10.html#portability",
    "href": "Lectures/Lecture10/CSSS508_Lecture10.html#portability",
    "title": "",
    "section": "Portability",
    "text": "Portability\nFor research to be reproducible, it must also be portable. Portable software operates independently of workflow such as fixed file locations.\n\n\nDo Not:\nDo:\n\n\n\n\nUse setwd() in scripts or .Rmd files.\nUse absolute paths except for fixed, immovable sources (secure data).\n\nread_csv(\"C:/my_project/data/my_data.csv\")\n\n\nUse install.packages() in script or .Rmd files.\nUse rm(list=ls()) anywhere but your console.\n\n\n\n\nUse RStudio projects (or the here package) to set directories.\nUse relative paths to load and save files:\n\nread_csv(\"./data/my_data.csv\")\n\n\nLoad all required packages using library().\nClear your workspace when closing RStudio.\n\nSet Tools &gt; Global Options… &gt; Save workspace… to Never"
  },
  {
    "objectID": "Lectures/Lecture10/CSSS508_Lecture10.html#divide-and-conquer",
    "href": "Lectures/Lecture10/CSSS508_Lecture10.html#divide-and-conquer",
    "title": "",
    "section": "Divide and Conquer",
    "text": "Divide and Conquer\nOften you do not want to include all code for a project in one .qmd file:\n\nThe code takes too long to knit.\nThe file is so long it is difficult to read.\n\n\nThere are two ways to deal with this:\n\n\nUse separate .R scripts or .qmd files which save results from complicated parts of a project, then load these results in the main .qmd file.\n\nThis is good for loading and cleaning large data.\nAlso for running slow models.\n\n\n\n\n\n\n\nUse source() to run external .R scripts when the .qmd renders\n\nThis can be used to run large files that aren’t impractically slow.\nAlso good for loading project-specific functions."
  },
  {
    "objectID": "Lectures/Lecture10/CSSS508_Lecture10.html#the-way-of-many-files",
    "href": "Lectures/Lecture10/CSSS508_Lecture10.html#the-way-of-many-files",
    "title": "",
    "section": "The Way of Many Files",
    "text": "The Way of Many Files\nI find it beneficial to break projects into many files:\n\nScripts with specialized functions.\nScripts to load and clean each set of variables.\nScripts to run each set of models and make tables and plots.\nA main .qmd that runs some or all of these to reproduce the entire project.\n\n\nSplitting up a project carries benefits:\n\nOnce a portion of the project is done and in its own file, it is out of your way.\n\nIf you need to make changes, you don’t need to search through huge files.\nEntire sections of the project can be added or removed quickly (e.g. converted to an appendix of an article)\nIt is the only way to build a proper 2 for a project."
  },
  {
    "objectID": "Lectures/Lecture10/CSSS508_Lecture10.html#pipelines",
    "href": "Lectures/Lecture10/CSSS508_Lecture10.html#pipelines",
    "title": "",
    "section": "Pipelines",
    "text": "Pipelines\nProfessional researchers and teams design projects as a pipeline.\n\nA pipeline is a series of consecutive processing elements (scripts and functions in R).\n\n\nEach stage of a pipeline…\n\nHas clearly defined inputs and outputs\nDoes not modify its inputs.\nProduces the exact same output every time it is re-run.\n\n\n\nThis means…\n\nWhen you modify one stage, you only need to rerun subsequent stages.\nDifferent people can work on each stage.\nProblems are isolated within stages.\nYou can depict your project as a directed graph of dependencies."
  },
  {
    "objectID": "Lectures/Lecture10/CSSS508_Lecture10.html#example-pipeline",
    "href": "Lectures/Lecture10/CSSS508_Lecture10.html#example-pipeline",
    "title": "",
    "section": "Example Pipeline",
    "text": "Example Pipeline\nEvery stage (oval) has an unambiguous input and output. Everything that precedes a given stage is a dependency — something required to run it.\n\n\n\nNote: targets is a great package for managing R research pipelines."
  },
  {
    "objectID": "Lectures/Lecture10/CSSS508_Lecture10.html#on-formats",
    "href": "Lectures/Lecture10/CSSS508_Lecture10.html#on-formats",
    "title": "Roadmap",
    "section": "On Formats",
    "text": "On Formats\nAvoid “closed” or commercial software and file formats except where absolutely necessary.\n. . .\nUse open source software and file formats.\n. . .\n\nIt is always better for science:\n\nPeople should be able to explore your research without buying commercial software.\nYou do not want your research to be inaccessible when software is updated.\n\n\n. . .\n\nIt is often just better.\n\nIt is usually updated more quickly\nIt tends to be more secure\nIt is rarely abandoned\n\n\n. . .\nThe ideal: Use software that reads and writes raw text."
  },
  {
    "objectID": "Lectures/Lecture10/CSSS508_Lecture10.html#text",
    "href": "Lectures/Lecture10/CSSS508_Lecture10.html#text",
    "title": "Roadmap",
    "section": "Text",
    "text": "Text\nWriting and formatting documents are two completely separate jobs.\n\nWrite first\nFormat later\nMarkdown was made for this\n\n. . .\nWord processors — like Microsoft Word — try to do both at the same time, usually badly.\nThey waste time by leading you to format instead of writing.\n. . .\nFind a good modular text editor and learn to use it:\n\nAtom\nSublime (Commercial)\nEmacs\nVim"
  },
  {
    "objectID": "Lectures/Lecture10/CSSS508_Lecture10.html#version-control-1",
    "href": "Lectures/Lecture10/CSSS508_Lecture10.html#version-control-1",
    "title": "Roadmap",
    "section": "Version Control",
    "text": "Version Control\nVersion control originates in collaborative software development.\nThe Idea: All changes ever made to a piece of software are documented, saved automatically, and revertible.\n. . .\nVersion control allows all decisions ever made in a research project to be documented automatically.\n. . .\nVersion control can:\n\nProtect your work from destructive changes\nSimplify collaboration by merging changes\nDocument design decisions\nMake your research process transparent"
  },
  {
    "objectID": "Lectures/Lecture10/CSSS508_Lecture10.html#git-and-github",
    "href": "Lectures/Lecture10/CSSS508_Lecture10.html#git-and-github",
    "title": "Roadmap",
    "section": "Git and GitHub",
    "text": "Git and GitHub\ngit is the dominant platform for version control, and GitHub is a free (and now Microsoft owned) platform for hosting repositories.\n. . .\nRepositories are folders on your computer where all changes are tracked by Git.\n. . .\nOnce satisfied with changes, you “commit” them then “push” them to a remote repository that stores your project.\n. . .\nOthers can copy your project (“pull”), and if you permit, make suggestions for changes.\n. . .\nConstantly committing and pulling changes automatically generates a running “history” that documents the evolution of a project.\n. . .\ngit is integrated into RStudio under the Tools menu. It requires some setup.3"
  },
  {
    "objectID": "Lectures/Lecture10/CSSS508_Lecture10.html#github-as-a-cv",
    "href": "Lectures/Lecture10/CSSS508_Lecture10.html#github-as-a-cv",
    "title": "Roadmap",
    "section": "GitHub as a CV",
    "text": "GitHub as a CV\nBeyond archiving projects and allowing sharing, GitHub also serves as a sort of curriculum vitae for the programmer.\n. . .\nBy allowing others to view your projects, you can display competence in programming and research.\n. . .\nIf you are planning on working in the private sector, an active GitHub profile will give you a leg up on the competition.\n. . .\nIf you are aiming for academia, a GitHub account signals technical competence and an interest in research transparency."
  },
  {
    "objectID": "Lectures/Lecture10/CSSS508_Lecture10.html#what-youve-learned",
    "href": "Lectures/Lecture10/CSSS508_Lecture10.html#what-youve-learned",
    "title": "Roadmap",
    "section": "What You’ve Learned",
    "text": "What You’ve Learned\nA lot!\n\nHow to get data into R from a variety of formats\nHow to do “data custodian” work to manipulate and clean data\nHow to make pretty visualizations\nHow to automate with loops and functions\nHow to combine text, calculations, plots, and tables into dynamic R Markdown reports"
  },
  {
    "objectID": "Lectures/Lecture10/CSSS508_Lecture10.html#what-comes-next",
    "href": "Lectures/Lecture10/CSSS508_Lecture10.html#what-comes-next",
    "title": "Roadmap",
    "section": "What Comes Next?",
    "text": "What Comes Next?\n\nStatistical inference (e.g. more CSSS courses)\n\nFunctions for hypothesis testing, hierarchical/mixed effect models, machine learning, survey design, etc. are straightforward to use… once data are clean\nAccess output by working with list structures (like from regression models) or using broom and ggeffects\n\nPractice, practice, practice!\n\nReplicate analyses you’ve done in Excel, SPSS, or Stata\nThink about data using dplyr verbs, tidy data principles\nQuarto for reproducibility\n\nMore advanced projects\n\nUsing version control (git) in RStudio\nInteractive Shiny web apps\nWrite your own functions and put them in a package"
  },
  {
    "objectID": "Lectures/Lecture10/CSSS508_Lecture10.html#course-plugs",
    "href": "Lectures/Lecture10/CSSS508_Lecture10.html#course-plugs",
    "title": "Roadmap",
    "section": "Course Plugs",
    "text": "Course Plugs\nIf you…\n\nhave no stats background yet - SOC504: Applied Social Statistics\nhave (only) finished SOC506 - CSSS510: Maximum Likelihood\nwant to master visualization - CSSS569: Visualizing Data\nstudy events or durations - CSSS544: Event History Analysis4\nwant to use network data - CSSS567: Social Network Analysis\nwant to work with spatial data - CSSS554: Spatial Statistics\nwant to work with time series - CSSS512: Time Series and Panel Data"
  },
  {
    "objectID": "Lectures/Lecture10/CSSS508_Lecture10.html#sjplot",
    "href": "Lectures/Lecture10/CSSS508_Lecture10.html#sjplot",
    "title": "Roadmap",
    "section": "sjPlot",
    "text": "sjPlot\npander tables are great for basic rmarkdown documents, but they’re not generally publication ready.\nThe sjPlot package produces html tables that look more like those you may find in journal articles.\n\nlibrary(sjPlot)"
  },
  {
    "objectID": "Lectures/Lecture10/CSSS508_Lecture10.html#sjplot-tables",
    "href": "Lectures/Lecture10/CSSS508_Lecture10.html#sjplot-tables",
    "title": "Roadmap",
    "section": "sjPlot Tables",
    "text": "sjPlot Tables\ntab_model() will produce tables for most models.\n\nmodel_1 &lt;- lm(mpg ~ wt, data = mtcars)\ntab_model(model_1)\n\n\n\n\n \nmpg\n\n\nPredictors\nEstimates\nCI\np\n\n\n(Intercept)\n37.29\n33.45 – 41.12\n&lt;0.001\n\n\nwt\n-5.34\n-6.49 – -4.20\n&lt;0.001\n\n\nObservations\n32\n\n\nR2 / R2 adjusted\n0.753 / 0.745"
  },
  {
    "objectID": "Lectures/Lecture10/CSSS508_Lecture10.html#multi-model-tables-with-sjtable",
    "href": "Lectures/Lecture10/CSSS508_Lecture10.html#multi-model-tables-with-sjtable",
    "title": "Roadmap",
    "section": "Multi-Model Tables with sjTable",
    "text": "Multi-Model Tables with sjTable\nOften in journal articles you will see a single table that compares multiple models.\nTypically, authors will start with a simple model on the left, then add variables, until they have their most complex model on the right.\nThe sjPlot package makes this easy to do: just give tab_model() more models!"
  },
  {
    "objectID": "Lectures/Lecture10/CSSS508_Lecture10.html#multiple-tab_model",
    "href": "Lectures/Lecture10/CSSS508_Lecture10.html#multiple-tab_model",
    "title": "Roadmap",
    "section": "Multiple tab_model()",
    "text": "Multiple tab_model()\n\nmodel_2 &lt;- lm(mpg ~ hp + wt, data = mtcars)\nmodel_3 &lt;- lm(mpg ~ hp + wt + factor(am), data = mtcars)\ntab_model(model_1, model_2, model_3)\n\n\n\n\n \nmpg\nmpg\nmpg\n\n\nPredictors\nEstimates\nCI\np\nEstimates\nCI\np\nEstimates\nCI\np\n\n\n(Intercept)\n37.29\n33.45 – 41.12\n&lt;0.001\n37.23\n33.96 – 40.50\n&lt;0.001\n34.00\n28.59 – 39.42\n&lt;0.001\n\n\nwt\n-5.34\n-6.49 – -4.20\n&lt;0.001\n-3.88\n-5.17 – -2.58\n&lt;0.001\n-2.88\n-4.73 – -1.02\n0.004\n\n\nhp\n\n\n\n-0.03\n-0.05 – -0.01\n0.001\n-0.04\n-0.06 – -0.02\n0.001\n\n\nam [1]\n\n\n\n\n\n\n2.08\n-0.74 – 4.90\n0.141\n\n\nObservations\n32\n32\n32\n\n\nR2 / R2 adjusted\n0.753 / 0.745\n0.827 / 0.815\n0.840 / 0.823"
  },
  {
    "objectID": "Lectures/Lecture10/CSSS508_Lecture10.html#sjplot-does-a-lot-more",
    "href": "Lectures/Lecture10/CSSS508_Lecture10.html#sjplot-does-a-lot-more",
    "title": "Roadmap",
    "section": "sjPlot does a lot more",
    "text": "sjPlot does a lot more\nThe sjPlot package does a lot more than just make pretty tables. It is a rabbit holeof incredibly powerful and useful functions for displaying descriptive and inferential results.\nView the package website for extensive documentation.\nsjPlot is a bit more complicated than ggeffects but can do just about everything it can do as well; they were written by the same author!\nsjPlot is fairly new but offers a fairly comprehensive solution for ggplot based publication-ready social science data visualization. All graphical functions in sjPlot are based on ggplot2, so it should not take terribly long to figure out."
  },
  {
    "objectID": "Lectures/Lecture10/CSSS508_Lecture10.html#sjplot-example-likert-plots",
    "href": "Lectures/Lecture10/CSSS508_Lecture10.html#sjplot-example-likert-plots",
    "title": "Roadmap",
    "section": "sjPlot Example: Likert plots",
    "text": "sjPlot Example: Likert plots"
  },
  {
    "objectID": "Lectures/Lecture10/CSSS508_Lecture10.html#sjplot-example-crosstabs",
    "href": "Lectures/Lecture10/CSSS508_Lecture10.html#sjplot-example-crosstabs",
    "title": "Roadmap",
    "section": "sjPlot Example: Crosstabs",
    "text": "sjPlot Example: Crosstabs"
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#data-packages",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#data-packages",
    "title": "Roadmap",
    "section": "Data Packages",
    "text": "Data Packages\nR has a big user base. If you are working with a popular data source, it will often have a devoted R package on CRAN or Github.\n. . .\nExamples:\n\nWDI: World Development Indicators (World Bank)\ntidycensus: Census and American Community Survey\nquantmod: financial data from Yahoo, FRED, Google\ngssr: The General Social Survey Cumulative Data (1972-2021)\npsidR: Panel Study of Income Dynamics (basic & public datasets)\n\n. . .\nIf you have an actual data file, you’ll have to import it yourself…"
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#delimited-text-files",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#delimited-text-files",
    "title": "Roadmap",
    "section": "Delimited Text Files",
    "text": "Delimited Text Files\nBesides a package, it’s easiest when data is stored in a text file. The most commonly encountered delimitd file is a .csv.\n. . .\nA comma-separated values (.csv) file looks like the following:\n\"Subject\",\"Depression\",\"Sex\",\"Week\",\"HamD\",\"Imipramine\"\n101,\"Non-endogenous\",\"Second\",0,26,NA\n101,\"Non-endogenous\",\"Second\",1,22,NA\n101,\"Non-endogenous\",\"Second\",2,18,4.04305\n101,\"Non-endogenous\",\"Second\",3,7,3.93183\n101,\"Non-endogenous\",\"Second\",4,4,4.33073\n101,\"Non-endogenous\",\"Second\",5,3,4.36945\n103,\"Non-endogenous\",\"First\",0,33,NA\n103,\"Non-endogenous\",\"First\",1,24,NA\n103,\"Non-endogenous\",\"First\",2,15,2.77259"
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#readr",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#readr",
    "title": "Roadmap",
    "section": "readr",
    "text": "readr\nR has some built-in functions for importing data, such as read.table() and read.csv().\n. . .\n\n\nThe readr package provides similar functions, like read_csv(), that have slightly better features:\n\n\nFaster!\nBetter defaults (e.g. doesn’t automatically convert characters to factors)\nA bit smarter about dates and times\nLoading progress bars for large files\n\n\n\n\n\n\n. . .\nreadr is one of the core tidyverse packages so loading tidyverse will load it too:\n\nlibrary(tidyverse)\n\n. . .\nAlternatively, you can just load readr like so:\n\nlibrary(readr)"
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#readr-importing-example",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#readr-importing-example",
    "title": "Roadmap",
    "section": "readr Importing Example",
    "text": "readr Importing Example\nLet’s import some data about song ranks on the Billboard Hot 100 in 2000:\n\nbillboard_2000_raw &lt;- read_csv(file = \"data/billboard.csv\")\n\n. . .\nHow do we know it loaded?\n. . .\nLet’s look at it!\n\nglimpse(billboard_2000_raw)\n\nRows: 317\nColumns: 81\n$ year         &lt;dbl&gt; 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 200…\n$ artist       &lt;chr&gt; \"2 Pac\", \"2Ge+her\", \"3 Doors Down\", \"3 Doors Down\", \"504 …\n$ track        &lt;chr&gt; \"Baby Don't Cry (Keep...\", \"The Hardest Part Of ...\", \"Kr…\n$ time         &lt;time&gt; 04:22:00, 03:15:00, 03:53:00, 04:24:00, 03:35:00, 03:24:…\n$ date.entered &lt;date&gt; 2000-02-26, 2000-09-02, 2000-04-08, 2000-10-21, 2000-04-…\n$ wk1          &lt;dbl&gt; 87, 91, 81, 76, 57, 51, 97, 84, 59, 76, 84, 57, 50, 71, 7…\n$ wk2          &lt;dbl&gt; 82, 87, 70, 76, 34, 39, 97, 62, 53, 76, 84, 47, 39, 51, 6…\n$ wk3          &lt;dbl&gt; 72, 92, 68, 72, 25, 34, 96, 51, 38, 74, 75, 45, 30, 28, 5…\n$ wk4          &lt;dbl&gt; 77, NA, 67, 69, 17, 26, 95, 41, 28, 69, 73, 29, 28, 18, 4…\n$ wk5          &lt;dbl&gt; 87, NA, 66, 67, 17, 26, 100, 38, 21, 68, 73, 23, 21, 13, …\n$ wk6          &lt;dbl&gt; 94, NA, 57, 65, 31, 19, NA, 35, 18, 67, 69, 18, 19, 13, 3…\n$ wk7          &lt;dbl&gt; 99, NA, 54, 55, 36, 2, NA, 35, 16, 61, 68, 11, 20, 11, 34…\n$ wk8          &lt;dbl&gt; NA, NA, 53, 59, 49, 2, NA, 38, 14, 58, 65, 9, 17, 1, 29, …\n$ wk9          &lt;dbl&gt; NA, NA, 51, 62, 53, 3, NA, 38, 12, 57, 73, 9, 17, 1, 27, …\n$ wk10         &lt;dbl&gt; NA, NA, 51, 61, 57, 6, NA, 36, 10, 59, 83, 11, 17, 2, 30,…\n$ wk11         &lt;dbl&gt; NA, NA, 51, 61, 64, 7, NA, 37, 9, 66, 92, 1, 17, 2, 36, N…\n$ wk12         &lt;dbl&gt; NA, NA, 51, 59, 70, 22, NA, 37, 8, 68, NA, 1, 3, 3, 37, N…\n$ wk13         &lt;dbl&gt; NA, NA, 47, 61, 75, 29, NA, 38, 6, 61, NA, 1, 3, 3, 39, N…\n$ wk14         &lt;dbl&gt; NA, NA, 44, 66, 76, 36, NA, 49, 1, 67, NA, 1, 7, 4, 49, N…\n$ wk15         &lt;dbl&gt; NA, NA, 38, 72, 78, 47, NA, 61, 2, 59, NA, 4, 10, 12, 57,…\n$ wk16         &lt;dbl&gt; NA, NA, 28, 76, 85, 67, NA, 63, 2, 63, NA, 8, 17, 11, 63,…\n$ wk17         &lt;dbl&gt; NA, NA, 22, 75, 92, 66, NA, 62, 2, 67, NA, 12, 25, 13, 65…\n$ wk18         &lt;dbl&gt; NA, NA, 18, 67, 96, 84, NA, 67, 2, 71, NA, 22, 29, 15, 68…\n$ wk19         &lt;dbl&gt; NA, NA, 18, 73, NA, 93, NA, 83, 3, 79, NA, 23, 29, 18, 79…\n$ wk20         &lt;dbl&gt; NA, NA, 14, 70, NA, 94, NA, 86, 4, 89, NA, 43, 40, 20, 86…\n$ wk21         &lt;dbl&gt; NA, NA, 12, NA, NA, NA, NA, NA, 5, NA, NA, 44, 43, 30, NA…\n$ wk22         &lt;dbl&gt; NA, NA, 7, NA, NA, NA, NA, NA, 5, NA, NA, NA, 50, 40, NA,…\n$ wk23         &lt;dbl&gt; NA, NA, 6, NA, NA, NA, NA, NA, 6, NA, NA, NA, NA, 39, NA,…\n$ wk24         &lt;dbl&gt; NA, NA, 6, NA, NA, NA, NA, NA, 9, NA, NA, NA, NA, 44, NA,…\n$ wk25         &lt;dbl&gt; NA, NA, 6, NA, NA, NA, NA, NA, 13, NA, NA, NA, NA, NA, NA…\n$ wk26         &lt;dbl&gt; NA, NA, 5, NA, NA, NA, NA, NA, 14, NA, NA, NA, NA, NA, NA…\n$ wk27         &lt;dbl&gt; NA, NA, 5, NA, NA, NA, NA, NA, 16, NA, NA, NA, NA, NA, NA…\n$ wk28         &lt;dbl&gt; NA, NA, 4, NA, NA, NA, NA, NA, 23, NA, NA, NA, NA, NA, NA…\n$ wk29         &lt;dbl&gt; NA, NA, 4, NA, NA, NA, NA, NA, 22, NA, NA, NA, NA, NA, NA…\n$ wk30         &lt;dbl&gt; NA, NA, 4, NA, NA, NA, NA, NA, 33, NA, NA, NA, NA, NA, NA…\n$ wk31         &lt;dbl&gt; NA, NA, 4, NA, NA, NA, NA, NA, 36, NA, NA, NA, NA, NA, NA…\n$ wk32         &lt;dbl&gt; NA, NA, 3, NA, NA, NA, NA, NA, 43, NA, NA, NA, NA, NA, NA…\n$ wk33         &lt;dbl&gt; NA, NA, 3, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ wk34         &lt;dbl&gt; NA, NA, 3, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ wk35         &lt;dbl&gt; NA, NA, 4, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ wk36         &lt;dbl&gt; NA, NA, 5, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ wk37         &lt;dbl&gt; NA, NA, 5, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ wk38         &lt;dbl&gt; NA, NA, 9, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ wk39         &lt;dbl&gt; NA, NA, 9, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ wk40         &lt;dbl&gt; NA, NA, 15, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ wk41         &lt;dbl&gt; NA, NA, 14, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ wk42         &lt;dbl&gt; NA, NA, 13, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ wk43         &lt;dbl&gt; NA, NA, 14, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ wk44         &lt;dbl&gt; NA, NA, 16, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ wk45         &lt;dbl&gt; NA, NA, 17, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ wk46         &lt;dbl&gt; NA, NA, 21, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ wk47         &lt;dbl&gt; NA, NA, 22, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ wk48         &lt;dbl&gt; NA, NA, 24, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ wk49         &lt;dbl&gt; NA, NA, 28, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ wk50         &lt;dbl&gt; NA, NA, 33, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ wk51         &lt;dbl&gt; NA, NA, 42, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ wk52         &lt;dbl&gt; NA, NA, 42, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ wk53         &lt;dbl&gt; NA, NA, 49, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ wk54         &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ wk55         &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ wk56         &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ wk57         &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ wk58         &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ wk59         &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ wk60         &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ wk61         &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ wk62         &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ wk63         &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ wk64         &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ wk65         &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ wk66         &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ wk67         &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ wk68         &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ wk69         &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ wk70         &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ wk71         &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ wk72         &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ wk73         &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ wk74         &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ wk75         &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ wk76         &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…"
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#did-it-load",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#did-it-load",
    "title": "",
    "section": "Did It Load?",
    "text": "Did It Load?\n\nlibrary(dplyr)\ndim(billboard_2000_raw)\n\n[1] 317  81\n\nnames(billboard_2000_raw) %&gt;% \n  head(20)\n\n [1] \"year\"         \"artist\"       \"track\"        \"time\"         \"date.entered\"\n [6] \"wk1\"          \"wk2\"          \"wk3\"          \"wk4\"          \"wk5\"         \n[11] \"wk6\"          \"wk7\"          \"wk8\"          \"wk9\"          \"wk10\"        \n[16] \"wk11\"         \"wk12\"         \"wk13\"         \"wk14\"         \"wk15\""
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#alternate-solution",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#alternate-solution",
    "title": "Roadmap",
    "section": "Alternate Solution",
    "text": "Alternate Solution\nWhen you import data from an external file you’ll also see it in the Global Environment tab in the upper-right pane of RStudio:\n\n\n\nYou can also import the data manually!\nIn the upper right-hand pane of RStudio (make sure you’re in the Environment tab), select:\nImport Dataset &gt; From Text (readr) and browse to the file on your computer1.\n\n\nOnce you’ve imported the data, you can copy/paste the import code from the console into your file!!\nThis makes the process reproducible!"
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#importing-other-data-types",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#importing-other-data-types",
    "title": "",
    "section": "Importing Other Data Types",
    "text": "Importing Other Data Types\n\nFor Excel files (.xls or .xlsx), use package readxl\n\nFor Google Docs Spreadsheets, use package googlesheets4\n\nFor Stata, SPSS, and SAS files, use package haven (tidyverse)\nFor Stata, SPSS, and Minitab, use package foreign\n\n\n\n\nNote: You won’t keep text formatting, color, comments, or merged cells!!"
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#writing-delimited-files",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#writing-delimited-files",
    "title": "Roadmap",
    "section": "Writing Delimited Files",
    "text": "Writing Delimited Files\nGetting data out of R into a delimited file is very similar to getting it into R:\n\nwrite_csv(billboard_2000_raw, path = \"data/billboard_data.csv\")\n\nThis saved the data we pulled off the web in a file called billboard_data.csv in the data folder of my working directory.\n. . .\nHowever, saving data in this way will not preserve R data types since delimited files code everything as a character string.\n. . .\nTo save R objects and all associated metadata you have two options:\n\n.Rds format:.Rdata or .Rda format:\n\n\n\nUsed for single objects, doesn’t save original the object name\nSave: write_rds(old_object_name, \"path.Rds\")\nLoad: new_object_name &lt;- read_rds(\"path.Rds\")\n\n\n\n\nUsed for saving multiple files where the original object names are preserved\nSave: save(object1, object2, ... , file = \"path.Rdata\")\nLoad: load(\"path.Rdata\") without assignment operator"
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#initial-spot-checks",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#initial-spot-checks",
    "title": "Roadmap",
    "section": "Initial Spot Checks",
    "text": "Initial Spot Checks\nFirst things to check after loading new data:\n\n\nDid all the rows/columns from the original file make it in?\n\nCheck using dim() or str()\n\nAre the column names in good shape?\n\nUse names() to check; fix with rename()10\n\nAre there “decorative” blank rows or columns to remove?\n\nfilter() or select() out those rows/columns11\n\nHow are missing values represented: NA, \" \" (blank), . (period), 999?\n\nRead in the data again specifying NAs with the na argument\n\nAre there character data (e.g. ZIP codes with leading zeroes) being incorrectly represented as numeric or vice versa?\n\nRead in the data again specifying desired col_types"
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#tidy-data",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#tidy-data",
    "title": "",
    "section": "Tidy Data",
    "text": "Tidy Data\nTidy data (aka “long data”) are such that:\n\n\nThe values for a single observation are in their own row.\nThe values for a single variable are in their own column.\nThere is only one value per cell.\n\n\n\nWhy do we want tidy data?\n\n\nEasier to understand many rows than many columns1\n\nRequired for plotting in ggplot22\n\nRequired for many types of statistical procedures (e.g. hierarchical or mixed effects models)\nFewer issues with missing values and “imbalanced” repeated measures data\nHaving a consistent method for storing data means it’s easier to learn the tools to work with it since there’s an underlying uniformity.\n\n\nPlacing variable sin columns also leverages R’s vectorized nature, i.e. most built-in R functions work with values of vectors.In fact, all tidyverse functions are designed to work with tidy data."
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#slightly-messy-data",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#slightly-messy-data",
    "title": "Roadmap",
    "section": "Slightly “Messy” Data",
    "text": "Slightly “Messy” Data\n\n\n\n\n\nProgram\nFirst Year\nSecond Year\n\n\n\n\nEvans School\n10\n6\n\n\nArts & Sciences\n5\n6\n\n\nPublic Health\n2\n3\n\n\nOther\n5\n1\n\n\n\n\n\nWhat is an observation?\n\nA group of students from a program of a given year\n\nWhat are the variables?\n\nProgram, Year\n\nWhat are the values?\n\nProgram: Evans School, Arts & Sciences, Public Health, Other\nYear: First, Second – in column headings. Bad!\nCount: spread over two columns!"
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#tidy-version",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#tidy-version",
    "title": "Roadmap",
    "section": "Tidy Version",
    "text": "Tidy Version\n\n\n\n\n\nProgram\nYear\nCount\n\n\n\n\nEvans School\nFirst\n10\n\n\nEvans School\nSecond\n6\n\n\nArts & Sciences\nFirst\n5\n\n\nArts & Sciences\nSecond\n6\n\n\nPublic Health\nFirst\n2\n\n\nPublic Health\nSecond\n3\n\n\nOther\nFirst\n5\n\n\nOther\nSecond\n1\n\n\n\n\n\nEach variable is a column.\nEach observation is a row.\nEach cell has a single value."
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#billboard-is-just-ugly-messy",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#billboard-is-just-ugly-messy",
    "title": "Roadmap",
    "section": "Billboard is Just Ugly-Messy",
    "text": "Billboard is Just Ugly-Messy\n\n\n# A tibble: 10 × 81\n    year artist     track time  date.entered   wk1   wk2   wk3   wk4   wk5   wk6\n   &lt;int&gt; &lt;chr&gt;      &lt;chr&gt; &lt;tim&gt; &lt;date&gt;       &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt;\n 1  2000 2 Pac      Baby… 04:22 2000-02-26      87    82    72    77    87    94\n 2  2000 2Ge+her    The … 03:15 2000-09-02      91    87    92    NA    NA    NA\n 3  2000 3 Doors D… Kryp… 03:53 2000-04-08      81    70    68    67    66    57\n 4  2000 3 Doors D… Loser 04:24 2000-10-21      76    76    72    69    67    65\n 5  2000 504 Boyz   Wobb… 03:35 2000-04-15      57    34    25    17    17    31\n 6  2000 98^0       Give… 03:24 2000-08-19      51    39    34    26    26    19\n 7  2000 A*Teens    Danc… 03:44 2000-07-08      97    97    96    95   100    NA\n 8  2000 Aaliyah    I Do… 04:15 2000-01-29      84    62    51    41    38    35\n 9  2000 Aaliyah    Try … 04:03 2000-03-18      59    53    38    28    21    18\n10  2000 Adams, Yo… Open… 05:30 2000-08-26      76    76    74    69    68    67\n# ℹ 70 more variables: wk7 &lt;int&gt;, wk8 &lt;int&gt;, wk9 &lt;int&gt;, wk10 &lt;int&gt;, wk11 &lt;int&gt;,\n#   wk12 &lt;int&gt;, wk13 &lt;int&gt;, wk14 &lt;int&gt;, wk15 &lt;int&gt;, wk16 &lt;int&gt;, wk17 &lt;int&gt;,\n#   wk18 &lt;int&gt;, wk19 &lt;int&gt;, wk20 &lt;int&gt;, wk21 &lt;int&gt;, wk22 &lt;int&gt;, wk23 &lt;int&gt;,\n#   wk24 &lt;int&gt;, wk25 &lt;int&gt;, wk26 &lt;int&gt;, wk27 &lt;int&gt;, wk28 &lt;int&gt;, wk29 &lt;int&gt;,\n#   wk30 &lt;int&gt;, wk31 &lt;int&gt;, wk32 &lt;int&gt;, wk33 &lt;int&gt;, wk34 &lt;int&gt;, wk35 &lt;int&gt;,\n#   wk36 &lt;int&gt;, wk37 &lt;int&gt;, wk38 &lt;int&gt;, wk39 &lt;int&gt;, wk40 &lt;int&gt;, wk41 &lt;int&gt;,\n#   wk42 &lt;int&gt;, wk43 &lt;int&gt;, wk44 &lt;int&gt;, wk45 &lt;int&gt;, wk46 &lt;int&gt;, wk47 &lt;int&gt;, …\n\n\n\n\nWeek columns continue up to wk76!"
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#billboard",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#billboard",
    "title": "Roadmap",
    "section": "Billboard",
    "text": "Billboard\n\n\nWhat are the observations in the data?\n\nSong on the Billboard chart each week\n\nWhat are the variables in the data?\n\nYear, artist, track, song length, date entered Hot 100, week since first entered Hot 100 (spread over many columns), rank during week (spread over many columns)\n\nWhat are the values in the data?\n\ne.g. 2000; 3 Doors Down; Kryptonite; 3 minutes 53 seconds; April 8, 2000; Week 3 (stuck in column headings); rank 68 (spread over many columns)"
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#tidyr",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#tidyr",
    "title": "Roadmap",
    "section": "tidyr",
    "text": "tidyr\nThe tidyr package provides functions to tidy up data.\n. . .\nKey functions:\n\npivot_longer(): takes a set of columns and pivots them down (“longer”) to make two new columns (which you can name yourself):\n\nA name column that stores the original column names\nA value with the values in those original columns\n\n\n. . .\n\npivot_wider(): inverts pivot_longer() by taking two columns and pivoting them up and across (“wider”) into multiple columns"
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#pivot_longer",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#pivot_longer",
    "title": "Roadmap",
    "section": "pivot_longer()",
    "text": "pivot_longer()\nThis function usually takes three arguments:\n\n\ncols: The columns that need to be pivoted (are not variables)\nnames_to: Names the new variable that is stored in multiple columns\nvalues_to: Names the variable stored in the cell values"
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#example-of-pivot_longer",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#example-of-pivot_longer",
    "title": "",
    "section": "Example of pivot_longer()\n",
    "text": "Example of pivot_longer()\n\n\nbillboard_2000 &lt;- billboard_2000_raw |&gt; \n1  pivot_longer(cols = starts_with(\"wk\"),\n               names_to =\"week\",\n               values_to = \"rank\")\n\nbillboard_2000 |&gt; head(10)\n\n\n1\n\nstarts_with() is a helper function from tidyselect that helps select certain common patterns. We could have also used cols = wk1:wk76.\n\n\n\n\n\n\n# A tibble: 10 × 7\n    year artist track                   time   date.entered week   rank\n   &lt;int&gt; &lt;chr&gt;  &lt;chr&gt;                   &lt;time&gt; &lt;date&gt;       &lt;chr&gt; &lt;int&gt;\n 1  2000 2 Pac  Baby Don't Cry (Keep... 04:22  2000-02-26   wk1      87\n 2  2000 2 Pac  Baby Don't Cry (Keep... 04:22  2000-02-26   wk2      82\n 3  2000 2 Pac  Baby Don't Cry (Keep... 04:22  2000-02-26   wk3      72\n 4  2000 2 Pac  Baby Don't Cry (Keep... 04:22  2000-02-26   wk4      77\n 5  2000 2 Pac  Baby Don't Cry (Keep... 04:22  2000-02-26   wk5      87\n 6  2000 2 Pac  Baby Don't Cry (Keep... 04:22  2000-02-26   wk6      94\n 7  2000 2 Pac  Baby Don't Cry (Keep... 04:22  2000-02-26   wk7      99\n 8  2000 2 Pac  Baby Don't Cry (Keep... 04:22  2000-02-26   wk8      NA\n 9  2000 2 Pac  Baby Don't Cry (Keep... 04:22  2000-02-26   wk9      NA\n10  2000 2 Pac  Baby Don't Cry (Keep... 04:22  2000-02-26   wk10     NA\n\n\n\nNow we have a single week column!"
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#lots-of-missing-values",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#lots-of-missing-values",
    "title": "Roadmap",
    "section": "Lots of Missing Values?!",
    "text": "Lots of Missing Values?!\n\nglimpse(billboard_2000)\n\nRows: 24,092\nColumns: 7\n$ year         &lt;int&gt; 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 200…\n$ artist       &lt;chr&gt; \"2 Pac\", \"2 Pac\", \"2 Pac\", \"2 Pac\", \"2 Pac\", \"2 Pac\", \"2 …\n$ track        &lt;chr&gt; \"Baby Don't Cry (Keep...\", \"Baby Don't Cry (Keep...\", \"Ba…\n$ time         &lt;time&gt; 04:22:00, 04:22:00, 04:22:00, 04:22:00, 04:22:00, 04:22:…\n$ date.entered &lt;date&gt; 2000-02-26, 2000-02-26, 2000-02-26, 2000-02-26, 2000-02-…\n$ week         &lt;chr&gt; \"wk1\", \"wk2\", \"wk3\", \"wk4\", \"wk5\", \"wk6\", \"wk7\", \"wk8\", \"…\n$ rank         &lt;int&gt; 87, 82, 72, 77, 87, 94, 99, NA, NA, NA, NA, NA, NA, NA, N…\n\n\n\nIt looks like 2 Pac’s song “Baby Don’t Cry” was only on the Billboard Hot 100 for 7 weeks and then dropped off the charts.\n\n. . .\n\nsummary(billboard_2000$rank)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n   1.00   26.00   51.00   51.05   76.00  100.00   18785 \n\n\n\nWe don’t want to keep the 18785 rows with missing ranks."
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#pivoting-better-values_drop_na",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#pivoting-better-values_drop_na",
    "title": "Roadmap",
    "section": "Pivoting Better: values_drop_na",
    "text": "Pivoting Better: values_drop_na\nAdding the argument values_drop_na = TRUE to pivot_longer() will remove rows with missing ranks. Since these NAs don’t really represent unknown observations (i.e. they were forced to exist by the structure of the dataset) this is an appropriate approach here.\n\nbillboard_2000 &lt;- billboard_2000_raw %&gt;%\n  pivot_longer(cols = wk1:wk76, \n               names_to = \"week\", \n               values_to = \"rank\", \n               values_drop_na = TRUE)\nsummary(billboard_2000$rank)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   1.00   26.00   51.00   51.05   76.00  100.00 \n\n\n. . .\nNo more NA values!\n\ndim(billboard_2000)\n\n[1] 5307    7\n\n\nAnd way fewer rows!"
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#parse_number",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#parse_number",
    "title": "Roadmap",
    "section": "parse_number()",
    "text": "parse_number()\nThe week column is of the type character, but it should be numeric.\n\nhead(billboard_2000$week)\n\n[1] \"wk1\" \"wk2\" \"wk3\" \"wk4\" \"wk5\" \"wk6\"\n\n\n. . .\nparse_number() grabs just the numeric information from a character string:\n\nbillboard_2000 &lt;- billboard_2000 |&gt; \n2    mutate(week = parse_number(week))\nsummary(billboard_2000$week)\n\n\n2\n\nmutate() creates a new (or overwrites an existing) column. We will cover it in-depth next week.\n\n\n\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   1.00    5.00   10.00   11.47   16.00   65.00 \n\n\n. . .\nMore sophisticated tools for character strings will be covered later in this course!"
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#lubridate",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#lubridate",
    "title": "",
    "section": "lubridate",
    "text": "lubridate\nThe package lubridate (part of the tidyverse!) has a very large number of functions you can use!\n\n\nConverting dates/times between formats (DD-MM-YY to YY-MM-DD)\nExtracting dates/times (day of week, month, leap years, etc.)\nMath with dates/times (time zone conversions, etc.)\n\n\n\nThere’s too much to cover all of it, but I’ll run through a few examples."
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#dates-in-billboard_2000",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#dates-in-billboard_2000",
    "title": "",
    "section": "Dates in billboard_2000\n",
    "text": "Dates in billboard_2000\n\n\nbillboard_2000 %&gt;% \n  select(date.entered) %&gt;% \n  head(10)\n\n# A tibble: 10 × 1\n   date.entered\n   &lt;date&gt;      \n 1 2000-02-26  \n 2 2000-02-26  \n 3 2000-02-26  \n 4 2000-02-26  \n 5 2000-02-26  \n 6 2000-02-26  \n 7 2000-02-26  \n 8 2000-09-02  \n 9 2000-09-02  \n10 2000-09-02"
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#extracting-year-month-or-day",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#extracting-year-month-or-day",
    "title": "",
    "section": "Extracting Year, Month, or Day",
    "text": "Extracting Year, Month, or Day\n\nlibrary(lubridate)\nhead(billboard_2000$date.entered, 5)\n\n[1] \"2000-02-26\" \"2000-02-26\" \"2000-02-26\" \"2000-02-26\" \"2000-02-26\"\n\nyear(billboard_2000$date.entered) %&gt;% \n  head(5)\n\n[1] 2000 2000 2000 2000 2000\n\nmonth(billboard_2000$date.entered) %&gt;% \n  head(5)\n\n[1] 2 2 2 2 2\n\nday(billboard_2000$date.entered) %&gt;% \n  head(5)\n\n[1] 26 26 26 26 26"
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#extracting-weekday-quarter-and-leap-year-boolean",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#extracting-weekday-quarter-and-leap-year-boolean",
    "title": "",
    "section": "Extracting Weekday, Quarter, and Leap Year Boolean",
    "text": "Extracting Weekday, Quarter, and Leap Year Boolean\n\nwday(billboard_2000$date.entered) %&gt;% \n  head(5)\n\n[1] 7 7 7 7 7\n\nquarter(billboard_2000$date.entered) %&gt;% \n  head(5)\n\n[1] 1 1 1 1 1\n\nleap_year(billboard_2000$date.entered) %&gt;% \n   head(5)\n\n[1] TRUE TRUE TRUE TRUE TRUE"
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#summary",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#summary",
    "title": "",
    "section": "Summary",
    "text": "Summary\n\nImporting/Exporting Data: readr\n\nReshaping data: tidyr\n\nDates and times lubridate\n\n\nLet’s take a 10 minute break, then reconvene for an activity!"
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#activity",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#activity",
    "title": "Roadmap",
    "section": "Activity!",
    "text": "Activity!\nIn groups of 2-3, you will use the Billboard data to investigate a question:\n\nWrite down a question of interest that could be studied with this data\n\nWhich/how many artists had #1 hits?\nHow does rank for each song change over time?\nIs there a relationship between highest rank and length of song?\n\nMake the Billboard data tidy, perhaps using the code from this lecture.\nPerform additional steps (if necessary) to help answer your question:\n\nPerhaps using filter, select, group_by, mutate, summarize, etc.\n\nMake a plot or table that answers your question and write down your answer in a sentence.\nSend me your question, plot/table, and written answer on Canvas"
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#example-question",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#example-question",
    "title": "Roadmap",
    "section": "Example: Question",
    "text": "Example: Question\nQuestion: Do songs that hit #1 have a different trajectory than those that don’t?\n\nbillboard_2000_question &lt;- billboard_2000 %&gt;%\n    group_by(artist, track) %&gt;%\n    mutate(`Weeks at #1` = sum(rank == 1),\n           `Peak Rank`   = ifelse(any(rank == 1),\n                                  \"Hit #1\",\n                                  \"Didn't hit #1\")) \n\n\n\nNote: any(rank==1) checks to see if any value of rank is equal to one for the given artist and track"
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#example-visualization",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#example-visualization",
    "title": "Roadmap",
    "section": "Example Visualization",
    "text": "Example Visualization\n\nCodeCharts of 2000: Beauty!\n\n\n\nlibrary(ggplot2)\nlibrary(ggthemes)\nbillboard_trajectories &lt;- \n  ggplot(data = billboard_2000_question,\n         aes(x = week, y = rank, group = track,\n             color = `Peak Rank`)) +\n  geom_line(aes(size = `Peak Rank`), alpha = 0.4) +\n  theme_tufte() +\n  xlab(\"Week\") + ylab(\"Rank\") +\n  scale_color_manual(values = c(\"black\", \"red\")) +\n  scale_size_manual(values = c(0.25, 1)) +\n  theme(legend.position = c(0.90, 0.75),\n        legend.background = element_rect(fill = \"transparent\"))\n\n\n\n\nbillboard_trajectories\n\n\n\n\n\n\n\n\n\nSongs that reach #1 on the Billboard charts appear to last &gt;20 weeks on the charts, while other songs very rarely make it past that point."
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#homework-5",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#homework-5",
    "title": "",
    "section": "Homework 5",
    "text": "Homework 5\n*On Course Website!*"
  },
  {
    "objectID": "Lectures/Lecture6/CSSS508_Lecture6.html",
    "href": "Lectures/Lecture6/CSSS508_Lecture6.html",
    "title": "Preamble: Data Structures and Types in R",
    "section": "",
    "text": "Data Structures & Types\nCS&SS 508 • Lecture 6\n7 November 2023\nVictoria Sass"
  },
  {
    "objectID": "Lectures/Lecture6/CSSS508_Lecture6.html#how-is-my-data-stored",
    "href": "Lectures/Lecture6/CSSS508_Lecture6.html#how-is-my-data-stored",
    "title": "Preamble: Data Structures and Types in R",
    "section": "How is my data stored?",
    "text": "How is my data stored?\nUnder the hood, R stores different types of data in different ways.\n. . .\n\ne.g., R knows that 4.0 is a number, and that \"Vic\" is not a number.\n\n. . .\nSo what exactly are the common data types, and how do we know what R is doing?"
  },
  {
    "objectID": "Lectures/Lecture6/CSSS508_Lecture6.html#data-types",
    "href": "Lectures/Lecture6/CSSS508_Lecture6.html#data-types",
    "title": "Preamble: Data Structures and Types in R",
    "section": "Data Types",
    "text": "Data Types\n\nnumeric: c(1, 10*3, 4, -3.14)\n\n. . .\n\ncharacter: c(\"red\", \"blue\", \"blue\")\n\n. . .\n\nfactor: factor(c(\"red\", \"blue\", \"blue\"))\n\n. . .\n\nlogical: c(FALSE, TRUE, TRUE)"
  },
  {
    "objectID": "Lectures/Lecture6/CSSS508_Lecture6.html#note-on-factor-vectors",
    "href": "Lectures/Lecture6/CSSS508_Lecture6.html#note-on-factor-vectors",
    "title": "Preamble: Data Structures and Types in R",
    "section": "Note on Factor Vectors",
    "text": "Note on Factor Vectors\nFactors are categorical data that encode a (modest) number of levels, like for experimental group or geographic region:\n\ntest_group &lt;- factor(c(\"Treatment\", \"Placebo\", \"Placebo\", \"Treatment\"))\ntest_group\n\n[1] Treatment Placebo   Placebo   Treatment\nLevels: Placebo Treatment\n\n\n. . .\nWhy use factor instead of character? Because factor data can go into a statistical model1."
  },
  {
    "objectID": "Lectures/Lecture6/CSSS508_Lecture6.html#note-on-logical-vectors",
    "href": "Lectures/Lecture6/CSSS508_Lecture6.html#note-on-logical-vectors",
    "title": "Preamble: Data Structures and Types in R",
    "section": "Note on Logical Vectors",
    "text": "Note on Logical Vectors\nRemember that logical data in R takes on boolean TRUE or FALSE values.\n. . .\nYou can do math with logical values, because R makes TRUE = 1 and FALSE = 0:\n\nmy_booleans &lt;- c(TRUE, TRUE, FALSE, FALSE, FALSE)\nsum(my_booleans)\n\n[1] 2\n\nmean(my_booleans)\n\n[1] 0.4"
  },
  {
    "objectID": "Lectures/Lecture6/CSSS508_Lecture6.html#missing-or-infinite-data-types",
    "href": "Lectures/Lecture6/CSSS508_Lecture6.html#missing-or-infinite-data-types",
    "title": "Preamble: Data Structures and Types in R",
    "section": "Missing or Infinite Data Types",
    "text": "Missing or Infinite Data Types\nYour data may otherwise be missing or infinite:\n\nNot Applicable NA\n\nUsed when data simply is missing or “not available”\n\n\n. . .\n\nNot a Number NaN\n\nUsed when you try to perform a bad math operation, e.g., 0 / 0\n\n\n. . .\n\nInfinite Inf, -Inf\n\nUsed when you divide by 0, e.g., -5/0 or 5/0"
  },
  {
    "objectID": "Lectures/Lecture6/CSSS508_Lecture6.html#checking-data-types",
    "href": "Lectures/Lecture6/CSSS508_Lecture6.html#checking-data-types",
    "title": "Preamble: Data Structures and Types in R",
    "section": "Checking Data Types",
    "text": "Checking Data Types\nclass() tells us what type of data we have:\n\nclass4     &lt;- class(4)\nclassAB    &lt;- class(c(\"A\", \"B\"))\nclassABFac &lt;- class(factor(\"A\", \"B\"))\nclassTRUE  &lt;- class(TRUE)\n\nc(class4, classAB, classABFac, classTRUE)\n\n[1] \"numeric\"   \"character\" \"factor\"    \"logical\""
  },
  {
    "objectID": "Lectures/Lecture6/CSSS508_Lecture6.html#testing-data-types",
    "href": "Lectures/Lecture6/CSSS508_Lecture6.html#testing-data-types",
    "title": "Preamble: Data Structures and Types in R",
    "section": "Testing Data Types",
    "text": "Testing Data Types\nThere are also functions to test for certain data types:\n\nc(is.numeric(5),  is.character(\"A\"))\n\n[1] TRUE TRUE\n\nis.logical(TRUE)\n\n[1] TRUE\n\nc(is.infinite(-Inf),  is.na(NA),  is.nan(NaN))\n\n[1] TRUE TRUE TRUE\n\n\nWarning: NA is not NaN!!!"
  },
  {
    "objectID": "Lectures/Lecture6/CSSS508_Lecture6.html#making-vectors",
    "href": "Lectures/Lecture6/CSSS508_Lecture6.html#making-vectors",
    "title": "Preamble: Data Structures and Types in R",
    "section": "Making Vectors",
    "text": "Making Vectors\nIn R, we call a set of values of the same type a vector. We can create vectors using the c() function (“c” for combine or concatenate).\n\nc(1, 3, 7, -0.5)\n\n[1]  1.0  3.0  7.0 -0.5\n\n\n. . .\nVectors have one dimension: length\n\nlength(c(1, 3, 7, -0.5))\n\n[1] 4\n\n\n. . .\nAll elements of a vector are the same type (e.g. numeric or character)!\nIf you mix character and numeric data, it will convert everything to characters!"
  },
  {
    "objectID": "Lectures/Lecture6/CSSS508_Lecture6.html#generating-numeric-vectors",
    "href": "Lectures/Lecture6/CSSS508_Lecture6.html#generating-numeric-vectors",
    "title": "Preamble: Data Structures and Types in R",
    "section": "Generating Numeric Vectors",
    "text": "Generating Numeric Vectors\nThere are shortcuts for generating numeric vectors:\n\n1:10\n\n [1]  1  2  3  4  5  6  7  8  9 10\n\n\n. . .\n\nseq(-3, 6, by = 1.75) # Sequence from -3 to 6, increments of 1.75\n\n[1] -3.00 -1.25  0.50  2.25  4.00  5.75\n\n\n. . .\n\nrep(c(0, 1), times = 3) # Repeat c(0,1) 3 times\n\n[1] 0 1 0 1 0 1\n\nrep(c(0, 1), each = 3) # Repeat each element 3 times\n\n[1] 0 0 0 1 1 1"
  },
  {
    "objectID": "Lectures/Lecture6/CSSS508_Lecture6.html#element-wise-vector-math",
    "href": "Lectures/Lecture6/CSSS508_Lecture6.html#element-wise-vector-math",
    "title": "Preamble: Data Structures and Types in R",
    "section": "Element-wise Vector Math",
    "text": "Element-wise Vector Math\nWhen doing arithmetic operations on vectors, R handles these element-wise:\n\nc(1, 2, 3) + c(4, 5, 6)\n\n[1] 5 7 9\n\nc(1, 2, 3, 4)^3 # exponentiation with ^\n\n[1]  1  8 27 64\n\n\nCommon operations: *, /, exp() = \\(e^x\\), log() = \\(\\log_e(x)\\)"
  },
  {
    "objectID": "Lectures/Lecture6/CSSS508_Lecture6.html#vector-recycling",
    "href": "Lectures/Lecture6/CSSS508_Lecture6.html#vector-recycling",
    "title": "Preamble: Data Structures and Types in R",
    "section": "Vector Recycling",
    "text": "Vector Recycling\nIf we work with vectors of different lengths, R will recycle the shorter one by repeating it to make it match up with the longer one:\n\nc(0.5, 3) * c(1, 2, 3, 4)\n\n[1]  0.5  6.0  1.5 12.0\n\nc(0.5, 3, 0.5, 3) * c(1, 2, 3, 4) # same thing\n\n[1]  0.5  6.0  1.5 12.0"
  },
  {
    "objectID": "Lectures/Lecture6/CSSS508_Lecture6.html#scalars-as-recycling",
    "href": "Lectures/Lecture6/CSSS508_Lecture6.html#scalars-as-recycling",
    "title": "Preamble: Data Structures and Types in R",
    "section": "Scalars as Recycling",
    "text": "Scalars as Recycling\nA special case of recycling involves arithmetic with scalars (a single number). These are vectors of length 1 that are recycled to make a longer vector:\n\n3 * c(-1, 0, 1, 2) + 1\n\n[1] -2  1  4  7"
  },
  {
    "objectID": "Lectures/Lecture6/CSSS508_Lecture6.html#warning-on-recycling",
    "href": "Lectures/Lecture6/CSSS508_Lecture6.html#warning-on-recycling",
    "title": "Preamble: Data Structures and Types in R",
    "section": "Warning on Recycling",
    "text": "Warning on Recycling\nRecycling doesn’t work so well with vectors of incommensurate lengths:\n\nc(1,2) + c(100,200,300)\n\nWarning in c(1, 2) + c(100, 200, 300): longer object length is not a\nmultiple of shorter object length\n\n\n[1] 101 202 301\n\n\nBe careful!!"
  },
  {
    "objectID": "Lectures/Lecture6/CSSS508_Lecture6.html#example-standardizing-data",
    "href": "Lectures/Lecture6/CSSS508_Lecture6.html#example-standardizing-data",
    "title": "Preamble: Data Structures and Types in R",
    "section": "Example: Standardizing Data",
    "text": "Example: Standardizing Data\nLet’s say we had some test scores and we wanted to put these on a standardized scale:\n\\[z_i = \\frac{x_i - \\text{mean}(x)}{\\text{SD}(x)}\\]\n. . .\n\nx &lt;- c(97, 68, 75, 77, 69, 81)\nz &lt;- (x - mean(x)) / sd(x)\nround(z, 2)\n\n[1]  1.81 -0.93 -0.27 -0.08 -0.83  0.30"
  },
  {
    "objectID": "Lectures/Lecture6/CSSS508_Lecture6.html#math-with-missing-values",
    "href": "Lectures/Lecture6/CSSS508_Lecture6.html#math-with-missing-values",
    "title": "Preamble: Data Structures and Types in R",
    "section": "Math with Missing Values",
    "text": "Math with Missing Values\nEven one NA “poisons the well”: You’ll get NA out of your calculations unless you add the extra argument na.rm = TRUE (availabe in some functions):\n. . .\n\nvector_w_missing &lt;- c(1, 2, NA, 4, 5, 6, NA)\nmean(vector_w_missing)\n\n[1] NA\n\nmean(vector_w_missing, na.rm = TRUE)\n\n[1] 3.6"
  },
  {
    "objectID": "Lectures/Lecture6/CSSS508_Lecture6.html#subsetting-vectors",
    "href": "Lectures/Lecture6/CSSS508_Lecture6.html#subsetting-vectors",
    "title": "Preamble: Data Structures and Types in R",
    "section": "Subsetting Vectors",
    "text": "Subsetting Vectors\nWe can subset a vector in a number of ways:\n\nPassing a single index or vector of entries to keep:\n\n\nfirst_names &lt;- c(\"Andre\", \"Brady\", \"Cecilia\", \"Danni\", \"Edgar\", \"Francie\")\nfirst_names[1]\n\n[1] \"Andre\"\n\nfirst_names[c(1, 2)]\n\n[1] \"Andre\" \"Brady\"\n\n\n. . .\n\nPassing a single index or vector of entries to drop:\n\n\nfirst_names[-3]\n\n[1] \"Andre\"   \"Brady\"   \"Danni\"   \"Edgar\"   \"Francie\""
  },
  {
    "objectID": "Lectures/Lecture6/CSSS508_Lecture6.html#matrices-two-dimensions",
    "href": "Lectures/Lecture6/CSSS508_Lecture6.html#matrices-two-dimensions",
    "title": "Preamble: Data Structures and Types in R",
    "section": "Matrices: Two Dimensions",
    "text": "Matrices: Two Dimensions\nMatrices extend vectors to two dimensions: rows and columns. We can construct them directly using matrix.\nR fills in a matrix column-by-column (not row-by-row!)\n\na_matrix &lt;- matrix(first_names, nrow = 2, ncol = 3)\na_matrix\n\n     [,1]    [,2]      [,3]     \n[1,] \"Andre\" \"Cecilia\" \"Edgar\"  \n[2,] \"Brady\" \"Danni\"   \"Francie\""
  },
  {
    "objectID": "Lectures/Lecture6/CSSS508_Lecture6.html#binding-vectors",
    "href": "Lectures/Lecture6/CSSS508_Lecture6.html#binding-vectors",
    "title": "Preamble: Data Structures and Types in R",
    "section": "Binding Vectors",
    "text": "Binding Vectors\nWe can also make matrices by binding vectors together with rbind() (row bind) and cbind() (column bind).\n\nb_matrix &lt;- cbind(c(1, 2), c(3, 4), c(5, 6))\nb_matrix\n\n     [,1] [,2] [,3]\n[1,]    1    3    5\n[2,]    2    4    6\n\nc_matrix &lt;- rbind(c(1, 2, 3), c(4, 5, 6))\nc_matrix\n\n     [,1] [,2] [,3]\n[1,]    1    2    3\n[2,]    4    5    6"
  },
  {
    "objectID": "Lectures/Lecture6/CSSS508_Lecture6.html#subsetting-matrices",
    "href": "Lectures/Lecture6/CSSS508_Lecture6.html#subsetting-matrices",
    "title": "Preamble: Data Structures and Types in R",
    "section": "Subsetting Matrices",
    "text": "Subsetting Matrices\nWe subset matrices using the same methods as with vectors, except we index them with [rows, columns]:\n\na_matrix[1, 2] # row 1, column 2\n\n[1] \"Cecilia\"\n\na_matrix[1, c(2,3)] # row 1, columns 2 and 3\n\n[1] \"Cecilia\" \"Edgar\"  \n\n\n. . .\nWe can obtain the dimensions of a matrix using dim().\n\ndim(a_matrix)\n\n[1] 2 3"
  },
  {
    "objectID": "Lectures/Lecture6/CSSS508_Lecture6.html#matrices-becoming-vectors",
    "href": "Lectures/Lecture6/CSSS508_Lecture6.html#matrices-becoming-vectors",
    "title": "Preamble: Data Structures and Types in R",
    "section": "Matrices Becoming Vectors",
    "text": "Matrices Becoming Vectors\nIf a matrix ends up having just one row or column after subsetting, by default R will make it into a vector.\n\na_matrix[, 1] \n\n[1] \"Andre\" \"Brady\"\n\n\n. . .\nYou can prevent this behavior using drop = FALSE.\n\na_matrix[, 1, drop = FALSE] \n\n     [,1]   \n[1,] \"Andre\"\n[2,] \"Brady\""
  },
  {
    "objectID": "Lectures/Lecture6/CSSS508_Lecture6.html#matrix-data-type-warning",
    "href": "Lectures/Lecture6/CSSS508_Lecture6.html#matrix-data-type-warning",
    "title": "Preamble: Data Structures and Types in R",
    "section": "Matrix Data Type Warning",
    "text": "Matrix Data Type Warning\nMatrices can contain numeric, integer, factor, character, or logical. But just like vectors, all elements must be the same data type.\n\nbad_matrix &lt;- cbind(1:2, c(\"Victoria\", \"Sass\"))\nbad_matrix\n\n     [,1] [,2]      \n[1,] \"1\"  \"Victoria\"\n[2,] \"2\"  \"Sass\"    \n\n\nIn this case, everything was converted to characters!"
  },
  {
    "objectID": "Lectures/Lecture6/CSSS508_Lecture6.html#matrix-dimension-names",
    "href": "Lectures/Lecture6/CSSS508_Lecture6.html#matrix-dimension-names",
    "title": "Preamble: Data Structures and Types in R",
    "section": "Matrix Dimension Names",
    "text": "Matrix Dimension Names\nWe can access dimension names or name them ourselves:\n\nrownames(bad_matrix) &lt;- c(\"First\", \"Last\")\ncolnames(bad_matrix) &lt;- c(\"Number\", \"Name\")\nbad_matrix\n\n      Number Name      \nFirst \"1\"    \"Victoria\"\nLast  \"2\"    \"Sass\"    \n\nbad_matrix[ ,\"Name\", drop = FALSE]\n\n      Name      \nFirst \"Victoria\"\nLast  \"Sass\""
  },
  {
    "objectID": "Lectures/Lecture6/CSSS508_Lecture6.html#matrix-arithmetic",
    "href": "Lectures/Lecture6/CSSS508_Lecture6.html#matrix-arithmetic",
    "title": "Preamble: Data Structures and Types in R",
    "section": "Matrix Arithmetic",
    "text": "Matrix Arithmetic\nMatrices of the same dimensions can have math performed entry-wise with the usual arithmetic operators:\n\nmatrix(c(2, 4, 6, 8),nrow = 2, ncol = 2) / matrix(c(2, 1, 3, 1),nrow = 2, ncol = 2)\n\n     [,1] [,2]\n[1,]    1    2\n[2,]    4    8"
  },
  {
    "objectID": "Lectures/Lecture6/CSSS508_Lecture6.html#proper-matrix-math",
    "href": "Lectures/Lecture6/CSSS508_Lecture6.html#proper-matrix-math",
    "title": "Preamble: Data Structures and Types in R",
    "section": "“Proper” Matrix Math",
    "text": "“Proper” Matrix Math\nTo do matrix transpositions, use t().\n\ne_matrix &lt;- t(c_matrix)\ne_matrix\n\n     [,1] [,2]\n[1,]    1    4\n[2,]    2    5\n[3,]    3    6\n\n\n. . .\nTo do actual matrix multiplication (not entry-wise), use %*%.\n\nf_matrix &lt;- c_matrix %*% e_matrix\nf_matrix\n\n     [,1] [,2]\n[1,]   14   32\n[2,]   32   77"
  },
  {
    "objectID": "Lectures/Lecture6/CSSS508_Lecture6.html#proper-matrix-math-cont.",
    "href": "Lectures/Lecture6/CSSS508_Lecture6.html#proper-matrix-math-cont.",
    "title": "Preamble: Data Structures and Types in R",
    "section": "“Proper” Matrix Math (cont.)",
    "text": "“Proper” Matrix Math (cont.)\nTo invert an invertible square matrix, use solve().\n\ng_matrix &lt;- solve(f_matrix)\ng_matrix\n\n           [,1]       [,2]\n[1,]  1.4259259 -0.5925926\n[2,] -0.5925926  0.2592593"
  },
  {
    "objectID": "Lectures/Lecture6/CSSS508_Lecture6.html#matrices-vs.-data.frames-and-tibbles",
    "href": "Lectures/Lecture6/CSSS508_Lecture6.html#matrices-vs.-data.frames-and-tibbles",
    "title": "Preamble: Data Structures and Types in R",
    "section": "Matrices vs. data.frames and tibbles",
    "text": "Matrices vs. data.frames and tibbles\nAll of these structures display data in two dimensions\n\nmatrix\n\nBase R\nSingle data type allowed\n\n\n. . .\n\ndata.frame\n\nBase R (default for data storage)\nStores multiple data types\n\n\n. . .\n\ntibbles\n\ntidyverse\nStores multiple data types\nDisplays nicely\n\n\n. . .\nIn practice, data.frames and tibbles are very similar!"
  },
  {
    "objectID": "Lectures/Lecture6/CSSS508_Lecture6.html#creating-data.frames",
    "href": "Lectures/Lecture6/CSSS508_Lecture6.html#creating-data.frames",
    "title": "Preamble: Data Structures and Types in R",
    "section": "Creating data.frames",
    "text": "Creating data.frames\nWe create a data.frame by specifying the columns separately:\n\ndata.frame(Column1Name = c(1,2,3),\n           Column2Name = c(\"A\",\"B\",\"C\"))\n\n  Column1Name Column2Name\n1           1           A\n2           2           B\n3           3           C\n\n\nNote: data.frames allow for mixed data types!"
  },
  {
    "objectID": "Lectures/Lecture6/CSSS508_Lecture6.html#what-are-lists",
    "href": "Lectures/Lecture6/CSSS508_Lecture6.html#what-are-lists",
    "title": "Preamble: Data Structures and Types in R",
    "section": "What are Lists?",
    "text": "What are Lists?\nLists are objects that can store multiple types of data.\n\nmy_list &lt;- list(\"first_thing\"  = 1:5,\n                 \"second_thing\" = matrix(8:11, nrow = 2))\nmy_list\n\n$first_thing\n[1] 1 2 3 4 5\n\n$second_thing\n     [,1] [,2]\n[1,]    8   10\n[2,]    9   11"
  },
  {
    "objectID": "Lectures/Lecture6/CSSS508_Lecture6.html#accessing-list-elements",
    "href": "Lectures/Lecture6/CSSS508_Lecture6.html#accessing-list-elements",
    "title": "Preamble: Data Structures and Types in R",
    "section": "Accessing List Elements",
    "text": "Accessing List Elements\nYou can access a list element by its name or number in [[ ]], or a $ followed by its name:\n\nmy_list[[\"first_thing\"]]\n\n[1] 1 2 3 4 5\n\nmy_list[[1]]\n\n[1] 1 2 3 4 5\n\nmy_list$first_thing\n\n[1] 1 2 3 4 5"
  },
  {
    "objectID": "Lectures/Lecture6/CSSS508_Lecture6.html#why-two-brackets",
    "href": "Lectures/Lecture6/CSSS508_Lecture6.html#why-two-brackets",
    "title": "Preamble: Data Structures and Types in R",
    "section": "Why Two Brackets [[ ]]?",
    "text": "Why Two Brackets [[ ]]?\nDouble brackets get the actual element — as whatever data type it is stored as, in that location in the list.\n\nstr(my_list[[1]])\n\n int [1:5] 1 2 3 4 5\n\n\n. . .\nIf you use single brackets to access list elements, you get a list back.\n\nstr(my_list[1])\n\nList of 1\n $ first_thing: int [1:5] 1 2 3 4 5"
  },
  {
    "objectID": "Lectures/Lecture6/CSSS508_Lecture6.html#names-and-list-elements",
    "href": "Lectures/Lecture6/CSSS508_Lecture6.html#names-and-list-elements",
    "title": "Preamble: Data Structures and Types in R",
    "section": "names() and List Elements",
    "text": "names() and List Elements\nYou can use names() to get a vector of list element names:\n\nnames(my_list)\n\n[1] \"first_thing\"  \"second_thing\""
  },
  {
    "objectID": "Lectures/Lecture6/CSSS508_Lecture6.html#example-regression-output",
    "href": "Lectures/Lecture6/CSSS508_Lecture6.html#example-regression-output",
    "title": "Preamble: Data Structures and Types in R",
    "section": "Example: Regression Output",
    "text": "Example: Regression Output\nWhen you perform linear regression in R, the output is a list!\n\nlm_output &lt;- lm(speed ~ dist, data = cars)\nis.list(lm_output)\n\n[1] TRUE\n\nnames(lm_output)\n\n [1] \"coefficients\"  \"residuals\"     \"effects\"       \"rank\"         \n [5] \"fitted.values\" \"assign\"        \"qr\"            \"df.residual\"  \n [9] \"xlevels\"       \"call\"          \"terms\"         \"model\"        \n\nlm_output$coefficients\n\n(Intercept)        dist \n  8.2839056   0.1655676"
  },
  {
    "objectID": "Lectures/Lecture6/CSSS508_Lecture6.html#mini-check-1-types-of-data",
    "href": "Lectures/Lecture6/CSSS508_Lecture6.html#mini-check-1-types-of-data",
    "title": "Preamble: Data Structures and Types in R",
    "section": "Mini-Check 1: Types of Data",
    "text": "Mini-Check 1: Types of Data\nIn each case, what will R return?\n\n\nis.numeric(3.14)\n\nTRUE\n\nis.numeric(pi)\n\nTRUE\n\nis.logical(FALSE)\n\nTRUE\n\nis.nan(NA)\n\nFALSE"
  },
  {
    "objectID": "Lectures/Lecture6/CSSS508_Lecture6.html#mini-check-2-vectors",
    "href": "Lectures/Lecture6/CSSS508_Lecture6.html#mini-check-2-vectors",
    "title": "Preamble: Data Structures and Types in R",
    "section": "Mini-Check 2: Vectors",
    "text": "Mini-Check 2: Vectors\n\n\nWhat does sum(c(1, 2, NA)) output?\n\nNA. The code sum(c(1, 2, NA), na.rm = TRUE) would output 3.\n\n\n\n\n\n\nWhat does rep(c(0, 1), times = 2) output?\n\nc(0, 1, 0, 1)\n\n\n\n\n\n\nI want to get the first and second elements of my vector, a_vector. What’s wrong with the code a_vector[1, 2] ?\n\na_vector[c(1, 2)]"
  },
  {
    "objectID": "Lectures/Lecture6/CSSS508_Lecture6.html#activity-matrices-and-lists",
    "href": "Lectures/Lecture6/CSSS508_Lecture6.html#activity-matrices-and-lists",
    "title": "Preamble: Data Structures and Types in R",
    "section": "Activity: Matrices and Lists",
    "text": "Activity: Matrices and Lists\n\nWrite code to create the following matrix:\n\n\n\n     [,1] [,2] [,3]\n[1,] \"A\"  \"B\"  \"C\" \n[2,] \"D\"  \"E\"  \"F\" \n\n\n\nWrite a line of code to extract the second column. Ensure the output is still a matrix.\n\n\n\n     [,1]\n[1,] \"B\" \n[2,] \"E\" \n\n\n\nComplete the following sentence: “Lists are to vectors, what data frames are to…”\nCreate a list that contains 3 elements:\n\n“ten_numbers” (integers between 1 and 10)\n“my_name” (your name as a character)\n“booleans” (vector of TRUE and FALSE alternating three times)"
  },
  {
    "objectID": "Lectures/Lecture6/CSSS508_Lecture6.html#answers",
    "href": "Lectures/Lecture6/CSSS508_Lecture6.html#answers",
    "title": "Preamble: Data Structures and Types in R",
    "section": "Answers",
    "text": "Answers\n1. Write code to create the following matrix:\n\nmat_test &lt;- matrix(c(\"A\", \"B\", \"C\", \"D\", \"E\", \"F\"), nrow = 2, byrow = TRUE)\nmat_test\n\n     [,1] [,2] [,3]\n[1,] \"A\"  \"B\"  \"C\" \n[2,] \"D\"  \"E\"  \"F\" \n\n\n. . .\n2. Write a line of code to extract the second column. Ensure the output is still a matrix.\n\nmat_test[ ,2, drop = FALSE]\n\n     [,1]\n[1,] \"B\" \n[2,] \"E\""
  },
  {
    "objectID": "Lectures/Lecture6/CSSS508_Lecture6.html#answers-1",
    "href": "Lectures/Lecture6/CSSS508_Lecture6.html#answers-1",
    "title": "Preamble: Data Structures and Types in R",
    "section": "Answers",
    "text": "Answers\n3. Complete the following sentence: “Lists are to vectors, what data frames are to…Matrices!2”\n. . .\n4. Create a list that contains 3 elements:\n\nmy_new_list &lt;- list(\"ten_numbers\" = 1:10,\n                    \"my_name\" = \"Victoria Sass\",\n                    \"booleans\" = rep(c(TRUE, FALSE), times = 3))\nmy_new_list\n\n$ten_numbers\n [1]  1  2  3  4  5  6  7  8  9 10\n\n$my_name\n[1] \"Victoria Sass\"\n\n$booleans\n[1]  TRUE FALSE  TRUE FALSE  TRUE FALSE"
  },
  {
    "objectID": "Lectures/Lecture6/CSSS508_Lecture6.html#homework-4",
    "href": "Lectures/Lecture6/CSSS508_Lecture6.html#homework-4",
    "title": "Preamble: Data Structures and Types in R",
    "section": "Homework 4",
    "text": "Homework 4\nFor Homework 4, you will fill in an Quarto template on our course website that walks you through the process of creating, accessing, and manipulating R data structures. Enter values in the qmd document and Render it to check your answers!\n\nRender after entering each answer!! If you get an error, check to see if undoing your last edit solves the problem. Coding an assignment to handle all possible mistakes is really hard!\nThis assignment is long, so start early.\n\nOn the due date, I will provide a key for the written answers. You will grade those answers as part of your peer review. In addition, you’ll be asked to comment on the style of your peer’s code and what you yourself did similarly/different. Please remember to provide a numerical grade (0-3), as always."
  },
  {
    "objectID": "Lectures/Lecture8/CSSS508_Lecture8.html",
    "href": "Lectures/Lecture8/CSSS508_Lecture8.html",
    "title": "Roadmap",
    "section": "",
    "text": "Writing Functions\nCS&SS 508 • Lecture 8\n21 November 2023\nVictoria Sass"
  },
  {
    "objectID": "Lectures/Lecture8/CSSS508_Lecture8.html#why-functions",
    "href": "Lectures/Lecture8/CSSS508_Lecture8.html#why-functions",
    "title": "Roadmap",
    "section": "Why Functions?",
    "text": "Why Functions?\nR (as well as mathematics in general) is full of functions!\n. . .\nWe use functions to:\n\nCompute summary statistics (mean(), sd(), min())\nFit models to data (lm(Fertility~Agriculture,data=swiss))\nLoad data (read_csv())\nCreate ggplots (ggplot())\nAnd so much more!!"
  },
  {
    "objectID": "Lectures/Lecture8/CSSS508_Lecture8.html#examples-of-existing-functions",
    "href": "Lectures/Lecture8/CSSS508_Lecture8.html#examples-of-existing-functions",
    "title": "Roadmap",
    "section": "Examples of Existing Functions",
    "text": "Examples of Existing Functions\n\n\nmean():\n\nInput: a vector\nOutput: a single number\n\ndplyr::filter():\n\nInput: a data frame, logical conditions\nOutput: a data frame with rows removed using those conditions\n\nreadr::read_csv():\n\nInput: a file path, optionally variable names or types\nOutput: a data frame containing info read in from file\n\n\n\n. . .\nEach function requires inputs, and returns outputs"
  },
  {
    "objectID": "Lectures/Lecture8/CSSS508_Lecture8.html#why-write-your-own-functions",
    "href": "Lectures/Lecture8/CSSS508_Lecture8.html#why-write-your-own-functions",
    "title": "Roadmap",
    "section": "Why Write Your Own Functions?",
    "text": "Why Write Your Own Functions?\nFunctions encapsulate actions you might perform often, such as:\n\nGiven a vector, compute some special summary stats\nGiven a vector and definition of “invalid” values, replace with NA\nDefining a new logical operator\n\n. . .\nAdvanced function applications (not covered in this class):\n\nParallel processing\nGenerating other functions\nMaking custom packages containing your functions"
  },
  {
    "objectID": "Lectures/Lecture8/CSSS508_Lecture8.html#anatomy-of-a-function",
    "href": "Lectures/Lecture8/CSSS508_Lecture8.html#anatomy-of-a-function",
    "title": "Roadmap",
    "section": "Anatomy of a Function",
    "text": "Anatomy of a Function\n\nNAME &lt;- function(ARGUMENT1, ARGUMENT2=DEFAULT){\n  BODY\n  return(OUTPUT)\n}\n\n\n\nName: What you call the function so you can use it later\nArguments (aka inputs, parameters): things the user passes to the function that affect how it works\n\ne.g. ARGUMENT1, ARGUMENT2\nARGUMENT2=DEFAULT is example of setting a default value\nIn this example, ARGUMENT1, ARGUMENT2 values won’t exist outside of the function\n\nBody: The actual operations inside the function.\nOutput: The object inside return(). Could be anything (or nothing!)\n\nIf unspecified, will be the last thing calculated"
  },
  {
    "objectID": "Lectures/Lecture8/CSSS508_Lecture8.html#example-1-doubling-a-number",
    "href": "Lectures/Lecture8/CSSS508_Lecture8.html#example-1-doubling-a-number",
    "title": "Roadmap",
    "section": "Example 1: Doubling A Number",
    "text": "Example 1: Doubling A Number\n\ndouble_x &lt;- function(x){\n  double_x &lt;- x * 2\n  return(double_x)\n}\n\n. . .\nLet’s run it!\n\ndouble_x(5)\n\n[1] 10\n\ndouble_x(NA)\n\n[1] NA\n\ndouble_x(1:2)\n\n[1] 2 4"
  },
  {
    "objectID": "Lectures/Lecture8/CSSS508_Lecture8.html#example-2-extract-firstlast",
    "href": "Lectures/Lecture8/CSSS508_Lecture8.html#example-2-extract-firstlast",
    "title": "Roadmap",
    "section": "Example 2: Extract First/Last",
    "text": "Example 2: Extract First/Last\n\nfirst_and_last &lt;- function(x) {\n    first &lt;- x[1]\n    last  &lt;- x[length(x)]\n    return(c(\"first\" = first, \"last\" = last))\n}\n\n. . .\nTest it out:\n\nfirst_and_last(c(4, 3, 1, 8))\n\nfirst  last \n    4     8"
  },
  {
    "objectID": "Lectures/Lecture8/CSSS508_Lecture8.html#example-2-testing-first_and_last",
    "href": "Lectures/Lecture8/CSSS508_Lecture8.html#example-2-testing-first_and_last",
    "title": "Roadmap",
    "section": "Example 2: Testing first_and_last",
    "text": "Example 2: Testing first_and_last\nWhat if I give first_and_last() a vector of length 1?\n\nfirst_and_last(7)\n\nfirst  last \n    7     7 \n\n\n. . .\nOf length 0?\n\nfirst_and_last(numeric(0))\n\nfirst \n   NA \n\n\n. . .\nMaybe we want it to be a little smarter."
  },
  {
    "objectID": "Lectures/Lecture8/CSSS508_Lecture8.html#example-3-checking-inputs",
    "href": "Lectures/Lecture8/CSSS508_Lecture8.html#example-3-checking-inputs",
    "title": "Roadmap",
    "section": "Example 3: Checking Inputs",
    "text": "Example 3: Checking Inputs\nLet’s make sure we get an error message when the vector is too small:\n\nsmarter_first_and_last &lt;- function(x) {\n    if(length(x) &lt; 2){\n      stop(\"Input is not long enough!\")\n    } else{\n      first &lt;- x[1]\n      last  &lt;- x[length(x)]\n      return(c(\"first\" = first, \"last\" = last))    \n    }\n}\n\n\n\nstop() ceases running the function and prints the text inside as an error message."
  },
  {
    "objectID": "Lectures/Lecture8/CSSS508_Lecture8.html#example-3-testing-smarter-function",
    "href": "Lectures/Lecture8/CSSS508_Lecture8.html#example-3-testing-smarter-function",
    "title": "Roadmap",
    "section": "Example 3: Testing Smarter Function",
    "text": "Example 3: Testing Smarter Function\n\nsmarter_first_and_last(NA)\n\nError in smarter_first_and_last(NA): Input is not long enough!\n\nsmarter_first_and_last(c(4, 3, 1, 8))\n\nfirst  last \n    4     8 \n\n\n. . ."
  },
  {
    "objectID": "Lectures/Lecture8/CSSS508_Lecture8.html#cracking-open-functions",
    "href": "Lectures/Lecture8/CSSS508_Lecture8.html#cracking-open-functions",
    "title": "Roadmap",
    "section": "Cracking Open Functions",
    "text": "Cracking Open Functions\nIf you type a function name without any parentheses or arguments, you can see its contents:\n\nsmarter_first_and_last\n\nfunction(x) {\n    if(length(x) &lt; 2){\n      stop(\"Input is not long enough!\")\n    } else{\n      first &lt;- x[1]\n      last  &lt;- x[length(x)]\n      return(c(\"first\" = first, \"last\" = last))    \n    }\n}\n&lt;bytecode: 0x7fe5ebebc3c8&gt;"
  },
  {
    "objectID": "Lectures/Lecture8/CSSS508_Lecture8.html#applying-functions-multiple-times",
    "href": "Lectures/Lecture8/CSSS508_Lecture8.html#applying-functions-multiple-times",
    "title": "Roadmap",
    "section": "Applying Functions Multiple Times?",
    "text": "Applying Functions Multiple Times?\nLast week, we saw an example where we wanted to take the mean of each column in the swiss data:\n\nfor(col_index in 1:ncol(swiss)){\n  mean_swiss_col &lt;- mean(swiss[,col_index])\n  names_swiss_col &lt;- names(swiss)[col_index]\n  print(c(names_swiss_col,round(mean_swiss_col,3)))\n}\n\n[1] \"Fertility\" \"70.143\"   \n[1] \"Agriculture\" \"50.66\"      \n[1] \"Examination\" \"16.489\"     \n[1] \"Education\" \"10.979\"   \n[1] \"Catholic\" \"41.144\"  \n[1] \"Infant.Mortality\" \"19.943\"          \n\n\nIsn’t this kind of complex?!"
  },
  {
    "objectID": "Lectures/Lecture8/CSSS508_Lecture8.html#apply-dont-loop",
    "href": "Lectures/Lecture8/CSSS508_Lecture8.html#apply-dont-loop",
    "title": "Roadmap",
    "section": "apply(), don’t loop!",
    "text": "apply(), don’t loop!\nWriting loops can be challenging and prone to bugs!!\n. . .\nThe apply() can solve this issue:\n\napply a function to values in each row or column of a matrix\nDoesn’t require preallocation\nCan take built-in functions or user-created functions."
  },
  {
    "objectID": "Lectures/Lecture8/CSSS508_Lecture8.html#structure-of-apply",
    "href": "Lectures/Lecture8/CSSS508_Lecture8.html#structure-of-apply",
    "title": "Roadmap",
    "section": "Structure of apply()",
    "text": "Structure of apply()\napply() takes 3 arguments:\n\nData (a matrix or data frame)\nMargin (1 applies function to each row, 2 applies to each column)\nFunction\n\n\napply(DATA, MARGIN, FUNCTION)\n\n. . .\nFor example,\n\napply(swiss, 2, mean)\n\n       Fertility      Agriculture      Examination        Education \n        70.14255         50.65957         16.48936         10.97872 \n        Catholic Infant.Mortality \n        41.14383         19.94255"
  },
  {
    "objectID": "Lectures/Lecture8/CSSS508_Lecture8.html#example-1",
    "href": "Lectures/Lecture8/CSSS508_Lecture8.html#example-1",
    "title": "Roadmap",
    "section": "Example 1",
    "text": "Example 1\n\nrow_max &lt;- apply(swiss,1,max) # maximum in each row\nhead(row_max, 20)\n\n  Courtelary     Delemont Franches-Mnt      Moutier   Neuveville   Porrentruy \n       80.20        84.84        93.40        85.80        76.90        90.57 \n       Broye        Glane      Gruyere       Sarine      Veveyse        Aigle \n       92.85        97.16        97.67        91.38        98.61        64.10 \n     Aubonne     Avenches     Cossonay    Echallens     Grandson     Lausanne \n       67.50        68.90        69.30        72.60        71.70        55.70 \n   La Vallee       Lavaux \n       54.30        73.00"
  },
  {
    "objectID": "Lectures/Lecture8/CSSS508_Lecture8.html#example-2",
    "href": "Lectures/Lecture8/CSSS508_Lecture8.html#example-2",
    "title": "Roadmap",
    "section": "Example 2",
    "text": "Example 2\n\napply(swiss, 2, summary) # summary of each column\n\n        Fertility Agriculture Examination Education  Catholic Infant.Mortality\nMin.     35.00000     1.20000     3.00000   1.00000   2.15000         10.80000\n1st Qu.  64.70000    35.90000    12.00000   6.00000   5.19500         18.15000\nMedian   70.40000    54.10000    16.00000   8.00000  15.14000         20.00000\nMean     70.14255    50.65957    16.48936  10.97872  41.14383         19.94255\n3rd Qu.  78.45000    67.65000    22.00000  12.00000  93.12500         21.70000\nMax.     92.50000    89.70000    37.00000  53.00000 100.00000         26.60000\n\n\n**Note:* Matrix output!"
  },
  {
    "objectID": "Lectures/Lecture8/CSSS508_Lecture8.html#example-3-user-created-function",
    "href": "Lectures/Lecture8/CSSS508_Lecture8.html#example-3-user-created-function",
    "title": "Roadmap",
    "section": "Example 3: User-Created Function",
    "text": "Example 3: User-Created Function\n\nscores &lt;- matrix(1:21, nrow=3)\nprint(scores)\n\n     [,1] [,2] [,3] [,4] [,5] [,6] [,7]\n[1,]    1    4    7   10   13   16   19\n[2,]    2    5    8   11   14   17   20\n[3,]    3    6    9   12   15   18   21\n\nmy_function &lt;- function(x){ mean(x+10, na.rm = T) }\napply(scores, 1, my_function)\n\n[1] 20 21 22"
  },
  {
    "objectID": "Lectures/Lecture8/CSSS508_Lecture8.html#activity-writing-a-function",
    "href": "Lectures/Lecture8/CSSS508_Lecture8.html#activity-writing-a-function",
    "title": "Roadmap",
    "section": "Activity: Writing A Function",
    "text": "Activity: Writing A Function\nIn Olympic diving, a panel of 7 judges provide scores. After removing the worst and best scores, the mean of the remaining scores is given to the diver. We’ll write code to calculate this score!\n\nSuppose I get you a vector, x, of length 7. Write code that will sort the vector from least to greatest, then keep the 2nd-6th elements1.\nWrite a function to calculate a diver’s score:\n\nInput: Vector of length 7\nChecks: Check that the vector has length 7 (if not, stop!)\nOutput: Mean score after removing the lowest and greatest scores.\n\nCalculate the diver’s score given x &lt;- c(2, 1:5, 3)"
  },
  {
    "objectID": "Lectures/Lecture8/CSSS508_Lecture8.html#activity-solution",
    "href": "Lectures/Lecture8/CSSS508_Lecture8.html#activity-solution",
    "title": "Roadmap",
    "section": "Activity: Solution",
    "text": "Activity: Solution\n\nSort and extract elements 2 through 6:\n\nAnswer: Given vector x, use sort(x)[2:6]\n\nFunction\n\n\ndivers_score &lt;- function(x){\n  if(length(x) != 7){\n    stop(\"x is not of length 7!\")\n  } else{\n    x_nofirst_nolast &lt;- sort(x)[2:6]\n    return(mean(x_nofirst_nolast))\n  }\n}\n\n. . .\n\nCalculate the diver’s score given x &lt;- c(2, 1:5, 3)\n\n\ndivers_score(x = c(2,1:5,3) )\n\n[1] 2.8"
  },
  {
    "objectID": "Lectures/Lecture8/CSSS508_Lecture8.html#activity",
    "href": "Lectures/Lecture8/CSSS508_Lecture8.html#activity",
    "title": "Roadmap",
    "section": "Activity",
    "text": "Activity\nThese are homework questions!!\n\nPreallocate a matrix of NAs with 3 rows and 8 columns, called double_matrix. Manually specify the first column equal to the values 1, 2, and 3. Using a nested loop, fill in the matrix, row by row, such that each value is double that to its left.\nWrite an apply() function to take the median value of each column in the cars dataset\nUsing ggplot, make a scatterplot of the speed and dist variables in cars. Then, add an appropriate horizontal and vertical line symbolizing the median value of each variable2."
  },
  {
    "objectID": "Lectures/Lecture8/CSSS508_Lecture8.html#answers",
    "href": "Lectures/Lecture8/CSSS508_Lecture8.html#answers",
    "title": "Roadmap",
    "section": "Answers",
    "text": "Answers\n\nPreallocate a matrix of NAs with 3 rows and 8 columns, called double_matrix. Manually specify the first column equal to the values 1, 2, and 3. Using a nested loop, fill in the matrix, row by row, such that each value is double that to its left.\n\n\ndouble_matrix &lt;- matrix(NA, nrow = 3,ncol = 8)\ndouble_matrix[ , 1] &lt;- 1:3\nfor(row in 1:3){\n  for(col in 2:8){\n    double_matrix[row, col] &lt;- double_matrix[row, col-1] * 2\n  }\n}\ndouble_matrix\n\n     [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8]\n[1,]    1    2    4    8   16   32   64  128\n[2,]    2    4    8   16   32   64  128  256\n[3,]    3    6   12   24   48   96  192  384"
  },
  {
    "objectID": "Lectures/Lecture8/CSSS508_Lecture8.html#answers-1",
    "href": "Lectures/Lecture8/CSSS508_Lecture8.html#answers-1",
    "title": "Roadmap",
    "section": "Answers",
    "text": "Answers\n2. Write an apply() function to take the median value of each column in the cars dataset\n\nmedian_cars &lt;- apply(cars, 2, median)\nmedian_cars\n\nspeed  dist \n   15    36"
  },
  {
    "objectID": "Lectures/Lecture8/CSSS508_Lecture8.html#answers-2",
    "href": "Lectures/Lecture8/CSSS508_Lecture8.html#answers-2",
    "title": "Roadmap",
    "section": "Answers",
    "text": "Answers\n3. Make a ggplot\n\nCodePlot\n\n\n\nlibrary(ggplot2)\nggplot(cars, aes(speed, dist)) + \n  geom_point() +\n  geom_vline(xintercept = median_cars[1]) +\n  geom_hline(yintercept = median_cars[2])"
  },
  {
    "objectID": "Lectures/Lecture8/CSSS508_Lecture8.html#homework-7",
    "href": "Lectures/Lecture8/CSSS508_Lecture8.html#homework-7",
    "title": "Roadmap",
    "section": "Homework 7",
    "text": "Homework 7\nTime to work on Homework 7!"
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#due-dates-1",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#due-dates-1",
    "title": "",
    "section": "Due dates",
    "text": "Due dates\n\n\n\n\n\n\n\n\n#\n      \n        Section AA\n      \n      \n        Section AB\n      \n    \n\nHomework Due\n      Peer Review Due\n      Homework Due\n      Peer Review Due\n    \n\n\n\n1\n10 October\n15 October\n12 October\n17 October\n\n\n2\n17 October\n22 October\n19 October\n24 October\n\n\n3\n24 October\n29 October\n26 October\n31 October\n\n\n4\n31 October\n5 November\n2 November\n7 November\n\n\n5\n7 November\n12 November\n9 November\n14 November\n\n\n6\n14 November\n19 November\n16 November\n21 November\n\n\n7\n21 November\n26 November\n23 November\n28 November\n\n\n8\n28 November\n3 November\n30 November\n5 November\n\n\n9\n5 December\n10 December\n7 December\n12 December"
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture5.html#death-to-spreadsheets",
    "href": "Lectures/Lecture5/CSSS508_Lecture5.html#death-to-spreadsheets",
    "title": "Roadmap",
    "section": "Death to Spreadsheets",
    "text": "Death to Spreadsheets\nTools like Excel or Google Sheets lets you manipulate spreadsheets using functions.\n\nSpreadsheets are not reproducible: It’s hard to know how someone changed the raw data!\nIt’s hard to catch mistakes when you use spreadsheets. Don’t be the next sad Research Assistant who makes headlines with an Excel error! (Reinhart & Rogoff, 2010)\n\nToday, we’ll use R to manipulate data more transparently and reproducibly."
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture5.html#logical-operators",
    "href": "Lectures/Lecture5/CSSS508_Lecture5.html#logical-operators",
    "title": "Roadmap",
    "section": "Logical Operators",
    "text": "Logical Operators\nLogical operators refer to base functions which allow us to test a connection between two objects.\n. . .\nFor example, we may test\n\nIs A equal to B?\nIs A greater than B?\nIs A within B?\n\nand many others!"
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture5.html#logical-operators-in-code",
    "href": "Lectures/Lecture5/CSSS508_Lecture5.html#logical-operators-in-code",
    "title": "Roadmap",
    "section": "Logical Operators in Code",
    "text": "Logical Operators in Code\n\n==: is equal to (note: there are TWO equal signs here!)\n\n. . .\n\n!=: not equal to\n\n. . .\n\n&gt;, &gt;=, &lt;, &lt;=: less than, less than or equal to, etc.\n\n. . .\n\n%in%: used with checking equal to one of several values"
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture5.html#examples-of-logical-operators",
    "href": "Lectures/Lecture5/CSSS508_Lecture5.html#examples-of-logical-operators",
    "title": "Roadmap",
    "section": "Examples of Logical Operators",
    "text": "Examples of Logical Operators\nLet’s create two objects, A and B\n\nA &lt;- c(5,10,15)\nB &lt;- c(5,15,25)\n\n. . .\n\nA == B\n\n[1]  TRUE FALSE FALSE\n\nA &gt;  B\n\n[1] FALSE FALSE FALSE\n\nA %in% B\n\n[1]  TRUE FALSE  TRUE"
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture5.html#combining-logical-operators",
    "href": "Lectures/Lecture5/CSSS508_Lecture5.html#combining-logical-operators",
    "title": "Roadmap",
    "section": "Combining Logical Operators",
    "text": "Combining Logical Operators\nWe have three main ways to combine logical operators:\n\n&: both conditions need to hold (AND)\n\n. . .\n\n|: at least one condition needs to hold (OR)\n\n. . .\n\n!: inverts a logical condition (TRUE becomes FALSE, FALSE becomes TRUE)"
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture5.html#examples",
    "href": "Lectures/Lecture5/CSSS508_Lecture5.html#examples",
    "title": "Roadmap",
    "section": "Examples",
    "text": "Examples\n\nA &lt;- c(5,10,15)\nB &lt;- c(5,15,25)\n\n. . .\n\nA &gt; 5 & A &lt;= B\n\n[1] FALSE  TRUE  TRUE\n\nB &lt; 10 | B &gt; 20\n\n[1]  TRUE FALSE  TRUE\n\n!(A == 10)\n\n[1]  TRUE FALSE  TRUE"
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture5.html#building-block-of-dplyr-pipes",
    "href": "Lectures/Lecture5/CSSS508_Lecture5.html#building-block-of-dplyr-pipes",
    "title": "Roadmap",
    "section": "Building Block of dplyr: Pipes",
    "text": "Building Block of dplyr: Pipes\ndplyr allows us to “pipe” data between functions using the (%&gt;%) operator. So instead of nesting functions like this:\n\nlog(mean(gapminder$pop))\n\n[1] 17.20333\n\n\n. . .\nWe can pipe them like this:\n\ngapminder$pop %&gt;% mean() %&gt;% log()\n\n[1] 17.20333\n\n\n. . .\n\nPipes read “left to right.” (intuitive)\nNested functions read “inside to out.” (kinda weird; gets unwieldy the more nested your code becomes)"
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture5.html#subset-rows-filter",
    "href": "Lectures/Lecture5/CSSS508_Lecture5.html#subset-rows-filter",
    "title": "Roadmap",
    "section": "Subset Rows: filter",
    "text": "Subset Rows: filter\nWe often get big datasets, and we only want some of the entries. We can subset rows using filter.\n. . .\n\ngapminder |&gt; \n  filter(country == \"China\") |&gt;\n  head(4) # display first four rows\n\n# A tibble: 4 × 6\n  country continent  year lifeExp       pop gdpPercap\n  &lt;fct&gt;   &lt;fct&gt;     &lt;int&gt;   &lt;dbl&gt;     &lt;int&gt;     &lt;dbl&gt;\n1 China   Asia       1952    44   556263527      400.\n2 China   Asia       1957    50.5 637408000      576.\n3 China   Asia       1962    44.5 665770000      488.\n4 China   Asia       1967    58.4 754550000      613.\n\nChina &lt;- gapminder |&gt; \n  filter(country == \"China\")\n\n(Now, China is an object in our environment which contains rows corresponding to China.)"
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture5.html#subset-columns-select",
    "href": "Lectures/Lecture5/CSSS508_Lecture5.html#subset-columns-select",
    "title": "Roadmap",
    "section": "Subset Columns: select",
    "text": "Subset Columns: select\nWhat if we want to keep each entry, but only use certain variables? Use select!\n. . .\n\ngapminder |&gt; \n  select(country,continent,year,lifeExp) |&gt; \n  head(4)\n\n# A tibble: 4 × 4\n  country     continent  year lifeExp\n  &lt;fct&gt;       &lt;fct&gt;     &lt;int&gt;   &lt;dbl&gt;\n1 Afghanistan Asia       1952    28.8\n2 Afghanistan Asia       1957    30.3\n3 Afghanistan Asia       1962    32.0\n4 Afghanistan Asia       1967    34.0"
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture5.html#dropping-columns-with-select",
    "href": "Lectures/Lecture5/CSSS508_Lecture5.html#dropping-columns-with-select",
    "title": "Roadmap",
    "section": "Dropping columns with select",
    "text": "Dropping columns with select\nAlternatively, we can use select() to drop variables using a - sign:\n\ngapminder |&gt; \n  select(-continent, -pop, -lifeExp) |&gt; \n  head(4)\n\n# A tibble: 4 × 3\n  country      year gdpPercap\n  &lt;fct&gt;       &lt;int&gt;     &lt;dbl&gt;\n1 Afghanistan  1952      779.\n2 Afghanistan  1957      821.\n3 Afghanistan  1962      853.\n4 Afghanistan  1967      836."
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture5.html#finding-unique-rows-distinct",
    "href": "Lectures/Lecture5/CSSS508_Lecture5.html#finding-unique-rows-distinct",
    "title": "Roadmap",
    "section": "Finding Unique Rows: distinct",
    "text": "Finding Unique Rows: distinct\nYou may want to find the unique combinations of variables in a dataset. Use distinct\n. . .\n\ngapminder |&gt; \n  distinct(continent, year) |&gt; \n  head(6)\n\n# A tibble: 6 × 2\n  continent  year\n  &lt;fct&gt;     &lt;int&gt;\n1 Asia       1952\n2 Asia       1957\n3 Asia       1962\n4 Asia       1967\n5 Asia       1972\n6 Asia       1977"
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture5.html#distinct-drops-variables",
    "href": "Lectures/Lecture5/CSSS508_Lecture5.html#distinct-drops-variables",
    "title": "Roadmap",
    "section": "distinct drops variables!",
    "text": "distinct drops variables!\nBy default, distinct() drops unused variables. If you don’t want to drop them, add the argument .keep_all = TRUE:\n\ngapminder |&gt; \n  distinct(continent, year, .keep_all=TRUE) |&gt; \n  head(6)\n\n# A tibble: 6 × 6\n  country     continent  year lifeExp      pop gdpPercap\n  &lt;fct&gt;       &lt;fct&gt;     &lt;int&gt;   &lt;dbl&gt;    &lt;int&gt;     &lt;dbl&gt;\n1 Afghanistan Asia       1952    28.8  8425333      779.\n2 Afghanistan Asia       1957    30.3  9240934      821.\n3 Afghanistan Asia       1962    32.0 10267083      853.\n4 Afghanistan Asia       1967    34.0 11537966      836.\n5 Afghanistan Asia       1972    36.1 13079460      740.\n6 Afghanistan Asia       1977    38.4 14880372      786."
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture5.html#sorting-data-by-rows-arrange",
    "href": "Lectures/Lecture5/CSSS508_Lecture5.html#sorting-data-by-rows-arrange",
    "title": "Roadmap",
    "section": "Sorting data by rows: arrange",
    "text": "Sorting data by rows: arrange\nSometimes it’s useful to sort rows in your data, in ascending (low to high) or descending (high to low) order. We do that with arrange.\n. . .\n\nUS_and_Canada &lt;- gapminder |&gt; \n  filter(country %in% c(\"United States\",\"Canada\"))\nUS_and_Canada |&gt; \n  arrange(year,lifeExp) |&gt; \n  head(4)\n\n# A tibble: 4 × 6\n  country       continent  year lifeExp       pop gdpPercap\n  &lt;fct&gt;         &lt;fct&gt;     &lt;int&gt;   &lt;dbl&gt;     &lt;int&gt;     &lt;dbl&gt;\n1 United States Americas   1952    68.4 157553000    13990.\n2 Canada        Americas   1952    68.8  14785584    11367.\n3 United States Americas   1957    69.5 171984000    14847.\n4 Canada        Americas   1957    70.0  17010154    12490."
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture5.html#sorting-data-by-rows-arrange-1",
    "href": "Lectures/Lecture5/CSSS508_Lecture5.html#sorting-data-by-rows-arrange-1",
    "title": "Roadmap",
    "section": "Sorting data by rows: arrange",
    "text": "Sorting data by rows: arrange\nTo sort in descending order, using desc() within arrange\n\nUS_and_Canada |&gt; \n  arrange(desc(pop)) |&gt; \n  head(4)\n\n# A tibble: 4 × 6\n  country       continent  year lifeExp       pop gdpPercap\n  &lt;fct&gt;         &lt;fct&gt;     &lt;int&gt;   &lt;dbl&gt;     &lt;int&gt;     &lt;dbl&gt;\n1 United States Americas   2007    78.2 301139947    42952.\n2 United States Americas   2002    77.3 287675526    39097.\n3 United States Americas   1997    76.8 272911760    35767.\n4 United States Americas   1992    76.1 256894189    32004."
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture5.html#rename-variables-rename",
    "href": "Lectures/Lecture5/CSSS508_Lecture5.html#rename-variables-rename",
    "title": "Roadmap",
    "section": "Rename variables: rename",
    "text": "Rename variables: rename\nYou may receive data with unintuitive variable names. You can change them using rename().\n. . .\n\nUS_and_Canada |&gt; \n  rename(life_expectancy = lifeExp) |&gt;\n  head(4)\n\n# A tibble: 4 × 6\n  country continent  year life_expectancy      pop gdpPercap\n  &lt;fct&gt;   &lt;fct&gt;     &lt;int&gt;           &lt;dbl&gt;    &lt;int&gt;     &lt;dbl&gt;\n1 Canada  Americas   1952            68.8 14785584    11367.\n2 Canada  Americas   1957            70.0 17010154    12490.\n3 Canada  Americas   1962            71.3 18985849    13462.\n4 Canada  Americas   1967            72.1 20819767    16077.\n\n\n\n\n* NOTE 1: I did not re-save the object US_and_Canada, so the name change is not permanent!\n* NOTE 2: I recommend against using spaces in a name! It makes things really hard sometimes!!"
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture5.html#create-new-columns-mutate",
    "href": "Lectures/Lecture5/CSSS508_Lecture5.html#create-new-columns-mutate",
    "title": "Roadmap",
    "section": "Create new columns: mutate",
    "text": "Create new columns: mutate\nYou can add new columns to a data frame using mutate().\n. . .\nFor example, perhaps we wish to state the population in millions:\n\nUS_and_Canada |&gt; \n  select(country, year, pop) |&gt;\n  mutate(pop_millions = pop / 1000000) |&gt; \n  head(5)\n\n# A tibble: 5 × 4\n  country  year      pop pop_millions\n  &lt;fct&gt;   &lt;int&gt;    &lt;int&gt;        &lt;dbl&gt;\n1 Canada   1952 14785584         14.8\n2 Canada   1957 17010154         17.0\n3 Canada   1962 18985849         19.0\n4 Canada   1967 20819767         20.8\n5 Canada   1972 22284500         22.3"
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture5.html#summarizing-data-summarize",
    "href": "Lectures/Lecture5/CSSS508_Lecture5.html#summarizing-data-summarize",
    "title": "Roadmap",
    "section": "Summarizing data: summarize",
    "text": "Summarizing data: summarize\nsummarize() calculates summaries of variables in your data:\n\nCount the number of rows\nCalculate the mean\nCalculate the sum\nFind the minimum or maximum value\n\nYou can use any function inside summarize() that aggregates multiple values into a single value (like sd(), mean(), or max())."
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture5.html#summarize-example",
    "href": "Lectures/Lecture5/CSSS508_Lecture5.html#summarize-example",
    "title": "Roadmap",
    "section": "summarize() Example",
    "text": "summarize() Example\nFor the year 1982, let’s summarize some values in gapminder\n\ngapminder |&gt; \n  filter(year == 1982) |&gt;\n  summarize(number_observations = n(),\n            max_lifeexp = max(lifeExp),\n            mean_pop = mean(pop),\n            sd_pop = sd(pop))\n\n# A tibble: 1 × 4\n  number_observations max_lifeexp  mean_pop     sd_pop\n                &lt;int&gt;       &lt;dbl&gt;     &lt;dbl&gt;      &lt;dbl&gt;\n1                 142        77.1 30207302. 105098650."
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture5.html#summarizing-data-by-groups-group_by",
    "href": "Lectures/Lecture5/CSSS508_Lecture5.html#summarizing-data-by-groups-group_by",
    "title": "Roadmap",
    "section": "Summarizing data by groups: group_by",
    "text": "Summarizing data by groups: group_by\nWhat if we want to summarize data by category? Use group_by and summarize\n. . .\nFunctions after group_by() are computed within each group as defined by variables given, rather than over all rows at once."
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture5.html#group_by-example",
    "href": "Lectures/Lecture5/CSSS508_Lecture5.html#group_by-example",
    "title": "Roadmap",
    "section": "group_by() Example",
    "text": "group_by() Example\n\nUS_and_Canada |&gt; group_by(year) |&gt;  \n  summarize(total_pop = sum(pop)) |&gt; \n  head(4)\n\n# A tibble: 4 × 2\n   year total_pop\n  &lt;int&gt;     &lt;int&gt;\n1  1952 172338584\n2  1957 188994154\n3  1962 205523849\n4  1967 219531767\n\n\nBecause we did group_by() with year then used summarize(), we get one row per value of year!"
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture5.html#why-merge",
    "href": "Lectures/Lecture5/CSSS508_Lecture5.html#why-merge",
    "title": "Roadmap",
    "section": "Why merge?!",
    "text": "Why merge?!\nIn practice, we often collect data from different sources. To analyze the data, we usually must first combine (merge) them.\n. . .\nFor example, imagine you would like to study county-level patterns with respect to age and grocery spending. However, you can only find,\n\nCounty level age data from the US Census, and\nCounty level grocery spending data from the US Department of Agriculture\n\n. . .\nMerge the data!!"
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture5.html#merging-in-concept",
    "href": "Lectures/Lecture5/CSSS508_Lecture5.html#merging-in-concept",
    "title": "Roadmap",
    "section": "Merging in Concept",
    "text": "Merging in Concept\nWhen merging datasets A and B, ask yourself the following two questions:\n. . .\n\nWhich rows do I want to keep?\n\nAll rows in A?\nAll rows in both A and B?\n\n\n. . .\n\nHow do my datasets connect?\n\nIs there a specific variable they have in common?\nMultiple variables they have in common?"
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture5.html#which-rows-to-keep",
    "href": "Lectures/Lecture5/CSSS508_Lecture5.html#which-rows-to-keep",
    "title": "Roadmap",
    "section": "Which Rows to Keep:",
    "text": "Which Rows to Keep:\nWe’ll focus on two types of joins1:\n\nA |&gt; left_join(B): keeps A and adds variables from B after matching.\nA |&gt; full_join(B): keeps all of A and B, but combines rows when possible."
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture5.html#matching-criteria",
    "href": "Lectures/Lecture5/CSSS508_Lecture5.html#matching-criteria",
    "title": "Roadmap",
    "section": "Matching Criteria",
    "text": "Matching Criteria\nWe have to tell R which variables to use when merging datasets! Rows are matched when the values in matching variables are equivalent.\n. . .\n\nby = c(\"County\"): Both datasets have a County variable, match on this!\n\n. . .\n\nby = c(\"CountyName\" = \"County_Name\"): Match CountyName in A with County_Name in B"
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture5.html#example-nycflights13-data",
    "href": "Lectures/Lecture5/CSSS508_Lecture5.html#example-nycflights13-data",
    "title": "Roadmap",
    "section": "Example: nycflights13 Data",
    "text": "Example: nycflights13 Data\nThe nycflights13 package includes five data frames, some of which contain missing data (NA):\n\nflights: flights leaving JFK, LGA, or EWR in 2013\nairlines: airline abbreviations\nairports: airport metadata\nplanes: airplane metadata\nweather: hourly weather data for JFK, LGA, and EWR\n\n\n# install.packages(\"nycflights13\") # remember to do this in the console, not in your .R or .qmd document\nlibrary(nycflights13)"
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture5.html#join-example-1",
    "href": "Lectures/Lecture5/CSSS508_Lecture5.html#join-example-1",
    "title": "Roadmap",
    "section": "Join Example 1",
    "text": "Join Example 1\nflights has one row per flight, with abbreviated airline names.\n\nflights |&gt; \n  select(flight,origin,dest,carrier) |&gt; \n  head(2)\n\n# A tibble: 2 × 4\n  flight origin dest  carrier\n   &lt;int&gt; &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt;  \n1   1545 EWR    IAH   UA     \n2   1714 LGA    IAH   UA     \n\n\n. . .\nairlines has one row per airline, with airline abbreviations and full names\n\nairlines |&gt; \n  head(2)\n\n# A tibble: 2 × 2\n  carrier name                  \n  &lt;chr&gt;   &lt;chr&gt;                 \n1 9E      Endeavor Air Inc.     \n2 AA      American Airlines Inc."
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture5.html#join-example-1-continued",
    "href": "Lectures/Lecture5/CSSS508_Lecture5.html#join-example-1-continued",
    "title": "Roadmap",
    "section": "Join Example 1 (continued)",
    "text": "Join Example 1 (continued)\nLet’s left join flights with airlines to add full airline name to each flight record!\n\nflights |&gt; \n  select(flight,origin,dest,carrier) |&gt;\n  left_join(airlines, by = \"carrier\")  |&gt; \n  head(5)\n\n# A tibble: 5 × 5\n  flight origin dest  carrier name                  \n   &lt;int&gt; &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt;   &lt;chr&gt;                 \n1   1545 EWR    IAH   UA      United Air Lines Inc. \n2   1714 LGA    IAH   UA      United Air Lines Inc. \n3   1141 JFK    MIA   AA      American Airlines Inc.\n4    725 JFK    BQN   B6      JetBlue Airways       \n5    461 LGA    ATL   DL      Delta Air Lines Inc.  \n\n\nWe now have one row per flight, with both carrier abbreviations and full names!"
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture5.html#join-example-2",
    "href": "Lectures/Lecture5/CSSS508_Lecture5.html#join-example-2",
    "title": "Roadmap",
    "section": "Join Example #2",
    "text": "Join Example #2\nflights also includes a tailnum variable for each plane’s tail number.\n\nflights |&gt; \n  select(flight,origin,dest,tailnum) |&gt; \n  head(2)\n\n# A tibble: 2 × 4\n  flight origin dest  tailnum\n   &lt;int&gt; &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt;  \n1   1545 EWR    IAH   N14228 \n2   1714 LGA    IAH   N24211 \n\n\n. . .\nplanes includes a row for each plane type, including the manufacturer.\n\nplanes |&gt; \n  select(tailnum,year,manufacturer,model) |&gt; \n  head(2)\n\n# A tibble: 2 × 4\n  tailnum  year manufacturer     model    \n  &lt;chr&gt;   &lt;int&gt; &lt;chr&gt;            &lt;chr&gt;    \n1 N10156   2004 EMBRAER          EMB-145XR\n2 N102UW   1998 AIRBUS INDUSTRIE A320-214"
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture5.html#join-example-2-continued",
    "href": "Lectures/Lecture5/CSSS508_Lecture5.html#join-example-2-continued",
    "title": "Roadmap",
    "section": "Join Example 2 (continued)",
    "text": "Join Example 2 (continued)\nLet’s left join flights with planes to add manufacture to each flight record!\n\nflights |&gt; \n  select(flight,origin,dest,tailnum) |&gt;\n  left_join(planes, by = \"tailnum\")  |&gt; \n  head(5)\n\n# A tibble: 5 × 12\n  flight origin dest  tailnum  year type  manufacturer model engines seats speed\n   &lt;int&gt; &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt;   &lt;int&gt; &lt;chr&gt; &lt;chr&gt;        &lt;chr&gt;   &lt;int&gt; &lt;int&gt; &lt;int&gt;\n1   1545 EWR    IAH   N14228   1999 Fixe… BOEING       737-…       2   149    NA\n2   1714 LGA    IAH   N24211   1998 Fixe… BOEING       737-…       2   149    NA\n3   1141 JFK    MIA   N619AA   1990 Fixe… BOEING       757-…       2   178    NA\n4    725 JFK    BQN   N804JB   2012 Fixe… AIRBUS       A320…       2   200    NA\n5    461 LGA    ATL   N668DN   1991 Fixe… BOEING       757-…       2   178    NA\n# ℹ 1 more variable: engine &lt;chr&gt;\n\n\nA bunch of columns from planes are now in the dataset!"
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture5.html#join-example-2-continued-1",
    "href": "Lectures/Lecture5/CSSS508_Lecture5.html#join-example-2-continued-1",
    "title": "Roadmap",
    "section": "Join Example 2 (continued)",
    "text": "Join Example 2 (continued)\nLet’s remove some of the “spare” columns\n\nflights |&gt; \n  select(flight, origin, dest, tailnum) |&gt;\n  left_join(planes, by = \"tailnum\")  |&gt; \n  select(flight, origin, dest, manufacturer, model) |&gt;\n  head(5)\n\n# A tibble: 5 × 5\n  flight origin dest  manufacturer model   \n   &lt;int&gt; &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt;        &lt;chr&gt;   \n1   1545 EWR    IAH   BOEING       737-824 \n2   1714 LGA    IAH   BOEING       737-824 \n3   1141 JFK    MIA   BOEING       757-223 \n4    725 JFK    BQN   AIRBUS       A320-232\n5    461 LGA    ATL   BOEING       757-232"
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture5.html#answers",
    "href": "Lectures/Lecture5/CSSS508_Lecture5.html#answers",
    "title": "Roadmap",
    "section": "Answers",
    "text": "Answers\nQuestion 1:\n\nsubset_gapminder &lt;- gapminder |&gt; \n  filter(country %in% c(\"China\",\"India\",\"United States\"),  year &gt; 1980 ) |&gt;\n  select(country, year, pop, lifeExp)\nsubset_gapminder |&gt; head(n = 5)\n\n# A tibble: 5 × 4\n  country  year        pop lifeExp\n  &lt;fct&gt;   &lt;int&gt;      &lt;int&gt;   &lt;dbl&gt;\n1 China    1982 1000281000    65.5\n2 China    1987 1084035000    67.3\n3 China    1992 1164970000    68.7\n4 China    1997 1230075000    70.4\n5 China    2002 1280400000    72.0"
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture5.html#answers-1",
    "href": "Lectures/Lecture5/CSSS508_Lecture5.html#answers-1",
    "title": "Roadmap",
    "section": "Answers",
    "text": "Answers\nQuestion 2:\n\n# Option 1\nc(nrow(subset_gapminder), ncol(subset_gapminder))\n\n[1] 18  4\n\n# Option 2\nglimpse(subset_gapminder)\n\nRows: 18\nColumns: 4\n$ country &lt;fct&gt; \"China\", \"China\", \"China\", \"China\", \"China\", \"China\", \"India\",…\n$ year    &lt;int&gt; 1982, 1987, 1992, 1997, 2002, 2007, 1982, 1987, 1992, 1997, 20…\n$ pop     &lt;int&gt; 1000281000, 1084035000, 1164970000, 1230075000, 1280400000, 13…\n$ lifeExp &lt;dbl&gt; 65.525, 67.274, 68.690, 70.426, 72.028, 72.961, 56.596, 58.553…\n\n# Option 3\ndim(subset_gapminder)\n\n[1] 18  4\n\n\n. . ."
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture5.html#answers-2",
    "href": "Lectures/Lecture5/CSSS508_Lecture5.html#answers-2",
    "title": "Roadmap",
    "section": "Answers",
    "text": "Answers\nQuestion 3:\n\nsubset_gapminder &lt;- subset_gapminder |&gt; \n  arrange(year, desc(pop))\n\nsubset_gapminder |&gt; head(6)\n\n# A tibble: 6 × 4\n  country        year        pop lifeExp\n  &lt;fct&gt;         &lt;int&gt;      &lt;int&gt;   &lt;dbl&gt;\n1 China          1982 1000281000    65.5\n2 India          1982  708000000    56.6\n3 United States  1982  232187835    74.6\n4 China          1987 1084035000    67.3\n5 India          1987  788000000    58.6\n6 United States  1987  242803533    75.0"
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture5.html#answers-3",
    "href": "Lectures/Lecture5/CSSS508_Lecture5.html#answers-3",
    "title": "Roadmap",
    "section": "Answers",
    "text": "Answers\nQuestion 4:\n\nsubset_gapminder &lt;- subset_gapminder |&gt; \n  mutate(pop_billions = pop/1000000000)\n\nsubset_gapminder |&gt; head(n = 5)\n\n# A tibble: 5 × 5\n  country        year        pop lifeExp pop_billions\n  &lt;fct&gt;         &lt;int&gt;      &lt;int&gt;   &lt;dbl&gt;        &lt;dbl&gt;\n1 China          1982 1000281000    65.5        1.00 \n2 India          1982  708000000    56.6        0.708\n3 United States  1982  232187835    74.6        0.232\n4 China          1987 1084035000    67.3        1.08 \n5 India          1987  788000000    58.6        0.788"
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture5.html#answers-4",
    "href": "Lectures/Lecture5/CSSS508_Lecture5.html#answers-4",
    "title": "Roadmap",
    "section": "Answers",
    "text": "Answers\nQuestion 5:\n\nClassic syntaxNew syntax (dplyr 1.1.0)\n\n\n\nsubset_gapminder |&gt; \n  group_by(year) |&gt; \n  summarize(TotalPop_Billions = sum(pop_billions))\n\n# A tibble: 6 × 2\n   year TotalPop_Billions\n  &lt;int&gt;             &lt;dbl&gt;\n1  1982              1.94\n2  1987              2.11\n3  1992              2.29\n4  1997              2.46\n5  2002              2.60\n6  2007              2.73\n\n\n\n\n\nsubset_gapminder |&gt; \n  summarize(TotalPop_Billions = sum(pop_billions), \n            .by = year)\n\n# A tibble: 6 × 2\n   year TotalPop_Billions\n  &lt;int&gt;             &lt;dbl&gt;\n1  1982              1.94\n2  1987              2.11\n3  1992              2.29\n4  1997              2.46\n5  2002              2.60\n6  2007              2.73\n\n\nThis new syntax allows for per-operation grouping which means it is only active within a single verb at a time (as opposed to being applied to the entire tibble until ungroup() is called). You can more about this new feature here)"
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture5.html#answers-5",
    "href": "Lectures/Lecture5/CSSS508_Lecture5.html#answers-5",
    "title": "Roadmap",
    "section": "Answers",
    "text": "Answers\nQuestion 6:\n\nCodePlot\n\n\n\nlibrary(ggplot2) \n# install.packages(\"ggthemes\") # run in console\nlibrary(ggthemes)\nggplot(subset_gapminder, aes(year, lifeExp, color = country, group = country)) +\n  theme_tufte(base_size = 20) + \n  geom_point() + \n  geom_line() +\n  xlab(\"Year\") + \n  ylab(\"Life Expectancy (years)\") +\n  ggtitle(\"Life Expectancy (1982-2007)\",\"China, India, and United States\") +\n  scale_x_continuous(breaks = c(1982, 1987, 1992, 1997, 2002, 2007), minor_breaks = c()) +\n  ylim(c(50, 80)) + \n  scale_color_discrete(name = \"Country\") + \n  theme(legend.position = \"bottom\")"
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html",
    "title": "Roadmap",
    "section": "",
    "text": "Visualizing Data\nCS&SS 508 • Lecture 2\n10 October 2023\nVictoria Sass"
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#due-dates-1",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#due-dates-1",
    "title": "",
    "section": "Due dates",
    "text": "Due dates\n\n\n\n\n\n\n\n\n#\n      \n        Section AA\n      \n      \n        Section AB\n      \n    \n\nHomework Due\n      Peer Review Due\n      Homework Due\n      Peer Review Due\n    \n\n\n\n1\n10 October\n15 October\n12 October\n17 October\n\n\n2\n17 October\n22 October\n19 October\n24 October\n\n\n3\n24 October\n29 October\n26 October\n31 October\n\n\n4\n31 October\n5 November\n2 November\n7 November\n\n\n5\n7 November\n12 November\n9 November\n14 November\n\n\n6\n14 November\n19 November\n16 November\n21 November\n\n\n7\n21 November\n26 November\n23 November\n28 November\n\n\n8\n28 November\n3 November\n30 November\n5 November\n\n\n9\n5 December\n10 December\n7 December\n12 December"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#grading-rubrics",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#grading-rubrics",
    "title": "Introductions & Syllabus",
    "section": "Grading Rubrics",
    "text": "Grading Rubrics\n\nHomework\nYou’ll be assigning one of your fellow students a grade based on the following rubric:\n\n\n\n\n\n\n  \n    \n    \n      Evaluation\n      Points\n    \n  \n  \n    Didn't turn anything in.\n0\n    Turned in but low effort, ignoring many directions.\n1\n    Decent effort, followed directions with some minor issues.\n2\n    Nailed it!\n3"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#logistics-1",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#logistics-1",
    "title": "",
    "section": "Logistics",
    "text": "Logistics\n\n\n\n Communication\n\n\nLearning is collaborative! In addition to being the place to communicate with me, our Slack Workplace is also where you can ask one another questions, share resources, and just generally check in with each other about how your adventures with R are going. You can find the link to join our workplace on our course Canvas page.\n\n\n\n\n\n\n\n\n Homework & Peer-Reviews\n\n\nWe will be using Canvas solely for homework & peer review submissions/deadlines and for any links I only want to distribute to those registered for this class (i.e. Slack and Office Hours Zoom).\n\n\n\n\n\n\n\n\n\n Course Content\n\n\nAll course content will be accessible on our course website: https://vsass.github.io/CSSS508."
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#prerequisites",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#prerequisites",
    "title": "Introductions & Syllabus",
    "section": "Prerequisites",
    "text": "Prerequisites\n. . .\n\nNone 😎"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#course-materials",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#course-materials",
    "title": "Introductions & Syllabus",
    "section": "Course Materials",
    "text": "Course Materials\nMaterials: All course materials will be provided on the course website. This includes:\n\nLecture slides and the code used to generate them.\nHomework instructions and/or templates.\nRecommended reading/cheatsheet(s).\nUseful links to other resources.\n\nLaptops: It’s helpful to bring a laptop to class. If you don’t have one, you can use the lab computers during section or borrow one for free from the UW Student Technology Loan Program.\n\n\n\n\n\n\n  Keep In Mind\n\n\n\nThe versions of R, RStudio, and Quarto (as well as any packages you have installed) will not necessarily be the same/up to date if you start using a different computer. My advice is to consistently use the same device or make sure to download the latest versions of R, RStudio, and Quarto when using a new machine."
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#readings",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#readings",
    "title": "Introductions & Syllabus",
    "section": "Readings",
    "text": "Readings\n\n\n\nTextbooks: This course has no textbook. However, I will be suggesting selections from R for Data Science to pair with each week’s topic. While not required, I strongly suggest reading those selections before doing the homework for that week."
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#homework-1-1",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#homework-1-1",
    "title": "",
    "section": "Homework #1",
    "text": "Homework #1\nWrite up a .qmd file showing some exploratory analyses of the Swiss fertility data. Upload both the .qmd file and the .html file to Canvas. You must upload BOTH for credit.\n\n\nMix in-line R calculations, R output, and plots with text describing the relationships you see. Include at least two plots. You are encouraged to include more! You must use in-line R calculations/references at least once (e.g. functions like nrow(), mean(), sd(), cor(), median(), min()) and may not hard-code any numbers referenced in your text.\n\n\n\nYour document should be pleasant for a peer to look at, with some organization using sections or lists, and all plots labeled clearly. Use chunk options echo and output to limit the code/output you show in the .html. Discussion of specific values should be summarized in sentences in your text—not as printed code and output—and rounded so as not to be absurdly precise (e.g. round x with round(x, 2)).\n\n\n\nTake a look at the template provided on our course website for an idea of what this might look like using a different dataset."
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#grading-1",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#grading-1",
    "title": "",
    "section": "Grading",
    "text": "Grading\nHomework/peer grading instructions and deadlines can be found on the Homework page of the course website. All homework will be turned in on Canvas by 4:30pm the day it is due.\nSchedule\nWe have a bit of a funky schedule due to increasing demand for this course over the years. Thus, instead of a 2-hour interactive lecture/lab each week we have a 50 minute lecture and 2 separate lab sections. To make sure everyone gets to practice the skills we learn in lecture before starting their homework, the due dates for your homework and peer reviews will depend upon which lab section you’re enrolled in. Make sure to check Canvas!\n\n\n\n Late Homework Will Not Be Accepted For Credit\n\n\nDue to the nature of our schedule, peer reviews are randomly assigned when the due date/time is reached. Therefore, if you don’t submit your homework on time, you will not be given a peer’s homework to review and vice versa. Life is messy and complicated though and we all miss deadlines for a variety of reasons. Therefore, you can request that I provide you with feedback on a late assignment (message me on Slack) but you won’t be able to earn any points for that particular homework."
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#prerequisites-1",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#prerequisites-1",
    "title": "",
    "section": "Prerequisites",
    "text": "Prerequisites\n\n😎"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#classroom-environment-1",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#classroom-environment-1",
    "title": "Introductions & Syllabus",
    "section": "Classroom Environment…",
    "text": "Classroom Environment…\nNames & Pronouns: Everyone deserves to be addressed respectfully and correctly. Fill out your profile on Slack with your picture, preferred name (as your Display Name), and correct gender pronouns so we can all be on the same page!\n. . .\nCovid Considerations: I will follow all University rules and procedures regarding Covid, which may or may not change during the quarter. I also recognize that Covid creates unique circumstances and concerns for each of us, which may limit your ability to fully attend or participate in this course. You never need to apologize to me for anything pandemic-related. If there is something I can do to make you feel more comfortable during class, please let me know!\n. . .\nDiversity: Diverse backgrounds, embodiments, and experiences are essential to the critical thinking endeavor at the heart of university education. Therefore, I expect you to follow the UW Student Conduct Code in your interactions with your colleagues and me in this course by respecting the many social and cultural differences among us, which may include, but are not limited to: age, cultural background, disability, ethnicity, family status, gender identity and presentation, body size/shape, citizenship and immigration status, national origin, race, religious and political beliefs, sex, sexual orientation, socioeconomic status, and veteran status."
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#classroom-environment-2",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#classroom-environment-2",
    "title": "",
    "section": "Classroom Environment",
    "text": "Classroom Environment\nAccessibility & Accommodations: Your experience in this class is important to me. If you have already established accommodations with Disability Resources for Students (DRS), please communicate your approved accommodations to me at your earliest convenience so we can discuss your needs in this course. If you have not yet established services through DRS, but have a temporary health condition or permanent disability that requires accommodations (conditions include but not limited to; mental health, attention-related, learning, vision, hearing, physical or health impacts), you are welcome to contact DRS at 206-543-8924, uwdrs@uw.edu, or through their website.\n\nReligious Accommodations: Washington state law requires that UW develop a policy for accommodation of student absences or significant hardship due to reasons of faith or conscience, or for organized religious activities. The UW's policy, including more information about how to request an accommodation, is available at Religious Accommodations Policy. Accommodations must be requested within the first two weeks of this course using the Religious Accommodations Request form."
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#classroom-environment-3",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#classroom-environment-3",
    "title": "",
    "section": "Classroom Environment",
    "text": "Classroom Environment\nGetting Help: If at any point during the quarter you find yourself struggling to keep up, please let me know! I am here to help. A great place to start this process is by chatting after class, coming to office hours, or sending me a message on Slack.\n\nAlso, help one another as you navigate this course! Slack allows you to chat directly with one another, send messages to the whole class about specific topics (see the already-created # r-code-questions and # quarto-questions channels), send snippets of code or entire files to one another, and much more.\n\n\n\n\n\n\n\n\n Feedback\n\n\nIf you have feedback on any part of this course or the classroom environment I want to hear it! You can message me directly on Slack or send me an anonymous message here. Additionally, I will send out a mid-quarter feedback survey on Slack around Week 5."
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#fa-brands-slack-slack",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#fa-brands-slack-slack",
    "title": "Introductions & Syllabus",
    "section": " Slack",
    "text": "Slack\nIf you’ve never used Slack before you’ll need to download the desktop app.\n. . .\nA useful quick-start guide can be found here.\n. . .\nGo to our Canvas site for the invite link to join our private workspace."
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#a-note-on-slide-formatting-1",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#a-note-on-slide-formatting-1",
    "title": "Introductions & Syllabus",
    "section": "A Note on Slide Formatting",
    "text": "A Note on Slide Formatting\nBold usually indicates an important vocabulary term. Remember these!\nItalics indicate emphasis but also are used to point out things you must click with a mouse.\n\nFor example: “Please click File &gt; Print”\n\nCode represents R code you could use to perform actions.\n\nFor example: “Press Ctrl-P to open the print dialogue.”\n\nCode chunks that span the page represent actual R code embedded in the slides.\n\n7 * 49 \n# Sometimes important stuff is highlighted!"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#base-r-1",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#base-r-1",
    "title": "",
    "section": "Base R\n",
    "text": "Base R\n\nSimply by downloading R you have access to what is referred to as Base R. That is, the build-in functions and datasets that R comes equipped with, right out of the box.\n\nExamples that we’ve already seen include &lt;-, sqrt(), +, Sys.time(), and summary() but there are obviously many many more.\n\n\nYou can see a whole list of what Base R contains by running library(help = \"base\") in the console."
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#packages",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#packages",
    "title": "Introductions & Syllabus",
    "section": "Packages",
    "text": "Packages\nWhat makes R so powerful though is it’s extensive library of packages. Due to it’s open-source nature, anyone (even you!) can write a package that others can use.\n. . .\nPackages contain pre-made functions and/or data that can be used to extend Base R’s capabilities.\n. . .\n\n\n\n\n\n\n  Base R/Package Analogy\n\n\n\nBase R is like creating a recipe from scratch: going to the store and buying all the ingredients and cooking it by yourself. Using a package is more akin to using a meal-kit service: you still have to cook but you’re provided with the ingredients and step-by-step instructions for making the recipe.\n\n\n. . .\nAs of this writing there are 19,940 available packages!"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#base-r",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#base-r",
    "title": "Introductions & Syllabus",
    "section": "Base R",
    "text": "Base R\nSimply by downloading R you have access to what is referred to as Base R. That is, the build-in functions and datasets that R comes equipped with, right out of the box.\n. . .\nExamples that we’ve already seen include &lt;-, sqrt(), +, Sys.time(), and summary() but there are obviously many many more.\n. . .\nYou can see a whole list of what Base R contains by running library(help = \"base\") in the console."
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#a-base-r-dataset-cars",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#a-base-r-dataset-cars",
    "title": "Introductions & Syllabus",
    "section": "A Base R Dataset: cars",
    "text": "A Base R Dataset: cars\nIn the sample Quarto document you are working on, we can load the built-in data cars, which loads as a dataframe, a type of object mentioned earlier. Then, we can look at it in a couple different ways.\n. . .\ndata(cars) loads this dataframe into the Global Environment.\n. . .\nView(cars) pops up a Viewer tab in the source pane (“interactive” use only, don’t put in Quarto document!).\n. . .\n\nhead(cars, 5) # prints first 5 rows, can use tail() too\n\n  speed dist\n1     4    2\n2     4   10\n3     7    4\n4     7   22\n5     8   16"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#a-base-r-dataset-cars-1",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#a-base-r-dataset-cars-1",
    "title": "Introductions & Syllabus",
    "section": "A Base R Dataset: cars",
    "text": "A Base R Dataset: cars\nstr() displays the structure of an object:\n\nstr(cars) # str[ucture]\n\n'data.frame':   50 obs. of  2 variables:\n $ speed: num  4 4 7 7 8 9 10 10 10 11 ...\n $ dist : num  2 10 4 22 16 10 18 26 34 17 ..."
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#base-r-is-prettybasic",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#base-r-is-prettybasic",
    "title": "Introductions & Syllabus",
    "section": "Base R is pretty…Basic",
    "text": "Base R is pretty…Basic\nhist() generates a histogram of a vector. Note you can access a vector that is a column of a dataframe using $, the extract operator.\n\n\n\nhist(cars$speed) # Histogram\n\n\n\n\n\n\nhist(cars$dist)"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#base-r-is-prettybasic-1",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#base-r-is-prettybasic-1",
    "title": "Introductions & Syllabus",
    "section": "Base R is pretty…Basic",
    "text": "Base R is pretty…Basic\nWe can try and make this histogram a bit more appealing by adding more arguments and their specifications.\n\nCodePlot\n\n\n\nhist(cars$dist,\n     xlab = \"Distance (ft)\", # X axis label\n     main = \"Observed stopping distances of cars\") # Title"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#base-r-is-prettybasic-2",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#base-r-is-prettybasic-2",
    "title": "Introductions & Syllabus",
    "section": "Base R is pretty…Basic",
    "text": "Base R is pretty…Basic\nWe can also make scatterplots to show the relationship between two variables.\n\nCodePlot\n\n\n\nplot(dist ~ speed, data = cars,\n     xlab = \"Speed (mph)\",\n     ylab = \"Stopping distance (ft)\",\n     main = \"Speeds and stopping distances of cars\",\n     pch = 16) # Point shape\nabline(h = mean(cars$dist), col = \"firebrick\") # add horizontal line\nabline(v = mean(cars$speed), col = \"cornflowerblue\") # add vertical line\n\n\n\n\n\n\n\n\n Note\n\n\n\ndist ~ speed is a formula of the type y ~ x. The first element (dist) gets plotted on the y-axis and the second (speed) goes on the x-axis. Regression formulae follow this convention as well!"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#installing-packages-1",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#installing-packages-1",
    "title": "Introductions & Syllabus",
    "section": "Installing Packages",
    "text": "Installing Packages\nTo use a package outside of Base R you need to do two things:\n\nDownload the package from CRAN (The Comprehensive R Archive Network) by running the following in your console:7\n\n\ninstall.packages(\"package_name\")\n\n. . ."
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#a-base-r-dataset-cars-2",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#a-base-r-dataset-cars-2",
    "title": "Introductions & Syllabus",
    "section": "A Base R Dataset: cars",
    "text": "A Base R Dataset: cars\nstr() displays the structure of an object:\n\nstr(cars) # str[ucture]\n\n'data.frame':   50 obs. of  2 variables:\n $ speed: num  4 4 7 7 8 9 10 10 10 11 ...\n $ dist : num  2 10 4 22 16 10 18 26 34 17 ...\n\n\nsummary() displays summary information 6:\n\nsummary(cars)\n\n     speed           dist       \n Min.   : 4.0   Min.   :  2.00  \n 1st Qu.:12.0   1st Qu.: 26.00  \n Median :15.0   Median : 36.00  \n Mean   :15.4   Mean   : 42.98  \n 3rd Qu.:19.0   3rd Qu.: 56.00  \n Max.   :25.0   Max.   :120.00"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#base-r-is-prettybasic-3",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#base-r-is-prettybasic-3",
    "title": "Introductions & Syllabus",
    "section": "Base R is pretty…Basic",
    "text": "Base R is pretty…Basic\nWe can also make scatterplots to show the relationship between two variables.\n\nCodePlot\n\n\n\nplot(dist ~ speed, data = cars,\n     xlab = \"Speed (mph)\",\n     ylab = \"Stopping distance (ft)\",\n     main = \"Speeds and stopping distances of cars\",\n     pch = 16) # Point shape\nabline(h = mean(cars$dist), col = \"firebrick\") # add horizontal line\nabline(v = mean(cars$speed), col = \"cornflowerblue\") # add vertical line"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#installing-packages-2",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#installing-packages-2",
    "title": "Introductions & Syllabus",
    "section": "Installing Packages",
    "text": "Installing Packages\nTo use a package outside of Base R you need to do two things:\n\nDownload the package from CRAN (The Comprehensive R Archive Network) by running the following in your console:8\n\n\ninstall.packages(\"package_name\")\n\nThis downloads the package to your local machine (or the server of whatever remote machine you’re using). Thus, you only every need to do it once for each package9!"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#another-base-r-dataset-swiss",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#another-base-r-dataset-swiss",
    "title": "Introductions & Syllabus",
    "section": "Another Base R Dataset: swiss",
    "text": "Another Base R Dataset: swiss\nLet’s switch gears to the swiss data frame built in to R.\n. . .\nFirst, use ?swiss to see what things mean.\n. . .\nThen, load it using data(swiss)\n. . .\nAdd chunks to your Quarto document inspecting swiss, defining variables, doing some exploratory plots using hist or plot.\nYou might experiment with colors and shapes."
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#gt-package",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#gt-package",
    "title": "Introductions & Syllabus",
    "section": "gt Package",
    "text": "gt Package\nLet’s make a table that’s more polished than the code-y output R automatically gives us. To do this, we’ll want to install our first package called gt. In the console, run: install.packages(\"gt\").\n\n\n\n\n\n\n Different Syntax\n\n\n\nNotice that unlike the library() command, the name of a package to be installed must be in quotes? This is because the name here is a search term (text, not an object!) while for library() it is an actual R object."
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#installing-packages-3",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#installing-packages-3",
    "title": "Introductions & Syllabus",
    "section": "Installing Packages",
    "text": "Installing Packages\nTo use a package outside of Base R you need to do two things:\n\nDownload the package from CRAN (The Comprehensive R Archive Network) by running the following in your console10:\n\n\ninstall.packages(\"package_name\")\n\nThis downloads the package to your local machine (or the server of whatever remote machine you’re using). Thus, you only every need to do it once for each package11!\n\nOnce a package is installed, you need to load it into the current session of R so you can use it. You’ll do this by putting the following in an R Script or embedded in a code chunk in a Quarto file:\n\n\nlibrary(package_name)"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#making-cleaner-tables",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#making-cleaner-tables",
    "title": "Introductions & Syllabus",
    "section": "Making cleaner tables",
    "text": "Making cleaner tables\n\nCodeTable\n\n\n\nlibrary(gt) # loads gt, do once in your session\ngt(as.data.frame.matrix(summary(swiss))) \n\n\n\n\n\n\n\n\n Nesting Functions\n\n\n\nNote that we put the summary(swiss) function call inside the as.data.frame.matrix() call which all went into the gt() function. This is called nesting functions and is very common. I’ll introduce a method next week to avoid confusion from nesting too many functions inside each other.\n\n\n\n\n\n\n\n\n\n\n What’s as.data.frame.matrix() Doing?\n\n\n\ngt() takes as its first argument a data.frame-type object, while summary() produces a table-type object. Therefore, as.data.frame.matrix() was additionally needed to turn the table into a data.frame.\n\n\n\n\n\n\n\n\n\n\n\n  \n    \n    \n        Fertility\n       Agriculture\n       Examination\n        Education\n         Catholic\n      Infant.Mortality\n    \n  \n  \n    Min.   :35.00  \nMin.   : 1.20  \nMin.   : 3.00  \nMin.   : 1.00  \nMin.   :  2.150  \nMin.   :10.80  \n    1st Qu.:64.70  \n1st Qu.:35.90  \n1st Qu.:12.00  \n1st Qu.: 6.00  \n1st Qu.:  5.195  \n1st Qu.:18.15  \n    Median :70.40  \nMedian :54.10  \nMedian :16.00  \nMedian : 8.00  \nMedian : 15.140  \nMedian :20.00  \n    Mean   :70.14  \nMean   :50.66  \nMean   :16.49  \nMean   :10.98  \nMean   : 41.144  \nMean   :19.94  \n    3rd Qu.:78.45  \n3rd Qu.:67.65  \n3rd Qu.:22.00  \n3rd Qu.:12.00  \n3rd Qu.: 93.125  \n3rd Qu.:21.70  \n    Max.   :92.50  \nMax.   :89.70  \nMax.   :37.00  \nMax.   :53.00  \nMax.   :100.000  \nMax.   :26.60"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#gts-version-of-head-and-tail",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#gts-version-of-head-and-tail",
    "title": "Introductions & Syllabus",
    "section": "gt’s Version of head() and tail()",
    "text": "gt’s Version of head() and tail()\n\nhead()gt_preview() alternative\n\n\n\nhead(swiss)\n\n             Fertility Agriculture Examination Education Catholic\nCourtelary        80.2        17.0          15        12     9.96\nDelemont          83.1        45.1           6         9    84.84\nFranches-Mnt      92.5        39.7           5         5    93.40\nMoutier           85.8        36.5          12         7    33.77\nNeuveville        76.9        43.5          17        15     5.16\nPorrentruy        76.1        35.3           9         7    90.57\n             Infant.Mortality\nCourtelary               22.2\nDelemont                 22.2\nFranches-Mnt             20.2\nMoutier                  20.3\nNeuveville               20.6\nPorrentruy               26.6\n\n\n\n\n\ngt_preview(swiss, \n           top_n = 3, # default is 5\n           bottom_n = 3) # default is 1 \n\n\n\n\n\n\n\n  \n    \n    \n      \n      Fertility\n      Agriculture\n      Examination\n      Education\n      Catholic\n      Infant.Mortality\n    \n  \n  \n    1\n80.2\n17.0\n15\n12\n9.96\n22.2\n    2\n83.1\n45.1\n6\n9\n84.84\n22.2\n    3\n92.5\n39.7\n5\n5\n93.40\n20.2\n    4..44\n\n\n\n\n\n\n    45\n35.0\n1.2\n37\n53\n42.34\n18.0\n    46\n44.7\n46.6\n16\n29\n50.43\n18.2\n    47\n42.8\n27.7\n22\n29\n58.33\n19.3\n  \n  \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n👋 Bye Bye as.data.frame.matrix()\n\n\n\nWe no longer need as.data.frame.matrix() since head(swiss) produces a data.frame-type object, which is what both gt() and gt_preview() take as their first argument."
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#grading-rubrics-1",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#grading-rubrics-1",
    "title": "Introductions & Syllabus",
    "section": "Grading Rubrics",
    "text": "Grading Rubrics\n\nPeer-Review\nI will be assigning you a grade for your peer-review based on the following rubric:\n\n\n\n\n\n\n  \n    \n    \n      Evaluation\n      Points\n    \n  \n  \n    Didn’t follow all peer-review instructions.\n\n0\n\n    Peer review is at least one paragraph long, \nmentions any and all key issues from the assignment, \nand points out at least one positive thing in your \npeer’s work (and hopefully more!).\n\n1"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#suggested-reading",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#suggested-reading",
    "title": "",
    "section": "Suggested Reading",
    "text": "Suggested Reading\n\nIntroduction in R for Data Science (Second Edition)"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#suggested-reading-useful-resources",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#suggested-reading-useful-resources",
    "title": "Introductions & Syllabus",
    "section": "Suggested Reading & Useful Resources",
    "text": "Suggested Reading & Useful Resources\n\n\nSuggested Reading (from R for Data Science (2e))\nChapter 1: Introduction • Chapter 29: Quarto\n\n\nResources\n\nCheatsheets\n\nRStudio: Website • PDF\nQuarto: Website • PDF\nBase R: PDF\n\n\n\nAdditional Reading\nHands-On Programming with R - A great book for someone with no experience with R or programming\n\n\nCrowdsource Help\nCS&SS 508 Slack Workspace • Posit community • Stackoverflow"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#a-note-on-how-to-use-these-slides",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#a-note-on-how-to-use-these-slides",
    "title": "",
    "section": "A Note on How to Use These Slides",
    "text": "A Note on How to Use These Slides\nSince the lectures for this class were created using Quarto, there are numerous built-in features meant to facilitate your learning, particularly of R.\n\n\nThe  in the bottom left-hand corner will show you a table of contents for the entire slideshow, allowing you to find what you’re looking for more easily.\nAnything followed by  is a link to an external site. You will be shown a preview (if available) within the presentation first and from there you can open the link in a new tab to explore it more.\n\nRelatedly, any R function in code-looking font will be linked to it’s documentation (which is the same as its help page within RStudio) so you can quickly learn more about any function we cover in class directly through the lecture slides. (Note: not all of these work in the preview so you may have to open a new tab).\n\n\nIf you hover over any chunk of R code embedded in the slides you will see a  which you can click to copy the code. You can then paste it in your own Quarto document or R script to run it in your session of RStudio.\nTo get a PDF version of these slides click File &gt; Print from your internet browser, select Save as PDF as the Destination or Printer, and make sure the Layout is set to Landscape. (Note: the PDF Export Mode in Tools actually cuts off content which is why I’m not recommending it)\nClicking on the  in the bottom left-hand corner allows you to draw directly on the slides, in a very Microsoft Paint kind of way. See if it’s useful but I make no promises!\nType ? at any time to see all the available key-board shortcuts."
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#logistics-general",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#logistics-general",
    "title": "Introductions & Syllabus",
    "section": "Logistics: General",
    "text": "Logistics: General\nLecture: At the beginning of each week I will post a video lecture covering a specific topic to help you learn fundamental skills, concepts, and principles for learning R. Watch the video at your convenience but definitely before coming to your lab section. The content from lecture each week will also be the basis of the homework assignment due the following week.\nLabs: An interactive session where we will practice the skills from the lecture videos in-person in the CSSCR computer lab (Savery 117). These sections will give you all an opportunity to work with each other to learn and practice key skills in R and I will be available to answer questions and help troubleshoot code as well.\n\n\n\nLab AA: Tuesdays 5:30 - 6:20pm\n\n\n\nLab AB: Thursdays 4:30 - 5:20pm\n\n\n\nOffice Hours: Drop-in to ask questions, get advice, or continue discussions from lab/lecture. We can talk in a breakout room or with the group!\n\nWednesdays, 3-5pm (on Zoom; link on Canvas\n\nContact: message me in our Slack Workspace rather than sending me an email. I get far too many emails a day and I don’t want to miss your message!"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#logistics-three-tools-for-class",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#logistics-three-tools-for-class",
    "title": "Introductions & Syllabus",
    "section": "Logistics: Three Tools for Class",
    "text": "Logistics: Three Tools for Class\n\n\n\n\n\n\n\n Communication\n\n\n\nLearning is collaborative! In addition to being the place to communicate with me, our Slack is also where you can ask one another questions, share resources, and just generally check in with each other about how your adventures with R are going. You can find the link to join our workplace on our course Canvas.\n\n\n. . .\n\n\n\n\n\n\n Homework & Peer-Reviews\n\n\n\nWe will be using Canvas solely for homework & peer review submissions/deadlines and for any links I only want to distribute to those registered for this class (i.e. Slack and Office Hours Zoom).\n\n\n. . .\n\n\n\n\n\n\n Course Content\n\n\n\nAll course content will be accessible on our course website: https://vsass.github.io/CSSS508."
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#course-assessment",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#course-assessment",
    "title": "Introductions & Syllabus",
    "section": "Course Assessment",
    "text": "Course Assessment\n\nFinal grade\nCredit/No Credit (C/NC); You need at least 60% to get Credit\n\n\n\nHomework (75%; assessed by peers)\n9 total homeworks; assessed on a 0-3 point rubric. Assigned at the end of lab sections and due a week later.\n\n\n\n\n\n\n  \n    \n    \n      Evaluation\n      Points\n    \n  \n  \n    Didn't turn anything in.\n0\n    Turned in but low effort, ignoring many directions.\n1\n    Decent effort, followed directions with some minor issues.\n2\n    Nailed it!\n3\n  \n  \n  \n\n\n\n\n\n\n\nPeer Grading (25%; assessed by me)\nOne per homework, assessed on a binary “satisfactory”/“unsatisfactory” scale. Due 5 days after homework due date.\n\n\n\n\n\n\n  \n    \n    \n      Evaluation\n      Points\n    \n  \n  \n    Didn’t follow all peer-review instructions.\n\n0\n\n    Peer review is at least one paragraph long, \nmentions any and all key issues from the assignment, \nand points out at least one positive thing in your \npeer’s work (and hopefully more!).\n\n1"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#due-dates-and-late-policy",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#due-dates-and-late-policy",
    "title": "Introductions & Syllabus",
    "section": "Due Dates and Late Policy",
    "text": "Due Dates and Late Policy\nHomework/peer grading instructions and deadlines can be found on the Homework page of the course website. All homework will be turned in on Canvas by 4:30pm the day it is due.\n\nSchedule\nWe have a bit of a funky schedule due to increasing demand for this course over the years. Thus, instead of a 2-hour interactive lecture/lab each week we have a 50 minute lecture and 2 separate lab sections. To make sure everyone gets to practice the skills we learn in lecture before starting their homework, the due dates for your homework and peer reviews will depend upon which lab section you’re enrolled in. Make sure to check Canvas!\n\n\n\n\n\n\n Late Homework Will Not Be Accepted For Credit\n\n\n\nDue to the nature of our schedule, peer reviews are randomly assigned when the due date/time is reached. Therefore, if you don’t submit your homework on time, you will not be given a peer’s homework to review and vice versa. Life is messy and complicated though and we all miss deadlines for a variety of reasons. Therefore, you can request that I provide you with feedback on a late assignment (message me on Slack) but you won’t be able to earn any points for that particular homework."
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#accommodations",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#accommodations",
    "title": "Introductions & Syllabus",
    "section": "Accommodations",
    "text": "Accommodations\nAccessibility & Accommodations: Your experience in this class is important to me. If you have already established accommodations with Disability Resources for Students (DRS), please communicate your approved accommodations to me at your earliest convenience so we can discuss your needs in this course. If you have not yet established services through DRS, but have a temporary health condition or permanent disability that requires accommodations (conditions include but not limited to; mental health, attention-related, learning, vision, hearing, physical or health impacts), you are welcome to contact DRS at 206-543-8924, uwdrs@uw.edu, or through their website.\n. . .\nReligious Accommodations: Washington state law requires that UW develop a policy for accommodation of student absences or significant hardship due to reasons of faith or conscience, or for organized religious activities. The UW's policy, including more information about how to request an accommodation, is available at Religious Accommodations Policy. Accommodations must be requested within the first two weeks of this course using the Religious Accommodations Request form."
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#help-and-feedback",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#help-and-feedback",
    "title": "Introductions & Syllabus",
    "section": "Help and Feedback",
    "text": "Help and Feedback\nGetting Help: If at any point during the quarter you find yourself struggling to keep up, please let me know! I am here to help. A great place to start this process is by chatting after class, coming to office hours, or message meon Slack.\n. . .\nAlso, help one another as you navigate this course! Slack allows you to chat directly with one another, send messages to the whole class about specific topics (see the already-created # r-code-questions and # quarto-questions channels), send snippets of code or entire files to one another, and much more.\n. . .\n\n\n\n\n\n\n Feedback\n\n\n\nIf you have feedback on any part of this course or the classroom environment I want to hear it! You can message me directly on Slack or send me an anonymous message here. Additionally, I will send out a mid-quarter feedback survey on Slack around Week 5."
  },
  {
    "objectID": "Lectures/Lecture9/CSSS508_Lecture9.html",
    "href": "Lectures/Lecture9/CSSS508_Lecture9.html",
    "title": "Roadmap",
    "section": "",
    "text": "Iteration\nCS&SS 508 • Lecture 9\n28 November 2023\nVictoria Sass"
  },
  {
    "objectID": "Homework/HW7/homework7.html",
    "href": "Homework/HW7/homework7.html",
    "title": "Homework 7",
    "section": "",
    "text": "Due Dates\n\n\n\n\n\n\n  \n    \n    \n      #\n      \n        Section AA\n      \n      \n        Section AB\n      \n    \n    \n      Homework Due\n      Peer Review Due\n      Homework Due\n      Peer Review Due\n    \n  \n  \n    1\n10 October\n15 October\n12 October\n17 October\n    2\n17 October\n22 October\n19 October\n24 October\n    3\n24 October\n29 October\n26 October\n31 October\n    4\n31 October\n5 November\n2 November\n7 November\n    5\n7 November\n12 November\n9 November\n14 November\n    6\n14 November\n19 November\n16 November\n21 November\n    7\n21 November\n26 November\n23 November\n28 November\n    8\n28 November\n3 November\n30 November\n5 November\n    9\n5 December\n10 December\n7 December\n12 December"
  },
  {
    "objectID": "Homework/HW8/homework8.html",
    "href": "Homework/HW8/homework8.html",
    "title": "Homework 8",
    "section": "",
    "text": "Due Dates\n\n\n\n\n\n\n  \n    \n    \n      #\n      \n        Section AA\n      \n      \n        Section AB\n      \n    \n    \n      Homework Due\n      Peer Review Due\n      Homework Due\n      Peer Review Due\n    \n  \n  \n    1\n10 October\n15 October\n12 October\n17 October\n    2\n17 October\n22 October\n19 October\n24 October\n    3\n24 October\n29 October\n26 October\n31 October\n    4\n31 October\n5 November\n2 November\n7 November\n    5\n7 November\n12 November\n9 November\n14 November\n    6\n14 November\n19 November\n16 November\n21 November\n    7\n21 November\n26 November\n23 November\n28 November\n    8\n28 November\n3 November\n30 November\n5 November\n    9\n5 December\n10 December\n7 December\n12 December"
  },
  {
    "objectID": "Homework/HW3/homework3.html",
    "href": "Homework/HW3/homework3.html",
    "title": "Homework 3",
    "section": "",
    "text": "For this assignment, include all code and relevant output in your rendered html document."
  },
  {
    "objectID": "Homework/HW2/homework2.html",
    "href": "Homework/HW2/homework2.html",
    "title": "Homework 2",
    "section": "",
    "text": "Instructions\nIn this homework, you’ll pose a question regarding the Gapminder dataset and investigate it graphically.\n\nAt the beginning of your document, write down a research question that is based on the Gapminder dataset (e.g., “How does population change over time in different countries?”)\nCreate 3-6 plots to answer/investigate your research question. Consider histograms (geom_histogram()), scatterplots (geom_point()), or lineplots (geom_line()).\nBe sure all titles, axes, and legends are clearly labelled (no raw variable names).\nInclude at least one plot with facet_wrap() or facet_grid().\nYou can use other geoms like bar charts, box plots, add meaningful vertical or horizontal lines, etc. You may find this data visualization cheat sheet helpful.\n\nYour document should be pleasant for a peer to look at, with some organization. You must write up your observations in words as well as showing the graphs. Upload both the .qmd file and the .html file to Canvas.\nOptional: If you’d like to compare several specific countries, you can adapt the following pseudo_code below to create a subset of the data with as many countries as you like. Replace \"country1\" et al. with the country name as it appears in the dataset. Use unique(gapminder$country) to see a complete list of all the countries available.:\n\nsubset &lt;- gapminder |&gt; \n  filter(country %in% c(\"county1\", \"country2\", \"country3\"))\n\n\n\nDue Dates\n\n\n\n\n\n\n  \n    \n    \n      #\n      \n        Section AA\n      \n      \n        Section AB\n      \n    \n    \n      Homework Due\n      Peer Review Due\n      Homework Due\n      Peer Review Due\n    \n  \n  \n    1\n10 October\n15 October\n12 October\n17 October\n    2\n17 October\n22 October\n19 October\n24 October\n    3\n24 October\n29 October\n26 October\n31 October\n    4\n31 October\n5 November\n2 November\n7 November\n    5\n7 November\n12 November\n9 November\n14 November\n    6\n14 November\n19 November\n16 November\n21 November\n    7\n21 November\n26 November\n23 November\n28 November\n    8\n28 November\n3 November\n30 November\n5 November\n    9\n5 December\n10 December\n7 December\n12 December"
  },
  {
    "objectID": "Homework/HW4/homework4.html",
    "href": "Homework/HW4/homework4.html",
    "title": "Homework 4",
    "section": "",
    "text": "Due Dates\n\n\n\n\n\n\n  \n    \n    \n      #\n      \n        Section AA\n      \n      \n        Section AB\n      \n    \n    \n      Homework Due\n      Peer Review Due\n      Homework Due\n      Peer Review Due\n    \n  \n  \n    1\n10 October\n15 October\n12 October\n17 October\n    2\n17 October\n22 October\n19 October\n24 October\n    3\n24 October\n29 October\n26 October\n31 October\n    4\n31 October\n5 November\n2 November\n7 November\n    5\n7 November\n12 November\n9 November\n14 November\n    6\n14 November\n19 November\n16 November\n21 November\n    7\n21 November\n26 November\n23 November\n28 November\n    8\n28 November\n3 November\n30 November\n5 November\n    9\n5 December\n10 December\n7 December\n12 December"
  },
  {
    "objectID": "Homework/HW6/homework6.html",
    "href": "Homework/HW6/homework6.html",
    "title": "Homework 6",
    "section": "",
    "text": "Due Dates\n\n\n\n\n\n\n  \n    \n    \n      #\n      \n        Section AA\n      \n      \n        Section AB\n      \n    \n    \n      Homework Due\n      Peer Review Due\n      Homework Due\n      Peer Review Due\n    \n  \n  \n    1\n10 October\n15 October\n12 October\n17 October\n    2\n17 October\n22 October\n19 October\n24 October\n    3\n24 October\n29 October\n26 October\n31 October\n    4\n31 October\n5 November\n2 November\n7 November\n    5\n7 November\n12 November\n9 November\n14 November\n    6\n14 November\n19 November\n16 November\n21 November\n    7\n21 November\n26 November\n23 November\n28 November\n    8\n28 November\n3 November\n30 November\n5 November\n    9\n5 December\n10 December\n7 December\n12 December"
  },
  {
    "objectID": "Homework/HW9/homework9.html",
    "href": "Homework/HW9/homework9.html",
    "title": "Homework 9",
    "section": "",
    "text": "Due Dates\n\n\n\n\n\n\n  \n    \n    \n      #\n      \n        Section AA\n      \n      \n        Section AB\n      \n    \n    \n      Homework Due\n      Peer Review Due\n      Homework Due\n      Peer Review Due\n    \n  \n  \n    1\n10 October\n15 October\n12 October\n17 October\n    2\n17 October\n22 October\n19 October\n24 October\n    3\n24 October\n29 October\n26 October\n31 October\n    4\n31 October\n5 November\n2 November\n7 November\n    5\n7 November\n12 November\n9 November\n14 November\n    6\n14 November\n19 November\n16 November\n21 November\n    7\n21 November\n26 November\n23 November\n28 November\n    8\n28 November\n3 November\n30 November\n5 November\n    9\n5 December\n10 December\n7 December\n12 December"
  },
  {
    "objectID": "Homework/HW1/CSSS508_HW1_Example.html",
    "href": "Homework/HW1/CSSS508_HW1_Example.html",
    "title": "CSSS508 Homework 1 Example",
    "section": "",
    "text": "I’m interested in exploring a dataset from base R called iris. From its documentation I see that it is data about 50 flowers from each of 3 species of iris and their respective measurements of sepal length, sepal width, petal length, and petal width.\nI first want to take a look at a preview of the dataset by making a nice table.\n\n\n\n\n\n\n  \n    \n    \n      \n      Sepal.Length\n      Sepal.Width\n      Petal.Length\n      Petal.Width\n      Species\n    \n  \n  \n    1\n5.1\n3.5\n1.4\n0.2\nsetosa\n    2\n4.9\n3.0\n1.4\n0.2\nsetosa\n    3\n4.7\n3.2\n1.3\n0.2\nsetosa\n    4\n4.6\n3.1\n1.5\n0.2\nsetosa\n    5\n5.0\n3.6\n1.4\n0.2\nsetosa\n    6..145\n\n\n\n\n\n    146\n6.7\n3.0\n5.2\n2.3\nvirginica\n    147\n6.3\n2.5\n5.0\n1.9\nvirginica\n    148\n6.5\n3.0\n5.2\n2.0\nvirginica\n    149\n6.2\n3.4\n5.4\n2.3\nvirginica\n    150\n5.9\n3.0\n5.1\n1.8\nvirginica\n  \n  \n  \n\n\n\n\nThe mean petal length is 3.758 but its median petal length is 4.35. It’s range is 5.9 which additionally suggests a certain degree of spread.\nIt might be useful to look at the distribution to gain a better sense of the variation of this variable.\n\n\n\n\n\n\n\n\n\nThere seems to be a cluster of much smaller petals and then another cluster of average to bigger petals. I wonder how this varies by species…?\n\n\n\n\n\n\n\n\n\nWe can see from this plot that the overall mean and median of petal length is quite misleading! Only the verisicolor species of iris is close to those values while setosa is much mush smaller and virginica is a bit bigger.\nIs there a similar thing happening for sepal length and width? Let’s look at some basic descriptives of the dataset.\n\n\n\n\n\n\n  \n    \n    \n       Sepal.Length\n       Sepal.Width\n       Petal.Length\n       Petal.Width\n            Species\n    \n  \n  \n    Min.   :4.300  \nMin.   :2.000  \nMin.   :1.000  \nMin.   :0.100  \nsetosa    :50  \n    1st Qu.:5.100  \n1st Qu.:2.800  \n1st Qu.:1.600  \n1st Qu.:0.300  \nversicolor:50  \n    Median :5.800  \nMedian :3.000  \nMedian :4.350  \nMedian :1.300  \nvirginica :50  \n    Mean   :5.843  \nMean   :3.057  \nMean   :3.758  \nMean   :1.199  \nNA\n    3rd Qu.:6.400  \n3rd Qu.:3.300  \n3rd Qu.:5.100  \n3rd Qu.:1.800  \nNA\n    Max.   :7.900  \nMax.   :4.400  \nMax.   :6.900  \nMax.   :2.500  \nNA\n  \n  \n  \n\n\n\n\nIt’s interesting to note with the summary function that for numerical data it’ll calculate the classic 5 statistics used to construct a boxplot plus the mean but for a categorical variable like iris$Species it returns the frequency of each value of the variable.\nThe distribution of sepal length looks wider than sepal width, similar to how it was for those measurements of the petals. Let’s see how sepal length and width relate to one another graphically.\n\n\n\n\n\n\n\n\n\nThere are still clusters by each species type but for verisicolor and virginica there’s much more overlap. Overall, there’s tighter clustering by species for the petal length and width than there is for the sepal length and width."
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#why-reproducibility",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#why-reproducibility",
    "title": "",
    "section": "Why Reproducibility?",
    "text": "Why Reproducibility?\nReproducibility is not replication.\n\n\nReplication is running a new study to show if and how results of a prior study hold.\n\nReproducibility is about rerunning the same study and getting the same results.\n\n\nReproducible studies can still be wrong… and in fact reproducibility makes proving a study wrong much easier.\n\n\nReproducibility means:\n\nTransparent research practices.\nMinimal barriers to verifying your results.\n\n\n\nAny study that isn’t reproducible can only be trusted on faith."
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#reproducibility-definitions",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#reproducibility-definitions",
    "title": "",
    "section": "Reproducibility Definitions",
    "text": "Reproducibility Definitions\nReproducibility comes in three forms (Stodden 2014):\n\n\n\nEmpirical: Repeatability in data collection.\n\nStatistical: Verification with alternate methods of inference.\n\nComputational: Reproducibility in cleaning, organizing, and presenting data and results.\n\n\n\nR is particularly well suited to enabling computational reproducibility1.\n\n\nThey will not fix flawed research design, nor offer a remedy for improper application of statistical methods.\nThose are the difficult, non-automatable things you want skills in.\n\n Python is equally well suited. Julia is an option as well."
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#computational-reproducibility",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#computational-reproducibility",
    "title": "",
    "section": "Computational Reproducibility",
    "text": "Computational Reproducibility\nElements of computational reproducibility:\n\n\nShared data\n\nResearchers need your original data to verify and replicate your work.\n\n\n\n\n\n\nShared code\n\nYour code must be shared to make decisions transparent.\n\n\n\n\n\n\nDocumentation\n\nThe operation of code should be either self-documenting or have written descriptions to make its use clear.\n\n\n\n\n\n\nVersion Control1\n\nDocuments the research process.\nPrevents losing work and facilitates sharing.\n\n\n\n\nWe’ll come back to this on the last week of class."
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#levels-of-reproducibility",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#levels-of-reproducibility",
    "title": "",
    "section": "Levels of Reproducibility",
    "text": "Levels of Reproducibility\nFor academic papers, degrees of reproducibility vary:\n\n\n“Read the article”\nShared data with documentation\nShared data and all code\nInteractive document\nResearch compendium\nDocker compendium: Self-contained ecosystem\n\n\n\n\nWe’ll briefly discuss research compendiums, such as Docker, during the last lecture of class as well."
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#interactive-documents",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#interactive-documents",
    "title": "",
    "section": "Interactive Documents",
    "text": "Interactive Documents\nInteractive documents — like Quarto docs — combine code and text together into a self-contained document.\n\nLoad and process data\nRun models\nGenerate tables and plots in-line with text\nIn-text values automatically filled in\n\n\nInteractive documents allow a reader to examine your computational methods within the document itself; in effect, they are self-documenting.\n\n\nBy re-running the code, they reproduce your results on demand.\n\n\nCommon Platforms:\n\n\nR: Quarto\n\nPython: Jupyter Notebooks"
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#research-compendia",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#research-compendia",
    "title": "",
    "section": "Research Compendia",
    "text": "Research Compendia\nA research compendium is a portable, reproducible distribution of an article or other project.\n\nResearch compendia feature:\n\nAn interactive document as the foundation\nFiles organized in a recognizable structure (e.g. an R package)\nClear separation of data, method, and output. Data are read only.\nA well-documented or even preserved computational environment (e.g. Docker)\n\n\n\nrrtools by UW’s Ben Markwick provides a simplified workflow to accomplish this in R."
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#bookdown",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#bookdown",
    "title": "",
    "section": "Bookdown",
    "text": "Bookdown\nbookdown — which is integrated into rrtools — can generate documents in the proper format for articles, theses, books, or dissertations.\n\nbookdown provides an accessible alternative to writing \\(\\LaTeX\\) for typesetting and reference management.\n\n\nYou can integrate citations and automate reference page generation using bibtex files (such as produced by Zotero).\n\n\nbookdown supports .html output for ease and speed and also renders .pdf files through \\(\\LaTeX\\) for publication-ready documents.\n\n\nFor University of Washington theses and dissertations, consider Ben Marwick’s huskydown package which uses Markdown but renders via a UW approved \\(\\LaTeX\\) template."
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#organization-and-portability",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#organization-and-portability",
    "title": "",
    "section": "Organization and Portability",
    "text": "Organization and Portability\nOrganizing research projects is something you either do accidentally — and badly — or purposefully with some upfront labor.\n\nUniform organization makes switching between or revisiting projects easier.\n\n\n\n\nGood Example directory\nBad Example directory\n\n\n\n\n\nproject/\n   readme.md\n   data/\n     derived/\n       data_processed.RData\n     raw/\n       data_core.csv\n       data_supplementary.csv\n   docs/\n     paper_asa.qmd\n     paper_journal.qmd\n   syntax/\n     01-functions.R\n     02-cleaning.R\n     03_merging.R\n     04-exploratory.R\n     05-models.R\n     06-visualizations.R\n   visuals/ \n     descriptive.png\n     heatmap.png\n     predicted_probabilities.png\n\n\n\nThere is a clear hierarchy\n\nWritten content is in docs\n\nCode is in syntax\n\nData is in data\n\nVisualizations are in visuals\n\nThe readme.md describes the project\n\n\nNaming is uniform\n\nAll lower case\nWords separated by underscores\n\n\nNames are self-descriptive\nNumbering scripts makes it clear in which order they should be run.\n\n\n\n\n\n\n\n\nalternative model.R\ncode for exploratory analysis.r\nfinalreport.qmd\nFinalReport.qmd\nfig 1.png\nFigure_02.png\nmodel_first_try.R\nrun-first.r\ntemp.txt\n\n\n\nOrdering of the files is unclear\nInconsistent naming is confusing (which final report is THE final report?)\nNon-descriptive naming means more work for you in trying to decipher its contents"
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#organization-systems",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#organization-systems",
    "title": "",
    "section": "Organization Systems",
    "text": "Organization Systems\nOrganizing research projects is something you either do accidentally — and badly — or purposefully with some upfront labor.\n\nUniform organization makes switching between or revisiting projects easier.\n\n\nI suggest something like the following:\n\n\nproject/\n   readme.md\n   data/\n     derived/\n       processed_data.RData\n     raw/\n       core_data.csv\n   docs/\n     paper.Rmd\n   syntax/\n     functions.R\n     models.R\n\n\nThere is a clear hierarchy\n\nWritten content is in docs\n\nCode is in syntax\n\nData is in data\n\n\n\nNaming is uniform\n\nAll lower case\nWords separated by underscores\n\n\nNames are self-descriptive"
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#workflow-versus-project",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#workflow-versus-project",
    "title": "",
    "section": "Workflow versus Project",
    "text": "Workflow versus Project\nTo summarize Jenny Bryan, one should separate workflow (i.e. your personal tastes and habits) from product (i.e. the logic and output that is the essence of your project)\n\n\n\n\nWorkflow\n\nThe software you use to write your code (e.g. RStudio)\nThe location you store a project\nThe specific computer you use\nThe code you ran earlier or typed into your console\n\n\nProduct\n\nThe raw data\nThe code that operates on your raw data\nThe packages you use\nThe output files or documents\n\n\n\n\n\nEach data analysis (or homework assignment for a class) should be organized as a project. * Projects should NOT modify anything outside of the project nor need to be modified by someone else (or future you) to run. * Projects should be independent of your workflow."
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#portability",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#portability",
    "title": "",
    "section": "Portability",
    "text": "Portability\nFor research to be reproducible, it must also be portable. Portable software operates independently of workflow.\n\n\nDo Not:\nDo:\n\n\n\n\nUse setwd().\nUse absolute paths except for fixed, immovable sources (secure data).\n\nread_csv(\"C:/my_project/data/my_data.csv\")\n\n\nUse install.packages() in script or .qmd files.\nUse rm(list=ls()) anywhere but your console.\n\n\n\n\n\n\n\n\n\nUse RStudio projects (or the here package) to set directories.\nUse relative paths to load and save files:\n\nread_csv(\"./data/my_data.csv\")\n\n\nLoad all required packages using library().\nClear your workspace when closing RStudio.\n\nSet Tools &gt; Global Options… &gt; Save workspace… to Never"
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#divide-and-conquer",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#divide-and-conquer",
    "title": "",
    "section": "Divide and Conquer",
    "text": "Divide and Conquer\nOften you do not want to include all code for a project in one .qmd file:\n\nThe code takes too long to knit.\nThe file is so long it is difficult to read.\n\n\nThere are two ways to deal with this:\n\n\nUse separate .R scripts or .qmd files which save results from complicated parts of a project, then load these results in the main .qmd file.\n\nThis is good for loading and cleaning large data.\nAlso for running slow models.\n\n\n\n\n\n\n\nUse source() to run external .R scripts when the .qmd renders\n\nThis can be used to run large files that aren’t impractically slow.\nAlso good for loading project-specific functions."
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#the-way-of-many-files",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#the-way-of-many-files",
    "title": "",
    "section": "The Way of Many Files",
    "text": "The Way of Many Files\nI find it beneficial to break projects into many files:\n\nScripts with specialized functions.\nScripts to load and clean each set of variables.\nScripts to run each set of models and make tables and plots.\nA main .qmd that runs some or all of these to reproduce the entire project.\n\n\nSplitting up a project carries benefits:\n\nOnce a portion of the project is done and in its own file, it is out of your way.\n\nIf you need to make changes, you don’t need to search through huge files.\nEntire sections of the project can be added or removed quickly (e.g. converted to an appendix of an article)\nIt is the only way to build a proper pipeline for a project."
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#pipelines",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#pipelines",
    "title": "",
    "section": "Pipelines",
    "text": "Pipelines\nProfessional researchers and teams design projects as a pipeline.\n\nA pipeline is a series of consecutive processing elements (scripts and functions in R).\n\n\nEach stage of a pipeline…\n\nHas clearly defined inputs and outputs\nDoes not modify its inputs.\nProduces the exact same output every time it is re-run.\n\n\n\nThis means…\n\nWhen you modify one stage, you only need to rerun subsequent stages.\nDifferent people can work on each stage.\nProblems are isolated within stages.\nYou can depict your project as a directed graph of dependencies."
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#example-pipeline",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#example-pipeline",
    "title": "",
    "section": "Example Pipeline",
    "text": "Example Pipeline\nEvery stage (oval) has an unambiguous input and output. Everything that precedes a given stage is a dependency — something required to run it.\n\n\n\nNote: targets is a great package for managing R research pipelines."
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#on-formats",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#on-formats",
    "title": "",
    "section": "On Formats",
    "text": "On Formats\nAvoid “closed” or commercial software and file formats except where absolutely necessary.\n\nUse open source software and file formats.\n\n\n\n\nIt is always better for science:\n\nPeople should be able to explore your research without buying commercial software.\nYou do not want your research to be inaccessible when software is updated.\n\n\n\n\n\n\n\nIt is often just better.\n\nIt is usually updated more quickly\nIt tends to be more secure\nIt is rarely abandoned\n\n\n\n\n\nThe ideal: Use software that reads and writes raw text."
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#text",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#text",
    "title": "",
    "section": "Text",
    "text": "Text\nWriting and formatting documents are two completely separate jobs.\n\nWrite first\nFormat later\n\nMarkdown was made for this\n\n\nWord processors — like Microsoft Word — try to do both at the same time, usually badly.\nThey waste time by leading you to format instead of writing.\n\n\nFind a good modular text editor and learn to use it:\n\nAtom\n\nSublime (Commercial)\nEmacs\nVim"
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#version-control-1",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#version-control-1",
    "title": "",
    "section": "Version Control",
    "text": "Version Control\nVersion control originates in collaborative software development.\nThe Idea: All changes ever made to a piece of software are documented, saved automatically, and revertible.\n\nVersion control allows all decisions ever made in a research project to be documented automatically.\n\n\nVersion control can:\n\nProtect your work from destructive changes\nSimplify collaboration by merging changes\nDocument design decisions\nMake your research process transparent"
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#git-and-github",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#git-and-github",
    "title": "",
    "section": "Git and GitHub",
    "text": "Git and GitHub\ngit is the dominant platform for version control, and GitHub is a free (and now Microsoft owned) platform for hosting repositories.\n\nRepositories are folders on your computer where all changes are tracked by Git.\n\n\nOnce satisfied with changes, you “commit” them then “push” them to a remote repository that stores your project.\n\n\nOthers can copy your project (“pull”), and if you permit, make suggestions for changes.\n\n\nConstantly committing and pulling changes automatically generates a running “history” that documents the evolution of a project.\n\n\ngit is integrated into RStudio under the Tools menu. It requires some setup.1\n\nYou can also use the GitHub desktop application."
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#github-as-a-cv",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#github-as-a-cv",
    "title": "",
    "section": "GitHub as a CV",
    "text": "GitHub as a CV\nBeyond archiving projects and allowing sharing, GitHub also serves as a sort of curriculum vitae for the programmer.\n\nBy allowing others to view your projects, you can display competence in programming and research.\n\n\nIf you are planning on working in the private sector, an active GitHub profile will give you a leg up on the competition.\n\n\nIf you are aiming for academia, a GitHub account signals technical competence and an interest in research transparency."
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#getting-help",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#getting-help",
    "title": "",
    "section": "Getting Help",
    "text": "Getting Help\nOne of the most difficult things as a beginner in R (or any language tbh) is not always knowing what to ask to solve your issue. Being in this class is a great first step! Some other useful tools:\n\n\n\nGoogle\n\nAdding R to your query is basic but useful and often overlooked. Including the package name, if you’re using one, is another. Finally, what is it you want to do? For example “R dplyr create new variable based on value of another.”\nCopy and pasting error messages is also helpful!\n\n\n\nStackOverflow\n\nMany of your Google queries will take you here anyways so you might try going directly to the source! Filter by R and make sure to include a reprex so people can actually understand what your issue is.\n\n\n\nReprex\n\nShort for minimal reproducible example this is a version of your code that someone could copy and run on their own machine, making it possible for them to help you troubleshoot your problem.\nYou want to strip away everything not pertinent to the issue you’re having so that it’s simple and straightforward.\nYou can use the reprex package for assistance with this!\n\n\n\nPutting in the work up front\n\nIt’s cliché, but investing in your learning right now will pay off down the road.\nLearning how to do something, why R works in a certain way, and developing practices that keep you organized will make you more efficient and help prevent minor and major frustrations going forward."
  },
  {
    "objectID": "Lectures/Lecture7/CSSS508_Lecture7.html#lubridate",
    "href": "Lectures/Lecture7/CSSS508_Lecture7.html#lubridate",
    "title": "Roadmap",
    "section": "lubridate",
    "text": "lubridate\nThe package lubridate (part of the tidyverse!) has a very large number of functions you can use!\n. . .\n\nConverting dates/times between formats (DD-MM-YY to YY-MM-DD)\nExtracting dates/times (day of week, month, leap years, etc.)\nMath with dates/times (time zone conversions, etc.)\n\n. . .\nThere’s too much to cover all of it, but I’ll run through a few examples."
  },
  {
    "objectID": "Lectures/Lecture7/CSSS508_Lecture7.html#dates-in-billboard_2000",
    "href": "Lectures/Lecture7/CSSS508_Lecture7.html#dates-in-billboard_2000",
    "title": "Roadmap",
    "section": "Dates in billboard_2000",
    "text": "Dates in billboard_2000\n\nbillboard_2000 %&gt;% \n  select(date.entered) %&gt;% \n  head(10)\n\n# A tibble: 10 × 1\n   date.entered\n   &lt;date&gt;      \n 1 2000-02-26  \n 2 2000-02-26  \n 3 2000-02-26  \n 4 2000-02-26  \n 5 2000-02-26  \n 6 2000-02-26  \n 7 2000-02-26  \n 8 2000-02-26  \n 9 2000-02-26  \n10 2000-02-26"
  },
  {
    "objectID": "Lectures/Lecture7/CSSS508_Lecture7.html#extracting-year-month-or-day",
    "href": "Lectures/Lecture7/CSSS508_Lecture7.html#extracting-year-month-or-day",
    "title": "Roadmap",
    "section": "Extracting Year, Month, or Day",
    "text": "Extracting Year, Month, or Day\n\nlibrary(lubridate)\nhead(billboard_2000$date.entered, 5)\n\n[1] \"2000-02-26\" \"2000-02-26\" \"2000-02-26\" \"2000-02-26\" \"2000-02-26\"\n\nyear(billboard_2000$date.entered) %&gt;% \n  head(5)\n\n[1] 2000 2000 2000 2000 2000\n\nmonth(billboard_2000$date.entered) %&gt;% \n  head(5)\n\n[1] 2 2 2 2 2\n\nday(billboard_2000$date.entered) %&gt;% \n  head(5)\n\n[1] 26 26 26 26 26"
  },
  {
    "objectID": "Lectures/Lecture7/CSSS508_Lecture7.html#extracting-weekday-quarter-and-leap-year-boolean",
    "href": "Lectures/Lecture7/CSSS508_Lecture7.html#extracting-weekday-quarter-and-leap-year-boolean",
    "title": "Roadmap",
    "section": "Extracting Weekday, Quarter, and Leap Year Boolean",
    "text": "Extracting Weekday, Quarter, and Leap Year Boolean\n\nwday(billboard_2000$date.entered) %&gt;% \n  head(5)\n\n[1] 7 7 7 7 7\n\nquarter(billboard_2000$date.entered) %&gt;% \n  head(5)\n\n[1] 1 1 1 1 1\n\nleap_year(billboard_2000$date.entered) %&gt;% \n   head(5)\n\n[1] TRUE TRUE TRUE TRUE TRUE"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#a-note-on-how-to-use-these-slides-fa-scroll",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#a-note-on-how-to-use-these-slides-fa-scroll",
    "title": "Introductions & Syllabus",
    "section": "A Note on How to Use These Slides ",
    "text": "A Note on How to Use These Slides \nSince the lectures for this class were created using Quarto, there are numerous built-in features meant to facilitate your learning, particularly of R.\n\n\nThe  in the bottom left-hand corner will show you a table of contents for the entire slideshow, allowing you to find what you’re looking for more easily.\nAnything followed by  is a link to an external site. You will be shown a preview (if available) within the presentation first and from there you can open the link in a new tab to explore it more.\n\nRelatedly, any R function in code-looking font will be linked to it’s documentation (which is the same as its help page within RStudio) so you can quickly learn more about any function we cover in class directly through the lecture slides. (Note: not all of these work in the preview so you may have to open a new tab).\n\nIf you hover over any chunk of R code embedded in the slides you will see a  which you can click to copy the code. You can then paste it in your own Quarto document or R script to run it in your session of RStudio.\nTo get a PDF version of these slides click File &gt; Print from your internet browser, select Save as PDF as the Destination or Printer, and make sure the Layout is set to Landscape. (Note: the PDF Export Mode in Tools actually cuts off content which is why I’m not recommending it)\nClicking on the  in the bottom left-hand corner allows you to draw directly on the slides, in a very Microsoft Paint kind of way. See if it’s useful but I make no promises!\nType ? at any time to see all the available key-board shortcuts.\nSome content may be scrollable (like this page!). If this is the case I will put the  icon in the title to let you know."
  },
  {
    "objectID": "Lectures/Lecture7/CSSS508_Lecture7.html#paste-example",
    "href": "Lectures/Lecture7/CSSS508_Lecture7.html#paste-example",
    "title": "Roadmap",
    "section": "paste() Example",
    "text": "paste() Example\nLet’s use paste() to create complete mailing addresses for each restaurant:\n. . .\n\nrestaurants$mailing_address &lt;- paste(restaurants$Address, \", \", restaurants$City, \n                                     \", WA \", restaurants$ZIP_5, sep = \"\")\nrestaurants %&gt;% \n  distinct(mailing_address) %&gt;% \n  head()\n\n# A tibble: 6 × 1\n  mailing_address                                  \n  &lt;chr&gt;                                            \n1 2746 NE 45TH ST, SEATTLE, WA 98105               \n2 1906 N 34TH ST, SEATTLE, WA 98103                \n3 122 2ND AVE S, SEATTLE, WA 98104                 \n4 1001 FAIRVIEW AVE N Unit 1700A, SEATTLE, WA 98109\n5 1225 1ST AVE, SEATTLE, WA 98101                  \n6 15364 NE 96TH PL, REDMOND, WA 98052"
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#what-is-the-tidyverse",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#what-is-the-tidyverse",
    "title": "",
    "section": "What is the tidyverse?",
    "text": "What is the tidyverse?\nLast week we discussed Base R and the fact that what makes R extremely powerful and flexible is the large number of diverse user-created packages.\n\n\n\n\n\n\nRecall that packages are simply collections of functions and tools that others have already created, that will make your life easier!\n\n\n\n\n\nThe Packages tab in the bottom-right pane of RStudio lists your installed packages.\n\n\n\n\n\n\nRemember that to install a new package you use install.packages(\"package_name\") in the console. To load a package into you current session of R you use library(package_name) at the beginning of you R script or Quarto document."
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#packages-1",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#packages-1",
    "title": "Roadmap",
    "section": "Packages",
    "text": "Packages\nThe Packages tab in the bottom-right pane of RStudio lists your installed packages."
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#the-tidyverse",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#the-tidyverse",
    "title": "Roadmap",
    "section": "The tidyverse",
    "text": "The tidyverse\nThe tidyverse refers to two things:\n\n\na specific package in R that loads several core packages within the tidyverse.\n\na specific design philosophy, grammar, and focus on “tidy” data structures developed by Hadley Wickham3 and his team at RStudio (now named Posit)."
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#the-tidyverse-1",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#the-tidyverse-1",
    "title": "",
    "section": "The tidyverse\n",
    "text": "The tidyverse\n\nThe tidyverse refers to two things:\n\nand a specific package in R that loads several core packages within the tidyverse.\n\na specific design philosophy, grammar, and focus on “tidy” data structures developed by Hadley Wickham1 and his team at RStudio (now named Posit).\n\n\n\nThe principles underlying the tidyverse are: 1. Reuse existing data structures. 2. Compose simple functions with the pipe. 3. Embrace functional programming. 4. Design for humans.\n\n\n\n\nYou can read the official manifesto here."
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#the-tidyverse-package",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#the-tidyverse-package",
    "title": "Roadmap",
    "section": "The tidyverse package",
    "text": "The tidyverse package\n\n\nThe core packages within the tidyverse include:\n\n\nggplot2 (visualizations)\ndplyr (data manipulation)\ntidyr (data reshaping)\nreadr (data import/export)\npurrr (iteration)\ntibble (modern dataframe)\nstringr (text data)\nforcats (factors)"
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#the-tidyverse-philosophy",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#the-tidyverse-philosophy",
    "title": "Roadmap",
    "section": "The tidyverse philosophy",
    "text": "The tidyverse philosophy\n\n\nThe principles underlying the tidyverse are:\n\n\nReuse existing data structures.\nCompose simple functions with the pipe.\nEmbrace functional programming.\nDesign for humans."
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#check-out-gapminder-fa-scroll",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#check-out-gapminder-fa-scroll",
    "title": "Roadmap",
    "section": "Check Out Gapminder ",
    "text": "Check Out Gapminder \nThe data frame we will work with is called gapminder, available once you have loaded the package. Let’s see its structure:\n\nstr(gapminder)\n\ntibble [1,704 × 6] (S3: tbl_df/tbl/data.frame)\n $ country  : Factor w/ 142 levels \"Afghanistan\",..: 1 1 1 1 1 1 1 1 1 1 ...\n $ continent: Factor w/ 5 levels \"Africa\",\"Americas\",..: 3 3 3 3 3 3 3 3 3 3 ...\n $ year     : int [1:1704] 1952 1957 1962 1967 1972 1977 1982 1987 1992 1997 ...\n $ lifeExp  : num [1:1704] 28.8 30.3 32 34 36.1 ...\n $ pop      : int [1:1704] 8425333 9240934 10267083 11537966 13079460 14880372 12881816 13867957 16317921 22227415 ...\n $ gdpPercap: num [1:1704] 779 821 853 836 740 ...\n\n\n. . .\n\n\nWhat’s Notable Here?\n\n\nFactor variables country and continent\n\nFactors are categorical data with an underlying numeric representation\nWe’ll spend a lot of time on factors later!\n\nMany observations: \\(n=1704\\) rows\nFor each observation, a few variables: \\(p=6\\) columns\nA nested/hierarchical structure: year in country in continent\n\nThese are panel data!"
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#overriding-previous-specifications-1",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#overriding-previous-specifications-1",
    "title": "",
    "section": "Overriding previous specifications",
    "text": "Overriding previous specifications\n\nlifeExp_by_year + \n  facet_grid(cols = vars(continent), scales = \"free_y\") \n\n\n\n\n\n Facet scales options\n\n\nBy default, facets will share the same axis ranges (i.e. “fixed”) which is helpful for comparison between groups. However, some times you may want to visualize the relationship within each facet better. You can set the scales argument to “free”, “free_y” or “free_x” to allow scales to vary by both x and y axes, or just one."
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#ggplot-templates",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#ggplot-templates",
    "title": "Roadmap",
    "section": "ggplot Templates",
    "text": "ggplot Templates\n\n. . .\n\nAll layers have:\n\nsame data & aestheticssame data, diff aestheticsdiff data & aesthetics\n\n\n\nggplot(data = [dataset], \n       mapping = aes(x = [x-variable], y = [y-variable])) +\n   geom_xxx() +\n   other options\n\n\n\n\nggplot(data = [dataset]) +\n   geom_xxx(mapping = aes(x = [x-variable], y = [y-variable])) +\n   other options\n\n\n\n\nggplot() +\n   geom_xxx(data = [dataset], \n            mapping = aes(x = [x-variable], y = [y-variable])) +\n   other options"
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#using-multiple-geoms",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#using-multiple-geoms",
    "title": "Roadmap",
    "section": "Using multiple geoms",
    "text": "Using multiple geoms\n\nggplot(gapminder, aes(x = continent, y = lifeExp)) +\n  geom_boxplot(outlier.colour = \"hotpink\")"
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#annotating-specific-datapoints-for-emphasis",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#annotating-specific-datapoints-for-emphasis",
    "title": "Roadmap",
    "section": "Annotating specific datapoints for emphasis",
    "text": "Annotating specific datapoints for emphasis\n\nBasic annotationOffset annotationCode: outliersCode: no outliers\n\n\n\n\nCode\nggplot(gapminder, aes(x = continent, y = lifeExp)) +\n  geom_boxplot(outlier.colour = \"hotpink\", outlier.size = 3) +\n  geom_jitter(data = no_outliers, position = position_jitter(width = 0.1, height = 0), alpha = 0.25, size = 3) + \n  geom_text(data = outliers, aes(label = country), size = 8) + \n  theme_minimal(base_size = 18)\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nlibrary(ggrepel)\nggplot(gapminder, aes(x = continent, y = lifeExp)) +\n  geom_boxplot(outlier.colour = \"hotpink\", outlier.size = 3) +\n  geom_jitter(data = no_outliers, position = position_jitter(width = 0.1, height = 0), alpha = 0.25, size = 3) + \n  geom_label_repel(data = outliers, aes(label = country), color = \"hotpink\", size = 8) + \n  theme_minimal(base_size = 18)\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\noutliers &lt;- gapminder |&gt; \n  group_by(continent) |&gt; \n  mutate(outlier = case_when(quantile(lifeExp, probs = 0.25) - (IQR(lifeExp) * 1.5) &gt; lifeExp ~ \"outlier\", # anything lower than the 1st quartile - 1.5*IQR \n                             quantile(lifeExp, probs = 0.75) + (IQR(lifeExp) * 1.5) &lt; lifeExp ~ \"outlier\", # anything higher than the 3rd quartile + 1.5*IQR\n                             .default = NA)) |&gt; \n  filter(!is.na(outlier)) |&gt; # remove non-outliers\n  ungroup() |&gt; group_by(country) |&gt; # regroup by country\n  filter(lifeExp == min(lifeExp)) # filter just the min for each country\n\nhead(outliers)\n\n\n# A tibble: 6 × 7\n# Groups:   country [6]\n  country                continent  year lifeExp     pop gdpPercap outlier\n  &lt;fct&gt;                  &lt;fct&gt;     &lt;int&gt;   &lt;dbl&gt;   &lt;int&gt;     &lt;dbl&gt; &lt;chr&gt;  \n1 Albania                Europe     1952    55.2 1282697     1601. outlier\n2 Bosnia and Herzegovina Europe     1952    53.8 2791000      974. outlier\n3 Bulgaria               Europe     1952    59.6 7274900     2444. outlier\n4 Haiti                  Americas   1952    37.6 3201488     1840. outlier\n5 Libya                  Africa     2002    72.7 5368585     9535. outlier\n6 Mauritius              Africa     2007    72.8 1250882    10957. outlier\n\n\n\n\n\n\nCode\nno_outliers &lt;- gapminder |&gt; \n  group_by(continent) |&gt; \n  mutate(outlier = case_when(quantile(lifeExp, probs = 0.25) - (IQR(lifeExp) * 1.5) &gt; lifeExp ~ \"outlier\",\n                             quantile(lifeExp, probs = 0.75) + (IQR(lifeExp) * 1.5) &lt; lifeExp ~ \"outlier\", \n                             .default = NA)) |&gt; \n  filter(is.na(outlier)) # remove outliers\n\nhead(no_outliers)\n\n\n# A tibble: 6 × 7\n# Groups:   continent [1]\n  country     continent  year lifeExp      pop gdpPercap outlier\n  &lt;fct&gt;       &lt;fct&gt;     &lt;int&gt;   &lt;dbl&gt;    &lt;int&gt;     &lt;dbl&gt; &lt;chr&gt;  \n1 Afghanistan Asia       1952    28.8  8425333      779. &lt;NA&gt;   \n2 Afghanistan Asia       1957    30.3  9240934      821. &lt;NA&gt;   \n3 Afghanistan Asia       1962    32.0 10267083      853. &lt;NA&gt;   \n4 Afghanistan Asia       1967    34.0 11537966      836. &lt;NA&gt;   \n5 Afghanistan Asia       1972    36.1 13079460      740. &lt;NA&gt;   \n6 Afghanistan Asia       1977    38.4 14880372      786. &lt;NA&gt;"
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#section-3",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#section-3",
    "title": "",
    "section": "",
    "text": "# install.packages(\"geomtextpath\") &lt;- run in console first\nlibrary(geomtextpath)\n\ngapminder |&gt; \n  filter(country %in% c(\"United States\", \"Afghanistan\", \"Iraq\")) |&gt; \n  ggplot(aes(x = year, y = lifeExp, color = country, label = country)) +\n  geom_textpath() +\n  theme(legend.position = \"none\")"
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#using-multiple-geoms-1",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#using-multiple-geoms-1",
    "title": "Roadmap",
    "section": "Using multiple geoms",
    "text": "Using multiple geoms\n\nggplot(gapminder, aes(x = continent, y = lifeExp)) +\n  geom_boxplot(outlier.colour = \"hotpink\") +\n  geom_jitter(alpha = 0.25)"
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#using-multiple-geoms-2",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#using-multiple-geoms-2",
    "title": "Roadmap",
    "section": "Using multiple geoms",
    "text": "Using multiple geoms\n\nggplot(gapminder, aes(x = continent, y = lifeExp)) +\n  geom_boxplot(outlier.colour = \"hotpink\") +\n  geom_jitter(position = position_jitter(width = 0.1, height = 0), alpha = 0.25)"
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#mapping-color-size",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#mapping-color-size",
    "title": "Roadmap",
    "section": "Mapping Color & Size",
    "text": "Mapping Color & Size\n\nCodePlot\n\n\n\nggplot(data = gapminder, \n       aes(x = year, y = lifeExp, group = country)) +\n  geom_line(aes(color = \"Country\", size = \"Country\")) +\n  geom_line(stat = \"smooth\", method = \"loess\", \n            aes(group = continent, color = \"Continent\", size = \"Continent\")) +\n  facet_wrap(~ continent, \n             nrow = 2) +\n  scale_color_manual(name = \"Life Exp. for:\", \n                     values = c(\"Country\" = \"black\", \"Continent\" = \"blue\")) +\n  scale_size_manual(name = \"Life Exp. for:\", \n                    values = c(\"Country\" = 0.25, \"Continent\" = 3))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHuzzah! Let’s change the transparency on these lines a touch so we can see all our data more easily."
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#geomtextpath-fa-scroll",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#geomtextpath-fa-scroll",
    "title": "Roadmap",
    "section": "geomtextpath ",
    "text": "geomtextpath \nIf you want your labels to follow along the path of your plot (and maintain proper angles and spacing) try using geomtextpath.\n\n\nCode\n# install.packages(\"geomtextpath\") &lt;- run in console first\nlibrary(geomtextpath)\ngapminder |&gt; \n  filter(country %in% c(\"Cuba\", \"Haiti\", \"Dominican Republic\")) |&gt; # restricting data to 3 regionally-specific countries\n  ggplot(aes(x = year, \n             y = lifeExp, \n             color = country, \n             label = country)) + # specify label with text to appear\n  geom_textpath() + # adding textpath geom to put labels within lines\n  theme(legend.position = \"none\") # removing legend"
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#ggridges-fa-scroll",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#ggridges-fa-scroll",
    "title": "Roadmap",
    "section": "ggridges ",
    "text": "ggridges \nWe can make visualize the differing distributions of a continuous variable by levels of a categorical variable with ggridges!\n\n\nCode\n# install.packages(\"ggridges\") &lt;- run in console first\nlibrary(ggridges)\nggplot(gapminder, \n       aes(x = lifeExp, \n           y = continent, \n           fill = continent, \n           color = continent)) +\n  geom_density_ridges(alpha = 0.5, \n                      show.legend = FALSE) # add ridges, make all a bit transparent, remove legend"
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#correlation-matricies-fa-scroll",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#correlation-matricies-fa-scroll",
    "title": "Roadmap",
    "section": "Correlation Matricies ",
    "text": "Correlation Matricies \nMake visually appealing & informative correlation plots in GGally or ggcorrplot.\n\nGGallyggcorrplotBonus: ggpairs() from GGally\n\n\n\n\nCode\n# install.packages(\"GGally\") &lt;- run in console first\nlibrary(GGally)\n\nggcorr(swiss, \n       geom = \"circle\", \n       min_size = 25, # specify minimum size of shape \n       max_size = 25, # specify maximum size of shape \n       label = TRUE, # label circles with correlation coefficient\n       label_alpha = TRUE, # less strong correlations have lower alpha\n       label_round = 2, # round correlations coefficients to 2 decimal points\n       legend.position = c(0.15, 0.6), \n       legend.size = 12)\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\n# install.packages(\"ggcorrplot\") &lt;- run in console first\nlibrary(ggcorrplot)\n\n# compute correlation matrix\ncorr &lt;- round(cor(swiss), 1)\n# computer matrix of correlation p-values\np_mat &lt;- cor_pmat(swiss)\n\nggcorrplot(corr,\n           hc.order = TRUE, # use hierarchical clustering to group like-correlations together\n           type = \"lower\", # only show lower half of correlation matrix\n           p.mat = p_mat, # give corresponding p-values for correlation matrix\n           insig = \"pch\", # add default shape (an X) to correlations that are insignificant\n           outline.color = \"black\", # outline cells in white\n           ggtheme = ggthemes::theme_tufte(), # using a specific theme I like from ggthemes package \n           colors = c(\"#4e79a7\", \"white\", \"#e15759\")) + # specify custom colors \n  theme(legend.position = c(0.15, 0.67))\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nggpairs(swiss, \n        lower = list(continuous = wrap(\"smooth\", # specify a smoothing line added to scatterplots\n                                       alpha = 0.5, \n                                       size=0.2))) + \n  ggthemes::theme_tufte() # add nice theme from ggthemes"
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#patchwork-fa-scroll",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#patchwork-fa-scroll",
    "title": "Roadmap",
    "section": "patchwork ",
    "text": "patchwork \nCombine separate plots into the same graphic using patchwork.\n\n\nCode\n# install.packages(\"patchwork\") &lt;- run in console first\nlibrary(patchwork)\n\n# Create first plot object\nplot_lifeExp &lt;- ggplot(gapminder, \n                       aes(x = lifeExp, y = continent, fill = continent, color = continent)) +\n  geom_density_ridges(alpha = 0.5, show.legend = FALSE)\n\n# Create second plot object\nplot_boxplot &lt;- ggplot(gapminder, \n                       aes(x = continent, y = lifeExp, color = continent), \n                       alpha = 0.5) +\n  geom_boxplot(outlier.colour = \"black\", varwidth = TRUE) + # change outlier color and make width of boxes relative to N\n  coord_flip() + # flip the coordinates (x & y) to align with first plot\n  geom_jitter(position = position_jitter(width = 0.1, height = 0), # add datapoints to boxplot\n              alpha = 0.25) + \n  geom_label_repel(data = outliers, # add new dataset with just 4 of the outliers\n                   aes(label = country), \n                   color = \"black\") +\n  theme(axis.text.y = element_blank(), # remove y axis text \n        axis.ticks.y = element_blank(), # remove y axis ticks \n        axis.title.y = element_blank(), # remove y axis title \n        legend.position = \"none\")\n\nplot_lifeExp + plot_boxplot # simply add two objects together to place side by side"
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#ggthemes-fa-scroll",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#ggthemes-fa-scroll",
    "title": "Roadmap",
    "section": "ggthemes ",
    "text": "ggthemes \n\nexceleconomistfewfivethirtyeightgdocsstatatuftewsj\n\n\n\n\nCode\nlibrary(ggthemes)\nplot_lifeExp + theme_excel()\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nplot_lifeExp + theme_economist()\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nplot_lifeExp + theme_few()\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nplot_lifeExp + theme_fivethirtyeight()\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nplot_lifeExp + theme_gdocs()\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nplot_lifeExp + theme_stata()\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nplot_lifeExp + theme_tufte()\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nplot_lifeExp + theme_wsj()"
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#themes-in-ggplot2-fa-scroll",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#themes-in-ggplot2-fa-scroll",
    "title": "Roadmap",
    "section": "themes in ggplot2 ",
    "text": "themes in ggplot2 \nThere are several built-in themes within ggplot2.\n\nbwlightclassiclinedrawdarkminimalgrayvoid\n\n\n\n\nCode\nplot_lifeExp + theme_bw() # reusing plot_lifeExp from previous slide and changing theme\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nplot_lifeExp + theme_light()\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nplot_lifeExp + theme_classic()\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nplot_lifeExp + theme_linedraw()\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nplot_lifeExp + theme_dark()\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nplot_lifeExp + theme_minimal()\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nplot_lifeExp + theme_gray()\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nplot_lifeExp + theme_void()"
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#other-packages-and-making-your-own",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#other-packages-and-making-your-own",
    "title": "",
    "section": "Other packages and making your own!",
    "text": "Other packages and making your own!\nThese are just a handful of all the ready-made theme options available out there. Some other packages that might be useful/fun to check out:\n\n\n\nhrbrthemes - provides typography-centric themes and theme components for ggplot2\n\n\nurbnthemes a set of tools for creating Urban Institute-themed plots and maps in R\n\n\nbbplot - provides helpful functions for creating and exporting graphics made in ggplot in the style used by the BBC News data team\n\n\nggpomological - A ggplot2 theme based on the USDA Pomological Watercolor Collection\n\n\n\n\nYou are also able to design your own theme using the theme() function and really getting into the weeds with how to specify all the non-data ink in your plot. Once you come up with a theme you like you can save it as an object (i.e. my_theme) and add it to any ggplot you create to maintain your own unique and consistent style."
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#other-theme-packages-and-making-your-own",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#other-theme-packages-and-making-your-own",
    "title": "Roadmap",
    "section": "Other theme packages and making your own!",
    "text": "Other theme packages and making your own!\nThese are just a handful of all the ready-made theme options available out there. Some other packages that might be useful/fun to check out:\n\n\nhrbrthemes - provides typography-centric themes and theme components for ggplot2\nurbnthemes a set of tools for creating Urban Institute-themed plots and maps in R\nbbplot - provides helpful functions for creating and exporting graphics made in ggplot in the style used by the BBC News data team\nggpomological - A ggplot2 theme based on the USDA Pomological Watercolor Collection\n\n\n. . .\nYou are also able to design your own theme using the theme() function and really getting into the weeds with how to specify all the non-data ink in your plot. Once you come up with a theme you like you can save it as an object (i.e. my_theme) and add it to any ggplot you create to maintain your own unique and consistent style."
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#check",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#check",
    "title": "",
    "section": "check",
    "text": "check\n\nggcorrplot(corr,\n           hc.order = TRUE, # use hierarchical clustering to group like-correlations together\n           type = \"lower\", # only show lower half of correlation matrix\n           p.mat = p_mat, # give corresponding p-values for correlation matrix\n           insig = \"pch\", # add default shape (an X) to correlations that are insignificant\n           outline.color = \"black\", # outline cells in white\n           ggtheme = ggthemes::theme_tufte(), # using a specific theme I like from ggthemes package \n           colors = c(\"#4e79a7\", \"white\", \"#e15759\")) # specify custom colors"
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#layered-grammar-of-graphics-fa-scroll",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#layered-grammar-of-graphics-fa-scroll",
    "title": "Roadmap",
    "section": "Layered grammar of graphics ",
    "text": "Layered grammar of graphics \n\n\n\n\n\n\n\nThis is based on Leland Wilkinson’s book The Grammar of Graphics and extended by Hadley Wickham in his paper “A layered grammar of graphics”."
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#further-customization",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#further-customization",
    "title": "Roadmap",
    "section": "Further customization",
    "text": "Further customization\nNext, we’ll discuss:\n\nStoring, modifying, and saving ggplots\nAdvanced axis changes (scales, text, ticks)\nLegend changes (scales, colors, locations)\nUsing multiple geoms\nAdding annotation for emphasis"
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#fixed-versus-free-scales",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#fixed-versus-free-scales",
    "title": "",
    "section": "Fixed versus Free Scales",
    "text": "Fixed versus Free Scales\n\n\nUntransformed\nFixed\nFree x\nFree y\nFree x & y\n\n\n\n\nCodegapminder_sub &lt;- gapminder |&gt; \n  filter(year %in% c(1952, 1982, 2002)) \n  \nggplot(data = gapminder_sub, \n       aes(x = lifeExp, y = gdpPercap)) + \n  geom_jitter() + \n  facet_grid(rows = vars(year), \n             cols = vars(continent))\n\n\n\n\n\n\n\nCodegapminder_sub &lt;- gapminder |&gt; \n  filter(year %in% c(1952, 1982, 2002)) \n  \nggplot(data = gapminder_sub, \n       aes(x = lifeExp, y = gdpPercap)) + \n  geom_jitter() + \n  scale_y_log10() +\n  facet_grid(rows = vars(year), \n             cols = vars(continent))\n\n\n\n\n\n\n\nCodegapminder_sub &lt;- gapminder |&gt; \n  filter(year %in% c(1952, 1982, 2002)) \n  \nggplot(data = gapminder_sub, \n       aes(x = lifeExp, y = gdpPercap)) + \n  geom_jitter() + \n  scale_y_log10() +\n  facet_grid(rows = vars(year), \n             cols = vars(continent), \n             scales = \"free_x\")\n\n\n\n\n\n\n\nCodegapminder_sub &lt;- gapminder |&gt; \n  filter(year %in% c(1952, 1982, 2002)) \n  \nggplot(data = gapminder_sub, \n       aes(x = lifeExp, y = gdpPercap)) + \n  geom_jitter() + \n  scale_y_log10() +\n  facet_grid(rows = vars(year), \n             cols = vars(continent), \n             scales = \"free_y\")\n\n\n\n\n\n\n\nCodegapminder_sub &lt;- gapminder |&gt; \n  filter(year %in% c(1952, 1982, 2002)) \n  \nggplot(data = gapminder_sub, \n       aes(x = lifeExp, y = gdpPercap)) + \n  geom_jitter() + \n  scale_y_log10() +\n  facet_grid(rows = vars(year), \n             cols = vars(continent), \n             scales = \"free\")"
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#tidyverse-extended-universe",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#tidyverse-extended-universe",
    "title": "Roadmap",
    "section": "tidyverse extended universe",
    "text": "tidyverse extended universe\nggplot2 can obviously do a lot on its own. But because R allows for anyone and everyone to expand the functionality of what already exists, numerous extensions5. to ggplot2 have been created.\n. . .\nWe’ve already seen one example with ggrepel. But let’s look at a few others…"
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#fixed-versus-free-scales-fa-scroll",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#fixed-versus-free-scales-fa-scroll",
    "title": "Roadmap",
    "section": "Fixed versus Free Scales ",
    "text": "Fixed versus Free Scales \n\nUntransformedFixedFree xFree yFree x & y\n\n\n\n\nCode\ngapminder_sub &lt;- gapminder |&gt; \n  filter(year %in% c(1952, 1982, 2002)) # create subset with only 3 years\n  \nscales_plot &lt;- ggplot(data = gapminder_sub, \n       aes(x = lifeExp, y = gdpPercap, fill = continent)) + \n  geom_jitter(alpha = 0.5, # alpha of points halfway transparent\n              pch = 21, # shape is a circle with fill\n              size = 3, # increase size\n              color = \"black\") + # outline of circle is black \n  scale_fill_viridis_d(option = \"D\") + # circle is filled by colors perceptable for various forms of color-blindness\n  facet_grid(rows = vars(year), # facet by years in the row\n             cols = vars(continent)) + # facet by continent in the columns\n  ggthemes::theme_tufte(base_size = 20) # increase base text size\nscales_plot\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nscales_plot + scale_y_log10(breaks = c(250, 1000, 10000, 50000, 115000)) # transform the y axis to the logarithm to gain better visualization\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nscales_plot + scale_y_log10(breaks = c(250, 1000, 10000, 50000, 115000)) +\n  facet_grid(rows = vars(year), \n             cols = vars(continent), \n             scales = \"free_x\") # make the x axis vary by data \n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nscales_plot + scale_y_log10(breaks = c(250, 1000, 10000, 50000, 115000)) +\n  facet_grid(rows = vars(year), \n             cols = vars(continent), \n             scales = \"free_y\") # make the y axis vary by data \n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nscales_plot + scale_y_log10(breaks = c(250, 1000, 10000, 50000, 115000)) +\n  facet_grid(rows = vars(year), \n             cols = vars(continent), \n             scales = \"free\") # make both axes vary by data"
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#exercise-1-histogram",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#exercise-1-histogram",
    "title": "",
    "section": "Exercise 1: Histogram",
    "text": "Exercise 1: Histogram\nIn pairs, create a histogram of life expectancy observations in the complete Gapminder dataset.\n\nSet the base layer by specifying the data as gapminder and the x variable as lifeExp\nAdd a second layer to create a histogram using the function geom_histogram()\nCustomize your plot with nice axis labels and a title.\nAdd the color “salmon” to the entire plot (hint: use the fill argument, not color).\nChange this fill setting to an aesthetic and map continent onto it.\nChange the geom to geom_freqpoly. What happened and how might you fix it?\nAdd facets for continent (create only 1 column).\nMove the legend to the bottom of the plot.\nAdd one of the built-in themes from ggplot2."
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#solution-3",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#solution-3",
    "title": "",
    "section": "Solution",
    "text": "Solution\n4: Adding fill setting\n\n\nggplot(gapminder, aes(x = lifeExp)) +\n  geom_histogram(bins = 30, fill = \"salmon\") +\n  xlab(\"Life Expectancy\") +\n  ylab(\"Count\") +\n  ggtitle(\"Histogram of Life Expectancy in Gapminder Data\")\n\n\n\n\n\n\n\n\n\n5: Adding fill aesthetic\n\n\nggplot(gapminder, aes(x = lifeExp, fill = continent)) +\n  geom_histogram(bins = 30) +\n  xlab(\"Life Expectancy\") +\n  ylab(\"Count\") +\n  ggtitle(\"Histogram of Life Expectancy in Gapminder Data\")\n\n\n\n\n\n\n\n\n\n6: Changing geometry\n\n\nggplot(gapminder, aes(x = lifeExp, fill = continent)) +\n  geom_freqpoly(bins = 30) +\n  xlab(\"Life Expectancy\") +\n  ylab(\"Count\") +\n  ggtitle(\"Histogram of Life Expectancy in Gapminder Data\")\n\n\n\n\n\n\n\n\n\n6: Changing geometry\n\n\nggplot(gapminder, aes(x = lifeExp, color = continent)) +\n  geom_freqpoly(bins = 30) +\n  xlab(\"Life Expectancy\") +\n  ylab(\"Count\") +\n  ggtitle(\"Histogram of Life Expectancy in Gapminder Data\")\n\n\n\n\n\n\n\n\n\n7: Adding facets\n\n\nggplot(gapminder, aes(x = lifeExp, color = continent)) +\n  geom_freqpoly(bins = 30) +\n  facet_wrap(vars(continent), ncol = 1) +\n  xlab(\"Life Expectancy\") +\n  ylab(\"Count\") +\n  ggtitle(\"Histogram of Life Expectancy in Gapminder Data\")\n\n\n\n\n\n\n\n\n\n8: Repositioning legend\n\n\nggplot(gapminder, aes(x = lifeExp, color = continent)) +\n  geom_freqpoly(bins = 30) +\n  facet_wrap(vars(continent), ncol = 1) +\n  xlab(\"Life Expectancy\") +\n  ylab(\"Count\") +\n  ggtitle(\"Histogram of Life Expectancy in Gapminder Data\") + \n  theme(legend.position = \"bottom\") \n\n\n\n\n\n\n\n\n\n8: Repositioning legend\n\n\nggplot(gapminder, aes(x = lifeExp, color = continent)) +\n  geom_freqpoly(bins = 30) +\n  facet_wrap(vars(continent), ncol = 1) +\n  xlab(\"Life Expectancy\") +\n  ylab(\"Count\") +\n  ggtitle(\"Histogram of Life Expectancy in Gapminder Data\") + \n  theme(legend.position = \"bottom\") +\n  theme_minimal()"
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#exercise-make-a-histogram",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#exercise-make-a-histogram",
    "title": "",
    "section": "Exercise: Make a histogram",
    "text": "Exercise: Make a histogram\nIn pairs, create a histogram of life expectancy observations in the complete Gapminder dataset.\n\nSet the base layer by specifying the data as gapminder and the x variable as lifeExp\nAdd a second layer to create a histogram using the function geom_histogram()\nCustomize your plot with nice axis labels and a title.\nAdd the color “salmon” to the entire plot (hint: use the fill argument, not color).\nChange this fill setting to an aesthetic and map continent onto it.\nChange the geom to geom_freqpoly. What happened and how might you fix it?\nAdd facets for continent (create only 1 column).\nMove the legend to the bottom of the plot.\nAdd one of the built-in themes from ggplot2."
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#solution-1.-set-base-layer",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#solution-1.-set-base-layer",
    "title": "Roadmap",
    "section": "Solution: 1. Set Base Layer",
    "text": "Solution: 1. Set Base Layer\n\nggplot(gapminder, aes(x = lifeExp))"
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#solution-2.-add-histogram-layer",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#solution-2.-add-histogram-layer",
    "title": "Roadmap",
    "section": "Solution: 2. Add Histogram Layer",
    "text": "Solution: 2. Add Histogram Layer\n\nggplot(gapminder, aes(x = lifeExp)) +\n  geom_histogram(bins = 30)\n\n\n\n\n\n\n\n\n\n\nSetting the bins aesthetic tells ggplot how many values to bin by (lower is more fine-grained, higher is less descriptive)."
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#solution-3.-add-label-layers",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#solution-3.-add-label-layers",
    "title": "Roadmap",
    "section": "Solution: 3. Add Label Layers",
    "text": "Solution: 3. Add Label Layers\n\nggplot(gapminder, aes(x = lifeExp)) +\n  geom_histogram(bins = 30) +\n  xlab(\"Life Expectancy\") +\n  ylab(\"Count\") +\n  ggtitle(\"Histogram of Life Expectancy in Gapminder Data\")"
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#solution-4.-adding-fill-setting",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#solution-4.-adding-fill-setting",
    "title": "",
    "section": "Solution: 4. Adding fill setting",
    "text": "Solution: 4. Adding fill setting\n\nggplot(gapminder, aes(x = lifeExp)) +\n  geom_histogram(bins = 30, fill = \"salmon\") +\n  xlab(\"Life Expectancy\") +\n  ylab(\"Count\") +\n  ggtitle(\"Histogram of Life Expectancy in Gapminder Data\")"
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#solution-5.-adding-fill-aesthetic",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#solution-5.-adding-fill-aesthetic",
    "title": "",
    "section": "Solution: 5. Adding fill aesthetic",
    "text": "Solution: 5. Adding fill aesthetic\n\nggplot(gapminder, aes(x = lifeExp, fill = continent)) +\n  geom_histogram(bins = 30) +\n  xlab(\"Life Expectancy\") +\n  ylab(\"Count\") +\n  ggtitle(\"Histogram of Life Expectancy in Gapminder Data\")"
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#solution-6.-changing-geometry",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#solution-6.-changing-geometry",
    "title": "",
    "section": "Solution: 6. Changing geometry",
    "text": "Solution: 6. Changing geometry\n\nggplot(gapminder, aes(x = lifeExp, fill = continent)) +\n  geom_freqpoly(bins = 30) +\n  xlab(\"Life Expectancy\") +\n  ylab(\"Count\") +\n  ggtitle(\"Histogram of Life Expectancy in Gapminder Data\")"
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#solution-6.-changing-geometry-1",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#solution-6.-changing-geometry-1",
    "title": "",
    "section": "Solution: 6. Changing geometry",
    "text": "Solution: 6. Changing geometry\n\nggplot(gapminder, aes(x = lifeExp, color = continent)) +\n  geom_freqpoly(bins = 30) +\n  xlab(\"Life Expectancy\") +\n  ylab(\"Count\") +\n  ggtitle(\"Histogram of Life Expectancy in Gapminder Data\")"
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#solution-7.-adding-facets",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#solution-7.-adding-facets",
    "title": "",
    "section": "Solution: 7. Adding facets",
    "text": "Solution: 7. Adding facets\n\nggplot(gapminder, aes(x = lifeExp, color = continent)) +\n  geom_freqpoly(bins = 30) +\n  facet_wrap(vars(continent), ncol = 1) +\n  xlab(\"Life Expectancy\") +\n  ylab(\"Count\") +\n  ggtitle(\"Histogram of Life Expectancy in Gapminder Data\")"
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#solution-8.-repositioning-legend",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#solution-8.-repositioning-legend",
    "title": "",
    "section": "Solution: 8. Repositioning legend",
    "text": "Solution: 8. Repositioning legend\n\nggplot(gapminder, aes(x = lifeExp, color = continent)) +\n  geom_freqpoly(bins = 30) +\n  facet_wrap(vars(continent), ncol = 1) +\n  xlab(\"Life Expectancy\") +\n  ylab(\"Count\") +\n  ggtitle(\"Histogram of Life Expectancy in Gapminder Data\") + \n  theme(legend.position = \"bottom\")"
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#solution-9.-adding-nicer-theme",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#solution-9.-adding-nicer-theme",
    "title": "",
    "section": "Solution: 9. Adding nicer theme",
    "text": "Solution: 9. Adding nicer theme\n\nggplot(gapminder, aes(x = lifeExp, color = continent)) +\n  geom_freqpoly(bins = 30) +\n  facet_wrap(vars(continent), ncol = 1) +\n  xlab(\"Life Expectancy\") +\n  ylab(\"Count\") +\n  ggtitle(\"Histogram of Life Expectancy in Gapminder Data\") + \n  theme(legend.position = \"bottom\") +\n  theme_minimal()"
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#solution-8.-adding-nicer-theme",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#solution-8.-adding-nicer-theme",
    "title": "",
    "section": "Solution: 8. Adding nicer theme",
    "text": "Solution: 8. Adding nicer theme\n\nggplot(gapminder, aes(x = lifeExp, color = continent)) +\n  geom_freqpoly(bins = 30) +\n  facet_wrap(vars(continent), ncol = 1) +\n  xlab(\"Life Expectancy\") +\n  ylab(\"Count\") +\n  ggtitle(\"Histogram of Life Expectancy in Gapminder Data\") +\n  theme_minimal()"
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#solution-9.-remove-legend",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#solution-9.-remove-legend",
    "title": "Roadmap",
    "section": "Solution: 9. Remove legend",
    "text": "Solution: 9. Remove legend\n\nggplot(gapminder, aes(x = lifeExp, color = continent)) +\n  geom_freqpoly(bins = 30) +\n  facet_wrap(vars(continent), ncol = 1) +\n  xlab(\"Life Expectancy\") +\n  ylab(\"Count\") +\n  ggtitle(\"Histogram of Life Expectancy in Gapminder Data\") + \n  theme_minimal() + \n  theme(legend.position = \"none\")"
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#make-a-histogram",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#make-a-histogram",
    "title": "Roadmap",
    "section": "Make a histogram",
    "text": "Make a histogram\nIn pairs, create a histogram of life expectancy observations in the complete Gapminder dataset.\n\nSet the base layer by specifying the data as gapminder and the x variable as lifeExp\nAdd a second layer to create a histogram using the function geom_histogram()\nCustomize your plot with nice axis labels and a title.\nAdd the color “salmon” to the entire plot (hint: use the fill argument, not color).\nChange this fill setting to an aesthetic and map continent onto it.\nChange the geom to geom_freqpoly. What happened and how might you fix it?\nAdd facets for continent (create only 1 column).\nAdd one of the built-in themes from ggplot2.\nRemove the legend from the plot."
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#solution-4.-add-fill-setting",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#solution-4.-add-fill-setting",
    "title": "Roadmap",
    "section": "Solution: 4. Add fill setting",
    "text": "Solution: 4. Add fill setting\n\nggplot(gapminder, aes(x = lifeExp)) +\n  geom_histogram(bins = 30, fill = \"salmon\") +\n  xlab(\"Life Expectancy\") +\n  ylab(\"Count\") +\n  ggtitle(\"Histogram of Life Expectancy in Gapminder Data\")"
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#solution-5.-add-fill-aesthetic",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#solution-5.-add-fill-aesthetic",
    "title": "Roadmap",
    "section": "Solution: 5. Add fill aesthetic",
    "text": "Solution: 5. Add fill aesthetic\n\nggplot(gapminder, aes(x = lifeExp, fill = continent)) +\n  geom_histogram(bins = 30) +\n  xlab(\"Life Expectancy\") +\n  ylab(\"Count\") +\n  ggtitle(\"Histogram of Life Expectancy in Gapminder Data\")"
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#solution-6.-change-geometry",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#solution-6.-change-geometry",
    "title": "Roadmap",
    "section": "Solution: 6. Change geometry",
    "text": "Solution: 6. Change geometry\n\nggplot(gapminder, aes(x = lifeExp, fill = continent)) +\n  geom_freqpoly(bins = 30) +\n  xlab(\"Life Expectancy\") +\n  ylab(\"Count\") +\n  ggtitle(\"Histogram of Life Expectancy in Gapminder Data\")"
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#solution-6.-change-geometry-1",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#solution-6.-change-geometry-1",
    "title": "Roadmap",
    "section": "Solution: 6. Change geometry",
    "text": "Solution: 6. Change geometry\n\nggplot(gapminder, aes(x = lifeExp, color = continent)) +\n  geom_freqpoly(bins = 30) +\n  xlab(\"Life Expectancy\") +\n  ylab(\"Count\") +\n  ggtitle(\"Histogram of Life Expectancy in Gapminder Data\")"
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#solution-7.-add-facets",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#solution-7.-add-facets",
    "title": "Roadmap",
    "section": "Solution: 7. Add facets",
    "text": "Solution: 7. Add facets\n\nggplot(gapminder, aes(x = lifeExp, color = continent)) +\n  geom_freqpoly(bins = 30) +\n  facet_wrap(vars(continent), ncol = 1) +\n  xlab(\"Life Expectancy\") +\n  ylab(\"Count\") +\n  ggtitle(\"Histogram of Life Expectancy in Gapminder Data\")"
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#solution-8.-add-nicer-theme",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#solution-8.-add-nicer-theme",
    "title": "Roadmap",
    "section": "Solution: 8. Add nicer theme",
    "text": "Solution: 8. Add nicer theme\n\nggplot(gapminder, aes(x = lifeExp, color = continent)) +\n  geom_freqpoly(bins = 30) +\n  facet_wrap(vars(continent), ncol = 1) +\n  xlab(\"Life Expectancy\") +\n  ylab(\"Count\") +\n  ggtitle(\"Histogram of Life Expectancy in Gapminder Data\") +\n  theme_minimal()"
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#selecting-the-native-pipe",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#selecting-the-native-pipe",
    "title": "",
    "section": "Selecting the native pipe",
    "text": "Selecting the native pipe\nThe |&gt; is recommended over %&gt;% simply because it’s always available (%&gt;% relied on the magrittr package which was a dependency of tidyverse packages) and it’s much simpler to use.\n\nYou’ll need to specify to R that you want to enable its usage by going to Tools &gt; Global Options &gt; Code. Within the “Editing” Tab there is an option to “Use native pipe operator, |&gt;”. Check it! \n\n\n\n\n\n\n\n\n\n\n\n Keyboard Shortcut\n\n\nTo insert a pipe (with spaces) quickly: Ctrl+Shift+M (Windows & Linux OS) Shift+Command+M (Mac)"
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#styling-existing-code",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#styling-existing-code",
    "title": "",
    "section": "Styling existing code",
    "text": "Styling existing code\nImagine you’ve inherited a bunch of code from someone else and NOTHING is styled in the tidyverse way you’ve become accustomed. Or, you’ve dabbled in R before and you have some old code that is all over the place, with respect to styling.\n\nThanks to Lorenz Walthert there’s a package for that! Using the styler package you can automatically apply the tidyverse style guide standards to various filetypes (.R, .qmd, .Rmd, etc.) or even entire projects.\n\n\nHave a style or variation of the tidyverse style that you prefer? You can specify that in the package as well. Use the keyboard shortcut Cmd/Ctl + Shift + P and search for “styler” to see all the options available."
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#other-formatting-options",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#other-formatting-options",
    "title": "",
    "section": "Other Formatting Options",
    "text": "Other Formatting Options\n\n\n\nThere are some other useful formatting options I’d suggest setting globally and others you can specify to your preferences.\n\nSuggested:\n\nHighlight Function Calls\nEnable preview of colors\n\nRainbow parentheses"
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#other-formatting-options-1",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#other-formatting-options-1",
    "title": "",
    "section": "Other Formatting Options",
    "text": "Other Formatting Options\n\n\n\nThere are some other useful formatting options I’d suggest setting globally and others you can specify to your preferences.\n\nSuggested:\n\nHighlight Function Calls\nEnable preview of colors\n\nRainbow parentheses"
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#other-formatting-options-2",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#other-formatting-options-2",
    "title": "",
    "section": "Other Formatting Options",
    "text": "Other Formatting Options\n\n\n\nThere are some other useful formatting options I’d suggest setting globally and others you can specify to your preferences.\n\nSuggested:\n\nHighlight Function Calls\nEnable preview of colors\nRainbow parentheses"
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#other-formatting-options-3",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#other-formatting-options-3",
    "title": "",
    "section": "Other Formatting Options",
    "text": "Other Formatting Options\n\n\n\nThere are some other useful formatting options I’d suggest setting globally and others you can specify to your preferences.\n\nSuggested:\n\nHighlight Function Calls\nEnable preview of colors\nRainbow parentheses"
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#other-formatting-options-4",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#other-formatting-options-4",
    "title": "",
    "section": "Other Formatting Options",
    "text": "Other Formatting Options\n\n\n\nThere are some other useful formatting options I’d suggest setting globally and others you can specify to your preferences.\n\nUp to you:\n\nCode highlight style"
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#other-formatting-options-5",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#other-formatting-options-5",
    "title": "",
    "section": "Other Formatting Options",
    "text": "Other Formatting Options\n\n\n\nThere are some other useful formatting options I’d suggest setting globally and others you can specify to your preferences.\n\nUp to you:\n\nPane layout"
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#other-formatting-options-6",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#other-formatting-options-6",
    "title": "",
    "section": "Other Formatting Options",
    "text": "Other Formatting Options\n\n\n\nThere are some other useful formatting options I’d suggest setting globally and others you can specify to your preferences.\n\nUp to you:\n\nMarkdown options\n\nOutput preview\nInline output"
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#naming-objects-and-variables",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#naming-objects-and-variables",
    "title": "",
    "section": "Naming Objects (and Variables)",
    "text": "Naming Objects (and Variables)\nIt’s good practice to name objects (and variables) using only lowercase letters, numbers, and _ (to separate words).\n\nRemember to give them descriptive names, even if that means they’re longer.\n\n\nIf you have many related variables, try and be consistent with your naming convention.\n\nA common prefix is preferable to a common suffix due to RStudio’s autocomplete feature.\n\n\n# Code goal: \nshort_flights &lt;- flights |&gt; \n  filter(air_time &lt; 60)\n\n# Code foul: \nSHORTFLIGHTS &lt;- flights |&gt; \n  filter(air_time &lt; 60)"
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#organization-and-portability-1",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#organization-and-portability-1",
    "title": "",
    "section": "Organization and Portability",
    "text": "Organization and Portability\n\n\nGood Example directory\nBad Example directory\n\n\n\n\n\nproject/\n   readme.md\n   data/\n     derived/\n       data_processed.RData\n     raw/\n       data_core.csv\n   docs/\n     paper-paa.qmd\n     paper-journal.qmd\n   syntax/\n     01-functions.R\n     02-cleaning.R\n     03-exploratory.R\n     04-models.R\n     05-visualizations.R\n   visuals/ \n     descriptive.png\n     boxplot.png\n     time_series.png\n\n\n\n\n\nThere is a clear hierarchy\n\n\nWritten content is in docs\n\nCode is in syntax\n\nData is in data\n\nVisualizations are in visuals\n\nThe readme.md describes the project\n\n\n\n\nNaming is uniform\n\nAll lower case\nWords separated by underscores\n\n\nNames are self-descriptive\nNumbering scripts makes it clear in which order they should be run.\n\n\n\n\n\n\n\n\nalternative model.R\ncode for exploratory analysis.r\nfinalreport.qmd\nFinalReport.qmd\nfig 1.png\nFigure_02.png\nmodel_first_try.R\nrun-first.r\ntemp.txt\n\n\n\nOrdering of the files is unclear\nInconsistent naming is confusing (which final report is THE final report?)\nNon-descriptive naming means more work for you in trying to decipher its contents"
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#getting-help-fa-scroll",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#getting-help-fa-scroll",
    "title": "",
    "section": "Getting Help \n",
    "text": "Getting Help \n\nOne of the most difficult things as a beginner in R (or any language tbh) is not always knowing what to ask to solve your issue. Being in this class is a great first step! Some other useful tools:\n\n\n\nGoogle\n\nAdding R to your query is basic but useful and often overlooked. Including the package name, if you’re using one, is another. Finally, what is it you want to do? For example “R dplyr create new variable based on value of another.”\nCopy and pasting error messages is also helpful!\n\n\n\nStackOverflow\n\nMany of your Google queries will take you here anyways so you might try going directly to the source! Filter by R and make sure to include a reprex so people can actually understand what your issue is.\n\n\n\nReprex\n\nShort for minimal reproducible example this is a version of your code that someone could copy and run on their own machine, making it possible for them to help you troubleshoot your problem.\nYou want to strip away everything not pertinent to the issue you’re having so that it’s simple and straightforward.\nYou can use the reprex package for assistance with this!1\n\n\n\n\nPutting in the work up front\n\nIt’s cliché, but investing in your learning right now will pay off down the road.\nLearning how to do something, why R works in a certain way, and developing practices that keep you organized will make you more efficient and help prevent minor and major frustrations going forward.\n\n\n\n\ndput() is also a useful function for quickly creating a snippet of your data to share with others to illustrate your issue."
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#selecting-from-vectors-with",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#selecting-from-vectors-with",
    "title": "",
    "section": "Selecting from vectors with [\n",
    "text": "Selecting from vectors with [\n\n\n\nGiven a vector of values:\n\nx &lt;- c(a = \"one\", \n       b = NA, \n       c = \"two\", \n       d = \"three\", \n       e = \"four\", \n       f = NA, \n       g = NA, \n       h = \"five\")\n\n\nYou can select from the vector\n\n\n# with positive integers\nx[c(3, 1, 5)]\n\n\n\n     c      a      e \n \"two\"  \"one\" \"four\" \n\n# even repeated values\nx[c(3, 1, 1, 5, 3)]\n\n     c      a      a      e      c \n \"two\"  \"one\"  \"one\" \"four\"  \"two\" \n\n\n\n\n\n# with negative integers\nx[c(-2, -6, -7)]\n\n\n\n      a       c       d       e       h \n  \"one\"   \"two\" \"three\"  \"four\"  \"five\" \n\n\n\n\n\n# with a logical vector\nx[!is.na(x)]\n\n\n\n      a       c       d       e       h \n  \"one\"   \"two\" \"three\"  \"four\"  \"five\" \n\n\n\n\n\n# or with a named vector\nx[c(\"c\", \"h\")]\n\n\n\n     c      h \n \"two\" \"five\""
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#subsetting-from-dataframes-with",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#subsetting-from-dataframes-with",
    "title": "",
    "section": "Subsetting from dataframes with [ ]",
    "text": "Subsetting from dataframes with [ ]"
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#selecting-from-dataframes-with",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#selecting-from-dataframes-with",
    "title": "",
    "section": "Selecting from dataframes with [\n",
    "text": "Selecting from dataframes with [\n\nYou can select rows and columns from dataframes with df[rows, cols].\n\n\n\ndf &lt;- tibble(\n  x = 1:3, \n  y = c(\"a\", \"e\", \"f\"), \n  z = runif(3) # defaults: min = 0, max = 1\n)\n\ndf\n\n\n\n# A tibble: 3 × 3\n      x y         z\n  &lt;int&gt; &lt;chr&gt; &lt;dbl&gt;\n1     1 a     0.603\n2     2 e     0.786\n3     3 f     0.945\n\n\n\n\n\n# Select first row and second column\ndf[1, 2]\n\n\n\n# A tibble: 1 × 1\n  y    \n  &lt;chr&gt;\n1 a    \n\n\n\n\n\n# Select all rows and columns x and y\ndf[, c(\"x\" , \"y\")]\n\n\n\n# A tibble: 3 × 2\n      x y    \n  &lt;int&gt; &lt;chr&gt;\n1     1 a    \n2     2 e    \n3     3 f    \n\n\n\n\n\n# Select rows where `x` is greater than 1 and all columns\ndf[df$x &gt; 1, ]\n\n\n\n# A tibble: 2 × 3\n      x y         z\n  &lt;int&gt; &lt;chr&gt; &lt;dbl&gt;\n1     2 e     0.786\n2     3 f     0.945"
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#creating-an-rstudio-project",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#creating-an-rstudio-project",
    "title": "",
    "section": "Creating an RStudio Project",
    "text": "Creating an RStudio Project\n\n\n\n\n\n\n\nYou can create a project by clicking\n\n\nFile &gt; New Project…\n\n\n    in the upper-left corner of RStudio\nthe dropdown menu in the upper-right corner of RStudio and selecting New Project…"
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#file-paths",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#file-paths",
    "title": "",
    "section": "File paths",
    "text": "File paths\nA file path specifies the location of a file in a computer’s file system structure. They can be used to locate files and web resources. Some important things to note:\n\n\nFor file systems, each level in the hierarchy is a directory\n\nFor URLs, each level in the hierarchy is a page.\n\n\nA path is a string of characters which specifies a unique location in a directory or page hierarchy.\nDifferent sections of the path are separated by a path separator, such as a forward slash (/).\n\nThese different sections represent the separate directories or pages in the hierarchy.\n\n\nIn Unix-based operating systems, such as Linux or macOS, the path separator is a forward slash (/).\n\nIn Windows, the path separator is a back slash (\\).\nURLs follow a standard format that always uses a forward slash (/) as the path separator regardless of the operating system."
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#absolute-versus-relative-paths",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#absolute-versus-relative-paths",
    "title": "",
    "section": "Absolute Versus Relative Paths",
    "text": "Absolute Versus Relative Paths\n\n\nAbsolute\nRelative\n\n\n\nSpecifies the location of a file from the root directory in the file system structure. They are also called “full file paths” or “full paths.”\n\n\"/Users/victoriasass/Desktop/GitHub/CSSS508/Lectures/Lecture3/CSSS508_Lecture3.qmd\"\n\n\n\nIn Linux, the ~ is commonly used to represent a user’s home directory, i.e.:\n\n\"~/Desktop/GitHub/CSSS508/Lectures/Lecture3/CSSS508_Lecture3.qmd\"\n\n\n\n\nSpecifies the location of a file in the same folder or on the same server. In other words, a relative file path specifies a location of a file that is relative to the current directory.\n\n\"./CSSS508_Lecture3.qmd\"` or `\"CSSS508_Lecture3.qmd\"\n\n\n\nRelative file paths use a dot notation at the start of the path, followed by a path separator and the location of the file.\n\nA single dot (.) indicates the current directory (as shown above)\nA double dot (..) indicates the parent directory.\n\n\n\nFor example, if I wanted to reference the syllabus (which is in the main project folder CSSS508) from my current folder Lecture3 I would write:\n\n\"../../syllabus.qmd\""
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#workflow-versus-product",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#workflow-versus-product",
    "title": "",
    "section": "Workflow versus Product",
    "text": "Workflow versus Product\nTo summarize Jenny Bryan, one should separate workflow (i.e. your personal tastes and habits) from product (i.e. the logic and output that is the essence of your project).\n\n\n\n\nWorkflow\n\nThe software you use to write your code (e.g. RStudio)\nThe location you store a project\nThe specific computer you use\nThe code you ran earlier or typed into your console\n\n\nProduct\n\nThe raw data\nThe code that operates on your raw data\nThe packages you use\nThe output files or documents\n\n\n\n\n\nEach data analysis (or homework assignment for a class) should be organized as a project.\n\nProjects should NOT modify anything outside of the project nor need to be modified by someone else (or future you) to run.\nProjects should be independent of your workflow."
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#portability-1",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#portability-1",
    "title": "",
    "section": "Portability",
    "text": "Portability\nFor research to be reproducible, it must also be portable. Portable software operates independently of workflow.\n\n\nDo Not:\nDo:\n\n\n\n\nUse setwd()\n\nUse absolute paths except for fixed, immovable sources (secure data).\n\nread_csv(\"C:/my_project/data/my_data.csv\")\n\n\nUse install.packages() in script or .qmd files.\nUse rm(list=ls()) anywhere but your console.\n\n\n\n\n\n\n\nUse RStudio projects (or the here package) to set directories.\nUse relative paths to load and save files:\n\nread_csv(\"./data/my_data.csv\")\n\n\nLoad all required packages using library().\nClear your workspace when closing RStudio.\n\nSet Tools &gt; Global Options… &gt; Save workspace… to Never"
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#important-notes-about-setwd-and-rmlistls",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#important-notes-about-setwd-and-rmlistls",
    "title": "",
    "section": "Important notes about setwd() and rm(list=ls())\n",
    "text": "Important notes about setwd() and rm(list=ls())\n\nsetwd()\n\nSetting your working directory this way makes it nearly impossible for your project to be replicated by anyone but you, and only on the exact same computer on which it was created.\n\nrm(list=ls())\n\nMake sure not to expect rm(list=ls()) to give you a fresh R session. It may feel that way when all the objects in your global environment disappear but there are a host of dependencies (i.e. loaded packages, options set to non-defaults, where the working directory is set) that have not changed. Your script will still be vulnerable to those settings unless you start a fresh R session."
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#important-setwd-and-rmlistls",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#important-setwd-and-rmlistls",
    "title": "",
    "section": "IMPORTANT! setwd() and rm(list=ls())\n",
    "text": "IMPORTANT! setwd() and rm(list=ls())\n\nsetwd()\n\nSetting your working directory this way makes it nearly impossible for your project to be replicated by anyone but you, and only on the exact same computer on which it was created.\n\nrm(list=ls())\n\nMake sure not to expect rm(list=ls()) to give you a fresh R session. It may feel that way when all the objects in your global environment disappear but there are a host of dependencies (i.e. loaded packages, options set to non-defaults, where the working directory is set) that have not changed. Your script will still be vulnerable to those settings unless you start a fresh R session."
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#setwd-and-rmlistls",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#setwd-and-rmlistls",
    "title": "",
    "section": "\nsetwd() and rm(list=ls())\n",
    "text": "setwd() and rm(list=ls())\n\n\n\n\n\n setwd()\n\n\nSetting your working directory using setwd() way makes it impossible for your project to be replicated by anyone but you, and only on the exact same computer on which it was created.\n\n\n\n\n\n\n\n rm(list=ls())\n\n\nMake sure not to expect rm(list=ls()) to give you a fresh R session. It may feel that way when all the objects in your global environment disappear but there are a host of dependencies (i.e. loaded packages, options set to non-defaults, the working directory) that have not changed. Your script will still be vulnerable to those settings unless you start a fresh R session."
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#psa-setwd-and-rmlistls",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#psa-setwd-and-rmlistls",
    "title": "",
    "section": "PSA: setwd() and rm(list=ls())\n",
    "text": "PSA: setwd() and rm(list=ls())\n\n\n\n\n\n\n setwd()\n\n\nSetting your working directory using setwd() makes it impossible for your project to be replicated by anyone but you, and only on the exact same computer on which it was created.\n\n\n\n\n\n\n\n\n\n rm(list=ls())\n\n\nMake sure not to expect rm(list=ls()) to give you a fresh R session. It may feel that way when all the objects in your global environment disappear but there are a host of dependencies (i.e. loaded packages, options set to non-defaults, the working directory) that have not changed. Your script will still be vulnerable to those settings unless you start a fresh R session."
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#data.frame-vs.-tibble",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#data.frame-vs.-tibble",
    "title": "",
    "section": "\ndata.frame() vs. tibble()\n",
    "text": "data.frame() vs. tibble()\n\nTibbles are the tidyverse version of a base R dataframe. Usually you can use them interchangably without issue but they have slightly different behavior that’s important to know about when indexing in this way.\n\nIf df is a data.frame, then df[, cols] will return a vector if col selects a single column and a data frame if it selects more than one column.\n\ndf1 &lt;- data.frame(x = 1:3)\ndf1[, \"x\"]\n\n[1] 1 2 3\n\n\n\n\nIf df is a tibble, then [ will always return a tibble.\n\ndf2 &lt;- tibble(x = 1:3)\ndf2[, \"x\"]\n\n# A tibble: 3 × 1\n      x\n  &lt;int&gt;\n1     1\n2     2\n3     3\n\n\n\n\nOne way to avoid this ambiguity with data.frames is to explicitly specify drop = FALSE:\n\ndf1[, \"x\" , drop = FALSE]\n\n  x\n1 1\n2 2\n3 3"
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#data.frame-vs.-tibble-fa-scroll",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#data.frame-vs.-tibble-fa-scroll",
    "title": "",
    "section": "\ndata.frame() vs. tibble() \n",
    "text": "data.frame() vs. tibble() \n\nTibbles are the tidyverse version of a base R dataframe. Usually you can use them interchangably without issue but they have slightly different behavior that’s important to know about when indexing in this way.\n\nIf df is a data.frame, then df[, cols] will return a vector if col selects a single column and a data frame if it selects more than one column.\n\ndf1 &lt;- data.frame(x = 1:3)\ndf1[, \"x\"]\n\n\n\n[1] 1 2 3\n\n\n\n\nIf df is a tibble, then [ will always return a tibble.\n\ndf2 &lt;- tibble(x = 1:3)\ndf2[, \"x\"]\n\n\n\n# A tibble: 3 × 1\n      x\n  &lt;int&gt;\n1     1\n2     2\n3     3\n\n\n\n\nOne way to avoid this ambiguity with data.frames is to explicitly specify drop = FALSE:\n\ndf1[, \"x\" , drop = FALSE]\n\n\n\n  x\n1 1\n2 2\n3 3"
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#selecting-from-dataframes-with-and",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#selecting-from-dataframes-with-and",
    "title": "",
    "section": "Selecting from dataframes with [[ ]] and $\n",
    "text": "Selecting from dataframes with [[ ]] and $\n\n[[ ]] and $ can be used to extract a single element.\n\n\n\ntb &lt;- tibble(\n  x = 1:4,\n  y = c(10, 4, 1, 21)\n)\n\ntb\n\n# A tibble: 4 × 2\n      x     y\n  &lt;int&gt; &lt;dbl&gt;\n1     1    10\n2     2     4\n3     3     1\n4     4    21\n\n\n\n\n[[ ]] can access by position or by name:\n\n# by position\ntb[[1]]\n\n[1] 1 2 3 4\n\n\n\n\n\n# by name\ntb[[\"x\"]]\n\n[1] 1 2 3 4\n\n\n\n\n$ is specialized for access by name:\n\ntb$x\n\n[1] 1 2 3 4\n\n\n\n\nThey can also be used to create new columns.\n\ntb$z &lt;- tb$x + tb$y\ntb\n\n# A tibble: 4 × 3\n      x     y     z\n  &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt;\n1     1    10    11\n2     2     4     6\n3     3     1     4\n4     4    21    25"
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#selecting-from-dataframes-with-and-fa-scroll",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#selecting-from-dataframes-with-and-fa-scroll",
    "title": "",
    "section": "Selecting from dataframes with [[ and $ \n",
    "text": "Selecting from dataframes with [[ and $ \n\n[, which selects many elements, is paired with [[ and $, which extract a single element.\n\n\n\ntb &lt;- tibble(\n  x = 1:4,\n  y = c(10, 4, 1, 21)\n)\n\ntb\n\n\n\n# A tibble: 4 × 2\n      x     y\n  &lt;int&gt; &lt;dbl&gt;\n1     1    10\n2     2     4\n3     3     1\n4     4    21\n\n\n\n\n[[ can access by position or by name:\n\n# by position\ntb[[1]]\n\n\n\n[1] 1 2 3 4\n\n\n\n\n\n# by name\ntb[[\"x\"]]\n\n\n\n[1] 1 2 3 4\n\n\n\n\n$ is specialized for access by name:\n\ntb$x\n\n\n\n[1] 1 2 3 4\n\n\n\n\nThey can also be used to create new columns.\n\ntb$z &lt;- tb$x + tb$y\ntb\n\n\n\n# A tibble: 4 × 3\n      x     y     z\n  &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt;\n1     1    10    11\n2     2     4     6\n3     3     1     4\n4     4    21    25"
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#some-title",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#some-title",
    "title": "",
    "section": "Some title",
    "text": "Some title\n\nIf you haven’t already, go to Tools &gt; Global Options and adjust your settings (i.e. General, Code &gt; Editing, and Code &gt; Display) to those recommended in the lecture and any others that you’d like to change (i.e. Appearance, Pane Layout, or R Markdown)"
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#lab",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#lab",
    "title": "",
    "section": "Lab",
    "text": "Lab\n\nIf you haven’t already, go to Tools &gt; Global Options and adjust your settings (i.e. General, Code &gt; Editing, and Code &gt; Display) to those recommended in the lecture and any others that you’d like to change (i.e. Appearance, Pane Layout, or R Markdown)\n\nWorking in pairs, answer the following questions.\n\nRestyle the following pipelines following the guidelines discussed in lecture:\n\n\nflights|&gt;filter(dest==\"IAH\")|&gt;group_by(year,month,day)|&gt;summarize(n=n(),\ndelay=mean(arr_delay,na.rm=TRUE))|&gt;filter(n&gt;10)\n\nflights|&gt;filter(carrier==\"UA\",dest%in%c(\"IAH\",\"HOU\"),sched_dep_time&gt;\n0900,sched_arr_time&lt;2000)|&gt;group_by(flight)|&gt;summarize(delay=mean(\narr_delay,na.rm=TRUE),cancelled=sum(is.na(arr_delay)),n=n())|&gt;filter(n&gt;10)\n\n\nTweak each of the following R commands so that they run correctly:\n\n\nlibary(todyverse)\n\nggplot(dTA = mpg) + \n  geom_point(maping = aes(x = displ y = hwy)) +\n  geom_smooth(method = \"lm)\n\n\nPress Option + Shift + K / Alt + Shift + K. What happens? How can you get to the same place using the menus?\nWhat might be a good way to organize your homework assignments for this class?"
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#solution-1.-adjust-settings",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#solution-1.-adjust-settings",
    "title": "",
    "section": "Solution: 1. Adjust settings",
    "text": "Solution: 1. Adjust settings\n\nClear .RData, Never save"
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#solution-1.-adjust-settings-1",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#solution-1.-adjust-settings-1",
    "title": "",
    "section": "Solution: 1. Adjust settings",
    "text": "Solution: 1. Adjust settings\n\nNative pipe"
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#solution-1.-adjust-settings-2",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#solution-1.-adjust-settings-2",
    "title": "",
    "section": "Solution: 1. Adjust settings",
    "text": "Solution: 1. Adjust settings\n\nHighlight function calls; preview colors; rainbow parentheses"
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#solution-1.-adjust-settings-3",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#solution-1.-adjust-settings-3",
    "title": "",
    "section": "Solution: 1. Adjust settings",
    "text": "Solution: 1. Adjust settings\n\nCode appearance"
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#solution-2.-readable-code-style",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#solution-2.-readable-code-style",
    "title": "",
    "section": "Solution: 2. Readable code style",
    "text": "Solution: 2. Readable code style\n\n\nflights|&gt;filter(dest==\"IAH\")|&gt;group_by(year,month,day)|&gt;summarize(n=n(),\ndelay=mean(arr_delay,na.rm=TRUE))|&gt;filter(n&gt;10)\n\nflights|&gt;filter(carrier==\"UA\",dest%in%c(\"IAH\",\"HOU\"),sched_dep_time&gt;\n0900,sched_arr_time&lt;2000)|&gt;group_by(flight)|&gt;summarize(delay=mean(\narr_delay,na.rm=TRUE),cancelled=sum(is.na(arr_delay)),n=n())|&gt;filter(n&gt;10)\n\n\n\n\nflights |&gt; \n  filter(dest == \"IAH\") |&gt; \n  group_by(year, month, day) |&gt; \n  summarize(\n    n = n(),\n    delay = mean(arr_delay, na.rm = TRUE)\n    ) |&gt; \n  filter(n &gt; 10)\n\nflights |&gt; \n  filter(carrier == \"UA\", dest %in% c(\"IAH\", \"HOU\"), \n         sched_dep_time &gt; 0900, sched_arr_time &lt; 2000) |&gt;\n  group_by(flight) |&gt; \n  summarize(\n    delay = mean(arr_delay, na.rm = TRUE), \n    cancelled = sum(is.na(arr_delay)), \n    n = n() \n    ) |&gt; \n  filter(n &gt; 10)"
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#solution-3.-option-shift-k-alt-shift-k",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#solution-3.-option-shift-k-alt-shift-k",
    "title": "",
    "section": "Solution: 3. Option + Shift + K / Alt + Shift + K\n",
    "text": "Solution: 3. Option + Shift + K / Alt + Shift + K\n\n\n\n\n\n\n\nYou can find the same quick reference pop-up by clicking Tools &gt; Keyboard Shortcuts Help."
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#solution-3.-keyboard-shortcut",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#solution-3.-keyboard-shortcut",
    "title": "",
    "section": "Solution: 3. Keyboard shortcut",
    "text": "Solution: 3. Keyboard shortcut"
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#solution-1.-adjust-settings-4",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#solution-1.-adjust-settings-4",
    "title": "",
    "section": "Solution: 1. Adjust settings",
    "text": "Solution: 1. Adjust settings\n\nPane Layout"
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#solution-1.-adjust-settings-5",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#solution-1.-adjust-settings-5",
    "title": "",
    "section": "Solution: 1. Adjust settings",
    "text": "Solution: 1. Adjust settings\n\nMarkdown Preferences"
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#solution-4.-keyboard-shortcut",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#solution-4.-keyboard-shortcut",
    "title": "",
    "section": "Solution: 4. Keyboard shortcut",
    "text": "Solution: 4. Keyboard shortcut\n\n\nlibary(todyverse)\n\nggplot(dTA = mpg) + \n  geom_point(maping = aes(x = displ y = hwy)) +\n  geom_smooth(method = \"lm)\n\n\n\n\nlibary(tidyverse)\n\nggplot(data = mpg, \n       mapping = aes(x = displ, y = hwy)) + \n  geom_point() +\n  geom_smooth(method = \"lm\")"
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#solution-5.-organizing-a-class",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#solution-5.-organizing-a-class",
    "title": "",
    "section": "Solution: 5. Organizing a class",
    "text": "Solution: 5. Organizing a class\n\n\n\n\n\nCreate a folder for this class on a computer/system that gets backed up regularly\nEach homework assignment gets a separate RStudio project\nEverything within each homework assignment project gets saved into that specific folder (or a subfolder of that folder)\nAnything required for each homework assignment (e.g. downloaded data) is saved into its project-specific folder\n\n\n\n\n\nCSSS508/\n   Homeworks/\n     HW1/\n       homework1.qmd\n       homework1.html\n     HW2/\n       homework2.qmd\n       homework2.html\n     HW3/\n       homework3.qmd\n       homework3.html\n     HW4/\n       homework4.qmd\n       homework4.html\n       data.csv\n     HW5/\n       homework5.qmd\n       homework5.html\n         data/\n           data_raw.csv\n           data_processed.Rdata\n     HW6/\n     HW7/\n     HW8/\n     HW9/"
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#homework-3-1",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#homework-3-1",
    "title": "",
    "section": "Homework 3",
    "text": "Homework 3\n\nggplot(mpg, aes(x = class)) +\n  geom_bar()\nggplot(mpg, aes(x = cty, y = hwy)) +\n  geom_point()\nggsave(\"mpg-plot.png\")\n\n\nRun the code above.\n\nWhich of the two plots is saved as mpg-plot.png? Why?1\n\nIn the files tab of the lower-left pane of your RStudio, look at the project folder for this homework and re-write the current organizational structure for this class with any changes that have occurred (i.e. update your answer to question 1.v.).\n\n\nGo to the RStudio Tips Twitter account and find one tip that makes sense to you and looks interesting. Describe it and link to it2 in your qmd. Maybe practice using it!3\n\nHint: Check out the help page!See how to link to websites in markdown syntax hereNo need to demonstrate this in your qmd."
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#homework-3-2",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#homework-3-2",
    "title": "",
    "section": "Homework 3",
    "text": "Homework 3\n\ny &lt;- tibble(a = seq(1, 10, 2), \n            b = c(\"apple\", \"banana\", \"strawberry\", \"peach\", \"mango\"), \n            c = c(rep(TRUE, 3), rep(FALSE, 2)))\n\n\nCreate the tibble above.\n\nWhat does seq do in this example and what arguments does it take?\nWhat does rep do in this example and what arguments does it take?\nIndex y using [ to arrive at the results:\n\n\n\n\n\n# A tibble: 2 × 1\n  b     \n  &lt;chr&gt; \n1 banana\n2 mango \n\n\n   iv) Index y using $ to arrive at the results:\n\n\n[1]  TRUE  TRUE  TRUE FALSE FALSE\n\n\n   v) What does y[3:5, ] produce? What does : do?"
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#homework-3-3",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#homework-3-3",
    "title": "",
    "section": "Homework 3",
    "text": "Homework 3\n\ny &lt;- tibble(a = seq(1, 10, 2), \n            b = c(\"apple\", \"banana\", \"strawberry\", \"peach\", \"mango\"), \n            c = c(rep(TRUE, 3), rep(FALSE, 2)))\n\n\nCreate the tibble above.\n\nWhat does seq do in this example and what arguments does it take?\nWhat does rep do in this example and what arguments does it take?\nIndex y using [ to arrive at the results:\n\n\n\n\n\n# A tibble: 2 × 1\n  b     \n  &lt;chr&gt; \n1 banana\n2 mango \n\n\n   iv) Index y using $ to arrive at the results:\n\n\n[1]  TRUE  TRUE  TRUE FALSE FALSE\n\n\n   v) What does y[3:5, ] produce? What does : do?"
  },
  {
    "objectID": "Homework/HW3/homework3.html#footnotes",
    "href": "Homework/HW3/homework3.html#footnotes",
    "title": "Homework 3",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nThe specific titles used to name your files/folders can be whatever you want as long as they’re descriptive and consistent in their naming conventions.↩︎\nYou’ll notice that the upper-right hand corner of your RStudio IDE now displays the name of your new project for this homework. This is your current working directory.↩︎\nYou can embed output-looking text like this example by using a code chunk without the {r} like so:\n```\nCSSS 508\n  Homework1/\n  ...etc...\n```\n↩︎\nHint: Check out the help page!↩︎\nSee how to link to websites in markdown syntax here↩︎\nNo need to demonstrate this in your qmd.↩︎"
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#naming-objects",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#naming-objects",
    "title": "",
    "section": "Naming Objects",
    "text": "Naming Objects\nIt’s good practice to name objects (and oftentimes variables) using only lowercase letters, numbers, and _ (to separate words).\n\nRemember to give them descriptive names, even if that means they’re longer.\n\n\nIf you have many related variables, try and be consistent with your naming convention.\n\nA common prefix is preferable to a common suffix due to RStudio’s autocomplete feature.\n\n\n# Code goal: \nshort_flights &lt;- flights |&gt; \n  filter(air_time &lt; 60)\n\n# Code foul: \nSHORTFLIGHTS &lt;- flights |&gt; \n  filter(air_time &lt; 60)"
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#homework-3-fa-scroll",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#homework-3-fa-scroll",
    "title": "",
    "section": "Homework 3 \n",
    "text": "Homework 3 \n\nInstructions\nFor this assignment, include all code and relevant output in your rendered html document.\n\nOrganize your files for this class in a way that facilitates reproducible research.\n\nStart with homeworks 1 and 2: make sure the qmds and htmls for each have their own folder within a folder for this class.\nRetroactively turn those homework folders into RStudio Projects by selecting File &gt; New Project… &gt; Existing Directory and selecting the appropriate folder for each homework. Then close each project.\nFor the current homework, begin by first creating a project for “Homework3”1.\nCreate your .qmd for this homework within this new project2.\nWhen you’re done organizing the folder for this class, write out its current organizational structure (i.e. something similar to the solution to lab question 53 with the specific names for files and folders that you used).\n\n\nThe specific titles used to name your files/folders can be whatever you want as long as they’re descriptive and consistent in their naming conventions.You’ll notice that the upper-right hand corner of your RStudio IDE now displays the name of your new project for this homework. This is your current working directory.\nYou can embed output-looking text like this example by using a code chunk without the {r} like so:\n```\nCSSS 508\n  Homework1/\n  ...etc...\n```"
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#section",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#section",
    "title": "",
    "section": "",
    "text": "If you haven’t already, go to Tools &gt; Global Options and adjust your settings (i.e. General, Code &gt; Editing, and Code &gt; Display) to those recommended in the lecture and any others that you’d like to change (i.e. Appearance, Pane Layout, or R Markdown)\nRestyle the following pipelines following the guidelines discussed in lecture:\n\n\nflights|&gt;filter(dest==\"IAH\")|&gt;group_by(year,month,day)|&gt;summarize(n=n(),\ndelay=mean(arr_delay,na.rm=TRUE))|&gt;filter(n&gt;10)\n\nflights|&gt;filter(carrier==\"UA\",dest%in%c(\"IAH\",\"HOU\"),sched_dep_time&gt;\n0900,sched_arr_time&lt;2000)|&gt;group_by(flight)|&gt;summarize(delay=mean(\narr_delay,na.rm=TRUE),cancelled=sum(is.na(arr_delay)),n=n())|&gt;filter(n&gt;10)\n\n\nPress Option + Shift + K / Alt + Shift + K. What happens? How can you get to the same place using the menus?\nTweak each of the following R commands so that they run correctly:\n\n\nlibary(todyverse)\n\nggplot(dTA = mpg) + \n  geom_point(maping = aes(x = displ y = hwy)) +\n  geom_smooth(method = \"lm)\n\n\nWhat might be a good way to organize your homework assignments for this class?"
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#manual-data-import",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#manual-data-import",
    "title": "Roadmap",
    "section": "Manual data import",
    "text": "Manual data import"
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#specifying-nas",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#specifying-nas",
    "title": "Roadmap",
    "section": "Specifying NAs",
    "text": "Specifying NAs\nNAs are technically logical (boolean) variables2 that indicate a missing value.\n. . .\nSometimes a particular dataset or file read from a different software will code NAs differently than R. If that’s the case, you can add additional specifications to read_csv for what to read in as NA.\n\nbillboard_2000_raw &lt;- read_csv(file = \"data/billboard.csv\", \n                               na = c(\"N/A\", \"999\"))"
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#skipping-lines",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#skipping-lines",
    "title": "Roadmap",
    "section": "Skipping lines",
    "text": "Skipping lines\nDepending on how the data were input, there may be several lines that precede the beginning of the data table you’re interested in importing. You can skip these lines of metadata with the skip argument:\n\nbillboard_2000_raw &lt;- read_csv(file = \"data/billboard.csv\", \n                               skip = 1)"
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#variable-names",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#variable-names",
    "title": "Roadmap",
    "section": "Variable names",
    "text": "Variable names\nread_csv will automatically take the first row as column names. If you want to rename them you can save yourself some time recoding later on if you specify your preferred variable names upfront with the col_names argument.\n. . .\nIt takes a character vector to be used as column names (in their order of appearance).\n\nbillboard_2000_raw &lt;- read_csv(file = \"data/billboard.csv\", \n                               col_names = c(\"year\", \"artist\", \"track\", \"time\", \"date_entered\", \n1                                             paste(\"wk\", 1:76, sep = \"_\")))\n\n2billboard_renamed |&gt;  names() |&gt; head(10)\n\n\n1\n\npaste “pastes” together the first argument to the second argument (separated by whatever is specified in the sep argument) as character strings. Since the first argument here is a singular value, it is repeated for the entire length of the vector in the second argument. The first several values of paste(\"wk\", 1:76, sep = \"_\") are: wk_1, wk_2, wk_3, wk_4, wk_5, wk_6\n\n2\n\nOur first official usage of the pipe! names here returns the column names of our data frame. . . .\n\n\n\n\nIf you don’t have any variable names you can specify that instead.\n\nbillboard_2000_raw &lt;- read_csv(file = \"data/billboard.csv\", \n                               col_names = FALSE)"
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#snake-case",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#snake-case",
    "title": "Roadmap",
    "section": "Snake Case",
    "text": "Snake Case\nIf you simply want to change your variables to snake case (all lower case; words separated by _), you can use the function clean_names() from the janitor package which replaces other punctuation separators with _.\n\n# Download pacakge first\n1# install.packages(\"janitor\")\n\n# Create new object for renamed data\nbillboard_renamed &lt;- billboard_2000_raw |&gt; \n2  janitor::clean_names(numerals = \"right\")\n\nbillboard_renamed |&gt;  names() |&gt; head(10)\n\n\n1\n\nRun in the console first.\n\n2\n\nYou can call a function without loading its package by specifying its package name followed by :: before it;  The numerals argument specifies if you additionally want to put a separator before a number.\n\n\n\n\n [1] \"year\"         \"artist\"       \"track\"        \"time\"         \"date_entered\"\n [6] \"wk_1\"         \"wk_2\"         \"wk_3\"         \"wk_4\"         \"wk_5\""
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#how-does-readr-parse-the-data-into-different-data-types",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#how-does-readr-parse-the-data-into-different-data-types",
    "title": "",
    "section": "How does readr parse the data into different data types?",
    "text": "How does readr parse the data into different data types?\nFor each column in a data frame, readr functions pull the first 1000 rows and checks:\n\nflowchart LR\n    id1(Variable)==[Does it contain only F, T, FALSE, or TRUE, (ignoring case)?]==&gt;Logical:::ClassA\n    id1(Variable)==[Does it contain only numbers(e.g., 1, -4.5, 5e6, Inf?)]==&gt;Number:::ClassA\n    id1(Variable)==[Does it match the ISO8601 standard?]==&gt;Date/Date-time:::ClassA\n    id1(Variable)==[None of the above]==&gt;String:::ClassA\nstyle id1 fill:#1e4655,color:#c7cdac,stroke:#c7cdac\nclassDef ClassA fill:#c7cdac,color:#1e4655,stroke:#1e4655\n\n\n\nflowchart LR\n    id1(Variable)==[Does it contain only F, T, FALSE, or TRUE, (ignoring case)?]==&gt;Logical:::ClassA\n    id1(Variable)==[Does it contain only numbers(e.g., 1, -4.5, 5e6, Inf?)]==&gt;Number:::ClassA\n    id1(Variable)==[Does it match the ISO8601 standard?]==&gt;Date/Date-time:::ClassA\n    id1(Variable)==[None of the above]==&gt;String:::ClassA\nstyle id1 fill:#1e4655,color:#c7cdac,stroke:#c7cdac\nclassDef ClassA fill:#c7cdac,color:#1e4655,stroke:#1e4655"
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#other-data-types-read-by-readr",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#other-data-types-read-by-readr",
    "title": "",
    "section": "Other Data Types Read By readr\n",
    "text": "Other Data Types Read By readr\n\nThe other functions in readr employ as similar approach to read_csv so the trick is just knowing which to use for what data type.\n\n\n\n\nread_csv2 is separated by semicolons (instead of commas)\n\nread_tsv is separated by tabs\n\nread_delim guesses the delimiter\n\nread_fwf reads in fixed-width-files\n\nread_table is a variation of fwf where columns separated by white space\n\nread_log reads in Apache-style log files"
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#how-does-readr-parse-different-data-types",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#how-does-readr-parse-different-data-types",
    "title": "Roadmap",
    "section": "How does readr parse different data types?",
    "text": "How does readr parse different data types?\nFor each column in a data frame, readr functions pull the first 1000 rows and checks:\n\n\n\n\nflowchart LR\n    id1((Variable))==&gt;A([\"1. Does it contain only F, T, FALSE, TRUE, or NA (ignoring case)?\"])==&gt;id2{{Logical}}\n    id1((Variable))==&gt;B([\"2. Does it contain only numbers (e.g., 1, -4.5, 5e6, Inf?)\"])==&gt;id3{{Number}}\n    id1((Variable))==&gt;C([\"3. Does it match the ISO8601 standard?\"])==&gt;id4{{Date/Date-time}}\n    id1((Variable))==&gt;D([\"4. None of the above\"])==&gt;id5{{String}}\n    style id1 fill:#1e4655,color:#c7cdac,stroke:#c7cdac\n    style id2 fill:#c7cdac,color:#1e4655,stroke:#1e4655\n    style id3 fill:#c7cdac,color:#1e4655,stroke:#1e4655\n    style id4 fill:#c7cdac,color:#1e4655,stroke:#1e4655\n    style id5 fill:#c7cdac,color:#1e4655,stroke:#1e4655\n    style A fill:#FFFFFF,color:#000000,stroke:#000000\n    style B fill:#FFFFFF,color:#000000,stroke:#000000\n    style C fill:#FFFFFF,color:#000000,stroke:#000000\n    style D fill:#FFFFFF,color:#000000,stroke:#000000"
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#how-does-readr-parse-different-data-types-1",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#how-does-readr-parse-different-data-types-1",
    "title": "Roadmap",
    "section": "How does readr parse different data types?",
    "text": "How does readr parse different data types?\nFor each column in a data frame, readr functions pull the first 1000 rows and checks:\n\n\n\n\nflowchart LR\n    id1((Variable))==&gt;A([\"1. Does it contain only F, T, FALSE, TRUE, or NA (ignoring case)?\"])==&gt;id2{{Logical}}\n    id1((Variable))==&gt;B([\"2. Does it contain only numbers (e.g., 1, -4.5, 5e6, Inf?)\"])==&gt;id3{{Number}}\n    id1((Variable))==&gt;C([\"3. Does it match the ISO8601 standard?\"])==&gt;id4{{Date/Date-time}}\n    id1((Variable))==&gt;D([\"4. None of the above\"])==&gt;id5{{String}}\n    style id1 fill:#1e4655,color:#c7cdac,stroke:#c7cdac\n    style id2 fill:#1e4655,color:#c7cdac,stroke:#c7cdac\n    style id3 fill:#c7cdac,color:#1e4655,stroke:#1e4655\n    style id4 fill:#c7cdac,color:#1e4655,stroke:#1e4655\n    style id5 fill:#c7cdac,color:#1e4655,stroke:#1e4655\n    style A fill:#ffa07a,color:#000000,stroke:#000000\n    style B fill:#FFFFFF,color:#000000,stroke:#000000\n    style C fill:#FFFFFF,color:#000000,stroke:#000000\n    style D fill:#FFFFFF,color:#000000,stroke:#000000"
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#how-does-readr-parse-different-data-types-2",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#how-does-readr-parse-different-data-types-2",
    "title": "Roadmap",
    "section": "How does readr parse different data types?",
    "text": "How does readr parse different data types?\nFor each column in a data frame, readr functions pull the first 1000 rows and checks:\n\n\n\n\nflowchart LR\n    id1((Variable))==&gt;A([\"1. Does it contain only F, T, FALSE, TRUE, or NA (ignoring case)?\"])==&gt;id2{{Logical}}\n    id1((Variable))==&gt;B([\"2. Does it contain only numbers (e.g., 1, -4.5, 5e6, Inf?)\"])==&gt;id3{{Number}}\n    id1((Variable))==&gt;C([\"3. Does it match the ISO8601 standard?\"])==&gt;id4{{Date/Date-time}}\n    id1((Variable))==&gt;D([\"4. None of the above\"])==&gt;id5{{String}}\n    style id1 fill:#1e4655,color:#c7cdac,stroke:#c7cdac\n    style id2 fill:#c7cdac,color:#1e4655,stroke:#1e4655\n    style id3 fill:#1e4655,color:#c7cdac,stroke:#c7cdac\n    style id4 fill:#c7cdac,color:#1e4655,stroke:#1e4655\n    style id5 fill:#c7cdac,color:#1e4655,stroke:#1e4655\n    style A fill:#FFFFFF,color:#000000,stroke:#000000\n    style B fill:#ffa07a,color:#000000,stroke:#000000\n    style C fill:#FFFFFF,color:#000000,stroke:#000000\n    style D fill:#FFFFFF,color:#000000,stroke:#000000"
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#how-does-readr-parse-different-data-types-3",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#how-does-readr-parse-different-data-types-3",
    "title": "Roadmap",
    "section": "How does readr parse different data types?",
    "text": "How does readr parse different data types?\nFor each column in a data frame, readr functions pull the first 1000 rows and checks:\n\n\n\n\nflowchart LR\n    id1((Variable))==&gt;A([\"1. Does it contain only F, T, FALSE, TRUE, or NA (ignoring case)?\"])==&gt;id2{{Logical}}\n    id1((Variable))==&gt;B([\"2. Does it contain only numbers (e.g., 1, -4.5, 5e6, Inf?)\"])==&gt;id3{{Number}}\n    id1((Variable))==&gt;C([\"3. Does it match the ISO8601 standard?\"])==&gt;id4{{Date/Date-time}}\n    id1((Variable))==&gt;D([\"4. None of the above\"])==&gt;id5{{String}}\n    style id1 fill:#1e4655,color:#c7cdac,stroke:#c7cdac\n    style id2 fill:#c7cdac,color:#1e4655,stroke:#1e4655\n    style id3 fill:#c7cdac,color:#1e4655,stroke:#1e4655\n    style id4 fill:#1e4655,color:#c7cdac,stroke:#c7cdac\n    style id5 fill:#c7cdac,color:#1e4655,stroke:#1e4655\n    style A fill:#FFFFFF,color:#000000,stroke:#000000\n    style B fill:#FFFFFF,color:#000000,stroke:#000000\n    style C fill:#ffa07a,color:#000000,stroke:#000000\n    style D fill:#FFFFFF,color:#000000,stroke:#000000"
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#how-does-readr-parse-different-data-types-4",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#how-does-readr-parse-different-data-types-4",
    "title": "Roadmap",
    "section": "How does readr parse different data types?",
    "text": "How does readr parse different data types?\nFor each column in a data frame, readr functions pull the first 1000 rows and checks:\n\n\n\n\nflowchart LR\n    id1((Variable))==&gt;A([\"1. Does it contain only F, T, FALSE, TRUE, or NA (ignoring case)?\"])==&gt;id2{{Logical}}\n    id1((Variable))==&gt;B([\"2. Does it contain only numbers (e.g., 1, -4.5, 5e6, Inf?)\"])==&gt;id3{{Number}}\n    id1((Variable))==&gt;C([\"3. Does it match the ISO8601 standard?\"])==&gt;id4{{Date/Date-time}}\n    id1((Variable))==&gt;D([\"4. None of the above\"])==&gt;id5{{String}}\n    style id1 fill:#1e4655,color:#c7cdac,stroke:#c7cdac\n    style id2 fill:#c7cdac,color:#1e4655,stroke:#1e4655\n    style id3 fill:#c7cdac,color:#1e4655,stroke:#1e4655\n    style id4 fill:#c7cdac,color:#1e4655,stroke:#1e4655\n    style id5 fill:#1e4655,color:#c7cdac,stroke:#c7cdac\n    style A fill:#FFFFFF,color:#000000,stroke:#000000\n    style B fill:#FFFFFF,color:#000000,stroke:#000000\n    style C fill:#FFFFFF,color:#000000,stroke:#000000\n    style D fill:#ffa07a,color:#000000,stroke:#000000"
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#how-does-readr-parse-different-data-types-5",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#how-does-readr-parse-different-data-types-5",
    "title": "",
    "section": "How does readr parse different data types?",
    "text": "How does readr parse different data types?\nFor each column in a data frame, readr functions pull the first 1000 rows and checks:\n\n\n\n\nflowchart LR\n    id1(Variable)==&gt;A[\"1. Does it contain only F, T, FALSE, or TRUE, (ignoring case)?\"]==&gt;id2(Logical)\n    id1(Variable)==&gt;B[\"2. Does it contain only numbers (e.g., 1, -4.5, 5e6, Inf?)\"]==&gt;id3(Number)\n    id1(Variable)==&gt;C[\"3. Does it match the ISO8601 standard?\"]==&gt;id4(Date/Date-time)\n    id1(Variable)==&gt;D[\"4. None of the above\"]==&gt;id5(String)\n    style id1 fill:#1e4655,color:#c7cdac,stroke:#c7cdac\n    style id2 fill:#c7cdac,color:#1e4655,stroke:#1e4655\n    style id3 fill:#c7cdac,color:#1e4655,stroke:#1e4655\n    style id4 fill:#c7cdac,color:#1e4655,stroke:#1e4655\n    style id5 fill:#c7cdac,color:#1e4655,stroke:#1e4655\n    style A fill:#FFFFFF,color:#000000,stroke:#000000\n    style B fill:#FFFFFF,color:#000000,stroke:#000000\n    style C fill:#FFFFFF,color:#000000,stroke:#000000\n    style D fill:#ffa07a,color:#000000,stroke:#000000"
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#importing-other-data-types-using-related-packages",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#importing-other-data-types-using-related-packages",
    "title": "",
    "section": "Importing Other Data Types Using Related Packages",
    "text": "Importing Other Data Types Using Related Packages\n\n\nNote: You won’t keep text formatting, color, comments, or merged cells!!"
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#section",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#section",
    "title": "",
    "section": "",
    "text": "For each column in a data frame, readr functions pull the first 1000 rows and checks:\n\n\n\n\nflowchart LR\n    id1(Variable)==&gt;A[\"1. Does it contain only F, T, FALSE, or TRUE, (ignoring case)?\"]==&gt;id2(Logical)\n    id1(Variable)==&gt;B[\"2. Does it contain only numbers (e.g., 1, -4.5, 5e6, Inf?)\"]==&gt;id3(Number)\n    id1(Variable)==&gt;C[\"3. Does it match the ISO8601 standard?\"]==&gt;id4(Date/Date-time)\n    id1(Variable)==&gt;D[\"4. None of the above\"]==&gt;id5(String)\n    style id1 fill:#1e4655,color:#c7cdac,stroke:#c7cdac\n    style id2 fill:#c7cdac,color:#1e4655,stroke:#1e4655\n    style id3 fill:#c7cdac,color:#1e4655,stroke:#1e4655\n    style id4 fill:#c7cdac,color:#1e4655,stroke:#1e4655\n    style id5 fill:#c7cdac,color:#1e4655,stroke:#1e4655\n    style A fill:#FFFFFF,color:#000000,stroke:#000000\n    style B fill:#FFFFFF,color:#000000,stroke:#000000\n    style C fill:#FFFFFF,color:#000000,stroke:#000000\n    style D fill:#FFFFFF,color:#000000,stroke:#000000"
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#how-does-readr-parse-different-data-typesnotitle",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#how-does-readr-parse-different-data-typesnotitle",
    "title": "",
    "section": "How does readr parse different data types?{[%notitle]}",
    "text": "How does readr parse different data types?{[%notitle]}\nFor each column in a data frame, readr functions pull the first 1000 rows and checks:\n\n\n\n\nflowchart LR\n    id1(Variable)==&gt;A[\"1. Does it contain only F, T, FALSE, or TRUE, (ignoring case)?\"]==&gt;id2(Logical)\n    id1(Variable)==&gt;B[\"2. Does it contain only numbers (e.g., 1, -4.5, 5e6, Inf?)\"]==&gt;id3(Number)\n    id1(Variable)==&gt;C[\"3. Does it match the ISO8601 standard?\"]==&gt;id4(Date/Date-time)\n    id1(Variable)==&gt;D[\"4. None of the above\"]==&gt;id5(String)\n    style id1 fill:#1e4655,color:#c7cdac,stroke:#c7cdac\n    style id2 fill:#c7cdac,color:#1e4655,stroke:#1e4655\n    style id3 fill:#c7cdac,color:#1e4655,stroke:#1e4655\n    style id4 fill:#c7cdac,color:#1e4655,stroke:#1e4655\n    style id5 fill:#c7cdac,color:#1e4655,stroke:#1e4655\n    style A fill:#FFFFFF,color:#000000,stroke:#000000\n    style B fill:#FFFFFF,color:#000000,stroke:#000000\n    style C fill:#FFFFFF,color:#000000,stroke:#000000\n    style D fill:#FFFFFF,color:#000000,stroke:#000000"
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#other-data-types",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#other-data-types",
    "title": "",
    "section": "Other Data Types",
    "text": "Other Data Types\n\n\nThe other functions in readr employ as similar approach to read_csv so the trick is just knowing which to use for what data type.\n\n\n\nread_csv2 is separated by semicolons (instead of commas)\n\nread_tsv is separated by tabs\n\nread_delim guesses the delimiter\n\nread_fwf reads in fixed-width-files\n\nread_table is a variation of fwf where columns separated by white space\n\nread_log reads in Apache-style log files\n\n\n\n\nHowever there are a range of other ways, besides delimited files, that data are stored.\n\n\nThe following packages are part of the extended tidyverse and therefore operate with similar syntax and logic as readr.\n\n\nFor Excel files (.xls or .xlsx), use package readxl1\n\nFor Google Docs Spreadsheets, use package googlesheets42\n\nFor Stata, SPSS, and SAS files, use package haven\n\n\n\n\n\n\nFunctions have additional arguments to read in specific sheets or a range of cells.Very similar to readxl with some slight variations you can read about here."
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#other-data-file-types-with-readr",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#other-data-file-types-with-readr",
    "title": "Roadmap",
    "section": "Other Data File Types with readr",
    "text": "Other Data File Types with readr\nThe other functions in readr employ as similar approach to read_csv so the trick is just knowing which to use for what data type.\n\n\nread_csv2 is separated by semicolons (instead of commas)\nread_tsv is separated by tabs\nread_delim guesses the delimiter\nread_fwf reads in fixed-width-files\nread_table is a variation of fwf where columns are separated by white space\nread_log reads in Apache-style log files"
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#other-packages-to-read-in-data",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#other-packages-to-read-in-data",
    "title": "Roadmap",
    "section": "Other Packages to Read in Data",
    "text": "Other Packages to Read in Data\nThere are a range of other ways, besides delimited files, that data are stored.\nThe following packages are part of the extended tidyverse and therefore operate with similar syntax and logic as readr."
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#other-packages-to-read-in-data-1",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#other-packages-to-read-in-data-1",
    "title": "Roadmap",
    "section": "Other Packages to Read in Data",
    "text": "Other Packages to Read in Data\nThere are a range of other ways, besides delimited files, that data are stored.\nThe following packages are part of the extended tidyverse and therefore operate with similar syntax and logic as readr.\n\n\n\n\n\nFor Excel files (.xls or .xlsx), use package readxl3\n\n\n\n\n\nNote: For Excel files and Googlesheets You won’t keep text formatting, color, comments, or merged cells. See the openxlsx package for those capabilities. Also, tidyxl can help import non-tabular data from Excel."
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#other-packages-to-read-in-data-2",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#other-packages-to-read-in-data-2",
    "title": "Roadmap",
    "section": "Other Packages to Read in Data",
    "text": "Other Packages to Read in Data\nThere are a range of other ways, besides delimited files, that data are stored.\nThe following packages are part of the extended tidyverse and therefore operate with similar syntax and logic as readr.\n\n\n\n\n\nFor Excel files (.xls or .xlsx), use package readxl4\nFor Google Docs Spreadsheets, use package googlesheets45\n\n\n\n\n\nNote: For Excel files and Googlesheets You won’t keep text formatting, color, comments, or merged cells. See the openxlsx package for those capabilities. Also, tidyxl can help import non-tabular data from Excel."
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#other-packages-to-read-in-data-3",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#other-packages-to-read-in-data-3",
    "title": "Roadmap",
    "section": "Other Packages to Read in Data",
    "text": "Other Packages to Read in Data\nThere are a range of other ways, besides delimited files, that data are stored.\nThe following packages are part of the extended tidyverse and therefore operate with similar syntax and logic as readr.\n\n\n\n\n\nFor Excel files (.xls or .xlsx), use package readxl6\nFor Google Docs Spreadsheets, use package googlesheets47\nFor Stata, SPSS, and SAS files, use package haven8\n\n\n\n\n\nNote: For Excel files and Googlesheets You won’t keep text formatting, color, comments, or merged cells. See the openxlsx package for those capabilities. Also, tidyxl can help import non-tabular data from Excel."
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#most-common-issue-with-reading-in-data",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#most-common-issue-with-reading-in-data",
    "title": "Roadmap",
    "section": "Most Common Issue with Reading in Data",
    "text": "Most Common Issue with Reading in Data\nThe most common problem that occurs when reading in data is having mixed data. Most often, given the heuristic provided in the last slide, will parse a variable as a character string to preserve whatever it contains.\n. . .\nLet’s actually look at how the billboard data was read in:\n\nglimpse(billboard_2000_raw) \n\nRows: 317\nColumns: 81\n$ year         &lt;dbl&gt; 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 200…\n$ artist       &lt;chr&gt; \"2 Pac\", \"2Ge+her\", \"3 Doors Down\", \"3 Doors Down\", \"504 …\n$ track        &lt;chr&gt; \"Baby Don't Cry (Keep...\", \"The Hardest Part Of ...\", \"Kr…\n$ time         &lt;time&gt; 04:22:00, 03:15:00, 03:53:00, 04:24:00, 03:35:00, 03:24:…\n$ date.entered &lt;date&gt; 2000-02-26, 2000-09-02, 2000-04-08, 2000-10-21, 2000-04-…\n$ wk1          &lt;dbl&gt; 87, 91, 81, 76, 57, 51, 97, 84, 59, 76, 84, 57, 50, 71, 7…\n$ wk2          &lt;dbl&gt; 82, 87, 70, 76, 34, 39, 97, 62, 53, 76, 84, 47, 39, 51, 6…\n$ wk3          &lt;dbl&gt; 72, 92, 68, 72, 25, 34, 96, 51, 38, 74, 75, 45, 30, 28, 5…\n$ wk4          &lt;dbl&gt; 77, NA, 67, 69, 17, 26, 95, 41, 28, 69, 73, 29, 28, 18, 4…\n$ wk5          &lt;dbl&gt; 87, NA, 66, 67, 17, 26, 100, 38, 21, 68, 73, 23, 21, 13, …\n$ wk6          &lt;dbl&gt; 94, NA, 57, 65, 31, 19, NA, 35, 18, 67, 69, 18, 19, 13, 3…\n$ wk7          &lt;dbl&gt; 99, NA, 54, 55, 36, 2, NA, 35, 16, 61, 68, 11, 20, 11, 34…\n$ wk8          &lt;dbl&gt; NA, NA, 53, 59, 49, 2, NA, 38, 14, 58, 65, 9, 17, 1, 29, …\n$ wk9          &lt;dbl&gt; NA, NA, 51, 62, 53, 3, NA, 38, 12, 57, 73, 9, 17, 1, 27, …\n$ wk10         &lt;dbl&gt; NA, NA, 51, 61, 57, 6, NA, 36, 10, 59, 83, 11, 17, 2, 30,…\n$ wk11         &lt;dbl&gt; NA, NA, 51, 61, 64, 7, NA, 37, 9, 66, 92, 1, 17, 2, 36, N…\n$ wk12         &lt;dbl&gt; NA, NA, 51, 59, 70, 22, NA, 37, 8, 68, NA, 1, 3, 3, 37, N…\n$ wk13         &lt;dbl&gt; NA, NA, 47, 61, 75, 29, NA, 38, 6, 61, NA, 1, 3, 3, 39, N…\n$ wk14         &lt;dbl&gt; NA, NA, 44, 66, 76, 36, NA, 49, 1, 67, NA, 1, 7, 4, 49, N…\n$ wk15         &lt;dbl&gt; NA, NA, 38, 72, 78, 47, NA, 61, 2, 59, NA, 4, 10, 12, 57,…\n$ wk16         &lt;dbl&gt; NA, NA, 28, 76, 85, 67, NA, 63, 2, 63, NA, 8, 17, 11, 63,…\n$ wk17         &lt;dbl&gt; NA, NA, 22, 75, 92, 66, NA, 62, 2, 67, NA, 12, 25, 13, 65…\n$ wk18         &lt;dbl&gt; NA, NA, 18, 67, 96, 84, NA, 67, 2, 71, NA, 22, 29, 15, 68…\n$ wk19         &lt;dbl&gt; NA, NA, 18, 73, NA, 93, NA, 83, 3, 79, NA, 23, 29, 18, 79…\n$ wk20         &lt;dbl&gt; NA, NA, 14, 70, NA, 94, NA, 86, 4, 89, NA, 43, 40, 20, 86…\n$ wk21         &lt;dbl&gt; NA, NA, 12, NA, NA, NA, NA, NA, 5, NA, NA, 44, 43, 30, NA…\n$ wk22         &lt;dbl&gt; NA, NA, 7, NA, NA, NA, NA, NA, 5, NA, NA, NA, 50, 40, NA,…\n$ wk23         &lt;dbl&gt; NA, NA, 6, NA, NA, NA, NA, NA, 6, NA, NA, NA, NA, 39, NA,…\n$ wk24         &lt;dbl&gt; NA, NA, 6, NA, NA, NA, NA, NA, 9, NA, NA, NA, NA, 44, NA,…\n$ wk25         &lt;dbl&gt; NA, NA, 6, NA, NA, NA, NA, NA, 13, NA, NA, NA, NA, NA, NA…\n$ wk26         &lt;dbl&gt; NA, NA, 5, NA, NA, NA, NA, NA, 14, NA, NA, NA, NA, NA, NA…\n$ wk27         &lt;dbl&gt; NA, NA, 5, NA, NA, NA, NA, NA, 16, NA, NA, NA, NA, NA, NA…\n$ wk28         &lt;dbl&gt; NA, NA, 4, NA, NA, NA, NA, NA, 23, NA, NA, NA, NA, NA, NA…\n$ wk29         &lt;dbl&gt; NA, NA, 4, NA, NA, NA, NA, NA, 22, NA, NA, NA, NA, NA, NA…\n$ wk30         &lt;dbl&gt; NA, NA, 4, NA, NA, NA, NA, NA, 33, NA, NA, NA, NA, NA, NA…\n$ wk31         &lt;dbl&gt; NA, NA, 4, NA, NA, NA, NA, NA, 36, NA, NA, NA, NA, NA, NA…\n$ wk32         &lt;dbl&gt; NA, NA, 3, NA, NA, NA, NA, NA, 43, NA, NA, NA, NA, NA, NA…\n$ wk33         &lt;dbl&gt; NA, NA, 3, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ wk34         &lt;dbl&gt; NA, NA, 3, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ wk35         &lt;dbl&gt; NA, NA, 4, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ wk36         &lt;dbl&gt; NA, NA, 5, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ wk37         &lt;dbl&gt; NA, NA, 5, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ wk38         &lt;dbl&gt; NA, NA, 9, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ wk39         &lt;dbl&gt; NA, NA, 9, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ wk40         &lt;dbl&gt; NA, NA, 15, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ wk41         &lt;dbl&gt; NA, NA, 14, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ wk42         &lt;dbl&gt; NA, NA, 13, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ wk43         &lt;dbl&gt; NA, NA, 14, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ wk44         &lt;dbl&gt; NA, NA, 16, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ wk45         &lt;dbl&gt; NA, NA, 17, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ wk46         &lt;dbl&gt; NA, NA, 21, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ wk47         &lt;dbl&gt; NA, NA, 22, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ wk48         &lt;dbl&gt; NA, NA, 24, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ wk49         &lt;dbl&gt; NA, NA, 28, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ wk50         &lt;dbl&gt; NA, NA, 33, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ wk51         &lt;dbl&gt; NA, NA, 42, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ wk52         &lt;dbl&gt; NA, NA, 42, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ wk53         &lt;dbl&gt; NA, NA, 49, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ wk54         &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ wk55         &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ wk56         &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ wk57         &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ wk58         &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ wk59         &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ wk60         &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ wk61         &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ wk62         &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ wk63         &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ wk64         &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ wk65         &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ wk66         &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ wk67         &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ wk68         &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ wk69         &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ wk70         &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ wk71         &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ wk72         &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ wk73         &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ wk74         &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ wk75         &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ wk76         &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…"
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#what-went-wrong",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#what-went-wrong",
    "title": "Roadmap",
    "section": "What Went Wrong?",
    "text": "What Went Wrong?\nSince readr uses the values in the first 1000 rows to guess the type of the column (logical, numeric, date/date-time, character), if the first 1000 rows don’t have any data, they will be coded as logical variables.\n. . .\nThere are not many songs in the data that charted for 60+ weeks—and none in the first 1000 that charted for 66+ weeks!\n. . .\n\n\n\n\n\n\n  NA is logical9?\n\n\n\n\nclass(c(T, F, NA, FALSE, TRUE))\n1class(c(1, NA, 17.5, 5.3, NA))\n2class(as.Date(c(NA, \"2023-10-31\", \"1986-06-21\", \"1997-01-15\"), tz = \"America/Los_Angeles\"))\nclass(c(\"apple\", NA, \"mango\", \"blackberry\", \"plum\")) \nclass(c(NA, NA, NA, NA, NA))\n\n\n1\n\nclass returns the data type of its first argument.\n\n2\n\nas.Date turns a character string of dates into an official date class in Base R. If we had an accompanying time stamp we would need to use as.POSIXct which turns a character string of dates and times into an official date-time class in Base R.\n\n\n\n\n[1] \"logical\"\n[1] \"numeric\"\n[1] \"Date\"\n[1] \"character\"\n[1] \"logical\"\n\n\n\n\n\n\nTechnically, NAs can be any data type depending upon what they are grouped with. However, by themselves they are a logical indicator of missing data, so their class is logical."
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#column-types",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#column-types",
    "title": "Roadmap",
    "section": "Column types",
    "text": "Column types\nSince the wk* variables should all be read in as integers, we can specify this explicitly with the col_types argument.\n. . .\n\n# Create character string of shortcode column types\n1bb_types &lt;- paste(c(\"icctD\", rep(\"i\", 76)), collapse=\"\")\nbb_types \n\n\n1\n\nYou can short-code column types with i = integer, c = character, t = time, D = date.  The collapse argument collapses the first two arguments into one complete character string.\n\n\n\n\n[1] \"icctDiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii\"\n\n\n. . .\n\n\n# re-read in data with column types specified\nbillboard_2000_raw &lt;- read_csv(file = \"data/billboard.csv\", \n2                               col_types = bb_types)\n\n\n2\n\nThis string now specifies the data type for each column of our data frame. Visit this reference page to see all available column types and their short codes."
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#writing-other-files-types",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#writing-other-files-types",
    "title": "",
    "section": "Writing Other Files-Types",
    "text": "Writing Other Files-Types"
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#writing-other-file-types",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#writing-other-file-types",
    "title": "Roadmap",
    "section": "Writing Other File-Types",
    "text": "Writing Other File-Types\n\nwritexlgooglesheets4haven\n\n\n\n\n\nwrite_xlsx() writes to an xlsx file\n\n\n\n\n\n\n\n\n\n\nsheet_write() or write_sheet() (over)writes new data into a Sheet\ngs4_create() creates a new Sheet\nsheet_append() appends rows to a sheet\nrange_write() (over)writes new data into a range\nrange_flood() floods a range of cells\n`range_clear() clears a range of cells\n\n\n\n\n\n\n\n\n\n\nwrite_dta() writes Stata DTA files\nwrite_sav() writes SPSS files\nwrite_xpt() writes SAS transport files"
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#column-types-1",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#column-types-1",
    "title": "Roadmap",
    "section": "Column types",
    "text": "Column types\nTo specify a default column type you can use .default like so:\n\nbillboard_2000_raw &lt;- read_csv(file = \"data/billboard.csv\", \n                               col_types = cols(.default = col_character())) \n\n. . .\n\nAnother useful helper is cols_only() for when you only want to read in a subset of all available variables.\n\nbillboard_2000_raw &lt;- read_csv(file = \"data/billboard.csv\", \n                               col_types = cols_only(x = col_character)) \n\n. . .\n\nIn summary, the col-types argument gives you greater control over how your data are read in and can save you recoding time down the road and/or point out where your data are behaving differently than you expect."
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#reading-in-multiple-files",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#reading-in-multiple-files",
    "title": "Roadmap",
    "section": "Reading in Multiple Files",
    "text": "Reading in Multiple Files\nIf you data are split across multiple files you can read them in all at once by specifying the id argument.\n\n# Create list of files manually\nsales_files &lt;- c(\"data/01-sales.csv\", \"data/02-sales.csv\", \"data/03-sales.csv\")\nread_csv(sales_files, id = \"file\")\n\n# A tibble: 19 × 6\n   file              month     year brand  item     n\n   &lt;chr&gt;             &lt;chr&gt;    &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1 data/01-sales.csv January   2019     1  1234     3\n 2 data/01-sales.csv January   2019     1  8721     9\n 3 data/01-sales.csv January   2019     1  1822     2\n 4 data/01-sales.csv January   2019     2  3333     1\n 5 data/01-sales.csv January   2019     2  2156     9\n 6 data/01-sales.csv January   2019     2  3987     6\n 7 data/01-sales.csv January   2019     2  3827     6\n 8 data/02-sales.csv February  2019     1  1234     8\n 9 data/02-sales.csv February  2019     1  8721     2\n10 data/02-sales.csv February  2019     1  1822     3\n11 data/02-sales.csv February  2019     2  3333     1\n12 data/02-sales.csv February  2019     2  2156     3\n13 data/02-sales.csv February  2019     2  3987     6\n14 data/03-sales.csv March     2019     1  1234     3\n15 data/03-sales.csv March     2019     1  3627     1\n16 data/03-sales.csv March     2019     1  8820     3\n17 data/03-sales.csv March     2019     2  7253     1\n18 data/03-sales.csv March     2019     2  8766     3\n19 data/03-sales.csv March     2019     2  8288     6"
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#reading-in-multiple-files-1",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#reading-in-multiple-files-1",
    "title": "Roadmap",
    "section": "Reading in Multiple Files",
    "text": "Reading in Multiple Files\nIf you have too many files to reasonable type out all their names you can also use the base r function list.files to list the files for you.\n\n# Create list of files with pattern-matching\n1sales_files &lt;- list.files(\"data\", pattern = \"sales\\\\.csv$\", full.names = TRUE)\nsales_files\n\n\n1\n\nWe will discuss pattern-matching more in a couple of weeks; if all your data was in one folder without anything else in it, you wouldn’t need to specify this argument. Sometimes, however, you may be searching through larger directories that you did not organize and that’s when pattern-matching is really powerful.\n\n\n\n\n[1] \"data/01-sales.csv\" \"data/02-sales.csv\" \"data/03-sales.csv\""
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#data-entry",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#data-entry",
    "title": "Roadmap",
    "section": "Data Entry",
    "text": "Data Entry\nSometimes you’ll need to create a data set in your code. You can do this two ways:\n\ntibble()tribble()\n\n\nTibbles lay out the data by columns (i.e. a dataframe transposed).\n\n# Creating data with tibble\ntibble( \n  x = c(1, 2, 5), \n  y = c(\"h\", \"m\", \"g\"),\n  z = c(0.08, 0.83, 0.60)\n)\n\n# A tibble: 3 × 3\n      x y         z\n  &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt;\n1     1 h      0.08\n2     2 m      0.83\n3     5 g      0.6 \n\n\n\n\nTibbles (transposed tibble) lay out the data by rows (i.e. the way a dataframe looks) which is much more intuitive.\n\n# Creating data with tribble\ntribble( \n  ~x, ~y, ~z,\n  1, \"h\", 0.08,\n  2, \"m\", 0.83,\n  5, \"g\", 0.60\n)\n\n# A tibble: 3 × 3\n      x y         z\n  &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt;\n1     1 h      0.08\n2     2 m      0.83\n3     5 g      0.6"
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#what-is-tidy-data",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#what-is-tidy-data",
    "title": "Roadmap",
    "section": "What is Tidy Data",
    "text": "What is Tidy Data\nTidy data12 (aka “long data”) are such that:\n\n\n\n\n\n\n\nThe values for a single observation are in their own row.\nThe values for a single variable are in their own column.\nThere is only one value per cell."
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#why-do-we-want-tidy-data",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#why-do-we-want-tidy-data",
    "title": "Roadmap",
    "section": "Why do we Want Tidy Data?",
    "text": "Why do we Want Tidy Data?\n\n\nEasier to understand many rows than many columns13\nRequired for plotting in ggplot214\nRequired for many types of statistical procedures (e.g. hierarchical or mixed effects models)\nFewer issues with missing values and “imbalanced” repeated measures data\nHaving a consistent method for storing data means it’s easier to learn the tools to work with it since there’s an underlying uniformity.\n\n\n. . .\nMost real-world data is not tidy because data are often organized for goals other than analysis (i.e. data entry) and most people aren’t familiar with the principles of tidy data."
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#values_drop_na-true",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#values_drop_na-true",
    "title": "",
    "section": "values_drop_na = TRUE",
    "text": "values_drop_na = TRUE\n2 Pac’s song “Baby Don’t Cry” was only on the Billboard Hot 100 for 7 weeks so there are 93 additional rows of data filled with NAs. Since these NAs don’t really represent unknown observations (i.e. they were forced to exist by the structure of the dataset) we can ask pivot_longer() to get rid of them by setting values_drop_na = TRUE.\n\n\nbillboard_2000 &lt;- billboard_2000_raw |&gt; \n  pivot_longer(cols = starts_with(\"wk\"), \n               names_to =\"week\",\n               values_to = \"rank\", \n               values_drop_na = TRUE)\n\nbillboard_2000 |&gt; head(10)\n\n\n\n# A tibble: 10 × 7\n    year artist  track                   time   date.entered week   rank\n   &lt;int&gt; &lt;chr&gt;   &lt;chr&gt;                   &lt;time&gt; &lt;date&gt;       &lt;chr&gt; &lt;int&gt;\n 1  2000 2 Pac   Baby Don't Cry (Keep... 04:22  2000-02-26   wk1      87\n 2  2000 2 Pac   Baby Don't Cry (Keep... 04:22  2000-02-26   wk2      82\n 3  2000 2 Pac   Baby Don't Cry (Keep... 04:22  2000-02-26   wk3      72\n 4  2000 2 Pac   Baby Don't Cry (Keep... 04:22  2000-02-26   wk4      77\n 5  2000 2 Pac   Baby Don't Cry (Keep... 04:22  2000-02-26   wk5      87\n 6  2000 2 Pac   Baby Don't Cry (Keep... 04:22  2000-02-26   wk6      94\n 7  2000 2 Pac   Baby Don't Cry (Keep... 04:22  2000-02-26   wk7      99\n 8  2000 2Ge+her The Hardest Part Of ... 03:15  2000-09-02   wk1      91\n 9  2000 2Ge+her The Hardest Part Of ... 03:15  2000-09-02   wk2      87\n10  2000 2Ge+her The Hardest Part Of ... 03:15  2000-09-02   wk3      92"
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#usepivot_longer-arguments",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#usepivot_longer-arguments",
    "title": "",
    "section": "Usepivot_longer arguments",
    "text": "Usepivot_longer arguments\nAlternatively, there are a number of optional arguments for pivot_longer that are meant to help deal with naming issues.\n\n\nbillboard_2000 &lt;- billboard_2000_raw %&gt;%\n  pivot_longer(starts_with(\"wk\"), \n               names_to        = \"week\", \n               values_to       = \"rank\",\n               values_drop_na  = TRUE,\n1               names_prefix    = \"wk\",\n2               names_transform = list(week = as.integer))\n\nhead(billboard_2000, 5)\n\n\n1\n\nnames_prefix is used to remove “wk” from the values of week\n\n2\n\nnames_transform converts week into an integer number.\n\n\n\n\n# A tibble: 5 × 7\n   year artist track                   time   date.entered  week  rank\n  &lt;int&gt; &lt;chr&gt;  &lt;chr&gt;                   &lt;time&gt; &lt;date&gt;       &lt;int&gt; &lt;int&gt;\n1  2000 2 Pac  Baby Don't Cry (Keep... 04:22  2000-02-26       1    87\n2  2000 2 Pac  Baby Don't Cry (Keep... 04:22  2000-02-26       2    82\n3  2000 2 Pac  Baby Don't Cry (Keep... 04:22  2000-02-26       3    72\n4  2000 2 Pac  Baby Don't Cry (Keep... 04:22  2000-02-26       4    77\n5  2000 2 Pac  Baby Don't Cry (Keep... 04:22  2000-02-26       5    87"
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#pivot_wider",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#pivot_wider",
    "title": "Roadmap",
    "section": "pivot_wider",
    "text": "pivot_wider\npivot_wider() is the opposite of pivot_longer(), which you use if you have data for the same observation taking up multiple rows.\n. . .\nHere’s an example of data that we probably want to pivot wider (unless we want to plot each statistic in its own facet):\n\n\n# A tibble: 6 × 3\n  Group Statistic Value\n  &lt;chr&gt; &lt;chr&gt;     &lt;dbl&gt;\n1 A     Mean       1.28\n2 A     Median     1   \n3 A     SD         0.72\n4 B     Mean       2.81\n5 B     Median     2   \n6 B     SD         1.33\n\n\n. . .\nA common cue to use pivot_wider() is having measurements of different quantities in the same column."
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#pivot_longer-1",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#pivot_longer-1",
    "title": "Roadmap",
    "section": "pivot_longer()",
    "text": "pivot_longer()\nThis function usually takes three arguments:\n\ncols: The columns that need to be pivoted (are not variables)\nnames_to: Names the new variable that is stored in multiple columns\nvalues_to: Names the variable stored in the cell values"
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#pivot_longer-2",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#pivot_longer-2",
    "title": "Roadmap",
    "section": "pivot_longer()",
    "text": "pivot_longer()\nThis function usually takes three arguments:\n\ncols: The columns that need to be pivoted (are not variables)\nnames_to: Names the new variable that is stored in multiple columns\nvalues_to: Names the variable stored in the cell values"
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#pivot_longer-3",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#pivot_longer-3",
    "title": "Roadmap",
    "section": "pivot_longer()",
    "text": "pivot_longer()\nThis function usually takes three arguments:\n\ncols: The columns that need to be pivoted (are not variables)\nnames_to: Names the new variable that is stored in multiple columns\nvalues_to: Names the variable stored in the cell values"
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#use-pivot_longer-arguments",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#use-pivot_longer-arguments",
    "title": "Roadmap",
    "section": "Use pivot_longer arguments",
    "text": "Use pivot_longer arguments\nAlternatively (and more efficiently), there are a number of optional arguments for pivot_longer that are meant to help deal with naming issues.\n. . .\n\nbillboard_2000 &lt;- billboard_2000_raw %&gt;%\n  pivot_longer(starts_with(\"wk\"), \n               names_to        = \"week\", \n               values_to       = \"rank\",\n               values_drop_na  = TRUE,\n1               names_prefix    = \"wk\",\n2               names_transform = list(week = as.integer))\n\nhead(billboard_2000, 5)\n\n\n1\n\nnames_prefix is used to remove “wk” from the values of week\n\n2\n\nnames_transform converts week into an integer number.\n\n\n\n\n# A tibble: 5 × 7\n   year artist track                   time   date.entered  week  rank\n  &lt;int&gt; &lt;chr&gt;  &lt;chr&gt;                   &lt;time&gt; &lt;date&gt;       &lt;int&gt; &lt;int&gt;\n1  2000 2 Pac  Baby Don't Cry (Keep... 04:22  2000-02-26       1    87\n2  2000 2 Pac  Baby Don't Cry (Keep... 04:22  2000-02-26       2    82\n3  2000 2 Pac  Baby Don't Cry (Keep... 04:22  2000-02-26       3    72\n4  2000 2 Pac  Baby Don't Cry (Keep... 04:22  2000-02-26       4    77\n5  2000 2 Pac  Baby Don't Cry (Keep... 04:22  2000-02-26       5    87"
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#pivot_wider-example",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#pivot_wider-example",
    "title": "Roadmap",
    "section": "pivot_wider Example",
    "text": "pivot_wider Example\n\nwide_stats &lt;- long_stats |&gt; \n1  pivot_wider(id_cols = Group,\n2              names_from = Statistic,\n3              values_from = Value)\nwide_stats\n\n\n1\n\nid_cols is the column that uniquely identifies each row in the new dataset. Default is everything not in names_from and values_from.\n\n2\n\nnames_from provides the names that will be used for the new columns\n\n3\n\nvalues_from provides the values that will be used to populate the cells of the new columns.\n\n\n\n\n# A tibble: 2 × 4\n  Group  Mean Median    SD\n  &lt;chr&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt;\n1 A      1.28      1  0.72\n2 B      2.81      2  1.33\n\n\n. . .\npivot_wider() also has a number of optional names_* and values_* arguments for more complicated transformations.\n. . .\n\n\n\n\n\n\n Nested Data\n\n\n\nIf there are multiple rows in the input that correspond to one cell in the output you’ll get a list-column. This means that you 1) need to fix something in your code/data because it shouldn’t be nested in this way or 2) need to use unnest_wider() or unnest_longer() in order to access this column of data. More on this here."
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#more-complicated-pivot_longer",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#more-complicated-pivot_longer",
    "title": "",
    "section": "More Complicated pivot_longer\n",
    "text": "More Complicated pivot_longer\n\nA more challenging situation occurs when you have multiple pieces of information crammed into the column names, and you would like to store these in separate new variables.\n\nThis dataset contains tuberculosis diagnoses collected by the World Health Organization.\n\nnames(who2)\n\n\n\n [1] \"country\"    \"year\"       \"sp_m_014\"   \"sp_m_1524\"  \"sp_m_2534\" \n [6] \"sp_m_3544\"  \"sp_m_4554\"  \"sp_m_5564\"  \"sp_m_65\"    \"sp_f_014\"  \n[11] \"sp_f_1524\"  \"sp_f_2534\"  \"sp_f_3544\"  \"sp_f_4554\"  \"sp_f_5564\" \n[16] \"sp_f_65\"    \"sn_m_014\"   \"sn_m_1524\"  \"sn_m_2534\"  \"sn_m_3544\" \n[21] \"sn_m_4554\"  \"sn_m_5564\"  \"sn_m_65\"    \"sn_f_014\"   \"sn_f_1524\" \n[26] \"sn_f_2534\"  \"sn_f_3544\"  \"sn_f_4554\"  \"sn_f_5564\"  \"sn_f_65\"   \n[31] \"ep_m_014\"   \"ep_m_1524\"  \"ep_m_2534\"  \"ep_m_3544\"  \"ep_m_4554\" \n[36] \"ep_m_5564\"  \"ep_m_65\"    \"ep_f_014\"   \"ep_f_1524\"  \"ep_f_2534\" \n[41] \"ep_f_3544\"  \"ep_f_4554\"  \"ep_f_5564\"  \"ep_f_65\"    \"rel_m_014\" \n[46] \"rel_m_1524\" \"rel_m_2534\" \"rel_m_3544\" \"rel_m_4554\" \"rel_m_5564\"\n[51] \"rel_m_65\"   \"rel_f_014\"  \"rel_f_1524\" \"rel_f_2534\" \"rel_f_3544\"\n[56] \"rel_f_4554\" \"rel_f_5564\" \"rel_f_65\"  \n\n\n\n\nThe first two columns are self explanatory but what’s going on with the rest?"
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#more-complicated-pivot_longer-example",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#more-complicated-pivot_longer-example",
    "title": "",
    "section": "More Complicated pivot_longer Example",
    "text": "More Complicated pivot_longer Example\n\nwho2 |&gt; \n  pivot_longer(\n1    cols = !(country:year),\n    names_to = c(\"diagnosis\", \"gender\", \"age\"), \n2    names_sep = \"_\",\n    values_to = \"count\"\n  )\n\n\n1\n\nPutting an ! before a condition negates it. This says: NOT columns country:year.\n\n2\n\nYou can use names_pattern instead of names_sep to extract variables from more complicated naming scenarios once you’ve learned regular expressions in a few weeks.\n\n\n\n\n\n\n# A tibble: 405,440 × 6\n   country      year diagnosis gender age   count\n   &lt;chr&gt;       &lt;dbl&gt; &lt;chr&gt;     &lt;chr&gt;  &lt;chr&gt; &lt;dbl&gt;\n 1 Afghanistan  1980 sp        m      014      NA\n 2 Afghanistan  1980 sp        m      1524     NA\n 3 Afghanistan  1980 sp        m      2534     NA\n 4 Afghanistan  1980 sp        m      3544     NA\n 5 Afghanistan  1980 sp        m      4554     NA\n 6 Afghanistan  1980 sp        m      5564     NA\n 7 Afghanistan  1980 sp        m      65       NA\n 8 Afghanistan  1980 sp        f      014      NA\n 9 Afghanistan  1980 sp        f      1524     NA\n10 Afghanistan  1980 sp        f      2534     NA\n# ℹ 405,430 more rows"
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#more-complicated-pivot_longer-1",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#more-complicated-pivot_longer-1",
    "title": "",
    "section": "More Complicated pivot_longer\n",
    "text": "More Complicated pivot_longer\n\nData documentation and some minor investigation would lead you to figure out that the three elements in each of these column names are actually data!\n\nThe first piece, sp/sn/rel/ep, describes the method used for the diagnosis\nThe second piece, m/f is the gender (coded as a binary variable in this dataset)\nThe third piece, 014/1524/2534/3544/4554/5564/65 is the age range (014 represents 0-14, for example)\n\n\nTo organize the six pieces of information in this dataset into six separate columns, we use pivot_longer() with a vector of column names for names_to and instructors for splitting the original variable names into pieces for names_sep as well as a column name for values_to!"
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#variable-values-in-column-names",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#variable-values-in-column-names",
    "title": "Roadmap",
    "section": "Variable & Values in Column Names",
    "text": "Variable & Values in Column Names\nThis dataset contains data about five families, with the names and dates of birth of up to two children.\n\nhousehold\n\n# A tibble: 5 × 5\n  family dob_child1 dob_child2 name_child1 name_child2\n   &lt;int&gt; &lt;date&gt;     &lt;date&gt;     &lt;chr&gt;       &lt;chr&gt;      \n1      1 1998-11-26 2000-01-29 Susan       Jose       \n2      2 1996-06-22 NA         Mark        &lt;NA&gt;       \n3      3 2002-07-11 2004-04-05 Sam         Seth       \n4      4 2004-10-10 2009-08-27 Craig       Khai       \n5      5 2000-12-05 2005-02-28 Parker      Gracie     \n\n\n. . .\nThe new challenge in this dataset is that the column names contain the names of two variables (dob, name) and the values of another (child, with values 1 or 2)."
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#variable-values-in-column-names-example",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#variable-values-in-column-names-example",
    "title": "",
    "section": "Variable & Values in Column Names: Example",
    "text": "Variable & Values in Column Names: Example\n\n\nhousehold |&gt; \n  pivot_longer(\n    cols = !family, \n1    names_to = c(\".value\", \"child\"),\n    names_sep = \"_\", \n2    values_drop_na = TRUE\n  )\n\n\n\n\n1\n\n.value isn’t the name of a variable but a unique value that tells pivot_longer to use the first component of the pivoted column name as a variable name in the output.\n\n2\n\nUsing values_drop_na = TRUE again since not every family has 2 children.\n\n\n\n\n# A tibble: 9 × 4\n  family child  dob        name  \n   &lt;int&gt; &lt;chr&gt;  &lt;date&gt;     &lt;chr&gt; \n1      1 child1 1998-11-26 Susan \n2      1 child2 2000-01-29 Jose  \n3      2 child1 1996-06-22 Mark  \n4      3 child1 2002-07-11 Sam   \n5      3 child2 2004-04-05 Seth  \n6      4 child1 2004-10-10 Craig \n7      4 child2 2009-08-27 Khai  \n8      5 child1 2000-12-05 Parker\n9      5 child2 2005-02-28 Gracie"
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#multiple-variables-in-column-names",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#multiple-variables-in-column-names",
    "title": "Roadmap",
    "section": "Multiple Variables in Column Names",
    "text": "Multiple Variables in Column Names\nA more challenging situation occurs when you have multiple pieces of information crammed into the column names, and you would like to store these in separate new variables.\n. . .\nThis dataset contains tuberculosis diagnoses collected by the World Health Organization.\n\nwho2\n\n# A tibble: 7,240 × 58\n   country      year sp_m_014 sp_m_1524 sp_m_2534 sp_m_3544 sp_m_4554 sp_m_5564\n   &lt;chr&gt;       &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;\n 1 Afghanistan  1980       NA        NA        NA        NA        NA        NA\n 2 Afghanistan  1981       NA        NA        NA        NA        NA        NA\n 3 Afghanistan  1982       NA        NA        NA        NA        NA        NA\n 4 Afghanistan  1983       NA        NA        NA        NA        NA        NA\n 5 Afghanistan  1984       NA        NA        NA        NA        NA        NA\n 6 Afghanistan  1985       NA        NA        NA        NA        NA        NA\n 7 Afghanistan  1986       NA        NA        NA        NA        NA        NA\n 8 Afghanistan  1987       NA        NA        NA        NA        NA        NA\n 9 Afghanistan  1988       NA        NA        NA        NA        NA        NA\n10 Afghanistan  1989       NA        NA        NA        NA        NA        NA\n# ℹ 7,230 more rows\n# ℹ 50 more variables: sp_m_65 &lt;dbl&gt;, sp_f_014 &lt;dbl&gt;, sp_f_1524 &lt;dbl&gt;,\n#   sp_f_2534 &lt;dbl&gt;, sp_f_3544 &lt;dbl&gt;, sp_f_4554 &lt;dbl&gt;, sp_f_5564 &lt;dbl&gt;,\n#   sp_f_65 &lt;dbl&gt;, sn_m_014 &lt;dbl&gt;, sn_m_1524 &lt;dbl&gt;, sn_m_2534 &lt;dbl&gt;,\n#   sn_m_3544 &lt;dbl&gt;, sn_m_4554 &lt;dbl&gt;, sn_m_5564 &lt;dbl&gt;, sn_m_65 &lt;dbl&gt;,\n#   sn_f_014 &lt;dbl&gt;, sn_f_1524 &lt;dbl&gt;, sn_f_2534 &lt;dbl&gt;, sn_f_3544 &lt;dbl&gt;,\n#   sn_f_4554 &lt;dbl&gt;, sn_f_5564 &lt;dbl&gt;, sn_f_65 &lt;dbl&gt;, ep_m_014 &lt;dbl&gt;, …\n\n\n. . .\nThe first two columns are self explanatory but what’s going on with the rest?"
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#multiple-variables-in-column-names-1",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#multiple-variables-in-column-names-1",
    "title": "Roadmap",
    "section": "Multiple Variables in Column Names",
    "text": "Multiple Variables in Column Names\nData documentation and some minor investigation would lead you to figure out that the three elements in each of these column names are actually data!\n\nThe first piece, sp/sn/rel/ep, describes the method used for the diagnosis\nThe second piece, m/f is the gender (coded as a binary variable in this dataset)\nThe third piece, 014/1524/2534/3544/4554/5564/65 is the age range (014 represents 0-14, for example)\n\n. . .\nTo organize the six pieces of information in this dataset into six separate columns, we use pivot_longer() with a vector of column names for names_to and instructors for splitting the original variable names into pieces for names_sep as well as a column name for values_to!"
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#multiple-variables-in-column-names-example",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#multiple-variables-in-column-names-example",
    "title": "",
    "section": "Multiple Variables in Column Names: Example",
    "text": "Multiple Variables in Column Names: Example\n\nwho2 |&gt; \n  pivot_longer(\n1    cols = !(country:year),\n    names_to = c(\"diagnosis\", \"gender\", \"age\"), \n2    names_sep = \"_\",\n    values_to = \"count\"\n  )\n\n\n1\n\nPutting an ! before a condition negates it. This says: NOT columns country:year.\n\n2\n\nYou can use names_pattern instead of names_sep to extract variables from more complicated naming scenarios once you’ve learned regular expressions in a few weeks.\n\n\n\n\n\n\n# A tibble: 405,440 × 6\n   country      year diagnosis gender age   count\n   &lt;chr&gt;       &lt;dbl&gt; &lt;chr&gt;     &lt;chr&gt;  &lt;chr&gt; &lt;dbl&gt;\n 1 Afghanistan  1980 sp        m      014      NA\n 2 Afghanistan  1980 sp        m      1524     NA\n 3 Afghanistan  1980 sp        m      2534     NA\n 4 Afghanistan  1980 sp        m      3544     NA\n 5 Afghanistan  1980 sp        m      4554     NA\n 6 Afghanistan  1980 sp        m      5564     NA\n 7 Afghanistan  1980 sp        m      65       NA\n 8 Afghanistan  1980 sp        f      014      NA\n 9 Afghanistan  1980 sp        f      1524     NA\n10 Afghanistan  1980 sp        f      2534     NA\n# ℹ 405,430 more rows"
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#multiple-variables-in-column-names-2",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#multiple-variables-in-column-names-2",
    "title": "Roadmap",
    "section": "Multiple Variables in Column Names",
    "text": "Multiple Variables in Column Names\n\nwho2 |&gt; \n  pivot_longer(\n1    cols = !(country:year),\n    names_to = c(\"diagnosis\", \"gender\", \"age\"), \n2    names_sep = \"_\",\n    values_to = \"count\"\n  )\n\n\n1\n\nPutting an ! before a condition negates it. This says: NOT columns country:year.\n\n2\n\nYou can use names_pattern instead of names_sep to extract variables from more complicated naming scenarios once you’ve learned regular expressions in a few weeks.\n\n\n\n\n# A tibble: 405,440 × 6\n   country      year diagnosis gender age   count\n   &lt;chr&gt;       &lt;dbl&gt; &lt;chr&gt;     &lt;chr&gt;  &lt;chr&gt; &lt;dbl&gt;\n 1 Afghanistan  1980 sp        m      014      NA\n 2 Afghanistan  1980 sp        m      1524     NA\n 3 Afghanistan  1980 sp        m      2534     NA\n 4 Afghanistan  1980 sp        m      3544     NA\n 5 Afghanistan  1980 sp        m      4554     NA\n 6 Afghanistan  1980 sp        m      5564     NA\n 7 Afghanistan  1980 sp        m      65       NA\n 8 Afghanistan  1980 sp        f      014      NA\n 9 Afghanistan  1980 sp        f      1524     NA\n10 Afghanistan  1980 sp        f      2534     NA\n# ℹ 405,430 more rows"
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#variable-values-in-column-names-1",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#variable-values-in-column-names-1",
    "title": "Roadmap",
    "section": "Variable & Values in Column Names",
    "text": "Variable & Values in Column Names\n\nhousehold |&gt; \n  pivot_longer(\n    cols = !family, \n1    names_to = c(\".value\", \"child\"),\n    names_sep = \"_\", \n2    values_drop_na = TRUE\n  )\n\n\n1\n\n.value isn’t the name of a variable but a unique value that tells pivot_longer to use the first component of the pivoted column name as a variable name in the output.\n\n2\n\nUsing values_drop_na = TRUE again since not every family has 2 children.\n\n\n\n\n# A tibble: 9 × 4\n  family child  dob        name  \n   &lt;int&gt; &lt;chr&gt;  &lt;date&gt;     &lt;chr&gt; \n1      1 child1 1998-11-26 Susan \n2      1 child2 2000-01-29 Jose  \n3      2 child1 1996-06-22 Mark  \n4      3 child1 2002-07-11 Sam   \n5      3 child2 2004-04-05 Seth  \n6      4 child1 2004-10-10 Craig \n7      4 child2 2009-08-27 Khai  \n8      5 child1 2000-12-05 Parker\n9      5 child2 2005-02-28 Gracie\n\n\n. . ."
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#pivot_longer-example",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#pivot_longer-example",
    "title": "Roadmap",
    "section": "pivot_longer() Example",
    "text": "pivot_longer() Example\n\nbillboard_2000 &lt;- billboard_2000_raw |&gt; \n1  pivot_longer(cols = starts_with(\"wk\"),\n               names_to =\"week\",\n               values_to = \"rank\")\n\nbillboard_2000 |&gt; head(10)\n\n\n1\n\nstarts_with() is a helper function from tidyselect that helps select certain common patterns. We could have also used cols = wk1:wk76.\n\n\n\n\n# A tibble: 10 × 7\n    year artist track                   time   date.entered week   rank\n   &lt;int&gt; &lt;chr&gt;  &lt;chr&gt;                   &lt;time&gt; &lt;date&gt;       &lt;chr&gt; &lt;int&gt;\n 1  2000 2 Pac  Baby Don't Cry (Keep... 04:22  2000-02-26   wk1      87\n 2  2000 2 Pac  Baby Don't Cry (Keep... 04:22  2000-02-26   wk2      82\n 3  2000 2 Pac  Baby Don't Cry (Keep... 04:22  2000-02-26   wk3      72\n 4  2000 2 Pac  Baby Don't Cry (Keep... 04:22  2000-02-26   wk4      77\n 5  2000 2 Pac  Baby Don't Cry (Keep... 04:22  2000-02-26   wk5      87\n 6  2000 2 Pac  Baby Don't Cry (Keep... 04:22  2000-02-26   wk6      94\n 7  2000 2 Pac  Baby Don't Cry (Keep... 04:22  2000-02-26   wk7      99\n 8  2000 2 Pac  Baby Don't Cry (Keep... 04:22  2000-02-26   wk8      NA\n 9  2000 2 Pac  Baby Don't Cry (Keep... 04:22  2000-02-26   wk9      NA\n10  2000 2 Pac  Baby Don't Cry (Keep... 04:22  2000-02-26   wk10     NA\n\n\n. . .\nNow we have a single week column!"
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#joining-data",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#joining-data",
    "title": "Roadmap",
    "section": "Joining Data",
    "text": "Joining Data\nOftentimes our data will be spread across multiple datasets. To properly analyze these data we’ll need to join them together into one dataframe.\n. . .\nTo do this we’ll be using the various join functions from the dplyr package.\n. . .\nThere are two types of joins:\n\nMutating joins: add new variables to one data frame from matching observations in another.\nFiltering joins: filter observations from one data frame based on whether or not they match an observation in another.\n\n. . .\nTo demonstrate these we’ll be using data from the nycflights13 dataset which you’ll need to download and load into R\n\n# Download and load data\n1# install.packages(\"nycflights13\")\n2library(nycflights13)\n\n\n1\n\nRun in console.\n\n2\n\nLoad into R session."
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#joining-in-concept",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#joining-in-concept",
    "title": "Roadmap",
    "section": "Joining in Concept",
    "text": "Joining in Concept\nWe need to think about the following when we want to merge data frames A and B:\n\n\nWhich rows are we keeping from each data frame?\n\n\n\n\nWhich columns are we keeping from each data frame?\n\n\n\n\n\nWhich variables determine whether rows match?"
  },
  {
    "objectID": "Lectures/Lecture8/CSSS508_Lecture8.html#footnotes",
    "href": "Lectures/Lecture8/CSSS508_Lecture8.html#footnotes",
    "title": "Roadmap",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nHINT: Use the sort() function and square brackets [ ] for subsetting↩︎\nHint: Using the layers geom_vline(xintercept = ) and geom_hline(yintercept = )↩︎"
  },
  {
    "objectID": "Lectures/Lecture6/CSSS508_Lecture6.html#footnotes",
    "href": "Lectures/Lecture6/CSSS508_Lecture6.html#footnotes",
    "title": "Preamble: Data Structures and Types in R",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nMost R models will automatically convert character data to factors. The default reference is chosen alphabetically.↩︎\nLists and data frames can contain mixed data types, while vectors and matrices can only contain one data type.↩︎"
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture5.html#footnotes",
    "href": "Lectures/Lecture5/CSSS508_Lecture5.html#footnotes",
    "title": "Roadmap",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nOther types include right_join, inner_join, semi_join, and anti_join, but we won’t study those here.↩︎\nHint 1: Match on origin, year, month, day, and hour!!↩︎\nHint 2: Use mean(temp, na.rm=T) to have R calculate an average after ignoring missing data values↩︎"
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#footnotes",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#footnotes",
    "title": "Roadmap",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nQuarto builds on a decade of developments with R Markdown documents. .Rmd files operate very similarly to Quarto documents but there are minor differences that you can read more about here.↩︎\nWhile beyond the scope of this class, you can use the source() function to run a .R script file inside a .qmd or .R file. Using this you can break a large project up into multiple files but still run it all at once!↩︎\nYou can read the official manifesto here.↩︎\nCleaned and assembled by Jenny Bryan at UBC.↩︎\nThe full list can be found here.↩︎"
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#keys",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#keys",
    "title": "Roadmap",
    "section": "Keys",
    "text": "Keys\nKeys are the way that two datasets are connected to one another. The two types of keys are:\n. . .\n\n\nPrimary: a variable or set of variables that uniquely identifies each observation.\n\nWhen more than one variable makes up the primary key it’s called a compound key\n\nForeign: a variable (or set of variables) that corresponds to a primary key in another table."
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#keys-1",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#keys-1",
    "title": "",
    "section": "Keys",
    "text": "Keys\nLet’s look at our data to gain a better sense of what this all means.\nairlines\nairlines records two pieces of data about each airline: its carrier code and its full name. You can identify an airline with its two letter carrier code, making carrier the primary key.\n\nairlines \n\n# A tibble: 16 × 2\n   carrier name                       \n   &lt;chr&gt;   &lt;chr&gt;                      \n 1 9E      Endeavor Air Inc.          \n 2 AA      American Airlines Inc.     \n 3 AS      Alaska Airlines Inc.       \n 4 B6      JetBlue Airways            \n 5 DL      Delta Air Lines Inc.       \n 6 EV      ExpressJet Airlines Inc.   \n 7 F9      Frontier Airlines Inc.     \n 8 FL      AirTran Airways Corporation\n 9 HA      Hawaiian Airlines Inc.     \n10 MQ      Envoy Air                  \n11 OO      SkyWest Airlines Inc.      \n12 UA      United Air Lines Inc.      \n13 US      US Airways Inc.            \n14 VX      Virgin America             \n15 WN      Southwest Airlines Co.     \n16 YV      Mesa Airlines Inc.         \n\n\nairports\nairports records data about each airport. You can identify each airport by its three letter airport code, making faa the primary key.\n\nairports\n\n# A tibble: 1,458 × 8\n   faa   name                             lat    lon   alt    tz dst   tzone    \n   &lt;chr&gt; &lt;chr&gt;                          &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;    \n 1 04G   Lansdowne Airport               41.1  -80.6  1044    -5 A     America/…\n 2 06A   Moton Field Municipal Airport   32.5  -85.7   264    -6 A     America/…\n 3 06C   Schaumburg Regional             42.0  -88.1   801    -6 A     America/…\n 4 06N   Randall Airport                 41.4  -74.4   523    -5 A     America/…\n 5 09J   Jekyll Island Airport           31.1  -81.4    11    -5 A     America/…\n 6 0A9   Elizabethton Municipal Airport  36.4  -82.2  1593    -5 A     America/…\n 7 0G6   Williams County Airport         41.5  -84.5   730    -5 A     America/…\n 8 0G7   Finger Lakes Regional Airport   42.9  -76.8   492    -5 A     America/…\n 9 0P2   Shoestring Aviation Airfield    39.8  -76.6  1000    -5 U     America/…\n10 0S9   Jefferson County Intl           48.1 -123.    108    -8 A     America/…\n# ℹ 1,448 more rows\n\n\nplanes\nplanes records data about each plane. You can identify a plane by its tail number, making tailnum the primary key.\n\nplanes\n\n# A tibble: 3,322 × 9\n   tailnum  year type              manufacturer model engines seats speed engine\n   &lt;chr&gt;   &lt;int&gt; &lt;chr&gt;             &lt;chr&gt;        &lt;chr&gt;   &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; \n 1 N10156   2004 Fixed wing multi… EMBRAER      EMB-…       2    55    NA Turbo…\n 2 N102UW   1998 Fixed wing multi… AIRBUS INDU… A320…       2   182    NA Turbo…\n 3 N103US   1999 Fixed wing multi… AIRBUS INDU… A320…       2   182    NA Turbo…\n 4 N104UW   1999 Fixed wing multi… AIRBUS INDU… A320…       2   182    NA Turbo…\n 5 N10575   2002 Fixed wing multi… EMBRAER      EMB-…       2    55    NA Turbo…\n 6 N105UW   1999 Fixed wing multi… AIRBUS INDU… A320…       2   182    NA Turbo…\n 7 N107US   1999 Fixed wing multi… AIRBUS INDU… A320…       2   182    NA Turbo…\n 8 N108UW   1999 Fixed wing multi… AIRBUS INDU… A320…       2   182    NA Turbo…\n 9 N109UW   1999 Fixed wing multi… AIRBUS INDU… A320…       2   182    NA Turbo…\n10 N110UW   1999 Fixed wing multi… AIRBUS INDU… A320…       2   182    NA Turbo…\n# ℹ 3,312 more rows\n\n\nweather\nweather records data about the weather at the origin airports. You can identify each observation by the combination of location and time, making origin and time_hour the compound primary key.\n\nweather\n\n# A tibble: 26,115 × 15\n   origin  year month   day  hour  temp  dewp humid wind_dir wind_speed\n   &lt;chr&gt;  &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;    &lt;dbl&gt;      &lt;dbl&gt;\n 1 EWR     2013     1     1     1  39.0  26.1  59.4      270      10.4 \n 2 EWR     2013     1     1     2  39.0  27.0  61.6      250       8.06\n 3 EWR     2013     1     1     3  39.0  28.0  64.4      240      11.5 \n 4 EWR     2013     1     1     4  39.9  28.0  62.2      250      12.7 \n 5 EWR     2013     1     1     5  39.0  28.0  64.4      260      12.7 \n 6 EWR     2013     1     1     6  37.9  28.0  67.2      240      11.5 \n 7 EWR     2013     1     1     7  39.0  28.0  64.4      240      15.0 \n 8 EWR     2013     1     1     8  39.9  28.0  62.2      250      10.4 \n 9 EWR     2013     1     1     9  39.9  28.0  62.2      260      15.0 \n10 EWR     2013     1     1    10  41    28.0  59.6      260      13.8 \n# ℹ 26,105 more rows\n# ℹ 5 more variables: wind_gust &lt;dbl&gt;, precip &lt;dbl&gt;, pressure &lt;dbl&gt;,\n#   visib &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\n:::"
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#primary-keys",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#primary-keys",
    "title": "",
    "section": "Primary Keys",
    "text": "Primary Keys\nLet’s look at our data to gain a better sense of what this all means.\n\n\nairlines \nairports\nplanes\nweather\n\n\n\nairlines records two pieces of data about each airline: its carrier code and its full name. You can identify an airline with its two letter carrier code, making carrier the primary key.\n\nairlines \n\n# A tibble: 16 × 2\n   carrier name                       \n   &lt;chr&gt;   &lt;chr&gt;                      \n 1 9E      Endeavor Air Inc.          \n 2 AA      American Airlines Inc.     \n 3 AS      Alaska Airlines Inc.       \n 4 B6      JetBlue Airways            \n 5 DL      Delta Air Lines Inc.       \n 6 EV      ExpressJet Airlines Inc.   \n 7 F9      Frontier Airlines Inc.     \n 8 FL      AirTran Airways Corporation\n 9 HA      Hawaiian Airlines Inc.     \n10 MQ      Envoy Air                  \n11 OO      SkyWest Airlines Inc.      \n12 UA      United Air Lines Inc.      \n13 US      US Airways Inc.            \n14 VX      Virgin America             \n15 WN      Southwest Airlines Co.     \n16 YV      Mesa Airlines Inc.         \n\n\n\n\nairports records data about each airport. You can identify each airport by its three letter airport code, making faa the primary key.\n\nairports\n\n# A tibble: 1,458 × 8\n   faa   name                             lat    lon   alt    tz dst   tzone    \n   &lt;chr&gt; &lt;chr&gt;                          &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;    \n 1 04G   Lansdowne Airport               41.1  -80.6  1044    -5 A     America/…\n 2 06A   Moton Field Municipal Airport   32.5  -85.7   264    -6 A     America/…\n 3 06C   Schaumburg Regional             42.0  -88.1   801    -6 A     America/…\n 4 06N   Randall Airport                 41.4  -74.4   523    -5 A     America/…\n 5 09J   Jekyll Island Airport           31.1  -81.4    11    -5 A     America/…\n 6 0A9   Elizabethton Municipal Airport  36.4  -82.2  1593    -5 A     America/…\n 7 0G6   Williams County Airport         41.5  -84.5   730    -5 A     America/…\n 8 0G7   Finger Lakes Regional Airport   42.9  -76.8   492    -5 A     America/…\n 9 0P2   Shoestring Aviation Airfield    39.8  -76.6  1000    -5 U     America/…\n10 0S9   Jefferson County Intl           48.1 -123.    108    -8 A     America/…\n# ℹ 1,448 more rows\n\n\n\n\nplanes records data about each plane. You can identify a plane by its tail number, making tailnum the primary key.\n\nplanes\n\n# A tibble: 3,322 × 9\n   tailnum  year type              manufacturer model engines seats speed engine\n   &lt;chr&gt;   &lt;int&gt; &lt;chr&gt;             &lt;chr&gt;        &lt;chr&gt;   &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; \n 1 N10156   2004 Fixed wing multi… EMBRAER      EMB-…       2    55    NA Turbo…\n 2 N102UW   1998 Fixed wing multi… AIRBUS INDU… A320…       2   182    NA Turbo…\n 3 N103US   1999 Fixed wing multi… AIRBUS INDU… A320…       2   182    NA Turbo…\n 4 N104UW   1999 Fixed wing multi… AIRBUS INDU… A320…       2   182    NA Turbo…\n 5 N10575   2002 Fixed wing multi… EMBRAER      EMB-…       2    55    NA Turbo…\n 6 N105UW   1999 Fixed wing multi… AIRBUS INDU… A320…       2   182    NA Turbo…\n 7 N107US   1999 Fixed wing multi… AIRBUS INDU… A320…       2   182    NA Turbo…\n 8 N108UW   1999 Fixed wing multi… AIRBUS INDU… A320…       2   182    NA Turbo…\n 9 N109UW   1999 Fixed wing multi… AIRBUS INDU… A320…       2   182    NA Turbo…\n10 N110UW   1999 Fixed wing multi… AIRBUS INDU… A320…       2   182    NA Turbo…\n# ℹ 3,312 more rows\n\n\n\n\nweather records data about the weather at the origin airports. You can identify each observation by the combination of location and time, making origin and time_hour the compound primary key.\n\nweather\n\n# A tibble: 26,115 × 15\n   origin  year month   day  hour  temp  dewp humid wind_dir wind_speed\n   &lt;chr&gt;  &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;    &lt;dbl&gt;      &lt;dbl&gt;\n 1 EWR     2013     1     1     1  39.0  26.1  59.4      270      10.4 \n 2 EWR     2013     1     1     2  39.0  27.0  61.6      250       8.06\n 3 EWR     2013     1     1     3  39.0  28.0  64.4      240      11.5 \n 4 EWR     2013     1     1     4  39.9  28.0  62.2      250      12.7 \n 5 EWR     2013     1     1     5  39.0  28.0  64.4      260      12.7 \n 6 EWR     2013     1     1     6  37.9  28.0  67.2      240      11.5 \n 7 EWR     2013     1     1     7  39.0  28.0  64.4      240      15.0 \n 8 EWR     2013     1     1     8  39.9  28.0  62.2      250      10.4 \n 9 EWR     2013     1     1     9  39.9  28.0  62.2      260      15.0 \n10 EWR     2013     1     1    10  41    28.0  59.6      260      13.8 \n# ℹ 26,105 more rows\n# ℹ 5 more variables: wind_gust &lt;dbl&gt;, precip &lt;dbl&gt;, pressure &lt;dbl&gt;,\n#   visib &lt;dbl&gt;, time_hour &lt;dttm&gt;"
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#foreign-keys",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#foreign-keys",
    "title": "Roadmap",
    "section": "Foreign Keys",
    "text": "Foreign Keys\n\nflights\n\n# A tibble: 336,776 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     1     1      517            515         2      830            819\n 2  2013     1     1      533            529         4      850            830\n 3  2013     1     1      542            540         2      923            850\n 4  2013     1     1      544            545        -1     1004           1022\n 5  2013     1     1      554            600        -6      812            837\n 6  2013     1     1      554            558        -4      740            728\n 7  2013     1     1      555            600        -5      913            854\n 8  2013     1     1      557            600        -3      709            723\n 9  2013     1     1      557            600        -3      838            846\n10  2013     1     1      558            600        -2      753            745\n# ℹ 336,766 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\n\n. . .\nflights contains foreign keys that correspond to the primary keys of the other datasets."
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#primary-keys-fa-scroll",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#primary-keys-fa-scroll",
    "title": "Roadmap",
    "section": "Primary Keys ",
    "text": "Primary Keys \nLet’s look at our data to gain a better sense of what this all means.\n\nairlinesairportsplanesweather\n\n\n\nairlines records two pieces of data about each airline: its carrier code and its full name. You can identify an airline with its two letter carrier code, making carrier the primary key.\n\n\nairlines \n\n# A tibble: 16 × 2\n   carrier name                       \n   &lt;chr&gt;   &lt;chr&gt;                      \n 1 9E      Endeavor Air Inc.          \n 2 AA      American Airlines Inc.     \n 3 AS      Alaska Airlines Inc.       \n 4 B6      JetBlue Airways            \n 5 DL      Delta Air Lines Inc.       \n 6 EV      ExpressJet Airlines Inc.   \n 7 F9      Frontier Airlines Inc.     \n 8 FL      AirTran Airways Corporation\n 9 HA      Hawaiian Airlines Inc.     \n10 MQ      Envoy Air                  \n11 OO      SkyWest Airlines Inc.      \n12 UA      United Air Lines Inc.      \n13 US      US Airways Inc.            \n14 VX      Virgin America             \n15 WN      Southwest Airlines Co.     \n16 YV      Mesa Airlines Inc.         \n\n\n\n\n\nairports records data about each airport. You can identify each airport by its three letter airport code, making faa the primary key.\n\n\nairports\n\n# A tibble: 1,458 × 8\n   faa   name                             lat    lon   alt    tz dst   tzone    \n   &lt;chr&gt; &lt;chr&gt;                          &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;    \n 1 04G   Lansdowne Airport               41.1  -80.6  1044    -5 A     America/…\n 2 06A   Moton Field Municipal Airport   32.5  -85.7   264    -6 A     America/…\n 3 06C   Schaumburg Regional             42.0  -88.1   801    -6 A     America/…\n 4 06N   Randall Airport                 41.4  -74.4   523    -5 A     America/…\n 5 09J   Jekyll Island Airport           31.1  -81.4    11    -5 A     America/…\n 6 0A9   Elizabethton Municipal Airport  36.4  -82.2  1593    -5 A     America/…\n 7 0G6   Williams County Airport         41.5  -84.5   730    -5 A     America/…\n 8 0G7   Finger Lakes Regional Airport   42.9  -76.8   492    -5 A     America/…\n 9 0P2   Shoestring Aviation Airfield    39.8  -76.6  1000    -5 U     America/…\n10 0S9   Jefferson County Intl           48.1 -123.    108    -8 A     America/…\n# ℹ 1,448 more rows\n\n\n\n\n\nplanes records data about each plane. You can identify a plane by its tail number, making tailnum the primary key.\n\n\nplanes\n\n# A tibble: 3,322 × 9\n   tailnum  year type              manufacturer model engines seats speed engine\n   &lt;chr&gt;   &lt;int&gt; &lt;chr&gt;             &lt;chr&gt;        &lt;chr&gt;   &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; \n 1 N10156   2004 Fixed wing multi… EMBRAER      EMB-…       2    55    NA Turbo…\n 2 N102UW   1998 Fixed wing multi… AIRBUS INDU… A320…       2   182    NA Turbo…\n 3 N103US   1999 Fixed wing multi… AIRBUS INDU… A320…       2   182    NA Turbo…\n 4 N104UW   1999 Fixed wing multi… AIRBUS INDU… A320…       2   182    NA Turbo…\n 5 N10575   2002 Fixed wing multi… EMBRAER      EMB-…       2    55    NA Turbo…\n 6 N105UW   1999 Fixed wing multi… AIRBUS INDU… A320…       2   182    NA Turbo…\n 7 N107US   1999 Fixed wing multi… AIRBUS INDU… A320…       2   182    NA Turbo…\n 8 N108UW   1999 Fixed wing multi… AIRBUS INDU… A320…       2   182    NA Turbo…\n 9 N109UW   1999 Fixed wing multi… AIRBUS INDU… A320…       2   182    NA Turbo…\n10 N110UW   1999 Fixed wing multi… AIRBUS INDU… A320…       2   182    NA Turbo…\n# ℹ 3,312 more rows\n\n\n\n\n\nweather records data about the weather at the origin airports. You can identify each observation by the combination of location and time, making origin and time_hour the compound primary key.\n\n\nweather\n\n# A tibble: 26,115 × 15\n   origin  year month   day  hour  temp  dewp humid wind_dir wind_speed\n   &lt;chr&gt;  &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;    &lt;dbl&gt;      &lt;dbl&gt;\n 1 EWR     2013     1     1     1  39.0  26.1  59.4      270      10.4 \n 2 EWR     2013     1     1     2  39.0  27.0  61.6      250       8.06\n 3 EWR     2013     1     1     3  39.0  28.0  64.4      240      11.5 \n 4 EWR     2013     1     1     4  39.9  28.0  62.2      250      12.7 \n 5 EWR     2013     1     1     5  39.0  28.0  64.4      260      12.7 \n 6 EWR     2013     1     1     6  37.9  28.0  67.2      240      11.5 \n 7 EWR     2013     1     1     7  39.0  28.0  64.4      240      15.0 \n 8 EWR     2013     1     1     8  39.9  28.0  62.2      250      10.4 \n 9 EWR     2013     1     1     9  39.9  28.0  62.2      260      15.0 \n10 EWR     2013     1     1    10  41    28.0  59.6      260      13.8 \n# ℹ 26,105 more rows\n# ℹ 5 more variables: wind_gust &lt;dbl&gt;, precip &lt;dbl&gt;, pressure &lt;dbl&gt;,\n#   visib &lt;dbl&gt;, time_hour &lt;dttm&gt;"
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#foreign-keys-1",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#foreign-keys-1",
    "title": "Roadmap",
    "section": "Foreign Keys",
    "text": "Foreign Keys\n. . .\n\n\n\n\n\n\n\nflights$origin –&gt; airports$faa.\nflights$dest –&gt; airports$faa.\nflights$origin-flights$time_hour –&gt; weather$origin-weather$time_hour.\nflights$tailnum –&gt; planes$tailnum\nflights$carrier –&gt; airlines$carrier."
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#checking-keys",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#checking-keys",
    "title": "Roadmap",
    "section": "Checking Keys",
    "text": "Checking Keys\nA nice feature of these data are that the primary and foreign keys have the same name almost every variable name used across multiple tables has the same meaning.15 This isn’t always the case!16\n. . ."
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#footnotes",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#footnotes",
    "title": "Roadmap",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nIdeally you’ve saved it in your project folder! 😌↩︎\nWe’ll cover these more in depth in a couple of weeks.↩︎\nFunctions have additional arguments to read in specific sheets or a range of cells.↩︎\nFunctions have additional arguments to read in specific sheets or a range of cells.↩︎\nVery similar to readxl with some slight variations you can read about here.↩︎\nFunctions have additional arguments to read in specific sheets or a range of cells.↩︎\nVery similar to readxl with some slight variations you can read about here.↩︎\nSAS, SPSS, and Stata have so-called “labelled” vectors for which haven provides a class to represent in R. Alternatively, you can get rid of them with these functions.↩︎\nMore on this in a couple of weeks.↩︎\nMore on this function from dplyr next week!↩︎\nAlso next week!↩︎\nRead the original article here.↩︎\nPlacing variable sin columns also leverages R’s vectorized nature, i.e. most built-in R functions work with values of vectors.↩︎\nIn fact, all tidyverse functions are designed to work with tidy data.↩︎\nWith the exception of year: it means year of departure in flights and year of manufacture in planes. ↩︎\nWe’ll cover how to handle this shortly.↩︎"
  }
]