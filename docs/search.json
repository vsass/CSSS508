[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "CS&SS 508",
    "section": "",
    "text": "Instructor:\nVictoria (Vic) Sass\n\n\nLecture:\nTuesdays 4:30 - 5:20pm\n\n\n\nLab AA:\nTuesdays 5:30 - 6:20pm\n\n\n\nLab AB:\nThursdays 4:30 - 5:20pm\n\n\n\n\n\nOffice Hours:\nThursdays 2-4pm (on Zoom; link on Canvas)"
  },
  {
    "objectID": "Homework/homework.html",
    "href": "Homework/homework.html",
    "title": "Overview",
    "section": "",
    "text": "This page contains general instructions for assignments/peer reviews. For homework-specific instructions, deadlines, and templates, go to the specific assignment listed on the left.\n\nAll assignments should be created using Quarto and uploaded to Canvas as both html and qmd files. Your document should be pleasant for a peer to look at and follow all instructions. Use sections for organization, label figures/tables, and use code chunks (e.g., echo, results).\n\nPeer Review:\nYou are required to both grade and provide feedback on a peer’s homework each week. Reading/evaluating the work of others is useful and important! Good programmers realize that most problems have been solved by others; the trick is figuring out how to apply existing code to new problems. You will develop this skill by reading others' code, evaluating their approach to problems, providing suggestions, and pointing out when you learned something new. Good peer reviews give constructive, polite, and insightful comments, are specific and concise, use the grading rubric below, and point out what you learned from their code. Poor peer reviews are impolite or unprofessional, are generic (i.e., could be applied to anyone's homework), or fail to provide useful suggestions.\n\n\nRubric Students Use to Grade Assignments:\n\n0: Didn't turn anything in\n1: Turned in but low effort, ignoring many directions (less than 50% of assignment completed correctly)\n2: Decent effort, followed directions with some minor issues (50-80% of assignment completed correctly)\n3: Nailed it (&gt;80% of assignment completed correctly)\n\n\nRubric Instructor Uses to Grade Peer Review:\n\n0: Didn’t follow all of the instructions below.\n1: Peer review was at least one paragraph long, mentions any and all key issues from the assignment, and points out at least one thing positive in your peer’s work (and hopefully more!).\n\n\nWhen to Contact the Instructor:\nA number of situations may warrant contacting the instructor:\n\nIf you believe you have received an unfair peer review, you can resubmit your homework for evaluation by the instructor. The assignment will be regraded, which may result in a higher, same, or lower grade.\nIf you wish for more feedback on a particular part of the homework, you can ask the instructor for additional explanation without resubmitting during lab or over email.\nIf you receive no feedback, the instructor will provide gentle peer review on request."
  },
  {
    "objectID": "Homework/HW1/homework1.html",
    "href": "Homework/HW1/homework1.html",
    "title": "Homework 1",
    "section": "",
    "text": "Instructions\nWrite up a .Rmd file showing some exploratory analyses of the Swiss fertility data. Upload both the .Rmd file and the .html file to Canvas. You must upload both for credit.\nMix in-line R calculations, R output, and plots with text describing the relationships you see. Include at least two plots. You must use in-line R calculations at least once (e.g. functions like nrow(), mean(), sd(), cor(), median(), min()) and may not hard-code any numbers referenced in your text.\nYour document should be pleasant for a peer to look at, with some organization using sections or lists, and all plots labeled clearly. Use chunk options echo and results to limit the code/output you show in the .html. Discussion of specific values should be summarized in sentences in your text – not as printed code and output – and rounded so as not to be absurdly precise (e.g. round x with round(x, 2)).\n\n\nTemplates\nraw qmd file\nrendered html file\n\n\nExamples\nraw qmd file\nrendered html file\n\n\nHomework Due Date\n\nSection AA: Tuesday, October 10th (before lecture)\nSection AB: Thursday, October 12th (before lab)\n\n\n\nPeer Review Due Date\n\nSection AA: Sunday, October 15th (by 4:30pm)\nSection AB: Tuesday, October 17th (before lecture)"
  },
  {
    "objectID": "Homework/HW1/CSSS508_HW1_Template.html",
    "href": "Homework/HW1/CSSS508_HW1_Template.html",
    "title": "Homework 1",
    "section": "",
    "text": "This basic R markdown file has some text, inline code, and code chunks!"
  },
  {
    "objectID": "Homework/HW1/CSSS508_HW1_Template.html#code-chunks",
    "href": "Homework/HW1/CSSS508_HW1_Template.html#code-chunks",
    "title": "Homework 1",
    "section": "Code Chunks",
    "text": "Code Chunks\n\nset.seed(1)\nnorm &lt;- rnorm(100)\nhist(x = norm, \n     xlab = \"X Axis Name\", \n     ylab = \"Count\", \n     main = \"Histogram of 100 observations from a Standard Normal\")"
  },
  {
    "objectID": "Homework/HW1/CSSS508_HW1_Template.html#text-and-inline-text",
    "href": "Homework/HW1/CSSS508_HW1_Template.html#text-and-inline-text",
    "title": "Homework 1",
    "section": "Text and Inline Text",
    "text": "Text and Inline Text\nThe sample mean of the data plotted above (rounded to 3 decimal points) is 0.109 and the variance is 0.807.\nWhat’s the relationship between standard deviation and variance?\n\\[ \\text{Standard Deviation}(X) = \\sqrt{\\text{Variance}(X)} \\]\nThe standard deviation of the data plotted above is 0.898."
  },
  {
    "objectID": "syllabus.html",
    "href": "syllabus.html",
    "title": "Syllabus",
    "section": "",
    "text": "This syllabus is subject to change. All changes will be announced both in class and on this page.\n\nCourse Info:\nInstructor: Victoria Sass\nLecture: Tuesday 4:30-5:20pm (Gowen 201)\n• Lab AA Tuesday 5:30-6:20pm (Savery 117)\n• Lab AB Thursday 4:30-520pm (Savery 117)\nOffice Hours: Tuesdays 9-10am, 3-4pm (Zoom - link on Canvas)\n\n\nOverview and Learning Objectives:\nThis course is intended to give students a foundational understanding of programming in the statistical language R. This knowledge is intended to be broadly useful wherever you encounter data in your education and career. General topics we will focus on include:\n\nExploring data with graphics and summaries\nCleaning and preparing data for analyses\nLinking data sets together\nOrganizing projects and creating reproducible research\n\nBy the end of this course you should feel confident approaching any data you encounter in the future. We will cover almost no statistics, however it is the intention that this course will leave you prepared to progress in CS&SS or STAT courses with the ability to focus on statistics instead of coding. Additionally, the basic concepts you learn will be applicable to other programming languages and research in general, such as logic and algorithmic thinking.\n\n\nStructure:\nThis course has a primary lecture session, a lab session, and office hours:\n\nLecture (in-person; 50 minutes): On Tuesdays, I will lead a collaborative session on a specific topic to help you learn fundamental skills, concepts, and principles for learning R. The content from lecture each week will be the basis of the homework assignment due the following week.\nLab (in-person; 50 minutes): On Tuesdays and Thursdays, we will meet in the CSSCR lab for an interactive session where we will practice the skills from lecture. Students will work with each other to learn and practice key skills in R, but I will be available to help as well!\nOffice Hours (remote; two 60 minute sessions): On Wednesdays, I will hold drop-in office hours on Zoom. This is a great time to ask questions, get advice, or continue discussions from lab/lecture. We can talk in a breakout room or with the group! A link to the Zoom meeting can be found on Canvas.\n\n\n\nSchedule:\nBelow is a summary of topics that will be covered each week in lecture. Labs will focus on material covered in the previous lecture, unless otherwise stated below.\n\nWeek 1 (3/29): Introduction to R, RStudio, and RMarkdown\nWeek 2 (4/5): Visualizing Data\nWeek 3 (4/12): Manipulating and Summarizing Data\nWeek 4 (4/19): Understanding R Data Structures\nWeek 5 (4/26): Importing, Exporting, and Cleaning Data\nWeek 6 (5/3): Using Loops\nWeek 7 (5/10): Writing Functions\nWeek 8 (5/17): Working with Text Data\nWeek 9 (5/24): Working with Geographical Data\nWeek 10 (5/31): Reproducibility and Model Results\n\nThis course will have no meeting during final exam week.\n\n\nPrerequisites:\nThis course has no prerequisites.\n\n\nMaterials and Texts:\nThis course has no required materials or texts. However, there are a few things to note:\n\nLaptops: This course is primarily focused on computation. As a result, it is helpful to bring a personal laptop to class each day. Alternatively, you can use one of the computers available in the classroom (Savery 117, aka the “CSSCR Big Lab”). If you’d like a laptop but do not have one, you can borrow one for free from UW through the Student Technology Loan Program.\nOnline Textbooks: This course has no required textbooks, but there are many helpful resources available for free online. Two of my favorites are the textbook R for Data Science by Garrett Grolemund and Hadley Wickham and the collection of short R Cheat Sheets by the folks at RStudio.\n\n\n\nGrading\nThis course is graded as credit/no credit. To pass you need to receive at least 60% of the available points. There will be 8 graded homework assignments, one nearly every week. There are 4 points possible for each week that features a homework.\n\nHomework (75%; 3 points): These must be turned in as knitted Markdown documents which we will learn to create and for which templates are provided. They will be graded on a 0 to 3 point scale based on a simple effort-focused rubric found on the course website. These are designed first and foremost to develop skills rather than \"prove\" you have learned concepts. I encourage you to communicate and work together, so long as you write and explain your code yourself and do not copy work. You can learn a lot from replicating others' code, but you will learn nothing if you copy it without knowing how it works! In other words, you’re not really going to learn unless you do the coding yourself!\nPeer Review (25%; 1 point): Each week an assignment is due, students will be randomly assigned to grade another student's assignment following a 0 to 3 rubric. They will be expected to provide constructive feedback and commentary if something new was learned. Reading others' code is an important skill and you will write better code knowing others will see it. These reviews will be due prior to the following class meeting. Each peer review is worth 1 point and will be evaluated by the instructor on a binary \"good\" / \"not good\" scale.\n\n\n\nClassroom Environment\nI am absolutely committed to fostering a friendly and inclusive classroom environment in which all students have an equal opportunity to learn and succeed.\n\nNames & Pronouns: Everyone deserves to be addressed respectfully and correctly. You are welcome to send me your preferred name and correct gender pronouns at any time. I will also provide an opportunity to share your preferred name and pronouns in-class on the first day!\nCovid Considerations: I will follow all University rules and procedures regarding Covid, which may or may not change during the quarter. I also recognize that Covid creates unique circumstances and concerns for each of us, which may limit your ability to fully attend or participate in this course. You never need to apologize to me for anything pandemic related. If there is something I can do to make you feel more comfortable during class, please let me know!\nGetting Help: If at any point during the quarter you find yourself struggling to keep up, please let me know! I am here to help. A great place to start this process is by chatting after class, coming to office hours, or sending me an email.\nFeedback: I encourage and appreciate your feedback. Please feel welcome to contact me via email with feedback at any point during or after the quarter. Additionally, I will send out a mid-quarter feedback survey on Canvas around Week 5.\nDiversity: Diverse backgrounds, embodiments, and experiences are essential to the critical thinking endeavor at the heart of university education. Therefore, I expect you to follow the UW Student Conduct Code in your interactions with your colleagues and me in this course by respecting the many social and cultural differences among us, which may include, but are not limited to: age, cultural background, disability, ethnicity, family status, gender identity and presentation, citizenship and immigration status, national origin, race, religious and political beliefs, sex, sexual orientation, socioeconomic status, and veteran status.\nAccessibility & Accommodations: Your experience in this class is important to me. If you have already established accommodations with Disability Resources for Students (DRS), please communicate your approved accommodations to me at your earliest convenience so we can discuss your needs in this course. If you have not yet established services through DRS, but have a temporary health condition or permanent disability that requires accommodations (conditions include but not limited to; mental health, attention-related, learning, vision, hearing, physical or health impacts), you are welcome to contact DRS at 206-543-8924, uwdrs@uw.edu, or through their website. DRS offers resources and coordinates reasonable accommodations for students with disabilities and/or temporary health conditions. Reasonable accommodations are established through an interactive process between you, your instructor(s) and DRS. It is the policy and practice of the University of Washington to create inclusive and accessible learning environments consistent with federal and state law.\nAcademic Integrity: Academic integrity is essential to this course and to your learning. In this course, violations of the academic integrity policy include but are not limited to: copying from a peer, copying from an online resource, or using resources from a previous iteration of the course. That said, I hope you will collaborate with peers on assignments, and use Internet resources when questions arise to help solve issues. The key is that you ultimately submit your own work. Anything found in violation of this policy will be automatically given a score of 0 with no exceptions. If the situation merits, it will also be reported to the UW Student Conduct Office, at which point it is out of my hands. If you have any questions about this policy, please do not hesitate to reach out and ask.\nReligious Accommodations: Washington state law requires that UW develop a policy for accommodation of student absences or significant hardship due to reasons of faith or conscience, or for organized religious activities. The UW's policy, including more information about how to request an accommodation, is available at Religious Accommodations Policy. Accommodations must be requested within the first two weeks of this course using the Religious Accommodations Request form."
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2_index.html",
    "href": "Lectures/Lecture2/CSSS508_Lecture2_index.html",
    "title": "Lecture 2",
    "section": "",
    "text": "Slides\nHTML slides • PDF Slides • Raw qmd file\n\n\n\nResources\n\nCompanion R File\nGapminder\nR Graphics Cookbook\nProvides “recipes” for common plot types that you can use as is or as inspiration.\nPosit ggplot2 cheatsheet\nggplot2 reference website\nA much more user-friendly compilation of the help pages for all of the ggplot2 functions. With example code AND output!\nKieran Healy’s book Data Visualization: A Practical Introduction"
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture5_index.html",
    "href": "Lectures/Lecture5/CSSS508_Lecture5_index.html",
    "title": "Lecture 5",
    "section": "",
    "text": "Slides\nHTML slides • PDF Slides • Raw qmd file\n\n\n\nResources"
  },
  {
    "objectID": "Lectures/Lecture11/CSSS508_Lecture11_index.html",
    "href": "Lectures/Lecture11/CSSS508_Lecture11_index.html",
    "title": "Lecture 11",
    "section": "",
    "text": "Slides\nHTML slides • PDF Slides • Raw qmd file\n\n\n\nResources"
  },
  {
    "objectID": "Lectures/Lecture10/CSSS508_Lecture10_index.html",
    "href": "Lectures/Lecture10/CSSS508_Lecture10_index.html",
    "title": "Lecture 10",
    "section": "",
    "text": "Slides\nHTML slides • PDF Slides • Raw qmd file\n\n\n\nResources"
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4_index.html",
    "href": "Lectures/Lecture4/CSSS508_Lecture4_index.html",
    "title": "Lecture 4",
    "section": "",
    "text": "Slides\nHTML slides • PDF Slides • Raw qmd file\n\n\n\nResources\n\nCompanion R file\nExcel error article\nPosit dplyr cheatsheet\ndplyr reference website"
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3_index.html",
    "href": "Lectures/Lecture3/CSSS508_Lecture3_index.html",
    "title": "Lecture 3",
    "section": "",
    "text": "Slides\nHTML slides • PDF Slides • Raw qmd file\n\n\n\nResources\n\nCompanion R File\nThe tidyverse style guide"
  },
  {
    "objectID": "Lectures/lectures.html",
    "href": "Lectures/lectures.html",
    "title": "Schedule",
    "section": "",
    "text": "Lecture\nDate\nTopic\n\n\n\n\n1\n3 October 2023\nIntroduction to R, R Studio, and Quarto\n\n\n2\n10 October 2023\nVisualizing Data, Part I\n\n\n3\n17 October 2023\nWorkflow and Best Practices\n\n\n4\n24 October 2023\nManipulating and Summarizing Data\n\n\n5\n31 October 2023\nUnderstanding R Data Structures, Part I\n\n\n6\n7 November 2023\nUnderstanding R Data Structures, Part II\n\n\n7\n14 November 2023\nImporting, Exporting, and Cleaning Data\n\n\n8\n21 November 2023\nWriting Functions\n\n\n9\n28 November 2023\nIteration\n\n\n10\n5 December 2023\nVisualizing Data, Part II\n\n\n11\n15 December 2023\nNext Steps (Optional zoom lecture/recording)"
  },
  {
    "objectID": "Lectures/Lecture6/CSSS508_Lecture6_index.html",
    "href": "Lectures/Lecture6/CSSS508_Lecture6_index.html",
    "title": "Lecture 6",
    "section": "",
    "text": "Slides\nHTML slides • PDF Slides • Raw qmd file\n\n\n\nResources"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1_index.html",
    "href": "Lectures/Lecture1/CSSS508_Lecture1_index.html",
    "title": "Lecture 1",
    "section": "",
    "text": "Slides\nHTML slides • PDF Slides • Raw qmd file\n\n\n\nResources\n\nCompanion R File\nDownload R\nDownload RStudio\nR for Data Science\nPosit cheatsheets\nPosit community\nStackoverflow"
  },
  {
    "objectID": "Lectures/Lecture8/CSSS508_Lecture8_index.html",
    "href": "Lectures/Lecture8/CSSS508_Lecture8_index.html",
    "title": "Lecture 8",
    "section": "",
    "text": "Slides\nHTML slides • PDF Slides • Raw qmd file\n\n\n\nResources"
  },
  {
    "objectID": "Lectures/Lecture9/CSSS508_Lecture9_index.html",
    "href": "Lectures/Lecture9/CSSS508_Lecture9_index.html",
    "title": "Lecture 9",
    "section": "",
    "text": "Slides\nHTML slides • PDF Slides • Raw qmd file\n\n\n\nResources"
  },
  {
    "objectID": "Lectures/Lecture7/CSSS508_Lecture7_index.html",
    "href": "Lectures/Lecture7/CSSS508_Lecture7_index.html",
    "title": "Lecture 7",
    "section": "",
    "text": "Slides\nHTML slides • PDF Slides • Raw qmd file\n\n\n\nResources"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#welcome",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#welcome",
    "title": "CSSS 508 • Lecture 1",
    "section": "Welcome!",
    "text": "Welcome!\n\nIntroductions\nSyllabus\nLecture 1: Introduction to R, RStudio, and Quarto"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#introductions",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#introductions",
    "title": "CSSS 508 • Lecture 1",
    "section": "Introductions",
    "text": "Introductions\nLet’s start by going around the room and sharing our:\n\nName and pronouns\nProgram and year\nExperience with programming (in R or generally)\nYour favorite place to eat in Seattle (what do you usually order?)"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#syllabus",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#syllabus",
    "title": "CSSS 508 • Lecture 1",
    "section": "Syllabus",
    "text": "Syllabus\nThe syllabus (as well as lots of other information) can be found on our course website:\n\nhttps://vsass.github.io/CSSS508\n\nFeel free to follow along online as I run through the syllabus!"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#course-goals",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#course-goals",
    "title": "CSSS 508 • Lecture 1",
    "section": "Course goals",
    "text": "Course goals\nThis course is intended to give students a foundational understanding of programming in the statistical language R. General topics include:\n\n\nExploring data with graphics and summaries\nCleaning, preparing, and linking data for analyses\nFoundational programming skills such as functions and loops\nOrganizing projects and creating reproducible research\n\n\n\nWe won’t really cover any statistics in this course but the goal is for you to increase your coding comprehension and learn the tools you need to be able to focus on statistics instead of coding in any future/current CSSS or STAT courses!"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#logistics",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#logistics",
    "title": "CSSS 508 • Lecture 1",
    "section": "Logistics",
    "text": "Logistics\nSessions: \n\n\nLecture: An overview of that week’s topic where we’ll learn key skills, concepts, and principles.\n\nTuesdays, 4:30-5:20pm (Gowen 201)\n\n\n\nLabs: An interactive session where we’ll put what we’ve learned in lecture into practice.\n\n\nLab AA: Tuesday, 5:30-6:20pm (Savery 117)\n\nLab AB: Thursday, 4:30-5:20pm (Savery 117)\n\n\n\nOffice Hours: Thursdays, 2-4pm\n(on Zoom; link on Canvas)\n\n\nCourse Website: https://vsass.github.io/CSSS508\nContact: Message me on our Canvas course page rather than sending me an email. I get far too many emails a day and I don’t want to miss your message!"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#schedule",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#schedule",
    "title": "CSSS 508 • Lecture 1",
    "section": "Schedule",
    "text": "Schedule\n\nWeek 1: Introduction to R, RStudio, and Quarto\nWeek 2: Visualizing Data, Part I\nWeek 3: Workflow and Best Practices\nWeek 4: Manipulating and Summarizing Data\nWeek 5: Understanding Data Structures\nWeek 6: Working with Text Data\nWeek 7: Importing, Exporting, and Cleaning Data\nWeek 8: Writing Functions\nWeek 9: Iteration\nWeek 10: Visualizing Data, Part II\nWeek 11: Next Steps (Optional - Last day of Finals Week)"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html",
    "title": "CSSS 508 • Lecture 1",
    "section": "",
    "text": "Introductions\nSyllabus\nLecture 1: Introduction to R, RStudio, and Quarto\n\n\n\n\nLet’s start by going around the room and sharing our:\n\nName and pronouns\nProgram and year\nExperience with programming (in R or generally)\nYour favorite place to eat in Seattle (what do you usually order?)\n\n\n\n\nThe syllabus (as well as lots of other information) can be found on our course website:\n\nhttps://vsass.github.io/CSSS508\n\nFeel free to follow along online as I run through the syllabus!\n\n\n\nThis course is intended to give students a foundational understanding of programming in the statistical language R. General topics include:\n\n\nExploring data with graphics and summaries\nCleaning, preparing, and linking data for analyses\nFoundational programming skills such as functions and loops\nOrganizing projects and creating reproducible research\n\n\n. . .\nWe won’t really cover any statistics in this course but the goal is for you to increase your coding comprehension and learn the tools you need to be able to focus on statistics instead of coding in any future/current CSSS or STAT courses!\n\n\n\nSessions: \n\nLecture: An overview of that week’s topic where we’ll learn key skills, concepts, and principles.\n\nTuesdays, 4:30-5:20pm (Gowen 201)\n\nLabs: An interactive session where we’ll put what we’ve learned in lecture into practice.\n\nLab AA: Tuesday, 5:30-6:20pm (Savery 117)\nLab AB: Thursday, 4:30-5:20pm (Savery 117)\n\nOffice Hours: Thursdays, 2-4pm\n(on Zoom; link on Canvas)\n\nCourse Website: https://vsass.github.io/CSSS508\nContact: Message me on our Canvas course page rather than sending me an email. I get far too many emails a day and I don’t want to miss your message!\n\n\n\n\nWeek 1: Introduction to R, RStudio, and Quarto\nWeek 2: Visualizing Data, Part I\nWeek 3: Workflow and Best Practices\nWeek 4: Manipulating and Summarizing Data\nWeek 5: Understanding Data Structures\nWeek 6: Working with Text Data\nWeek 7: Importing, Exporting, and Cleaning Data\nWeek 8: Writing Functions\nWeek 9: Iteration\nWeek 10: Visualizing Data, Part II\nWeek 11: Next Steps (Optional - Last day of Finals Week)\n\n\n\n\nPrerequisites: None\nMaterials: All course materials are provided on the course website. This includes:\n\nThese slides and the code used to generate them.\nAn R script for the slides to follow along in class.\nHomework instructions and/or templates\nUseful links to other resources.\n\nLaptops: It’s helpful to bring a laptop to class. If you don’t have one, you can use the lab computers or borrow one for free from the UW Student Technology Loan Program.\nTextbooks: This course has no textbook. However, I will provide optional reading recommendations that I’ve found really useful!\n\n\n\nFinal grade: Credit/No Credit (C/NC); You need at least 60% to get Credit.\n\nHomework (75%; assessed by peers): 8 total homeworks; assessed on a 0-3 point rubric. Assigned at the end of lab sections and due a week later.\nPeer Grading (25%; assessed by the instructor): One per homework, assessed on a binary “good”/“not good” scale. Due 5 days after homework due date.\n\nAssignment/peer grading instructions and deadlines can be found on the Homework page of the course website. All homework will be turned in on Canvas.\n\n\n\nYes, because:\n\nYou will write your reports better knowing others will see them\nYou learn alternate approaches to the same problem\nYou will have more opportunities to practice and have the material sink in\n\n. . .\nHow to peer review:\n\nLeave constructive comments: You’ll only get the point if you write at least 1 full paragraph that includes\n\nAny key issues from the assignment and,\nPoints out something positive in your peer’s work.\n\nEmail me if you would like your assignment to be regraded or provide feedback if no peer review was given.\n\n\n\n\nAcademic integrity is essential to this course and to your learning. Violations of the academic integrity policy include but are not limited to:\n\nCopying from a peer\nCopying from an online resource\nUsing resources from a previous iteration of the course.\n\n. . .\nI hope you will collaborate with peers on assignments and use Internet resources when questions arise to help solve issues. The key is that you ultimately submit your own work.\n. . .\nAnything found in violation of this policy will be automatically given a score of 0 with no exceptions. If the situation merits, it will also be reported to the UW Student Conduct Office, at which point it is out of my hands. If you have any questions about this policy, please do not hesitate to reach out and ask.\n\n\n\nI’m committed to fostering a friendly and inclusive classroom environment in which all students have an equal opportunity to learn and succeed.\n. . .\n\nNames & Pronouns: Everyone should be addressed respectfully and correctly. Feel free to send me your name/pronouns anytime.\n\n. . .\n\nCovid: Covid creates unique circumstances for each of us, which may limit your ability to fully participate in this course. You never need to apologize to me for anything pandemic-related. Let me know how I can help!\n\n. . .\n\nAccessibility & Accomodations: See course website for information on health, disability, and religious accomodations.\n\n. . .\n\nFeedback: I encourage feedback at any point in the quarter. I will also send out a mid-quarter evaluation around Week 5.\n\n. . .\n\nGetting Help: If you ever find yourself struggling, know I’m here to help! Try chatting after class, messaging me on Canvas, or coming to office hours.\n\n\n\n\nDon’t ask like this:\n\ntried lm(y~x) but it iddn’t work wat do\n\n. . .\nInstead, ask like this:\n\ny &lt;- seq(1:10) + rnorm(10)\nx &lt;- seq(0:10)\nmodel &lt;- lm(y ~ x)\nRunning the block above gives me the following error, anyone know why?\nError in model.frame.default(formula = y ~ x, \ndrop.unused.levels = TRUE) : variable lengths differ \n(found for 'x')\n\nI may send out your question (anonymously) and my answer to the course mailing list!"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#prerequisites-materials-and-texts",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#prerequisites-materials-and-texts",
    "title": "CSSS 508 • Lecture 1",
    "section": "Prerequisites, Materials, and Texts",
    "text": "Prerequisites, Materials, and Texts\nPrerequisites: None\nMaterials: All course materials are provided on the course website. This includes:\n\nThese slides and the code used to generate them.\nAn R script for the slides to follow along in class.\nHomework instructions and/or templates\nUseful links to other resources.\n\nLaptops: It’s helpful to bring a laptop to class. If you don’t have one, you can use the lab computers or borrow one for free from the UW Student Technology Loan Program.\nTextbooks: This course has no textbook. However, I will provide optional reading recommendations that I’ve found really useful!"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#grading",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#grading",
    "title": "CSSS 508 • Lecture 1",
    "section": "Grading",
    "text": "Grading\nFinal grade: Credit/No Credit (C/NC); You need at least 60% to get Credit.\n\n\nHomework (75%; assessed by peers): 8 total homeworks; assessed on a 0-3 point rubric. Assigned at the end of lab sections and due a week later.\n\nPeer Grading (25%; assessed by the instructor): One per homework, assessed on a binary “good”/“not good” scale. Due 5 days after homework due date.\n\nAssignment/peer grading instructions and deadlines can be found on the Homework page of the course website. All homework will be turned in on Canvas."
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#ugh-peer-grading",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#ugh-peer-grading",
    "title": "CSSS 508 • Lecture 1",
    "section": "Ugh, peer grading?",
    "text": "Ugh, peer grading?\nYes, because:\n\nYou will write your reports better knowing others will see them\nYou learn alternate approaches to the same problem\nYou will have more opportunities to practice and have the material sink in\n\n\nHow to peer review:\n\nLeave constructive comments: You’ll only get the point if you write at least 1 full paragraph that includes\n\nAny key issues from the assignment and,\nPoints out something positive in your peer’s work.\n\n\n\nEmail me if you would like your assignment to be regraded or provide feedback if no peer review was given."
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#academic-integrity",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#academic-integrity",
    "title": "CSSS 508 • Lecture 1",
    "section": "Academic Integrity",
    "text": "Academic Integrity\nAcademic integrity is essential to this course and to your learning. Violations of the academic integrity policy include but are not limited to:\n\nCopying from a peer\nCopying from an online resource\nUsing resources from a previous iteration of the course.\n\n\nI hope you will collaborate with peers on assignments and use Internet resources when questions arise to help solve issues. The key is that you ultimately submit your own work.\n\n\nAnything found in violation of this policy will be automatically given a score of 0 with no exceptions. If the situation merits, it will also be reported to the UW Student Conduct Office, at which point it is out of my hands. If you have any questions about this policy, please do not hesitate to reach out and ask."
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#classroom-environment",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#classroom-environment",
    "title": "CSSS 508 • Lecture 1",
    "section": "Classroom Environment",
    "text": "Classroom Environment\nI’m committed to fostering a friendly and inclusive classroom environment in which all students have an equal opportunity to learn and succeed.\n\n\nNames & Pronouns: Everyone should be addressed respectfully and correctly. Feel free to send me your name/pronouns anytime.\n\n\n\n\nCovid: Covid creates unique circumstances for each of us, which may limit your ability to fully participate in this course. You never need to apologize to me for anything pandemic-related. Let me know how I can help!\n\n\n\n\nAccessibility & Accomodations: See course website for information on health, disability, and religious accomodations.\n\n\n\n\nFeedback: I encourage feedback at any point in the quarter. I will also send out a mid-quarter evaluation around Week 5.\n\n\n\n\nGetting Help: If you ever find yourself struggling, know I’m here to help! Try chatting after class, messaging me on Canvas, or coming to office hours."
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#asking-questions",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#asking-questions",
    "title": "CSSS 508 • Lecture 1",
    "section": "Asking Questions",
    "text": "Asking Questions\nDon’t ask like this:\n\ntried lm(y~x) but it iddn’t work wat do\n\n\nInstead, ask like this:\n\ny &lt;- seq(1:10) + rnorm(10)\nx &lt;- seq(0:10)\nmodel &lt;- lm(y ~ x)\nRunning the block above gives me the following error, anyone know why?\nError in model.frame.default(formula = y ~ x, \ndrop.unused.levels = TRUE) : variable lengths differ \n(found for 'x')\n\nI may send out your question (anonymously) and my answer to the course mailing list!"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#questions",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#questions",
    "title": "CSSS 508 • Lecture 1",
    "section": "Questions?",
    "text": "Questions?"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#a-note-on-slide-formatting",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#a-note-on-slide-formatting",
    "title": "CSSS 508 • Lecture 1",
    "section": "A Note on Slide Formatting",
    "text": "A Note on Slide Formatting\nBold and Italics indicate important terms!\n\nCode represents R code you could use to perform actions. For example: “Press Ctrl-P to open the print dialogue.”\n\n\nCode chunks that span the page represent actual R code embedded in the slides.\n\n# Sometimes important stuff is highlighted!\n7 * 49\n\n[1] 343"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#lecture-1-introduction-to-r-rstudio-and-quarto",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#lecture-1-introduction-to-r-rstudio-and-quarto",
    "title": "CSSS 508 • Lecture 1",
    "section": "Lecture 1: Introduction to R, RStudio, and Quarto",
    "text": "Lecture 1: Introduction to R, RStudio, and Quarto"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#why-r",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#why-r",
    "title": "CSSS 508 • Lecture 1",
    "section": "Why R?",
    "text": "Why R?\nR is a programming language built for statistical computing.\nIf one already knows Stata or similar software, why use R?\n\n\nR is free.\n\n\n\n\nR has a very large community.\n\n\n\n\nR can handle virtually any data format.\n\n\n\n\nR makes replication easy.\n\n\n\n\nR is a language so it can do everything.\n\n\n\n\nR skills transfer to other languages like Python and Julia."
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#r-studio",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#r-studio",
    "title": "CSSS 508 • Lecture 1",
    "section": "R Studio",
    "text": "R Studio\nR Studio is a “front-end” or integrated development environment (IDE) for R that can make your life easier.\n\nWe’ll show RStudio can… . . .\n\nOrganize your code, output, and plots\n\n\n\n\nAuto-complete code and highlight syntax\n\n\n\n\nHelp view data and objects\n\n\n\n\nEnable easy integration of R code into documents with Quarto\n\n\n\n\nIt can also…\n\nManage git repositories\nRun interactive tutorials\nHandle other languages like C++, Python, SQL, HTML, and shell scripting"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#selling-you-on-quarto",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#selling-you-on-quarto",
    "title": "CSSS 508 • Lecture 1",
    "section": "Selling You on Quarto",
    "text": "Selling You on Quarto\nBuilt upon many of the developments of the R Markdown ecosystem, Quarto distills them into one coherent system and additionally expands its functionality by supporting other programming languages besides R, including Python and Julia."
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#selling-you-on-quarto-1",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#selling-you-on-quarto-1",
    "title": "CSSS 508 • Lecture 1",
    "section": "Selling You on Quarto",
    "text": "Selling You on Quarto\nThe ability to create Quarto files in R is a powerful advantage. It allows us to:\n\n\nDocument analyses by combining text, code, and output\n\nNo copying and pasting into Word\nEasy for collaborators to understand\nShow as little or as much code as you want\n\n\nProduce many different document types as output\n\nPDF documents\nHTML webpages and reports\nWord and PowerPoint documents\n\nPresentations (like these slides)\nBooks\nTheses/Dissertations 😉🎓\nWebsites (like the one for this course!)\n\n\nWorks with LaTeX and HTML for math and more formatting control\n\n\n\nWe’ll get back to this shortly!"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#selling-you-on-quarto-2",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#selling-you-on-quarto-2",
    "title": "CSSS 508 • Lecture 1",
    "section": "Selling You on Quarto",
    "text": "Selling You on Quarto\nThe ability to create Quarto files in R is a powerful advantage. It allows us to:\n\nProduce many different document types as output\n\n\n\nPDF documents\nHTML webpages and reports\nWord and PowerPoint documents\n\nPresentations (like these slides)\nBooks\nTheses/Dissertations 😉🎓\nWebsites (like the one for this course!)\nWorks with LaTeX and HTML for math and more formatting control\n\n\n\nWe’ll get back to this shortly!"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#downloading-r-and-rstudio",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#downloading-r-and-rstudio",
    "title": "CSSS 508 • Lecture 1",
    "section": "Downloading R and RStudio",
    "text": "Downloading R and RStudio\nIf you don’t already have R and RStudio on your machine, now is the time to do so!"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#getting-started",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#getting-started",
    "title": "CSSS 508 • Lecture 1",
    "section": "Getting Started",
    "text": "Getting Started\nOpen up RStudio now and choose File &gt; New File &gt; R Script.\nThen, let’s get oriented with the interface:\n\n\nTop Left: Code editor pane, data viewer (browse with tabs)\nBottom Left: Console for running code (&gt; prompt)\nTop Right: List of objects in environment, code history tab.\nBottom Right: Tabs for browsing files, viewing plots, managing packages, and viewing help files."
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#getting-started-1",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#getting-started-1",
    "title": "CSSS 508 • Lecture 1",
    "section": "Getting Started",
    "text": "Getting Started\nOpen up RStudio now and choose File &gt; New File &gt; R Script.\nThen, let’s get oriented with the interface:\n\n\nTop Left: Code editor pane, data viewer (browse with tabs)\nBottom Left: Console for running code (&gt; prompt)\nTop Right: List of objects in environment, code history tab.\nBottom Right: Tabs for browsing files, viewing plots, managing packages, and viewing help files."
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#downloading-r-and-rstudio-1",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#downloading-r-and-rstudio-1",
    "title": "CSSS 508 • Lecture 1",
    "section": "Downloading R and RStudio",
    "text": "Downloading R and RStudio\nIf you don’t already have R and RStudio on your machine, now is the time to do so!\n\n\nGo to the course homepage, https://vsass.github.io/CSSS508\n\nClick the Download R link and download R to your machine.\nAfterwards, click the Download RStudio link and download RStudio to your machine.\nLastly, click the Download Quarto link and download Quarto to your machine.\n\n\n\nAlright, that’s it for lecture today! I’ll see most of you over in Savery 117 for our lab section and I’ll see the rest of you there on Thursday!"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#getting-started-background-image-httpsrstudio.github.iocheatsheetsrstudio-ide.pdf",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#getting-started-background-image-httpsrstudio.github.iocheatsheetsrstudio-ide.pdf",
    "title": "CSSS 508 • Lecture 1",
    "section": "Getting Started {background-image = “https://rstudio.github.io/cheatsheets/rstudio-ide.pdf”}",
    "text": "Getting Started {background-image = “https://rstudio.github.io/cheatsheets/rstudio-ide.pdf”}\nOpen up RStudio now and choose File &gt; New File &gt; R Script.\nThen, let’s get oriented with the interface:\n\n\nTop Left: Code editor pane, data viewer (browse with tabs)\nBottom Left: Console for running code (&gt; prompt)\nTop Right: List of objects in environment, code history tab.\nBottom Right: Tabs for browsing files, viewing plots, managing packages, and viewing help files."
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#background-iframehttpsrstudio.github.iocheatsheetsrstudio-ide.pdf-background-interactive-true",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#background-iframehttpsrstudio.github.iocheatsheetsrstudio-ide.pdf-background-interactive-true",
    "title": "CSSS 508 • Lecture 1",
    "section": "{background-iframe=“https://rstudio.github.io/cheatsheets/rstudio-ide.pdf” background-interactive = true}",
    "text": "{background-iframe=“https://rstudio.github.io/cheatsheets/rstudio-ide.pdf” background-interactive = true}"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#background-imageimagesrstudio-panes-labeled.jpeg-background-size-80",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#background-imageimagesrstudio-panes-labeled.jpeg-background-size-80",
    "title": "CSSS 508 • Lecture 1",
    "section": "{background-image=“images/rstudio-panes-labeled.jpeg” background-size: 80%}",
    "text": "{background-image=“images/rstudio-panes-labeled.jpeg” background-size: 80%}"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#editing-and-running-code",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#editing-and-running-code",
    "title": "CSSS 508 • Lecture 1",
    "section": "Editing and Running Code",
    "text": "Editing and Running Code\nThere are several ways to run R code in RStudio:\n\n\nHighlight lines in the editor window and click Run at the top or hit Ctrl+Enter or ⌘+Enter to run them all."
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#incomplete-code",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#incomplete-code",
    "title": "CSSS 508 • Lecture 1",
    "section": "Incomplete Code",
    "text": "Incomplete Code\nIf you mess up (e.g. leave off a parenthesis), R might show a + sign prompting you to finish the command:\n\n&gt; (11-2\n+\n\nFinish the command or hit Esc to get out of this."
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#r-as-a-calculator",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#r-as-a-calculator",
    "title": "CSSS 508 • Lecture 1",
    "section": "R as a Calculator",
    "text": "R as a Calculator\nIn the console, type 123 + 456 + 789 and hit Enter.\n\n\n123 + 456 + 789\n\n[1] 1368\n\n\n\n\nThe [1] in the output indicates the numeric index of the first element on that line.\n\n\nNow in your blank R document in the editor, try typing the line sqrt(400) and either clicking Run or hitting Ctrl+Enter or ⌘+Enter.\n\n\n\nsqrt(400)\n\n[1] 20"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#functions-and-help",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#functions-and-help",
    "title": "CSSS 508 • Lecture 1",
    "section": "Functions and Help",
    "text": "Functions and Help\nsqrt() is an example of a function in R.\nIf we didn’t have a good guess as to what sqrt() will do, we can type ?sqrt in the console and look at the Help panel on the right.\n\n?sqrt\n\nArguments are the inputs to a function. In this case, the only argument to sqrt() is x which can be a number or a vector of numbers.\nHelp files provide documentation on how to use functions and what functions produce."
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#objects",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#objects",
    "title": "CSSS 508 • Lecture 1",
    "section": "Objects",
    "text": "Objects\nR stores everything as an object, including data, functions, models, and output.\n\nCreating an object can be done using the assignment operator: &lt;- . . .\n\nnew.object &lt;- 144\n\n\n\nOperators like &lt;- are functions that look like symbols but typically sit between their arguments (e.g. numbers or objects) instead of having them inside () like in sqrt(x).\n\n\nWe do math with operators, e.g., x + y. + is the addition operator!"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#calling-objects",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#calling-objects",
    "title": "CSSS 508 • Lecture 1",
    "section": "Calling Objects",
    "text": "Calling Objects\nYou can display or “call” an object simply by using its name.\n\nnew.object\n\n[1] 144\n\n\n\nObject names can contain _ and . in them but cannot begin with numbers. Try to be consistent in naming objects. RStudio auto-complete means long names are better than vague ones!\nGood names save confusion later!\nObject names are CaSe SeNsItIvE!!"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#using-objects",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#using-objects",
    "title": "CSSS 508 • Lecture 1",
    "section": "Using Objects",
    "text": "Using Objects\nAn object’s name represents the information stored in that object, so you can treat the object’s name as if it were the values stored inside. . . .\n\nnew.object + 10\n\n[1] 154\n\nnew.object + new.object\n\n[1] 288\n\nsqrt(new.object)\n\n[1] 12"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#vectors",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#vectors",
    "title": "CSSS 508 • Lecture 1",
    "section": "Vectors",
    "text": "Vectors\nA vector is a series of elements, such as numbers.\n\nYou can create a vector using the function c() which stands for “combine” or “concatenate”. . . .\n\nnew.object &lt;- c(4, 9, 16, 25, 36)\nnew.object\n\n[1]  4  9 16 25 36\n\n\n\n\nIf you name an object the same name as an existing object, it will overwrite it.\n\n\nYou can provide a vector as an argument for many functions. . . .\n\nsqrt(new.object)\n\n[1] 2 3 4 5 6"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#more-complex-objects",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#more-complex-objects",
    "title": "CSSS 508 • Lecture 1",
    "section": "More Complex Objects",
    "text": "More Complex Objects\nThere are other, more complex data types in R which we will discuss later in the quarter! These include matrices, arrays, lists, and dataframes.\nMost data sets you will work with will be read into R and stored as a dataframe, so this course will mainly focus on manipulating and visualizing these objects."
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#quarto",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#quarto",
    "title": "CSSS 508 • Lecture 1",
    "section": "Quarto",
    "text": "Quarto"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#quarto-documents",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#quarto-documents",
    "title": "CSSS 508 • Lecture 1",
    "section": "Quarto Documents",
    "text": "Quarto Documents\nLet’s try making an Quarto file:\n\nChoose File &gt; New File &gt; Quarto Document…\n\nMake sure HTML Output is selected\nIn the Title box call this test document my_first_qmd.qmd and click Create\n\nSave this document somewhere (you can delete it later) (either with File &gt; Save or clicking the 💾 icon towards the top left of the source pane)\nClick the ➡️Render button\nWatch the progress in the Background Jobs tab of the console pane, then gaze upon your result!\n\n\nIf you want to create PDF output in the future, you’ll need to run the following code in your console.\n\ninstall.packages(\"quarto\")\ninstall.packages('tinytex')\ntinytex::install_tinytex()"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#quarto-headers",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#quarto-headers",
    "title": "CSSS 508 • Lecture 1",
    "section": "Quarto Headers",
    "text": "Quarto Headers\nThe header of an .qmd file is a code block, and everything else is part of the main document.\n\n\n---\ntitle: \"Untitled\"\nauthor: \"Victoria Sass\"\ndate: \"October 3, 2023\"\noutput: html_document\n---"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#footnotes",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#footnotes",
    "title": "CSSS 508 • Lecture 1",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nThis thing is the caret: |\nBe careful though, YAML is space-sensitive; indents matter!"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#editing-and-running-code-1",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#editing-and-running-code-1",
    "title": "CSSS 508 • Lecture 1",
    "section": "Editing and Running Code",
    "text": "Editing and Running Code\nThere are several ways to run R code in RStudio:\n\nHighlight lines in the editor window and click Run at the top or hit Ctrl+Enter or ⌘+Enter to run them all.\nWith your caret1 on a line you want to run, hit Ctrl+Enter or ⌘+Enter. Note your caret moves to the next line, so you can run code sequentially with repeated presses.\n\n\n\nType individual lines in the console and press Enter.\n\n\n\n\nIn R Markdown documents, click within a code chunk and click the green arrow to run the chunk. The button beside that runs all prior chunks.\n\n\n\nThe console will show the lines you ran followed by any printed output.\n\nThis thing is the caret: |"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#quarto-headers-1",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#quarto-headers-1",
    "title": "CSSS 508 • Lecture 1",
    "section": "Quarto Headers",
    "text": "Quarto Headers\nThe header of an .qmd file is a code block, and everything else is part of the main document.\n\n---\ntitle: \"Untitled\"\nauthor: \"Victoria Sass\"\ndate: \"October 3, 2023\"\noutput: html_document\n---\n\nTo mess with global formatting, you can modify the header1.\n\noutput:\n  html_document:\n    theme: readable\n\nBe careful though, YAML is space-sensitive; indents matter!"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#r-markdown-syntax",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#r-markdown-syntax",
    "title": "CSSS 508 • Lecture 1",
    "section": "R Markdown Syntax",
    "text": "R Markdown Syntax\n\n\nOutput\nbold/strong emphasis\nitalic/normal emphasis\n\nBlock quote from famous person\n\n\nSyntax\nbold/strong emphasis\nitalic/normal emphasis"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#subheader",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#subheader",
    "title": "CSSS 508 • Lecture 1",
    "section": "Subheader",
    "text": "Subheader\nSubsubheader\n\nBlock quote from famous person ```"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#quarto-syntax",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#quarto-syntax",
    "title": "CSSS 508 • Lecture 1",
    "section": "Quarto Syntax",
    "text": "Quarto Syntax\n\n\nOutput\nbold/strong emphasis italic/normal emphasis \nHeader\n\n\nSubheader\n\n\nSubsubheader\n\n\n\nBlock quote from famous person\n\n\nSyntax\n\n**bold/strong emphasis**\n*italic/normal emphasis*\n  \n  \n  \n# Header\n  \n  \n  \n## Subheader\n  \n\n\n### Subsubheader\n  \n\n\n\n&gt; Block quote from\n&gt; famous person"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#more-r-markdown-syntax",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#more-r-markdown-syntax",
    "title": "CSSS 508 • Lecture 1",
    "section": "More R Markdown Syntax",
    "text": "More R Markdown Syntax\n\n\nOutput\n\nOrdered lists\nAre real easy\nEven with sublists\nOr when lazy with numbering\n\n\nUnordered lists\nAre also real easy\n\nAlso even with sublists\n\n\n\nSyntax\n1. Ordered lists 1. Are real easy 1. Even with sublists 1. Or when lazy with numbering\n* Unordered lists * Are also real easy + Also even with sublists"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#quarto-syntax-continued",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#quarto-syntax-continued",
    "title": "CSSS 508 • Lecture 1",
    "section": "Quarto Syntax Continued",
    "text": "Quarto Syntax Continued\n\n\nOutput\n\nOrdered lists\nAre real easy\n\nEven with sublists\nOr with lazy numbering\n\n\n\n\nUnordered lists\nAre also real easy\n\nAlso even with sublists\n\nAnd subsublists\n\n\n\n\n\n\nSyntax\n\n1. Ordered lists\n1. Are real easy\n    1. Even with sublists\n    1. Or with lazy numbering\n  \n    \n    \n    \n    \n* Unordered lists\n* Are also real easy\n  + Also even with sublists\n    - And subsublists"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#formulae-and-syntax",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#formulae-and-syntax",
    "title": "CSSS 508 • Lecture 1",
    "section": "Formulae and Syntax",
    "text": "Formulae and Syntax\n\n\nOutput\nInclude math \\(y= \\left( \\frac{2}{3} \\right)^2\\) inline.\nOr centered on your page like so:\n\\[\\frac{1}{n} \\sum_{i=1}^{n} x_i = \\bar{x}_n\\]\nOr write code-looking font.\nOr a block of code:\n\ny &lt;- 1:5\nz &lt;- y^2\n\n\nSyntax\nInclude math $y= \\left(\\frac{2}{3} \\right)^2$ inline. \n\nOr centered on your page like so: \n  \n$$\\frac{1}{n} \\sum_{i=1}^{n}x_i = \\bar{x}_n$$\n\n\n  \n  \nOr write`code-looking font`.\n\nOr a block of code:\n\n```{r}\ny &lt;- 1:5\nz &lt;- y^2\n```"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#check",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#check",
    "title": "CSSS 508 • Lecture 1",
    "section": "Check",
    "text": "Check\n---\ntitle: \"My document\"\n---\n\nSome markdown content.\n\n```{r}\n1 + 1\n```\n\nSome additional markdown content."
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#quarto-tinkering",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#quarto-tinkering",
    "title": "CSSS 508 • Lecture 1",
    "section": "Quarto Tinkering",
    "text": "Quarto Tinkering\nQuarto docs can be modified in many ways. Visit these links for more information.\n\nWays to modify the overall document appearance\nWays to format parts of your document\nGetting started with Quarto"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#r-code-in-quarto",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#r-code-in-quarto",
    "title": "CSSS 508 • Lecture 1",
    "section": "R Code in Quarto",
    "text": "R Code in Quarto\nInside RMarkdown, lines of R code are called chunks. Code is sandwiched between sets of three backticks and {r}. This chunk of code…\n```{r}\nsummary(cars)\n```\nProduces this output in your document:\n\nsummary(cars)\n\n     speed           dist       \n Min.   : 4.0   Min.   :  2.00  \n 1st Qu.:12.0   1st Qu.: 26.00  \n Median :15.0   Median : 36.00  \n Mean   :15.4   Mean   : 42.98  \n 3rd Qu.:19.0   3rd Qu.: 56.00  \n Max.   :25.0   Max.   :120.00"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#chunk-options",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#chunk-options",
    "title": "CSSS 508 • Lecture 1",
    "section": "Chunk Options",
    "text": "Chunk Options\nChunks have options that control what happens with their code. They are specified as special comments at the top of a block. For example:\n```{r}\n#| label: bar-chart\n#| eval: false\n#| fig-cap: \"A line plot on a polar axis\"\n```"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#chunk-options-1",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#chunk-options-1",
    "title": "CSSS 508 • Lecture 1",
    "section": "Chunk Options",
    "text": "Chunk Options\nSome useful and common options include:\n\necho: false - Keeps R code from being shown in the document\neval: false - Shows R code in the document without running it\ninclude: false - Hides all output but still runs code (good for setup chunks where you load packages!)\noutput: false - Doesn’t include the results of that code chunk in the output\ncache: true - Saves results of running that chunk so if it takes a while, you won’t have to re-run it each time you re-knit the document\nfig.height: 5, fig.width: 5 - modify the dimensions of any plots that are generated in the chunk (units are in inches)\nfig.cap: \"Text\" - add a caption to your figure in the chunk"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#playing-with-chunk-options",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#playing-with-chunk-options",
    "title": "CSSS 508 • Lecture 1",
    "section": "Playing with Chunk Options",
    "text": "Playing with Chunk Options\nTry adding or changing the chunk options (separated by commas) for the two chunks in my_first_Rmd.qmd and re-knitting to check what happens.\n\n```{r}\n#| eval: false\nsummary(cars)\n```"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#in-line-r-code",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#in-line-r-code",
    "title": "CSSS 508 • Lecture 1",
    "section": "In-Line R code",
    "text": "In-Line R code\nSometimes we want to insert a value directly into our text. We do that using code in single backticks starting off with r.\n\nFour score and seven years ago is the same as `r 4*20 + 7` years.\n\n\nFour score and seven years ago is the same as 87 years.\n\n\n\nMaybe we’ve saved a variable in a chunk we want to reference in the text:\n\nx &lt;- sqrt(77) # &lt;- is how we assign objects\n\n\n\nThe value of `x` rounded to the nearest two decimals is `r round(x, 2)`.\n\n\nThe value of x rounded to the nearest two decimals is 8.77."
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#this-is-amazing",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#this-is-amazing",
    "title": "CSSS 508 • Lecture 1",
    "section": "This is Amazing!",
    "text": "This is Amazing!\nHaving R dump values directly into your document protects you from silly mistakes:\n\n\nNever wonder “how did I come up with this quantity?” ever again: Just look at your formula in your .qmd file!\n\n\n\n\nConsistency! No “find/replace” mishaps; reference a variable in-line throughout your document without manually updating if the calculation changes (e.g. reporting sample sizes).\n\n\n\n\nYou are more likely to make a typo in a “hard-coded” number than you are to write R code that somehow runs but gives you the wrong thing."
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#example-keeping-dates",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#example-keeping-dates",
    "title": "CSSS 508 • Lecture 1",
    "section": "Example: Keeping Dates",
    "text": "Example: Keeping Dates\nIn your YAML header, make the date come from R’s Sys.time() function by changing:\n\ndate: \"October 3, 2023\"\nto\ndate: \"`r Sys.time()`\""
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#whats-up-with-cars",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#whats-up-with-cars",
    "title": "CSSS 508 • Lecture 1",
    "section": "What’s Up with cars?",
    "text": "What’s Up with cars?\nIn the sample R Markdown document you are working on, we can load the built-in data cars, which loads as a dataframe, a type of object mentioned earlier. Then, we can look at it in a couple different ways.\n\ndata(cars) loads this dataframe into the Global Environment.\n\n\nView(cars) pops up a Viewer pane (“interactive” use only, don’t put in R Markdown document!).\n\n\n\nhead(cars, 5) # prints first 5 rows, can use tail() too\n\n  speed dist\n1     4    2\n2     4   10\n3     7    4\n4     7   22\n5     8   16"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#tell-me-more-about-cars",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#tell-me-more-about-cars",
    "title": "CSSS 508 • Lecture 1",
    "section": "Tell Me More About cars\n",
    "text": "Tell Me More About cars\n\nstr() displays the structure of an object:\n\nstr(cars) # str[ucture]\n\n'data.frame':   50 obs. of  2 variables:\n $ speed: num  4 4 7 7 8 9 10 10 10 11 ...\n $ dist : num  2 10 4 22 16 10 18 26 34 17 ...\n\n\n\nsummary() displays summary information 1:\n\nsummary(cars)\n\n     speed           dist       \n Min.   : 4.0   Min.   :  2.00  \n 1st Qu.:12.0   1st Qu.: 26.00  \n Median :15.0   Median : 36.00  \n Mean   :15.4   Mean   : 42.98  \n 3rd Qu.:19.0   3rd Qu.: 56.00  \n Max.   :25.0   Max.   :120.00  \n\n\n\nNote R is object-oriented: summary() provides different information for different types of objects!"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#ugly-pictures-of-cars",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#ugly-pictures-of-cars",
    "title": "CSSS 508 • Lecture 1",
    "section": "Ugly Pictures of cars\n",
    "text": "Ugly Pictures of cars\n\nhist() generates a histogram of a vector. Note you can access a vector that is a column of a dataframe using $, the extract operator.\n\n\n\nhist(cars$speed) # Histogram\n\n\n\n\n\n\nhist(cars$dist)"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#drawing-slightly-less-ugly-pictures",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#drawing-slightly-less-ugly-pictures",
    "title": "CSSS 508 • Lecture 1",
    "section": "Drawing Slightly Less Ugly Pictures",
    "text": "Drawing Slightly Less Ugly Pictures\n\nhist(cars$dist,\n     xlab = \"Distance (ft)\", # X axis label\n     main = \"Observed stopping distances of cars\") # Title"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#math-with-cars",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#math-with-cars",
    "title": "CSSS 508 • Lecture 1",
    "section": "Math with cars\n",
    "text": "Math with cars\n\n\ndist_mean  &lt;- mean(cars$dist) \nprint(dist_mean)\n\n[1] 42.98\n\nspeed_mean &lt;- mean(cars$speed)\nprint(speed_mean)\n\n[1] 15.4"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#drawing-still-ugly-pictures",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#drawing-still-ugly-pictures",
    "title": "CSSS 508 • Lecture 1",
    "section": "Drawing Still Ugly Pictures",
    "text": "Drawing Still Ugly Pictures\n\nplot(dist ~ speed, data = cars,\n     xlab = \"Speed (mph)\",\n     ylab = \"Stopping distance (ft)\",\n     main = \"Speeds and stopping distances of cars\",\n     pch = 16) # Point size"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#swiss-time",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#swiss-time",
    "title": "CSSS 508 • Lecture 1",
    "section": "\nswiss Time",
    "text": "swiss Time\nLet’s switch gears to the swiss data frame built in to R.\n\nFirst, use ?swiss to see what things mean.\n\n\nThen, load it using data(swiss)\n\n\nAdd chunks to your Quarto document inspecting swiss, defining variables, doing some exploratory plots using hist or plot.\nYou might experiment with colors and shapes."
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#looking-at-swiss",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#looking-at-swiss",
    "title": "CSSS 508 • Lecture 1",
    "section": "Looking at swiss\n",
    "text": "Looking at swiss\n\n\npairs(swiss, pch = 8, col = \"violet\",\n      main = \"Pairwise comparisons of Swiss variables\")\n\n\n\n\n\n\npairs() is a pairwise scatterplot function. Good for a quick look at small datasets, but mostly useless for larger data."
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#installing-packages",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#installing-packages",
    "title": "CSSS 508 • Lecture 1",
    "section": "Installing Packages",
    "text": "Installing Packages\nLet’s make a table that looks a little less code-y in the output. To do this, we’ll want to install a package called gt. Packages contain pre-made functions and/or data we can use. R’s strength is its wide variety of packages!\nIn the console: install.packages(\"gt\").\n\n\nNote that unlike the library() command, the name of a package to be installed must be in quotes. This is because the name here is a search term (text, not an object!) while for library() it is an actual R object.\n\n\n\n\nOnce you install a package, you don’t need to re-install it until you update R. Consequently, you should not include install.packages() in any markdown document or R script!"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#making-tables",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#making-tables",
    "title": "CSSS 508 • Lecture 1",
    "section": "Making Tables",
    "text": "Making Tables\n\nlibrary(pander) # loads pander, do once in your session\npander(summary(swiss), style = \"rmarkdown\", split.tables = 120)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFertility\nAgriculture\nExamination\nEducation\nCatholic\nInfant.Mortality\n\n\n\nMin. :35.00\nMin. : 1.20\nMin. : 3.00\nMin. : 1.00\nMin. : 2.150\nMin. :10.80\n\n\n1st Qu.:64.70\n1st Qu.:35.90\n1st Qu.:12.00\n1st Qu.: 6.00\n1st Qu.: 5.195\n1st Qu.:18.15\n\n\nMedian :70.40\nMedian :54.10\nMedian :16.00\nMedian : 8.00\nMedian : 15.140\nMedian :20.00\n\n\nMean :70.14\nMean :50.66\nMean :16.49\nMean :10.98\nMean : 41.144\nMean :19.94\n\n\n3rd Qu.:78.45\n3rd Qu.:67.65\n3rd Qu.:22.00\n3rd Qu.:12.00\n3rd Qu.: 93.125\n3rd Qu.:21.70\n\n\nMax. :92.50\nMax. :89.70\nMax. :37.00\nMax. :53.00\nMax. :100.000\nMax. :26.60\n\n\n\n\n\n\n\n\nNote that we put the summary(swiss) function call inside the pander() call. This is called nesting functions and is very common. I’ll introduce a method next week to avoid confusion from nesting too many functions inside each other"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#data-look-a-little-nicer-this-way",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#data-look-a-little-nicer-this-way",
    "title": "CSSS 508 • Lecture 1",
    "section": "Data Look a Little Nicer This Way",
    "text": "Data Look a Little Nicer This Way\n\npander(head(swiss, 5), style = \"rmarkdown\", split.tables = 120)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \nFertility\nAgriculture\nExamination\nEducation\nCatholic\nInfant.Mortality\n\n\n\nCourtelary\n80.2\n17\n15\n12\n9.96\n22.2\n\n\nDelemont\n83.1\n45.1\n6\n9\n84.84\n22.2\n\n\nFranches-Mnt\n92.5\n39.7\n5\n5\n93.4\n20.2\n\n\nMoutier\n85.8\n36.5\n12\n7\n33.77\n20.3\n\n\nNeuveville\n76.9\n43.5\n17\n15\n5.16\n20.6\n\n\n\n\n\n\n\n\nsplit.tables = 120 tells pander to break a table into multiple tables if it will be over 120 characters wide. Adjust this to get widths just right."
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#homework-1",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#homework-1",
    "title": "CSSS 508 • Lecture 1",
    "section": "Homework #1",
    "text": "Homework #1\nWrite up a .qmd file showing some exploratory analyses of the Swiss fertility data. Upload both the .qmd file and the .html file to Canvas. You must upload BOTH for credit.\n\n\nMix in-line R calculations, R output, and plots with text describing the relationships you see. Include at least two plots. You are encouraged to include more! You must use in-line R calculations/references at least once (e.g. functions like nrow(), mean(), sd(), cor(), median(), min()) and may not hard-code any numbers referenced in your text.\n\n\n\nYour document should be pleasant for a peer to look at, with some organization using sections or lists, and all plots labeled clearly. Use chunk options echo and output to limit the code/output you show in the .html. Discussion of specific values should be summarized in sentences in your text—not as printed code and output—and rounded so as not to be absurdly precise (e.g. round x with round(x, 2)).\n\n\n\nTake a look at the template provided on our course website for an idea of what this might look like using a different dataset."
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#grading-rubric",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#grading-rubric",
    "title": "CSSS 508 • Lecture 1",
    "section": "Grading Rubric",
    "text": "Grading Rubric\n\n0 - Didn’t turn anything in.\n\n\n1 - Turned in but low effort, ignoring many directions.\n\n\n\n2 - Decent effort, followed directions with some minor issues.\n\n\n\n3 - Nailed it!"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#due-dates",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#due-dates",
    "title": "CSSS 508 • Lecture 1",
    "section": "Due dates",
    "text": "Due dates\n\nSection AA:\n\nHomework #1 due Tuesday, October 10th (before lecture)\nPeer grading due Sunday, October 15th (end of day)\n\n\n\n\n\nSection AB:\n\nHomework #1 due Thursday, October 12th (before lab)\nPeer grading due Tuesday, October 17th (before lecture)"
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#packages",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#packages",
    "title": "CSSS 508 • Lecture 2",
    "section": "Packages",
    "text": "Packages\nPackages are collections of functions and tools that make your life easier! The best part of R is the huge number of user-created packages. The Packages tab in the bottom-right pane of RStudio lists your installed packages.\n\nTo install a new package in R, run the line of code:\n\ninstall.packages(\"gapminder\") \n\nWe always install packages in the console, because we only want to do it once"
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#comments",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#comments",
    "title": "CSSS 508 • Lecture 2",
    "section": "Comments",
    "text": "Comments\nYou may have noticed that sometimes I have written code that looks like this:\n\nnew.object &lt;- 1:10 # Making vector of 1 to 10 \n\n# is known as the commenting symbol in R!\nAnything written on the same line after # will not be run by R.\nThis is useful for annotating your code to remind you (or others) what you are doing in a section.1\nIn Quarto documents, comments only work in chunks. Outside of a chunk, # creates headers like “comments” at the top of this slide."
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#saving-files",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#saving-files",
    "title": "CSSS 508 • Lecture 2",
    "section": "Saving Files",
    "text": "Saving Files\nYou can save an R object on your computer as a file to open later:\n\nsave(new.object, file = \"new_object.RData\")\n\n\nYou can open saved files in R as well:\n\nload(\"new_object.RData\")\n\n\n\nBut where are these files being saved and loaded from?"
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#working-directories",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#working-directories",
    "title": "CSSS 508 • Lecture 2",
    "section": "Working Directories",
    "text": "Working Directories\nR saves files and looks for files to open in your current working directory. You can ask R what this is:\n\ngetwd()\n\n[1] \"/Users/victoriasass/Desktop/GitHub/CSSS508/Lectures/Lecture2\"\n\n\n\nSimilarly, we can set a working directory like so:\n\nsetwd(\"C:/Users/vsass/CSSS508/HW2\")\n\n\n\nDon’t set a working directory in R Markdown documents! They automatically set the directory they are in as the working directory."
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#loading-packages",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#loading-packages",
    "title": "CSSS 508 • Lecture 2",
    "section": "Loading Packages",
    "text": "Loading Packages\nInstalling a packages does not mean it’s loaded in our R session. To do so, we call the package:\n\nlibrary(gapminder)\n\nNOTE: Use quotes when installing packages, but not when loading packages!\n\nWe need to run this code every time we open a new R session: Where should we put this code?\n\n\nAnswer: In qmd files, and not the console!"
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#managing-files",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#managing-files",
    "title": "CSSS 508 • Lecture 2",
    "section": "Managing Files",
    "text": "Managing Files\nWhen managing R projects, it is normally best to give each project (such as a homework assignment) its own folder. I use the following system:\n\n\nEvery class or project has its own folder . . .\nEach assignment or task has a folder inside that, which is the working directory for that item.\n\n\n\n\n\n.qmd and .R files are named clearly and completely\n\n\n\nFor example, this presentation is located and named this: GitHub/CSSS508/Lectures/Lecture1/CSSS508_Lecture1.qmd\n\n\nYou can use whatever system you want, but be consistent so your projects are organized! You don’t want to lose work by losing or overwriting files!\n\n\nFor large projects containing many files, I recommend using RStudio’s built in project management system found in the top right of the RStudio window.\n\n\nFor journal articles I recommend Ben Marwick’s rrtools and huskydown for UW dissertations and theses."
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#file-types",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#file-types",
    "title": "CSSS 508 • Lecture 2",
    "section": "File Types",
    "text": "File Types\nWe mainly work with three types of file in this class:\n\n\n\n.qmd: These are markdown syntax files, where you write code to make documents.\n\n\n\n\n\n.R: These are R syntax files, where you write code to process and analyze data without making an output document1.\n\n\n\n\n\n.html or .pdf: These are the output documents created when you Render a quarto markdown document.\n\n\n\nMake sure you understand the difference between the uses of these file types! Please ask for clarification if needed!\n\nWhile beyond the scope of this class, you can use the source() function to run a .R script file inside a .Rmd or .R file. Using this you can break a large project up into multiple files but still run it all at once!"
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#gapminder-data",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#gapminder-data",
    "title": "CSSS 508 • Lecture 2",
    "section": "Gapminder Data",
    "text": "Gapminder Data\nWe’ll be working with data from Hans Rosling’s Gapminder project. An excerpt of these data can be accessed through an R package called gapminder, cleaned and assembled by Jenny Bryan at UBC.\n\nIn the console: install.packages(\"gapminder\")\nLoad the package and data:\n\nlibrary(gapminder)"
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#check-out-gapminder",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#check-out-gapminder",
    "title": "CSSS 508 • Lecture 2",
    "section": "Check Out Gapminder",
    "text": "Check Out Gapminder\nThe data frame we will work with is called gapminder, available once you have loaded the package. Let’s see its structure:\n\n\nstr(gapminder)\n\ntibble [1,704 × 6] (S3: tbl_df/tbl/data.frame)\n $ country  : Factor w/ 142 levels \"Afghanistan\",..: 1 1 1 1 1 1 1 1 1 1 ...\n $ continent: Factor w/ 5 levels \"Africa\",\"Americas\",..: 3 3 3 3 3 3 3 3 3 3 ...\n $ year     : int [1:1704] 1952 1957 1962 1967 1972 1977 1982 1987 1992 1997 ...\n $ lifeExp  : num [1:1704] 28.8 30.3 32 34 36.1 ...\n $ pop      : int [1:1704] 8425333 9240934 10267083 11537966 13079460 14880372 12881816 13867957 16317921 22227415 ...\n $ gdpPercap: num [1:1704] 779 821 853 836 740 ..."
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#whats-interesting-here",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#whats-interesting-here",
    "title": "CSSS 508 • Lecture 2",
    "section": "What’s Interesting Here?",
    "text": "What’s Interesting Here?\n\n\nFactor variables country and continent\n\nFactors are categorical data with an underlying numeric representation\nWe’ll spend a lot of time on factors later!\n\n\n\n\n\nMany observations: \\(n=1704\\) rows\n\n\n\n\nFor each observation, a few variables: \\(p=6\\) columns\n\n\n\n\n\nA nested/hierarchical structure: year in country in continent\n\nThese are panel data!"
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#basics-of-ggplot2",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#basics-of-ggplot2",
    "title": "CSSS 508 • Lecture 2",
    "section": "Basics of ggplot2\n",
    "text": "Basics of ggplot2\n\n\n\n\nChina &lt;- subset(gapminder,\n          gapminder$country == \"China\")\nplot(lifeExp ~ year, \n     data = China, \n     xlab = \"Year\", \n     ylab = \"Life expectancy\",\n     main = \"Life expectancy in China\", \n     col = \"red\", \n     pch = 16)\n\nThis plot is made with one function and many arguments.\n\n\n\n\n\n\n\n\n\n\nNote: Don’t worry about the code used to create the object China. We’ll explore data manipulation next week!"
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#fancier-ggplot",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#fancier-ggplot",
    "title": "CSSS 508 • Lecture 2",
    "section": "Fancier: ggplot\n",
    "text": "Fancier: ggplot\n\n\n\n\nggplot(data = China, \n       aes(x = year, y = lifeExp)) +\n  geom_point(color = \"red\", size = 3) +\n  xlab(\"Year\") + \n  ylab(\"Life expectancy\") +\n  ggtitle(\"Life expectancy in China\") +\n  theme_bw(base_size=18)\n\nThis ggplot is made with many functions and fewer arguments in each."
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#ggplot2",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#ggplot2",
    "title": "CSSS 508 • Lecture 2",
    "section": "ggplot2",
    "text": "ggplot2\nThe ggplot2 package provides an alternative toolbox for plotting.\n\n# install.packages(\"ggplot2\")\nlibrary(ggplot2)\n\nThe core idea underlying this package is the layered grammar of graphics: we can break up elements of a plot into pieces and combine them.\n\nggplots are a bit harder to create, but are usually:\n\nprettier,\nmore professional, and\nmore customizable!"
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#structure-of-a-ggplot",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#structure-of-a-ggplot",
    "title": "CSSS 508 • Lecture 2",
    "section": "Structure of a ggplot",
    "text": "Structure of a ggplot\nggplot graphics objects consist of two primary components:\n\n\n\nLayers, the components of a graph.\n\nWe add layers to a ggplot object using +.\nThis includes adding lines, shapes, and text to a plot.\n\n\n\n\n\n\n\nAesthetics, which determine how the layers appear.\n\nWe set aesthetics using arguments (e.g. color=\"red\") inside layer functions.\nThis includes modifying locations, colors, and sizes of the layers."
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#structure-of-a-ggplot-1",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#structure-of-a-ggplot-1",
    "title": "CSSS 508 • Lecture 2",
    "section": "Structure of a ggplot",
    "text": "Structure of a ggplot\nggplot graphics objects consist of two primary components:\n\n\n\nLayers, the components of a graph.\n\nWe add layers to a ggplot object using +.\nThis includes adding lines, shapes, and text to a plot.\n\n\n\n\n\n\n\nAesthetics, which determine how the layers appear.\n\nWe set aesthetics using arguments (e.g. color=\"red\") inside layer functions.\nThis includes modifying locations, colors, and sizes of the layers."
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#layers",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#layers",
    "title": "CSSS 508 • Lecture 2",
    "section": "Layers",
    "text": "Layers\nLayers are the components of the graph, such as:\n\n\nggplot(): initializes basic plotting object, specifies input data\n\ngeom_point(): layer of scatterplot points\n\ngeom_line(): layer of lines\n\ngeom_histogram(): layer of a histogram\n\nggtitle(), xlab(), ylab(): layers of labels\n\nfacet_wrap(): layer creating multiple plot panels\n\ntheme_bw(): layer replacing default gray background with black-and-white\n\nLayers are separated by a + sign. For clarity, I usually put each layer on a new line.\n\n\nBe sure to end each line with the +. The code will not run if a new line begins with a +."
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#aesthetics",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#aesthetics",
    "title": "CSSS 508 • Lecture 2",
    "section": "Aesthetics",
    "text": "Aesthetics\nAesthetics control the appearance of the layers:\n\n\nx, y: \\(x\\) and \\(y\\) coordinate values to use\n\ncolor: set color of elements based on some data value\n\ngroup: describe which points are conceptually grouped together for the plot (often used with lines)\n\nsize: set size of points/lines based on some data value (greater than 0)\n\nalpha: set transparency based on some data value (between 0 and 1)"
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#layered-grammar-of-graphics",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#layered-grammar-of-graphics",
    "title": "CSSS 508 • Lecture 2",
    "section": "Layered grammar of graphics",
    "text": "Layered grammar of graphics"
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#examples-basic-jargon-in-action",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#examples-basic-jargon-in-action",
    "title": "CSSS 508 • Lecture 2",
    "section": "Examples: Basic Jargon in Action!",
    "text": "Examples: Basic Jargon in Action!\nWe’ll now build up two ggplots together that demonstrate common layers and aesthetics."
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#axis-labels-points-no-background",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#axis-labels-points-no-background",
    "title": "CSSS 508 • Lecture 2",
    "section": "Axis Labels, Points, No Background",
    "text": "Axis Labels, Points, No Background\n1: Base Plot\n\n\n\nggplot(data = China,  \n       aes(x = year, y = lifeExp)) \n\n\n\n\n\n\n\n\n\n\n\nInitialize the plot with ggplot() and x and y aesthetics mapped to variables. These aesthetics will be accessible to any future layers since they’re in the primary layer."
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#axis-labels-points-no-background-1",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#axis-labels-points-no-background-1",
    "title": "CSSS 508 • Lecture 2",
    "section": "Axis Labels, Points, No Background",
    "text": "Axis Labels, Points, No Background\n2: Scatterplot\n\n\n\nggplot(data = China, \n       aes(x = year, y = lifeExp)) +\n  geom_point()\n\n\n\n\n\n\n\n\n\n\n\nAdd a scatterplot layer."
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#axis-labels-points-no-background-2",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#axis-labels-points-no-background-2",
    "title": "CSSS 508 • Lecture 2",
    "section": "Axis Labels, Points, No Background",
    "text": "Axis Labels, Points, No Background\n3: Point Color and Size\n\n\n\nggplot(data = China, \n       aes(x = year, y = lifeExp)) +\n  geom_point(color = \"red\", size = 3)\n\n\n\n\n\n\n\n\n\n\n\nSet aesthetics to make the points larger and red."
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#axis-labels-points-no-background-3",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#axis-labels-points-no-background-3",
    "title": "CSSS 508 • Lecture 2",
    "section": "Axis Labels, Points, No Background",
    "text": "Axis Labels, Points, No Background\n4: X-Axis Label\n\n\n\nggplot(data = China, \n       aes(x = year, y = lifeExp)) +\n  geom_point(color = \"red\", size = 3) +\n  xlab(\"Year\")\n\n\n\n\n\n\n\n\n\n\n\nAdd a layer to capitalize the x-axis label."
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#axis-labels-points-no-background-4",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#axis-labels-points-no-background-4",
    "title": "CSSS 508 • Lecture 2",
    "section": "Axis Labels, Points, No Background",
    "text": "Axis Labels, Points, No Background\n5: Y-Axis Label\n\n\n\nggplot(data = China, \n       aes(x = year, y = lifeExp)) +\n  geom_point(color = \"red\", size = 3) +\n  xlab(\"Year\") + \n  ylab(\"Life expectancy\")\n\n\n\n\n\n\n\n\n\n\n\nAdd a layer to clean up the y-axis label."
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#axis-labels-points-no-background-5",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#axis-labels-points-no-background-5",
    "title": "CSSS 508 • Lecture 2",
    "section": "Axis Labels, Points, No Background",
    "text": "Axis Labels, Points, No Background\n6: Title\n\n\n\nggplot(data = China, \n       aes(x = year, y = lifeExp)) +\n  geom_point(color = \"red\", size = 3) +\n  xlab(\"Year\") + \n  ylab(\"Life expectancy\") +\n  ggtitle(\"Life expectancy in China\")\n\n\n\n\n\n\n\n\n\n\n\nAdd a title layer."
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#axis-labels-points-no-background-6",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#axis-labels-points-no-background-6",
    "title": "CSSS 508 • Lecture 2",
    "section": "Axis Labels, Points, No Background",
    "text": "Axis Labels, Points, No Background\n7: Theme\n\n\n\nggplot(data = China, \n       aes(x = year, y = lifeExp)) +\n  geom_point(color = \"red\", size = 3) +\n  xlab(\"Year\") + \n  ylab(\"Life expectancy\") +\n  ggtitle(\"Life expectancy in China\") +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n\n\nPick a nicer theme with a new layer."
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#axis-labels-points-no-background-7",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#axis-labels-points-no-background-7",
    "title": "CSSS 508 • Lecture 2",
    "section": "Axis Labels, Points, No Background",
    "text": "Axis Labels, Points, No Background\n8: Text Size\n\n\n\nggplot(data = China, \n       aes(x = year, y = lifeExp)) +\n  geom_point(color = \"red\", size = 3) +\n  xlab(\"Year\") + \n  ylab(\"Life expectancy\") +\n  ggtitle(\"Life expectancy in China\") +\n  theme_minimal(base_size=18) \n\n\n\n\n\n\n\n\n\n\n\nIncrease the base text size."
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#plotting-all-countries",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#plotting-all-countries",
    "title": "CSSS 508 • Lecture 2",
    "section": "Plotting All Countries",
    "text": "Plotting All Countries\nWe have a plot we like for China…\n… but what if we want all the countries?"
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#plotting-all-countries-1",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#plotting-all-countries-1",
    "title": "CSSS 508 • Lecture 2",
    "section": "Plotting All Countries",
    "text": "Plotting All Countries\n1: A Mess!\n\n\n\nggplot(data = gapminder,\n       aes(x = year, y = lifeExp)) +\n  geom_point(color = \"red\", size = 3) +\n  xlab(\"Year\") + \n  ylab(\"Life expectancy\") +\n  ggtitle(\"Life expectancy over time\") +\n  theme_minimal(base_size=18)\n\n\n\n\n\n\n\n\n\n\n\nWe can’t tell countries apart! Maybe we could follow lines?"
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#plotting-all-countries-2",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#plotting-all-countries-2",
    "title": "CSSS 508 • Lecture 2",
    "section": "Plotting All Countries",
    "text": "Plotting All Countries\n2: Lines\n\n\n\nggplot(data = gapminder, \n       aes(x = year, y = lifeExp)) +\n  geom_line(color = \"red\", size = 3) + \n  xlab(\"Year\") + \n  ylab(\"Life expectancy\") +\n  ggtitle(\"Life expectancy over time\") +\n  theme_minimal(base_size=18)\n\n\n\n\n\n\n\n\n\n\n\nggplot2 doesn’t know how to connect the lines!"
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#plotting-all-countries-3",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#plotting-all-countries-3",
    "title": "CSSS 508 • Lecture 2",
    "section": "Plotting All Countries",
    "text": "Plotting All Countries\n3: Grouping\n\n\n\nggplot(data = gapminder, \n       aes(x = year, y = lifeExp, \n           group = country)) +\n  geom_line(color = \"red\", size = 3) +\n  xlab(\"Year\") + \n  ylab(\"Life expectancy\") +\n  ggtitle(\"Life expectancy over time\") +\n  theme_minimal(base_size=18)\n\n\n\n\n\n\n\n\n\n\n\nThat looks more reasonable… but the lines are too thick!"
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#plotting-all-countries-4",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#plotting-all-countries-4",
    "title": "CSSS 508 • Lecture 2",
    "section": "Plotting All Countries",
    "text": "Plotting All Countries\n4: Size\n\n\n\nggplot(data = gapminder, \n       aes(x = year, y = lifeExp, \n           group = country)) +\n  geom_line(color = \"red\") +\n  xlab(\"Year\") + \n  ylab(\"Life expectancy\") +\n  ggtitle(\"Life expectancy over time\") +\n  theme_bw(base_size=18)\n\n\n\n\n\n\n\n\n\n\n\nMuch better… but maybe we can do highlight regional differences?"
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#plotting-all-countries-5",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#plotting-all-countries-5",
    "title": "CSSS 508 • Lecture 2",
    "section": "Plotting All Countries",
    "text": "Plotting All Countries\n5: Color\n\n\n\nggplot(data = gapminder, \n       aes(x = year, y = lifeExp, \n           group = country, \n           color = continent)) +\n  geom_line() +\n  xlab(\"Year\") + \n  ylab(\"Life expectancy\") +\n  ggtitle(\"Life expectancy over time\") +\n  theme_bw(base_size=18)\n\n\n\n\n\n\n\n\n\n\n\nPatterns are obvious… but it might be even more impactful if we separate continents completely."
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#plotting-all-countries-6",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#plotting-all-countries-6",
    "title": "CSSS 508 • Lecture 2",
    "section": "Plotting All Countries",
    "text": "Plotting All Countries\n6: Facets\n\n\n\nggplot(data = gapminder, \n       aes(x = year, y = lifeExp, \n           group = country, \n           color = continent)) +\n  geom_line() +\n  xlab(\"Year\") + \n  ylab(\"Life expectancy\") +\n  ggtitle(\"Life expectancy over time\") +\n  theme_bw(base_size=18) +\n  facet_wrap(vars(continent))\n\n\n\n\n\n\n\n\n\n\n\nNow the text is too big!"
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#plotting-all-countries-7",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#plotting-all-countries-7",
    "title": "CSSS 508 • Lecture 2",
    "section": "Plotting All Countries",
    "text": "Plotting All Countries\n7: Text Size\n\n\n\nggplot(data = gapminder, \n       aes(x = year, y = lifeExp, \n           group = country, \n           color = continent)) +\n  geom_line() +\n  xlab(\"Year\") + \n  ylab(\"Life expectancy\") +\n  ggtitle(\"Life expectancy over time\") +\n  theme_bw() +\n  facet_wrap(vars(continent))\n\n\n\n\n\n\n\n\n\n\n\nBetter. Do we even need the legend anymore?"
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#plotting-all-countries-8",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#plotting-all-countries-8",
    "title": "CSSS 508 • Lecture 2",
    "section": "Plotting All Countries",
    "text": "Plotting All Countries\n8: No Legend\n\n\n\nggplot(data = gapminder, \n       aes(x = year, y = lifeExp, \n           group = country, \n           color = continent)) +\n  geom_line() +\n  xlab(\"Year\") + \n  ylab(\"Life expectancy\") +\n  ggtitle(\"Life expectancy over time\") +\n  theme_bw() +\n  facet_wrap(vars(continent)) + \n  theme(legend.position = \"none\")\n\n\n\n\n\n\n\n\n\n\n\nLooking good! But the x-axis still looks a little smooshed :("
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#plotting-all-countries-9",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#plotting-all-countries-9",
    "title": "CSSS 508 • Lecture 2",
    "section": "Plotting All Countries",
    "text": "Plotting All Countries\n8: X-Axis Position\n\n\n\nggplot(data = gapminder, \n       aes(x = year, y = lifeExp, \n           group = country, \n           color = continent)) +\n  geom_line() +\n  xlab(\"Year\") + \n  ylab(\"Life expectancy\") +\n  ggtitle(\"Life expectancy over time\") +\n  theme_bw() +\n  facet_wrap(vars(continent)) + \n  theme(legend.position = \"none\", \n        axis.text.x = element_text(angle = 45))\n\n\n\n\n\n\n\n\n\n\n\nNice!"
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#advanced-ggplot-tools",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#advanced-ggplot-tools",
    "title": "CSSS 508 • Lecture 2",
    "section": "Advanced ggplot tools",
    "text": "Advanced ggplot tools\n(10 minute break!)\nNext, we’ll discuss:\n\nStoring, modifying, and saving ggplots\nAdvanced axis changes (scales, text, ticks)\nLegend changes (scales, colors, locations)"
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#storing-plots",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#storing-plots",
    "title": "CSSS 508 • Lecture 2",
    "section": "Storing Plots",
    "text": "Storing Plots\nWe can assign a ggplot object to a name:\n\nlifeExp_by_year &lt;- \n  ggplot(data = gapminder, \n       aes(x = year, y = lifeExp, \n           group = country, \n           color = continent)) +\n  geom_line() +\n  xlab(\"Year\") + \n  ylab(\"Life expectancy\") +\n  ggtitle(\"Life expectancy over time\") +\n  theme_bw() + \n  facet_wrap(vars(continent)) +\n  theme(legend.position = \"none\")\n\nAfterwards, you can display or modify ggplots…"
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#showing-a-stored-graph",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#showing-a-stored-graph",
    "title": "CSSS 508 • Lecture 2",
    "section": "Showing a Stored Graph",
    "text": "Showing a Stored Graph\n\nlifeExp_by_year"
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#adding-more-layers",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#adding-more-layers",
    "title": "CSSS 508 • Lecture 2",
    "section": "Adding More Layers",
    "text": "Adding More Layers\n\nlifeExp_by_year +\n  facet_wrap(vars(continent), nrow = 1) + \n    theme(legend.position = \"bottom\")"
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#saving-ggplot-plots",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#saving-ggplot-plots",
    "title": "CSSS 508 • Lecture 2",
    "section": "Saving ggplot Plots",
    "text": "Saving ggplot Plots\nIf you want to save a ggplot, use ggsave():\n\nggsave(\"I_saved_a_file.pdf\", plot = lifeExp_by_year,\n       height = 3, width = 5, units = \"in\")\n\nIf you didn’t manually set font sizes, these will usually come out at a reasonable size given the dimensions of your output file."
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#changing-the-axes",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#changing-the-axes",
    "title": "CSSS 508 • Lecture 2",
    "section": "Changing the Axes",
    "text": "Changing the Axes\nWe can modify the axes in a variety of ways, such as:\n\nChange the \\(x\\) or \\(y\\) range using xlim() or ylim() layers\nChange to a logarithmic or square-root scale on either axis: scale_x_log10(), scale_y_sqrt()\nChange where the major/minor breaks are: scale_x_continuous(breaks =, minor_breaks = )"
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#axis-changes",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#axis-changes",
    "title": "CSSS 508 • Lecture 2",
    "section": "Axis Changes",
    "text": "Axis Changes\n\nggplot(data = China, aes(x = year, y = gdpPercap)) +\n    geom_line() +\n    scale_y_log10(breaks = c(1000, 2000, 3000, 4000, 5000)) + \n    xlim(1940, 2010) + ggtitle(\"Chinese GDP per capita\")"
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#precise-legend-position",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#precise-legend-position",
    "title": "CSSS 508 • Lecture 2",
    "section": "Precise Legend Position",
    "text": "Precise Legend Position\n\nlifeExp_by_year +\n  theme(legend.position = c(0.8, 0.2)) \n\n\nInstead of coordinates, you could also use “top”, “bottom”, “left”, or “right”."
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#scales-for-color-shape-etc.",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#scales-for-color-shape-etc.",
    "title": "CSSS 508 • Lecture 2",
    "section": "Scales for Color, Shape, etc.",
    "text": "Scales for Color, Shape, etc.\nScales are layers that control how the mapped aesthetics appear.\nYou can modify these with a scale_[aesthetic]_[option]() layer:\n\n\n\n[aesthetic] is color, shape, linetype, alpha, size, fill, etc.\n\n\n\n\n\n[option] is something like manual, continuous or discrete (depending on nature of the variable).\n\n\n\nExamples:\n\n\nscale_linetype_manual(): manually specify the linetype for each different value\n\nscale_color_manual(): manually specify colors"
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#legend-name-and-manual-colors",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#legend-name-and-manual-colors",
    "title": "CSSS 508 • Lecture 2",
    "section": "Legend Name and Manual Colors",
    "text": "Legend Name and Manual Colors\n\nlifeExp_by_year +\n  theme(legend.position = c(0.8, 0.2)) +\n  scale_color_manual(\n    name = \"Which continent are\\nwe looking at?\", # \\n adds a line break \n    values = c(\"Africa\" = \"seagreen\", \"Americas\" = \"turquoise1\", \n               \"Asia\" = \"royalblue\", \"Europe\" = \"violetred1\", \"Oceania\" = \"yellow\"))"
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#end-result",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#end-result",
    "title": "CSSS 508 • Lecture 2",
    "section": "End Result",
    "text": "End Result\nWe’re going to slowly build up a really detailed plot now!"
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#overriding-previous-specifications",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#overriding-previous-specifications",
    "title": "CSSS 508 • Lecture 2",
    "section": "Overriding previous specifications",
    "text": "Overriding previous specifications\n\nlifeExp_by_year + \n  facet_wrap(vars(continent), nrow = 1)"
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#base-plot-1",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#base-plot-1",
    "title": "CSSS 508 • Lecture 2",
    "section": "1. Base Plot",
    "text": "1. Base Plot\n\n\nCode\nPlot\n\n\n\n\nggplot(data = gapminder, aes(x = year, y = lifeExp, group = country)) \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWhat might be a good geom layer for this data?"
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#lines-1",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#lines-1",
    "title": "CSSS 508 • Lecture 2",
    "section": "2. Lines",
    "text": "2. Lines\n\n\nCode\nPlot\n\n\n\n\nggplot(data = gapminder, aes(x = year, y = lifeExp, group = country)) +\n  geom_line() \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLet’s add a continent-specific average so we can visualize country-deviations from the regional average."
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#continent-average",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#continent-average",
    "title": "CSSS 508 • Lecture 2",
    "section": "3. Continent Average",
    "text": "3. Continent Average\n\n\nCode\nPlot\n\n\n\n\nggplot(data = gapminder, aes(x = year, y = lifeExp, group = country)) +\n  geom_line() +\n  geom_line(stat = \"smooth\", method = \"loess\", \n            aes(group = continent)) \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote: A loess curve is something like a moving average.\n. . .\nLet’s use the facets to gain a clearer understanding of the regional patterns."
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#facets-1",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#facets-1",
    "title": "CSSS 508 • Lecture 2",
    "section": "4. Facets",
    "text": "4. Facets\n\n\nCode\nPlot\n\n\n\n\nggplot(data = gapminder, aes(x = year, y = lifeExp, group = country)) +\n  geom_line() +\n  geom_line(stat = \"smooth\", method = \"loess\", \n            aes(group = continent)) +\n  facet_wrap(~ continent, nrow = 2)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWe want to differentiate the continent-average line from the country-specific lines so let’s change it’s color."
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#color-scale",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#color-scale",
    "title": "CSSS 508 • Lecture 2",
    "section": "5. Color Scale",
    "text": "5. Color Scale\n\n\nCode\nPlot\n\n\n\n\nggplot(data = gapminder, aes(x = year, y = lifeExp, group = country)) +\n  geom_line() +\n  geom_line(stat = \"smooth\", method = \"loess\", \n            aes(group = continent)) +\n  facet_wrap(~ continent, nrow = 2) +\n  scale_color_manual(name = \"Life Exp. for:\", values = c(\"Country\" = \"black\", \"Continent\" = \"blue\"))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIt’s hard to see when it’s thickness is not also differentiated. Let’s change that."
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#size-scale",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#size-scale",
    "title": "CSSS 508 • Lecture 2",
    "section": "6. Size Scale",
    "text": "6. Size Scale\n\n\nCode\nPlot\n\n\n\n\nggplot(data = gapminder, aes(x = year, y = lifeExp, group = country)) +\n  geom_line() +\n  geom_line(stat = \"smooth\", method = \"loess\", \n            aes(group = continent)) +\n  facet_wrap(~ continent, nrow = 2) +\n  scale_color_manual(name = \"Life Exp. for:\", values = c(\"Country\" = \"black\", \"Continent\" = \"blue\")) +\n  scale_size_manual(name = \"Life Exp. for:\", values = c(\"Country\" = 0.25, \"Continent\" = 3))"
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#alpha-transparency",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#alpha-transparency",
    "title": "CSSS 508 • Lecture 2",
    "section": "7. Alpha (Transparency)",
    "text": "7. Alpha (Transparency)\n\n\nCode\nPlot\n\n\n\n\nggplot(data = gapminder, aes(x = year, y = lifeExp, group = country)) +\n  geom_line(alpha = 0.5, aes(color = \"Country\", size = \"Country\")) +\n  geom_line(stat = \"smooth\", method = \"loess\", \n            aes(group = continent, color = \"Continent\", size = \"Continent\"), alpha = 0.5) +\n  facet_wrap(~ continent, nrow = 2) +\n  scale_color_manual(name = \"Life Exp. for:\", values = c(\"Country\" = \"black\", \"Continent\" = \"blue\")) +\n  scale_size_manual(name = \"Life Exp. for:\", values = c(\"Country\" = 0.25, \"Continent\" = 3))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNow we’re getting somewhere! We can also add useful labels and clean up the theme."
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#theme-and-labels",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#theme-and-labels",
    "title": "CSSS 508 • Lecture 2",
    "section": "8. Theme and Labels",
    "text": "8. Theme and Labels\n\n\nCode\nPlot\n\n\n\n\nggplot(data = gapminder, aes(x = year, y = lifeExp, group = country)) +\n  geom_line() +\n  geom_line(stat = \"smooth\", method = \"loess\", \n            aes(group = continent)) +\n  facet_wrap(~ continent, nrow = 2) +\n  scale_color_manual(name = \"Life Exp. for:\", values = c(\"Country\" = \"black\", \"Continent\" = \"blue\")) +\n  scale_size_manual(name = \"Life Exp. for:\", values = c(\"Country\" = 0.25, \"Continent\" = 3)) +\n  theme_minimal(base_size = 14) + ylab(\"Years\") + xlab(\"\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWhat’s our plot showing? We should be explicit about that."
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#title-and-subtitle",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#title-and-subtitle",
    "title": "CSSS 508 • Lecture 2",
    "section": "9. Title and Subtitle",
    "text": "9. Title and Subtitle\n\n\nCode\nPlot\n\n\n\n\nggplot(data = gapminder, aes(x = year, y = lifeExp, group = country)) +\n  geom_line() +\n  geom_line(stat = \"smooth\", method = \"loess\", \n            aes(group = continent)) +\n  facet_wrap(~ continent, nrow = 2) +\n  scale_color_manual(name = \"Life Exp. for:\", values = c(\"Country\" = \"black\", \"Continent\" = \"blue\")) +\n  scale_size_manual(name = \"Life Exp. for:\", values = c(\"Country\" = 0.25, \"Continent\" = 3)) +\n  theme_minimal(base_size = 14) + ylab(\"Years\") + xlab(\"\") + \n  ggtitle(\"Life Expectancy, 1952-2007\", subtitle = \"By continent and country\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe x-axis feels a little busy right now…"
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#angled-tick-values",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#angled-tick-values",
    "title": "CSSS 508 • Lecture 2",
    "section": "10. Angled Tick Values",
    "text": "10. Angled Tick Values\n\n\nCode\nPlot\n\n\n\n\nggplot(data = gapminder, aes(x = year, y = lifeExp, group = country)) +\n  geom_line() +\n  geom_line(stat = \"smooth\", method = \"loess\", \n            aes(group = continent)) +\n  facet_wrap(~ continent, nrow = 2) +\n  scale_color_manual(name = \"Life Exp. for:\", values = c(\"Country\" = \"black\", \"Continent\" = \"blue\")) +\n  scale_size_manual(name = \"Life Exp. for:\", values = c(\"Country\" = 0.25, \"Continent\" = 3)) +\n  theme_minimal(base_size = 14) + ylab(\"Years\") + xlab(\"\") + \n  ggtitle(\"Life Expectancy, 1952-2007\", subtitle = \"By continent and country\") +\n  theme(axis.text.x = element_text(angle = 45)) \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote: Fewer values might be better than angled labels!"
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#legend-position",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#legend-position",
    "title": "CSSS 508 • Lecture 2",
    "section": "11. Legend Position",
    "text": "11. Legend Position\n\n\nCode\nPlot\n\n\n\n\nggplot(data = gapminder, aes(x = year, y = lifeExp, group = country)) +\n  geom_line() +\n  geom_line(stat = \"smooth\", method = \"loess\", \n            aes(group = continent)) +\n  facet_wrap(~ continent, nrow = 2) +\n  scale_color_manual(name = \"Life Exp. for:\", values = c(\"Country\" = \"black\", \"Continent\" = \"blue\")) +\n  scale_size_manual(name = \"Life Exp. for:\", values = c(\"Country\" = 0.25, \"Continent\" = 3)) +\n  theme_minimal(base_size = 14) + ylab(\"Years\") + xlab(\"\") + \n  ggtitle(\"Life Expectancy, 1952-2007\", subtitle = \"By continent and country\") +\n  theme(legend.position=c(0.82, 0.15), axis.text.x = element_text(angle = 45))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nVoilà!"
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#summary-1",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#summary-1",
    "title": "CSSS 508 • Lecture 2",
    "section": "Summary",
    "text": "Summary\nggplot2 can do a LOT! I won’t expect you to memorize all these tools, and neither should you!\n\n\n\nWith time and practice, you’ll start to remember the key tools\nWhen in doubt, Google it! (i.e. “R ggplot ‘whatever issue you need help with’”)\n\nThere are lots of great resources out there:\n\nThe Cookbook for R website\nThe RStudio ggplot Cheatsheets.\nKieran Healy’s book Data Visualization: A Practical Introduction (right) which is targeted at social scientists without technical backgrounds and uses the same tools we’ll be learning in this class."
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#exercise-histograms",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#exercise-histograms",
    "title": "CSSS 508 • Lecture 2",
    "section": "Exercise: Histograms",
    "text": "Exercise: Histograms\nIn pairs, you will create a histogram of life expectancy observations in the complete Gapminder dataset.\n\nSet the base layer by specifying the data as gapminder and the x variable as lifeExp\nAdd a second layer to create a histogram using the function geom_histogram()\nCustomize your plot with nice axis labels and a title."
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#solution",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#solution",
    "title": "CSSS 508 • Lecture 2",
    "section": "Solution",
    "text": "Solution\n1: Set Base Layer\n\nggplot(gapminder,aes(x=lifeExp))"
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#solution-1",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#solution-1",
    "title": "CSSS 508 • Lecture 2",
    "section": "Solution",
    "text": "Solution\n2: Add Histogram Layer\n\nggplot(gapminder,aes(x=lifeExp))+\n  geom_histogram(bins=30)\n\n\n\n\n\n\n\n\n\nSetting the bins aesthetic removes a pesky message!]"
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#solution-2",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#solution-2",
    "title": "CSSS 508 • Lecture 2",
    "section": "Solution",
    "text": "Solution\n3: Add Label Layers\n\nggplot(gapminder,aes(x=lifeExp))+\n  geom_histogram(bins=30)+\n  xlab(\"Life Expectancy\")+\n  ylab(\"Count\")+\n  ggtitle(\"Histogram of Life Expectancy in Gapminder Data\")"
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#homework-2",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#homework-2",
    "title": "CSSS 508 • Lecture 2",
    "section": "Homework #2",
    "text": "Homework #2\nIn this homework, you’ll pose a question regarding the Gapminder dataset and investigate it graphically.\n\nAt the beginning of your document, write down a research question that is based on the Gapminder dataset (e.g., “How does population change over time in different countries?”)\nCreate 3-6 plots to answer/investigate your research question. Consider histograms (geom_histogram()), scatterplots (geom_point()), or lineplots (geom_line()).\nBe sure all titles, axes, and legends are clearly labelled (no raw variable names).\nInclude at least one plot with facet_wrap() or facet_grid().\nYou can use other geoms like histograms, bar charts, adding meaningful vertical or horizontal lines, etc. You may find this data visualization cheat sheet helpful.\n\nYour document should be pleasant for a peer to look at, with some organization. You must write up your observations in words as well as showing the graphs. Upload both the .qmd file and the .html file to Canvas."
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#due-dates",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#due-dates",
    "title": "CSSS 508 • Lecture 2",
    "section": "Due dates",
    "text": "Due dates\n\nSection AA:\n\nHomework #1 due Tuesday, October 17th (before lecture)\nPeer grading due Sunday, October 22nd (4:30pm)\n\n\n\n\n\nSection AB:\n\nHomework #1 due Thursday, October 19th (before lab)\nPeer grading due Tuesday, October 24th (before lecture)"
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#something",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#something",
    "title": "CSSS 508 • Lecture 2",
    "section": "Something",
    "text": "Something\n::: :::{.column width=“50%”}\n\n::: ::::"
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#death-to-spreadsheets",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#death-to-spreadsheets",
    "title": "CSSS 508 • Lecture 3",
    "section": "Death to Spreadsheets",
    "text": "Death to Spreadsheets\nTools like Excel or Google Sheets lets you manipulate spreadsheets using functions.\n\nSpreadsheets are not reproducible: It’s hard to know how someone changed the raw data!\nIt’s hard to catch mistakes when you use spreadsheets. Don’t be the next sad Research Assistant who makes headlines with an Excel error! (Reinhart & Rogoff, 2010)\n\nToday, we’ll use R to manipulate data more transparently and reproducibly."
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#logical-operators",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#logical-operators",
    "title": "CSSS 508 • Lecture 3",
    "section": "Logical Operators",
    "text": "Logical Operators\nLogical operators refer to base functions which allow us to test a connection between two objects.\n\nFor example, we may test\n\nIs A equal to B?\nIs A greater than B?\nIs A within B?\n\nand many others!"
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#logical-operators-in-code",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#logical-operators-in-code",
    "title": "CSSS 508 • Lecture 3",
    "section": "Logical Operators in Code",
    "text": "Logical Operators in Code\n\n\n==: is equal to (note: there are TWO equal signs here!)\n\n\n\n\n!=: not equal to\n\n\n\n\n\n&gt;, &gt;=, &lt;, &lt;=: less than, less than or equal to, etc.\n\n\n\n\n\n%in%: used with checking equal to one of several values"
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#examples-of-logical-operators",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#examples-of-logical-operators",
    "title": "CSSS 508 • Lecture 3",
    "section": "Examples of Logical Operators",
    "text": "Examples of Logical Operators\nLet’s create two objects, A and B\n\nA &lt;- c(5,10,15)\nB &lt;- c(5,15,25)\n\n\n\nA == B\n\n[1]  TRUE FALSE FALSE\n\nA &gt;  B\n\n[1] FALSE FALSE FALSE\n\nA %in% B\n\n[1]  TRUE FALSE  TRUE"
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#combining-logical-operators",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#combining-logical-operators",
    "title": "CSSS 508 • Lecture 3",
    "section": "Combining Logical Operators",
    "text": "Combining Logical Operators\nWe have three main ways to combine logical operators:\n\n\n&: both conditions need to hold (AND)\n\n\n\n\n|: at least one condition needs to hold (OR)\n\n\n\n\n\n!: inverts a logical condition (TRUE becomes FALSE, FALSE becomes TRUE)"
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#examples",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#examples",
    "title": "CSSS 508 • Lecture 3",
    "section": "Examples",
    "text": "Examples\n\nA &lt;- c(5,10,15)\nB &lt;- c(5,15,25)\n\n\n\nA &gt; 5 & A &lt;= B\n\n[1] FALSE  TRUE  TRUE\n\nB &lt; 10 | B &gt; 20\n\n[1]  TRUE FALSE  TRUE\n\n!(A == 10)\n\n[1]  TRUE FALSE  TRUE"
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#building-block-of-dplyr-pipes",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#building-block-of-dplyr-pipes",
    "title": "CSSS 508 • Lecture 3",
    "section": "Building Block of dplyr: Pipes",
    "text": "Building Block of dplyr: Pipes\ndplyr allows us to “pipe” data between functions using the (%&gt;%) operator. So instead of nesting functions like this:\n\nlog(mean(gapminder$pop))\n\n[1] 17.20333\n\n\n\nWe can pipe them like this:\n\ngapminder$pop %&gt;% mean() %&gt;% log()\n\n[1] 17.20333\n\n\n\n\n\nPipes read “left to right.” (intuitive)\nNested functions read “inside to out.” (kinda weird; gets unwieldy the more nested your code becomes)"
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#subset-rows-filter",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#subset-rows-filter",
    "title": "CSSS 508 • Lecture 3",
    "section": "Subset Rows: filter\n",
    "text": "Subset Rows: filter\n\nWe often get big datasets, and we only want some of the entries. We can subset rows using filter.\n\n\ngapminder |&gt; \n  filter(country == \"China\") |&gt;\n  head(4) # display first four rows\n\n# A tibble: 4 × 6\n  country continent  year lifeExp       pop gdpPercap\n  &lt;fct&gt;   &lt;fct&gt;     &lt;int&gt;   &lt;dbl&gt;     &lt;int&gt;     &lt;dbl&gt;\n1 China   Asia       1952    44   556263527      400.\n2 China   Asia       1957    50.5 637408000      576.\n3 China   Asia       1962    44.5 665770000      488.\n4 China   Asia       1967    58.4 754550000      613.\n\nChina &lt;- gapminder |&gt; \n  filter(country == \"China\")\n\n(Now, China is an object in our environment which contains rows corresponding to China.)"
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#subset-columns-select",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#subset-columns-select",
    "title": "CSSS 508 • Lecture 3",
    "section": "Subset Columns: select\n",
    "text": "Subset Columns: select\n\nWhat if we want to keep each entry, but only use certain variables? Use select!\n\n\ngapminder |&gt; \n  select(country,continent,year,lifeExp) |&gt; \n  head(4)\n\n# A tibble: 4 × 4\n  country     continent  year lifeExp\n  &lt;fct&gt;       &lt;fct&gt;     &lt;int&gt;   &lt;dbl&gt;\n1 Afghanistan Asia       1952    28.8\n2 Afghanistan Asia       1957    30.3\n3 Afghanistan Asia       1962    32.0\n4 Afghanistan Asia       1967    34.0"
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#dropping-columns-with-select",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#dropping-columns-with-select",
    "title": "CSSS 508 • Lecture 3",
    "section": "Dropping columns with select\n",
    "text": "Dropping columns with select\n\nAlternatively, we can use select() to drop variables using a - sign:\n\ngapminder |&gt; \n  select(-continent, -pop, -lifeExp) |&gt; \n  head(4)\n\n# A tibble: 4 × 3\n  country      year gdpPercap\n  &lt;fct&gt;       &lt;int&gt;     &lt;dbl&gt;\n1 Afghanistan  1952      779.\n2 Afghanistan  1957      821.\n3 Afghanistan  1962      853.\n4 Afghanistan  1967      836."
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#finding-unique-rows-distinct",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#finding-unique-rows-distinct",
    "title": "CSSS 508 • Lecture 3",
    "section": "Finding Unique Rows: distinct\n",
    "text": "Finding Unique Rows: distinct\n\nYou may want to find the unique combinations of variables in a dataset. Use distinct\n\n\ngapminder |&gt; \n  distinct(continent, year) |&gt; \n  head(6)\n\n# A tibble: 6 × 2\n  continent  year\n  &lt;fct&gt;     &lt;int&gt;\n1 Asia       1952\n2 Asia       1957\n3 Asia       1962\n4 Asia       1967\n5 Asia       1972\n6 Asia       1977"
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#distinct-drops-variables",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#distinct-drops-variables",
    "title": "CSSS 508 • Lecture 3",
    "section": "\ndistinct drops variables!",
    "text": "distinct drops variables!\nBy default, distinct() drops unused variables. If you don’t want to drop them, add the argument .keep_all = TRUE:\n\ngapminder |&gt; \n  distinct(continent, year, .keep_all=TRUE) |&gt; \n  head(6)\n\n# A tibble: 6 × 6\n  country     continent  year lifeExp      pop gdpPercap\n  &lt;fct&gt;       &lt;fct&gt;     &lt;int&gt;   &lt;dbl&gt;    &lt;int&gt;     &lt;dbl&gt;\n1 Afghanistan Asia       1952    28.8  8425333      779.\n2 Afghanistan Asia       1957    30.3  9240934      821.\n3 Afghanistan Asia       1962    32.0 10267083      853.\n4 Afghanistan Asia       1967    34.0 11537966      836.\n5 Afghanistan Asia       1972    36.1 13079460      740.\n6 Afghanistan Asia       1977    38.4 14880372      786."
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#sorting-data-by-rows-arrange",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#sorting-data-by-rows-arrange",
    "title": "CSSS 508 • Lecture 3",
    "section": "Sorting data by rows: arrange\n",
    "text": "Sorting data by rows: arrange\n\nSometimes it’s useful to sort rows in your data, in ascending (low to high) or descending (high to low) order. We do that with arrange.\n\n\nUS_and_Canada &lt;- gapminder |&gt; \n  filter(country %in% c(\"United States\",\"Canada\"))\nUS_and_Canada |&gt; \n  arrange(year,lifeExp) |&gt; \n  head(4)\n\n# A tibble: 4 × 6\n  country       continent  year lifeExp       pop gdpPercap\n  &lt;fct&gt;         &lt;fct&gt;     &lt;int&gt;   &lt;dbl&gt;     &lt;int&gt;     &lt;dbl&gt;\n1 United States Americas   1952    68.4 157553000    13990.\n2 Canada        Americas   1952    68.8  14785584    11367.\n3 United States Americas   1957    69.5 171984000    14847.\n4 Canada        Americas   1957    70.0  17010154    12490."
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#sorting-data-by-rows-arrange-1",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#sorting-data-by-rows-arrange-1",
    "title": "CSSS 508 • Lecture 3",
    "section": "Sorting data by rows: arrange\n",
    "text": "Sorting data by rows: arrange\n\nTo sort in descending order, using desc() within arrange\n\nUS_and_Canada |&gt; \n  arrange(desc(pop)) |&gt; \n  head(4)\n\n# A tibble: 4 × 6\n  country       continent  year lifeExp       pop gdpPercap\n  &lt;fct&gt;         &lt;fct&gt;     &lt;int&gt;   &lt;dbl&gt;     &lt;int&gt;     &lt;dbl&gt;\n1 United States Americas   2007    78.2 301139947    42952.\n2 United States Americas   2002    77.3 287675526    39097.\n3 United States Americas   1997    76.8 272911760    35767.\n4 United States Americas   1992    76.1 256894189    32004."
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#rename-variables-rename",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#rename-variables-rename",
    "title": "CSSS 508 • Lecture 3",
    "section": "Rename variables: rename\n",
    "text": "Rename variables: rename\n\nYou may receive data with unintuitive variable names. You can change them using rename().\n\n\nUS_and_Canada |&gt; \n  rename(life_expectancy = lifeExp) |&gt;\n  head(4)\n\n# A tibble: 4 × 6\n  country continent  year life_expectancy      pop gdpPercap\n  &lt;fct&gt;   &lt;fct&gt;     &lt;int&gt;           &lt;dbl&gt;    &lt;int&gt;     &lt;dbl&gt;\n1 Canada  Americas   1952            68.8 14785584    11367.\n2 Canada  Americas   1957            70.0 17010154    12490.\n3 Canada  Americas   1962            71.3 18985849    13462.\n4 Canada  Americas   1967            72.1 20819767    16077.\n\n\n\n\n\n* NOTE 1: I did not re-save the object US_and_Canada, so the name change is not permanent!\n* NOTE 2: I recommend against using spaces in a name! It makes things really hard sometimes!!"
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#create-new-columns-mutate",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#create-new-columns-mutate",
    "title": "CSSS 508 • Lecture 3",
    "section": "Create new columns: mutate\n",
    "text": "Create new columns: mutate\n\nYou can add new columns to a data frame using mutate().\n\nFor example, perhaps we wish to state the population in millions:\n\nUS_and_Canada |&gt; \n  select(country, year, pop) |&gt;\n  mutate(pop_millions = pop / 1000000) |&gt; \n  head(5)\n\n# A tibble: 5 × 4\n  country  year      pop pop_millions\n  &lt;fct&gt;   &lt;int&gt;    &lt;int&gt;        &lt;dbl&gt;\n1 Canada   1952 14785584         14.8\n2 Canada   1957 17010154         17.0\n3 Canada   1962 18985849         19.0\n4 Canada   1967 20819767         20.8\n5 Canada   1972 22284500         22.3"
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#summarizing-data-summarize",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#summarizing-data-summarize",
    "title": "CSSS 508 • Lecture 3",
    "section": "Summarizing data: summarize\n",
    "text": "Summarizing data: summarize\n\nsummarize() calculates summaries of variables in your data:\n\nCount the number of rows\nCalculate the mean\nCalculate the sum\nFind the minimum or maximum value\n\nYou can use any function inside summarize() that aggregates multiple values into a single value (like sd(), mean(), or max())."
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#summarize-example",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#summarize-example",
    "title": "CSSS 508 • Lecture 3",
    "section": "\nsummarize() Example",
    "text": "summarize() Example\nFor the year 1982, let’s summarize some values in gapminder\n\ngapminder |&gt; \n  filter(year == 1982) |&gt;\n  summarize(number_observations = n(),\n            max_lifeexp = max(lifeExp),\n            mean_pop = mean(pop),\n            sd_pop = sd(pop))\n\n# A tibble: 1 × 4\n  number_observations max_lifeexp  mean_pop     sd_pop\n                &lt;int&gt;       &lt;dbl&gt;     &lt;dbl&gt;      &lt;dbl&gt;\n1                 142        77.1 30207302. 105098650."
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#summarizing-data-by-groups-group_by",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#summarizing-data-by-groups-group_by",
    "title": "CSSS 508 • Lecture 3",
    "section": "Summarizing data by groups: group_by\n",
    "text": "Summarizing data by groups: group_by\n\nWhat if we want to summarize data by category? Use group_by and summarize\n\nFunctions after group_by() are computed within each group as defined by variables given, rather than over all rows at once."
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#group_by-example",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#group_by-example",
    "title": "CSSS 508 • Lecture 3",
    "section": "\ngroup_by() Example",
    "text": "group_by() Example\n\nUS_and_Canada |&gt; group_by(year) |&gt;  \n  summarize(total_pop = sum(pop)) |&gt; \n  head(4)\n\n# A tibble: 4 × 2\n   year total_pop\n  &lt;int&gt;     &lt;int&gt;\n1  1952 172338584\n2  1957 188994154\n3  1962 205523849\n4  1967 219531767\n\n\nBecause we did group_by() with year then used summarize(), we get one row per value of year!"
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#why-merge",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#why-merge",
    "title": "CSSS 508 • Lecture 3",
    "section": "Why merge?!",
    "text": "Why merge?!\nIn practice, we often collect data from different sources. To analyze the data, we usually must first combine (merge) them.\n\nFor example, imagine you would like to study county-level patterns with respect to age and grocery spending. However, you can only find,\n\nCounty level age data from the US Census, and\nCounty level grocery spending data from the US Department of Agriculture\n\n\n\nMerge the data!!"
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#merging-in-concept",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#merging-in-concept",
    "title": "CSSS 508 • Lecture 3",
    "section": "Merging in Concept",
    "text": "Merging in Concept\nWhen merging datasets A and B, ask yourself the following two questions:\n\n\n\nWhich rows do I want to keep?\n\nAll rows in A?\nAll rows in both A and B?\n\n\n\n\n\n\n\nHow do my datasets connect?\n\nIs there a specific variable they have in common?\nMultiple variables they have in common?"
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#which-rows-to-keep",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#which-rows-to-keep",
    "title": "CSSS 508 • Lecture 3",
    "section": "Which Rows to Keep:",
    "text": "Which Rows to Keep:\nWe’ll focus on two types of joins1:\n\nA |&gt; left_join(B): keeps A and adds variables from B after matching.\nA |&gt; full_join(B): keeps all of A and B, but combines rows when possible.\nOther types include right_join, inner_join, semi_join, and anti_join, but we won’t study those here."
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#matching-criteria",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#matching-criteria",
    "title": "CSSS 508 • Lecture 3",
    "section": "Matching Criteria",
    "text": "Matching Criteria\nWe have to tell R which variables to use when merging datasets! Rows are matched when the values in matching variables are equivalent.\n\n\n\nby = c(\"County\"): Both datasets have a County variable, match on this!\n\n\n\n\n\nby = c(\"CountyName\" = \"County_Name\"): Match CountyName in A with County_Name in B"
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#example-nycflights13-data",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#example-nycflights13-data",
    "title": "CSSS 508 • Lecture 3",
    "section": "Example: nycflights13 Data",
    "text": "Example: nycflights13 Data\nThe nycflights13 package includes five data frames, some of which contain missing data (NA):\n\n\nflights: flights leaving JFK, LGA, or EWR in 2013\n\nairlines: airline abbreviations\n\nairports: airport metadata\n\nplanes: airplane metadata\n\nweather: hourly weather data for JFK, LGA, and EWR\n\n\n# install.packages(\"nycflights13\") # remember to do this in the console, not in your .R or .qmd document\nlibrary(nycflights13)"
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#join-example-1",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#join-example-1",
    "title": "CSSS 508 • Lecture 3",
    "section": "Join Example 1",
    "text": "Join Example 1\nflights has one row per flight, with abbreviated airline names.\n\nflights |&gt; \n  select(flight,origin,dest,carrier) |&gt; \n  head(2)\n\n# A tibble: 2 × 4\n  flight origin dest  carrier\n   &lt;int&gt; &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt;  \n1   1545 EWR    IAH   UA     \n2   1714 LGA    IAH   UA     \n\n\n\nairlines has one row per airline, with airline abbreviations and full names\n\nairlines |&gt; \n  head(2)\n\n# A tibble: 2 × 2\n  carrier name                  \n  &lt;chr&gt;   &lt;chr&gt;                 \n1 9E      Endeavor Air Inc.     \n2 AA      American Airlines Inc."
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#join-example-1-continued",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#join-example-1-continued",
    "title": "CSSS 508 • Lecture 3",
    "section": "Join Example 1 (continued)",
    "text": "Join Example 1 (continued)\nLet’s left join flights with airlines to add full airline name to each flight record!\n\nflights |&gt; \n  select(flight,origin,dest,carrier) |&gt;\n  left_join(airlines, by = \"carrier\")  |&gt; \n  head(5)\n\n# A tibble: 5 × 5\n  flight origin dest  carrier name                  \n   &lt;int&gt; &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt;   &lt;chr&gt;                 \n1   1545 EWR    IAH   UA      United Air Lines Inc. \n2   1714 LGA    IAH   UA      United Air Lines Inc. \n3   1141 JFK    MIA   AA      American Airlines Inc.\n4    725 JFK    BQN   B6      JetBlue Airways       \n5    461 LGA    ATL   DL      Delta Air Lines Inc.  \n\n\nWe now have one row per flight, with both carrier abbreviations and full names!"
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#join-example-2",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#join-example-2",
    "title": "CSSS 508 • Lecture 3",
    "section": "Join Example #2",
    "text": "Join Example #2\nflights also includes a tailnum variable for each plane’s tail number.\n\nflights |&gt; \n  select(flight,origin,dest,tailnum) |&gt; \n  head(2)\n\n# A tibble: 2 × 4\n  flight origin dest  tailnum\n   &lt;int&gt; &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt;  \n1   1545 EWR    IAH   N14228 \n2   1714 LGA    IAH   N24211 \n\n\n\nplanes includes a row for each plane type, including the manufacturer.\n\nplanes |&gt; \n  select(tailnum,year,manufacturer,model) |&gt; \n  head(2)\n\n# A tibble: 2 × 4\n  tailnum  year manufacturer     model    \n  &lt;chr&gt;   &lt;int&gt; &lt;chr&gt;            &lt;chr&gt;    \n1 N10156   2004 EMBRAER          EMB-145XR\n2 N102UW   1998 AIRBUS INDUSTRIE A320-214"
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#join-example-2-continued",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#join-example-2-continued",
    "title": "CSSS 508 • Lecture 3",
    "section": "Join Example 2 (continued)",
    "text": "Join Example 2 (continued)\nLet’s left join flights with planes to add manufacture to each flight record!\n\nflights |&gt; \n  select(flight,origin,dest,tailnum) |&gt;\n  left_join(planes, by = \"tailnum\")  |&gt; \n  head(5)\n\n# A tibble: 5 × 12\n  flight origin dest  tailnum  year type  manufacturer model engines seats speed\n   &lt;int&gt; &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt;   &lt;int&gt; &lt;chr&gt; &lt;chr&gt;        &lt;chr&gt;   &lt;int&gt; &lt;int&gt; &lt;int&gt;\n1   1545 EWR    IAH   N14228   1999 Fixe… BOEING       737-…       2   149    NA\n2   1714 LGA    IAH   N24211   1998 Fixe… BOEING       737-…       2   149    NA\n3   1141 JFK    MIA   N619AA   1990 Fixe… BOEING       757-…       2   178    NA\n4    725 JFK    BQN   N804JB   2012 Fixe… AIRBUS       A320…       2   200    NA\n5    461 LGA    ATL   N668DN   1991 Fixe… BOEING       757-…       2   178    NA\n# ℹ 1 more variable: engine &lt;chr&gt;\n\n\nA bunch of columns from planes are now in the dataset!"
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#join-example-2-continued-1",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#join-example-2-continued-1",
    "title": "CSSS 508 • Lecture 3",
    "section": "Join Example 2 (continued)",
    "text": "Join Example 2 (continued)\nLet’s remove some of the “spare” columns\n\nflights |&gt; \n  select(flight, origin, dest, tailnum) |&gt;\n  left_join(planes, by = \"tailnum\")  |&gt; \n  select(flight, origin, dest, manufacturer, model) |&gt;\n  head(5)\n\n# A tibble: 5 × 5\n  flight origin dest  manufacturer model   \n   &lt;int&gt; &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt;        &lt;chr&gt;   \n1   1545 EWR    IAH   BOEING       737-824 \n2   1714 LGA    IAH   BOEING       737-824 \n3   1141 JFK    MIA   BOEING       757-223 \n4    725 JFK    BQN   AIRBUS       A320-232\n5    461 LGA    ATL   BOEING       757-232"
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#activity",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#activity",
    "title": "CSSS 508 • Lecture 3",
    "section": "Activity",
    "text": "Activity\n\nCreate a new object that contains gapminder (1) observations from China, India, and United States after 1980, and (2) variables corresponding to country, year, population, and life expectancy.\nHow many rows and columns does the object contain?\nSave over your object after sorting the rows by year (ascending order) and population (descending order). Print the first 6 rows.\nAdd a new variable that contains population in billions.\nBy year, calculate the total population (in billions) across these three countries\nIn ggplot, create a line plot showing life expectancy over time by country. Make the plot visually appealing!"
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#my-answers",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#my-answers",
    "title": "CSSS 508 • Lecture 3",
    "section": "My Answers",
    "text": "My Answers\nQuestion 1:\n\nsubset_gapminder &lt;- gapminder |&gt; \n  filter(country %in% c(\"China\",\"India\",\"United States\"),  year &gt; 1980 ) |&gt;\n  select(country, year, pop, lifeExp)\n\n\nQuestion 2:\n\nc(nrow(subset_gapminder), ncol(subset_gapminder))\n\n[1] 18  4"
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#my-answers-1",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#my-answers-1",
    "title": "CSSS 508 • Lecture 3",
    "section": "My Answers",
    "text": "My Answers\nQuestion 3:\n\nsubset_gapminder &lt;- subset_gapminder |&gt; \n  arrange(year,desc(pop))\n\nsubset_gapminder |&gt; head(6)\n\n# A tibble: 6 × 4\n  country        year        pop lifeExp\n  &lt;fct&gt;         &lt;int&gt;      &lt;int&gt;   &lt;dbl&gt;\n1 China          1982 1000281000    65.5\n2 India          1982  708000000    56.6\n3 United States  1982  232187835    74.6\n4 China          1987 1084035000    67.3\n5 India          1987  788000000    58.6\n6 United States  1987  242803533    75.0\n\n\n\nQuestion 4:\n\nsubset_gapminder &lt;- subset_gapminder |&gt; \n  mutate(pop_billions = pop/1000000000)"
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#my-answers-2",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#my-answers-2",
    "title": "CSSS 508 • Lecture 3",
    "section": "My Answers",
    "text": "My Answers\nQuestion 5:\n\nsubset_gapminder |&gt; \n  group_by(year) |&gt; \n  summarize(TotalPop_Billions = sum(pop_billions))\n\n# A tibble: 6 × 2\n   year TotalPop_Billions\n  &lt;int&gt;             &lt;dbl&gt;\n1  1982              1.94\n2  1987              2.11\n3  1992              2.29\n4  1997              2.46\n5  2002              2.60\n6  2007              2.73"
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#my-answers-3",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#my-answers-3",
    "title": "CSSS 508 • Lecture 3",
    "section": "My Answers",
    "text": "My Answers\nQuestion 6:\n\nlibrary(ggplot2)\nggplot(subset_gapminder, aes(year, lifeExp, color = country, group = country)) +\n  theme_bw(base_size=20) + geom_point() + geom_line() +\n  xlab(\"Year\") + ylab(\"Life Expectancy (years)\") +\n  ggtitle(\"Life Expectancy (1982-2007)\",\"China, India, and United States\") +\n  scale_x_continuous(breaks = c(1982, 1987, 1992, 1997, 2002, 2007), minor_breaks = c()) +\n  ylim(c(50, 80)) + scale_color_discrete(name = \"Country\") + theme(legend.position = \"bottom\")"
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#homework-3",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#homework-3",
    "title": "CSSS 508 • Lecture 3",
    "section": "Homework 3",
    "text": "Homework 3\nCreate a qmd file (from scratch this time!) in which you answer each of the following questions. Be sure to display all your code in the knitted version (use throughout echo: false).\nRemember, the package nycflights13 contains data on flights originating in NYC during the year 2013. There are three airports servicing NYC: JFK, LGA (“LaGuardia”), and EWR (“Newark”).\n\nChoose an airport outside New York, and count how many flights went to that airport from NYC in 2013. How many of those flights started at JFK, LGA, and EWR? (Hint: Use filter, group_by, and summarize)\nThe variable arr_delay contains arrival delays in minutes (negative values represent early arrivals). Make a ggplot histogram displaying arrival delays for 2013 flights from NYC to the airport you chose.\nUse left_join to add weather data at departure to the subsetted data1. Calculate the mean temperature by month at departure (temp) across all flights2.\nInvestigate if there is a relationship between departure delay (dep_delay) and wind speed (wind_speed). Is the relationship different between JFK, LGA, and EWR? I suggest answering this question by making a plot and writing down a one-sentence interpretation.\n\nAs always, submit both the .qmd and knitted .html to Canvas.\n\nHint 1: Match on origin, year, month, day, and hour!!Hint 2: Use mean(temp, na.rm=T) to have R calculate an average after ignoring missing data values"
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#due-dates",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#due-dates",
    "title": "CSSS 508 • Lecture 3",
    "section": "Due dates",
    "text": "Due dates\n\nSection AA:\n\nHomework #1 due Tuesday, October 24th (before lecture)\nPeer grading due Sunday, October 29nd (4:30pm)\n\n\n\n\n\nSection AB:\n\nHomework #1 due Thursday, October 26th (before lab)\nPeer grading due Tuesday, October 31th (before lecture)"
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#answers",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#answers",
    "title": "CSSS 508 • Lecture 3",
    "section": "Answers",
    "text": "Answers\nQuestion 1:\n\nsubset_gapminder &lt;- gapminder |&gt; \n  filter(country %in% c(\"China\",\"India\",\"United States\"),  year &gt; 1980 ) |&gt;\n  select(country, year, pop, lifeExp)\nsubset_gapminder |&gt; head(n = 5)\n\n# A tibble: 5 × 4\n  country  year        pop lifeExp\n  &lt;fct&gt;   &lt;int&gt;      &lt;int&gt;   &lt;dbl&gt;\n1 China    1982 1000281000    65.5\n2 China    1987 1084035000    67.3\n3 China    1992 1164970000    68.7\n4 China    1997 1230075000    70.4\n5 China    2002 1280400000    72.0"
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#answers-1",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#answers-1",
    "title": "CSSS 508 • Lecture 3",
    "section": "Answers",
    "text": "Answers\nQuestion 2:\n\n# Option 1\nc(nrow(subset_gapminder), ncol(subset_gapminder))\n\n[1] 18  4\n\n# Option 2\nglimpse(subset_gapminder)\n\nRows: 18\nColumns: 4\n$ country &lt;fct&gt; \"China\", \"China\", \"China\", \"China\", \"China\", \"China\", \"India\",…\n$ year    &lt;int&gt; 1982, 1987, 1992, 1997, 2002, 2007, 1982, 1987, 1992, 1997, 20…\n$ pop     &lt;int&gt; 1000281000, 1084035000, 1164970000, 1230075000, 1280400000, 13…\n$ lifeExp &lt;dbl&gt; 65.525, 67.274, 68.690, 70.426, 72.028, 72.961, 56.596, 58.553…\n\n# Option 3\ndim(subset_gapminder)\n\n[1] 18  4"
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#answers-2",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#answers-2",
    "title": "CSSS 508 • Lecture 3",
    "section": "Answers",
    "text": "Answers\nQuestion 3:\n\nsubset_gapminder &lt;- subset_gapminder |&gt; \n  arrange(year, desc(pop))\n\nsubset_gapminder |&gt; head(6)\n\n# A tibble: 6 × 4\n  country        year        pop lifeExp\n  &lt;fct&gt;         &lt;int&gt;      &lt;int&gt;   &lt;dbl&gt;\n1 China          1982 1000281000    65.5\n2 India          1982  708000000    56.6\n3 United States  1982  232187835    74.6\n4 China          1987 1084035000    67.3\n5 India          1987  788000000    58.6\n6 United States  1987  242803533    75.0"
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#answers-3",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#answers-3",
    "title": "CSSS 508 • Lecture 3",
    "section": "Answers",
    "text": "Answers\nQuestion 4:\n\nsubset_gapminder &lt;- subset_gapminder |&gt; \n  mutate(pop_billions = pop/1000000000)\n\nsubset_gapminder |&gt; head(n = 5)\n\n# A tibble: 5 × 5\n  country        year        pop lifeExp pop_billions\n  &lt;fct&gt;         &lt;int&gt;      &lt;int&gt;   &lt;dbl&gt;        &lt;dbl&gt;\n1 China          1982 1000281000    65.5        1.00 \n2 India          1982  708000000    56.6        0.708\n3 United States  1982  232187835    74.6        0.232\n4 China          1987 1084035000    67.3        1.08 \n5 India          1987  788000000    58.6        0.788"
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#answers-4",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#answers-4",
    "title": "CSSS 508 • Lecture 3",
    "section": "Answers",
    "text": "Answers\nQuestion 5:\n\n\nClassic syntax\nNew syntax (dplyr 1.1.0)\n\n\n\n\nsubset_gapminder |&gt; \n  group_by(year) |&gt; \n  summarize(TotalPop_Billions = sum(pop_billions))\n\n# A tibble: 6 × 2\n   year TotalPop_Billions\n  &lt;int&gt;             &lt;dbl&gt;\n1  1982              1.94\n2  1987              2.11\n3  1992              2.29\n4  1997              2.46\n5  2002              2.60\n6  2007              2.73\n\n\n\n\n\nsubset_gapminder |&gt; \n  summarize(TotalPop_Billions = sum(pop_billions), \n            .by = year)\n\n# A tibble: 6 × 2\n   year TotalPop_Billions\n  &lt;int&gt;             &lt;dbl&gt;\n1  1982              1.94\n2  1987              2.11\n3  1992              2.29\n4  1997              2.46\n5  2002              2.60\n6  2007              2.73\n\n\nThis new syntax allows for per-operation grouping which means it is only active within a single verb at a time (as opposed to being applied to the entire tibble until ungroup() is called). You can more about this new feature here)"
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#answers-5",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#answers-5",
    "title": "CSSS 508 • Lecture 3",
    "section": "Answers",
    "text": "Answers\nQuestion 6:\n\n\nCode\nPlot\n\n\n\n\nlibrary(ggplot2) \n# install.packages(\"ggthemes\") # run in console\nlibrary(ggthemes)\nggplot(subset_gapminder, aes(year, lifeExp, color = country, group = country)) +\n  theme_tufte(base_size = 20) + \n  geom_point() + \n  geom_line() +\n  xlab(\"Year\") + \n  ylab(\"Life Expectancy (years)\") +\n  ggtitle(\"Life Expectancy (1982-2007)\",\"China, India, and United States\") +\n  scale_x_continuous(breaks = c(1982, 1987, 1992, 1997, 2002, 2007), minor_breaks = c()) +\n  ylim(c(50, 80)) + \n  scale_color_discrete(name = \"Country\") + \n  theme(legend.position = \"bottom\")"
  }
]