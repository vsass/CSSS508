[
  {
    "objectID": "Lectures/Lecture7/CSSS508_Lecture7.html#title-slide",
    "href": "Lectures/Lecture7/CSSS508_Lecture7.html#title-slide",
    "title": "",
    "section": "",
    "text": "Working with Text Data\nCS&SS 508 ‚Ä¢ Lecture 7\n18 November 2025\nVictoria Sass"
  },
  {
    "objectID": "Lectures/Lecture7/CSSS508_Lecture7.html#basics-of-strings",
    "href": "Lectures/Lecture7/CSSS508_Lecture7.html#basics-of-strings",
    "title": "",
    "section": "Basics of Strings",
    "text": "Basics of Strings\n\nA general programming term for a unit of character data is a string\n\nStrings are a sequence of characters\nIn R, ‚Äústrings‚Äù and ‚Äúcharacter data‚Äù are mostly interchangeable.\nSome languages have more precise distinctions, but we won‚Äôt worry about that here!\n\n\n\nWe can create strings by surrounding text, numbers, spaces, or symbols with quotes!\n\nExamples: \"Hello! My name is Vic\" or \"%*$#01234\"\n\nYou can create a string using either single quotes (' ') or double quotes (\" \")\n\nIn the interest of consistency, the tidyverse style guide recommends using \" \", unless the string contains multiple \" \". In that case it is recommended to use ' ' to define the entire string and \" \" for elements within the string that are themselves quoted."
  },
  {
    "objectID": "Lectures/Lecture7/CSSS508_Lecture7.html#escaping-with-strings",
    "href": "Lectures/Lecture7/CSSS508_Lecture7.html#escaping-with-strings",
    "title": "",
    "section": "Escaping with Strings",
    "text": "Escaping with Strings\nWe use a lot of different symbols in our code that we might actually want to represent within a string itself. To do that, we need to escape that particular character. We can do that using \\.\n\nFor instance, if we want to include a literal single or double quote in our string, we‚Äôd escape it by writing:\n\n1\"\\'\"\n2'\\\"'\n\n\n1\n\nSingle quote.\n\n2\n\nDouble quote.\n\n\n\n\n\n\nSimilarly, if we want to represent a \\ we‚Äôll need to escape it as well‚Ä¶\n\n3\"\\\\\"\n\n\n3\n\nBackslash.\n\n\n\n\n\n\nNote: When you print these objects you‚Äôll see the escape characters. To actually view the string‚Äôs contents ( and not the syntax needed to construct it), use str_view().\n\n\n\n4str_view(c(\"\\'\", '\\\"', \"\\\\\"))\n\n\n4\n\nAll stringr functions begin with the prefix str_ which is useful due to R Studio‚Äôs auto-complete feature.\n\n\n\n\n&gt; [1] ‚îÇ '\n&gt; [2] ‚îÇ \"\n&gt; [3] ‚îÇ \\"
  },
  {
    "objectID": "Lectures/Lecture7/CSSS508_Lecture7.html#other-special-characters",
    "href": "Lectures/Lecture7/CSSS508_Lecture7.html#other-special-characters",
    "title": "",
    "section": "Other Special Characters",
    "text": "Other Special Characters\nThere are other things you may want to represent inside a character string, such as a new line, or a tab space.\n\n\n1str_view(\"Sometimes you need\\nto create another line.\")\n2str_view(\"\\tOther times you just need to indent somewhere.\")\n\n\n1\n\nUse \\n to create a new line. Helpful when plotting if you have variable names or values that are wordy! If you need to do this for one or more variables you can use str_wrap() and specify the character width you desire.\n\n2\n\nUse \\t to add a tab. str_view will highlight tabs in blue in your console to make it stand out from other random whitespace.\n\n\n\n\n\n\n&gt; [1] ‚îÇ Sometimes you need\n&gt;     ‚îÇ to create another line.\n&gt; [1] ‚îÇ {\\t}Other times you just need to indent somewhere.\n\n\n\n\nAdditionally, you can represent Unicode characters which will be written with the \\u or \\U escape.\n\nstr_view(c(\"\\U1F00F\", \"\\u2866\", \"\\U1F192\"))\n\n&gt; [1] ‚îÇ üÄè\n&gt; [2] ‚îÇ ‚°¶\n&gt; [3] ‚îÇ üÜí"
  },
  {
    "objectID": "Lectures/Lecture7/CSSS508_Lecture7.html#data-king-county-restaurant-inspections",
    "href": "Lectures/Lecture7/CSSS508_Lecture7.html#data-king-county-restaurant-inspections",
    "title": "",
    "section": "Data: King County Restaurant Inspections!",
    "text": "Data: King County Restaurant Inspections!\nToday we‚Äôll study real data on food safety inspections in King County, collected from data.kingcounty.gov.\nNote these data are fairly large in their native .csv format. The following code can be used to download the data directly from my Github page as a smaller, .Rdata object:\n\nload(url(\"https://github.com/vsass/CSSS508/raw/main/Lectures/Lecture7/data/restaurants.Rdata\"))"
  },
  {
    "objectID": "Lectures/Lecture7/CSSS508_Lecture7.html#quick-examination-of-the-data",
    "href": "Lectures/Lecture7/CSSS508_Lecture7.html#quick-examination-of-the-data",
    "title": "",
    "section": "Quick Examination of the Data",
    "text": "Quick Examination of the Data\n\nglimpse(restaurants)\n\n&gt; Rows: 256,681\n&gt; Columns: 22\n&gt; $ Name                         &lt;chr&gt; \"#807 TUTTA BELLA\", \"#807 TUTTA BELLA\", \"‚Ä¶\n&gt; $ `Program Identifier`         &lt;chr&gt; \"#807 TUTTA BELLA\", \"#807 TUTTA BELLA\", \"‚Ä¶\n&gt; $ `Inspection Date`            &lt;chr&gt; \"03/02/2023\", \"03/02/2023\", \"08/31/2022\",‚Ä¶\n&gt; $ Description                  &lt;chr&gt; \"Seating 0-12 - Risk Category III\", \"Seat‚Ä¶\n&gt; $ Address                      &lt;chr&gt; \"2746 NE 45TH ST\", \"2746 NE 45TH ST\", \"27‚Ä¶\n&gt; $ City                         &lt;chr&gt; \"SEATTLE\", \"SEATTLE\", \"SEATTLE\", \"SEATTLE‚Ä¶\n&gt; $ `Zip Code`                   &lt;dbl&gt; 98105, 98105, 98105, 98105, 98105, 98105,‚Ä¶\n&gt; $ Phone                        &lt;chr&gt; \"(206) 722-6400\", \"(206) 722-6400\", \"(206‚Ä¶\n&gt; $ Longitude                    &lt;dbl&gt; -122.2964, -122.2964, -122.2964, -122.296‚Ä¶\n&gt; $ Latitude                     &lt;dbl&gt; 47.66231, 47.66231, 47.66231, 47.66231, 4‚Ä¶\n&gt; $ `Inspection Business Name`   &lt;chr&gt; \"#807 TUTTA BELLA\", \"#807 TUTTA BELLA\", \"‚Ä¶\n&gt; $ `Inspection Type`            &lt;chr&gt; \"Routine Inspection/Field Review\", \"Routi‚Ä¶\n&gt; $ `Inspection Score`           &lt;dbl&gt; 20, 20, 10, 10, 0, 0, 0, 30, 30, 0, 47, 4‚Ä¶\n&gt; $ `Inspection Result`          &lt;chr&gt; \"Unsatisfactory\", \"Unsatisfactory\", \"Unsa‚Ä¶\n&gt; $ `Inspection Closed Business` &lt;lgl&gt; FALSE, FALSE, FALSE, FALSE, FALSE, FALSE,‚Ä¶\n&gt; $ `Violation Type`             &lt;chr&gt; \"RED\", \"RED\", \"BLUE\", \"RED\", NA, NA, NA, ‚Ä¶\n&gt; $ `Violation Description`      &lt;chr&gt; \"1300 - Food contact surfaces cleaned and‚Ä¶\n&gt; $ `Violation Points`           &lt;dbl&gt; 15, 5, 5, 5, 0, 0, 0, 5, 25, 0, 5, 2, 5, ‚Ä¶\n&gt; $ Business_ID                  &lt;chr&gt; \"PR0089260\", \"PR0089260\", \"PR0089260\", \"P‚Ä¶\n&gt; $ Inspection_Serial_Num        &lt;chr&gt; \"DAJ5DTHLV\", \"DAJ5DTHLV\", \"DAEEWQC0L\", \"D‚Ä¶\n&gt; $ Violation_Record_ID          &lt;chr&gt; \"IVBTPZO0B\", \"IV5GOME67\", \"IVQ7QYW2V\", \"I‚Ä¶\n&gt; $ Grade                        &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2,‚Ä¶\n\n\n\n\n\nGood Questions to Ask\n\n\n\n\nWhat does each row represent?\nIs the data in long or wide format?\n\n\n\nWhat are the key variables?\nHow are the data stored? (data type)"
  },
  {
    "objectID": "Lectures/Lecture7/CSSS508_Lecture7.html#creating-strings",
    "href": "Lectures/Lecture7/CSSS508_Lecture7.html#creating-strings",
    "title": "",
    "section": "Creating Strings",
    "text": "Creating Strings\nYou can create strings based on the value of other strings with str_c() (string combine), which takes any number of vectors and returns a character vector.\n\n1str_c(c(\"CSSS\", \"STAT\", \"SOC\"), 508)\n\n\n1\n\nBy default, str_c doesn‚Äôt put a space between the vectors it is combining.\n\n\n\n\n\n\n&gt; [1] \"CSSS508\" \"STAT508\" \"SOC508\"\n\n\n\n2str_c(c(\"CSSS\", \"STAT\", \"SOC\"), 508, sep = \" \")\n\n\n2\n\nYou can add a specific separator, including a space, using the sep argument.\n\n\n\n\n\n\n&gt; [1] \"CSSS 508\" \"STAT 508\" \"SOC 508\"\n\n\n\n3str_c(c(\"CSSS\", \"STAT\", \"SOC\"), 508, sep = \" \", collapse = \", \")\n\n\n3\n\nIf you want to combine the output into a single string, use collapse.\n\n\n\n\n\n\n&gt; [1] \"CSSS 508, STAT 508, SOC 508\""
  },
  {
    "objectID": "Lectures/Lecture7/CSSS508_Lecture7.html#example-1-with-restaurant-data",
    "href": "Lectures/Lecture7/CSSS508_Lecture7.html#example-1-with-restaurant-data",
    "title": "",
    "section": "Example #1 with Restaurant Data",
    "text": "Example #1 with Restaurant Data\n\nrestaurants |&gt; \n  select(Name, Address, City) |&gt; \n  distinct() |&gt; \n1  mutate(Sentence = str_c(Name, \" is located at \", Address, \" in \", City, \".\"),\n2         .keep = \"none\")\n\n\n1\n\nNotice there are spaces at the beginning and end of the fixed character strings. This is because if we used the sep argument here it would add a space before the period at the end of the sentence. So instead, we can add them directly where we want them.\n\n2\n\nUsing .keep = \"none\" here in order to see just the results of our mutate.\n\n\n\n\n\n\n&gt; # A tibble: 10,969 √ó 1\n&gt;    Sentence                                                                    \n&gt;    &lt;chr&gt;                                                                       \n&gt;  1 #807 TUTTA BELLA is located at 2746 NE 45TH ST in SEATTLE.                  \n&gt;  2 +MAS CAFE  is located at 1906 N 34TH ST in SEATTLE.                         \n&gt;  3 ?al?al Cafe is located at 122 2ND AVE S in SEATTLE.                         \n&gt;  4 100 LB CLAM is located at 1001 FAIRVIEW AVE N Unit 1700A in SEATTLE.        \n&gt;  5 1000 SPIRITS is located at 1225 1ST AVE in SEATTLE.                         \n&gt;  6 100TH AVE CAKES is located at 15364 NE 96TH PL in REDMOND.                  \n&gt;  7 108 VIETNAMESE AUTHENTIC  CUISINE is located at 18114 E VALLEY HWY in KENT. \n&gt;  8 11TH FRAME RESTAURANT & LOUNGE is located at 7638 NE BOTHELL WAY in KENMORE.\n&gt;  9 125TH ST GRILL is located at 12255 AURORA AVE N in Seattle.                 \n&gt; 10 12S TACOS MEXICAN FOOD KC1012 is located at 625 S 4TH ST in RENTON.         \n&gt; # ‚Ñπ 10,959 more rows"
  },
  {
    "objectID": "Lectures/Lecture7/CSSS508_Lecture7.html#example-2-with-restaurant-data",
    "href": "Lectures/Lecture7/CSSS508_Lecture7.html#example-2-with-restaurant-data",
    "title": "",
    "section": "Example #2 with Restaurant Data",
    "text": "Example #2 with Restaurant Data\nAs we saw in the previous example, when you‚Äôre mixing many fixed and variable strings with str_c() things can get overwhelmed by quotation marks pretty easily. An alternative with simpler syntax is str_glue() in which anything inside {} will be evaluated like it‚Äôs outside the quotes.\n\n\nrestaurants |&gt; \n  select(Name, Address, City) |&gt; \n  distinct() |&gt; \n  mutate(Sentence = str_glue(\"{Name} is located at {Address} in {City}.\"), \n         .keep = \"none\")\n\n\n\n&gt; # A tibble: 10,969 √ó 1\n&gt;    Sentence                                                                    \n&gt;    &lt;glue&gt;                                                                      \n&gt;  1 #807 TUTTA BELLA is located at 2746 NE 45TH ST in SEATTLE.                  \n&gt;  2 +MAS CAFE  is located at 1906 N 34TH ST in SEATTLE.                         \n&gt;  3 ?al?al Cafe is located at 122 2ND AVE S in SEATTLE.                         \n&gt;  4 100 LB CLAM is located at 1001 FAIRVIEW AVE N Unit 1700A in SEATTLE.        \n&gt;  5 1000 SPIRITS is located at 1225 1ST AVE in SEATTLE.                         \n&gt;  6 100TH AVE CAKES is located at 15364 NE 96TH PL in REDMOND.                  \n&gt;  7 108 VIETNAMESE AUTHENTIC  CUISINE is located at 18114 E VALLEY HWY in KENT. \n&gt;  8 11TH FRAME RESTAURANT & LOUNGE is located at 7638 NE BOTHELL WAY in KENMORE.\n&gt;  9 125TH ST GRILL is located at 12255 AURORA AVE N in Seattle.                 \n&gt; 10 12S TACOS MEXICAN FOOD KC1012 is located at 625 S 4TH ST in RENTON.         \n&gt; # ‚Ñπ 10,959 more rows"
  },
  {
    "objectID": "Lectures/Lecture7/CSSS508_Lecture7.html#example-3-with-restaurant-data",
    "href": "Lectures/Lecture7/CSSS508_Lecture7.html#example-3-with-restaurant-data",
    "title": "",
    "section": "Example #3 with Restaurant Data",
    "text": "Example #3 with Restaurant Data\nIf you want to create a summary of certain character strings you can use str_flatten() which takes a character vector and combines each element of the vector into a single string.\n\n\nrestaurants |&gt; \n1  select(Name, `Inspection Score`) |&gt;\n  summarize(inspection_scores = str_flatten(`Inspection Score`, collapse = \", \"), \n            .by = Name)\n\n\n1\n\nNotice that when a variable has spaces in it‚Äôs name (rather than being separated with an underscore in snake_case, for instance) you need to put backticks around it so R knows it is a singular object name.\n\n\n\n\n\n\n&gt; # A tibble: 9,878 √ó 2\n&gt;    Name                                inspection_scores                        \n&gt;    &lt;chr&gt;                               &lt;chr&gt;                                    \n&gt;  1 \"#807 TUTTA BELLA\"                  20, 20, 10, 10, 0, 0                     \n&gt;  2 \"+MAS CAFE \"                        0, 30, 30, 0, 47, 47, 47, 47, 47, 0, 0   \n&gt;  3 \"?al?al Cafe\"                       0, 0                                     \n&gt;  4 \"100 LB CLAM\"                       0, 0, 0, 25, 25, 25, 25, 0, 0            \n&gt;  5 \"1000 SPIRITS\"                      0, 5, 0, 5, 0, 5, 0, 5, 0, 32, 32, 32, 2‚Ä¶\n&gt;  6 \"100TH AVE CAKES\"                   0, 0, 0, 0                               \n&gt;  7 \"108 VIETNAMESE AUTHENTIC  CUISINE\" 35, 35, 35, 30, 30, 15, 15               \n&gt;  8 \"11TH FRAME RESTAURANT & LOUNGE\"    20, 20, 0, 10, 10, 5, 0, 30, 30, 18, 18,‚Ä¶\n&gt;  9 \"125TH ST GRILL\"                    0, 20, 20, 20, 0, 20, 20, 20, 18, 18, 18‚Ä¶\n&gt; 10 \"12S TACOS MEXICAN FOOD KC1012\"     &lt;NA&gt;                                     \n&gt; # ‚Ñπ 9,868 more rows"
  },
  {
    "objectID": "Lectures/Lecture7/CSSS508_Lecture7.html#example-4-with-restaurant-data",
    "href": "Lectures/Lecture7/CSSS508_Lecture7.html#example-4-with-restaurant-data",
    "title": "",
    "section": "Example #4 with Restaurant Data",
    "text": "Example #4 with Restaurant Data\nWhat if we want to plot one of the variables in our dataset but many of its values are too long and it‚Äôd be too arduous to manually add \\n to every long value? There‚Äôs str_wrap()!\n\n\nrestaurants |&gt; \n  mutate(Name = str_wrap(Name, width = 20)) |&gt; \n  distinct(Name)\n\n\n\n\n\n&gt; # A tibble: 9,873 √ó 1\n&gt;    Name                               \n&gt;    &lt;chr&gt;                              \n&gt;  1 \"#807 TUTTA BELLA\"                 \n&gt;  2 \"+MAS CAFE\"                        \n&gt;  3 \"?al?al Cafe\"                      \n&gt;  4 \"100 LB CLAM\"                      \n&gt;  5 \"1000 SPIRITS\"                     \n&gt;  6 \"100TH AVE CAKES\"                  \n&gt;  7 \"108 VIETNAMESE\\nAUTHENTIC CUISINE\"\n&gt;  8 \"11TH FRAME\\nRESTAURANT & LOUNGE\"  \n&gt;  9 \"125TH ST GRILL\"                   \n&gt; 10 \"12S TACOS MEXICAN\\nFOOD KC1012\"   \n&gt; # ‚Ñπ 9,863 more rows\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\n\n\n\n\n#807 TUTTA BELLA\n\n\n+MAS CAFE\n\n\n?al?al Cafe\n\n\n100 LB CLAM\n\n\n1000 SPIRITS\n\n\n100TH AVE CAKES\n\n\n108 VIETNAMESEAUTHENTIC CUISINE\n\n\n11TH FRAMERESTAURANT & LOUNGE\n\n\n125TH ST GRILL\n\n\n12S TACOS MEXICANFOOD KC1012"
  },
  {
    "objectID": "Lectures/Lecture7/CSSS508_Lecture7.html#separating-character-strings-into-multiple-variables",
    "href": "Lectures/Lecture7/CSSS508_Lecture7.html#separating-character-strings-into-multiple-variables",
    "title": "",
    "section": "Separating Character Strings into Multiple Variables",
    "text": "Separating Character Strings into Multiple Variables\nOftentimes you‚Äôll have multiple pieces of information in one single string. That‚Äôs where the family of separate_* functions1 come in handy.\n\n\n1separate_longer_delim(col, delim)\n2separate_longer_position(col, width)\n3separate_wider_delim(col, delim, names)\n4separate_wider_position(col, widths)\n\n\n1\n\nTakes a string and splits it into many rows based on a specified delimiter. Tends to be most useful when the number of components varies from row to row.\n\n2\n\nRarer use case but also splits into many rows, now based on the width of the output desired.\n\n3\n\nTakes a string and splits it into many columns based on a specified delimiter. Need to provide names for the new columns created by the split.\n\n4\n\nRather than a delimiter you provide a named integer vector where the name gives the name of the new column, and the value is the number of characters it occupies.\n\n\n\n\n\nThese functions actually come from the tidyr package because they operate on (columns of) data frames, rather than individual vectors. You‚Äôll notice that all of the str_* functions go inside a dplyr function, such as mutate, filter, etc. That‚Äôs because they operate on the level of a vector, not a dataframe. These separate_* functions, however, work like dplyr functions in that they operate directly on a column of data so you can pipe a data frame directly to them."
  },
  {
    "objectID": "Lectures/Lecture7/CSSS508_Lecture7.html#example-with-restaurant-data",
    "href": "Lectures/Lecture7/CSSS508_Lecture7.html#example-with-restaurant-data",
    "title": "",
    "section": "Example with Restaurant Data",
    "text": "Example with Restaurant Data\nThe most common use case will be the need to split a character string into multiple columns, which will require the separate_wider_* functions1.\n\n\nrestaurants |&gt; \n1  select(`Inspection Date`) |&gt;\n  separate_wider_delim(`Inspection Date`, \n2                       delim = \"/\",\n                       names = c(\"month\", \"day\", \"year\"))\n\n\n1\n\nThis variable was read in as a character string rather than a date object.\n\n2\n\nThe specific symbol that separates each element, i.e.¬†what we want to split on.\n\n\n\n\n\n\n&gt; # A tibble: 256,681 √ó 3\n&gt;    month day   year \n&gt;    &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;\n&gt;  1 03    02    2023 \n&gt;  2 03    02    2023 \n&gt;  3 08    31    2022 \n&gt;  4 08    31    2022 \n&gt;  5 01    13    2022 \n&gt;  6 01    06    2021 \n&gt;  7 06    22    2023 \n&gt;  8 03    01    2023 \n&gt;  9 03    01    2023 \n&gt; 10 07    13    2022 \n&gt; # ‚Ñπ 256,671 more rows\n\n\n\nIf you need to use the separate_longer_* functions, you can read more about them here."
  },
  {
    "objectID": "Lectures/Lecture7/CSSS508_Lecture7.html#separate_wider_-functions",
    "href": "Lectures/Lecture7/CSSS508_Lecture7.html#separate_wider_-functions",
    "title": "",
    "section": "separate_wider_* functions",
    "text": "separate_wider_* functions\nThe nice thing about this set of functions is that they have a built-in debugging method for instances when some rows don‚Äôt have the expected number of pieces.\n\nrestaurants |&gt; \n  select(Address) |&gt; \n  separate_wider_delim(Address, \n                       delim = \" \", \n                       names = c(\"num\", \"name\", \"type\")) \n\n\n\n&gt; Error in `separate_wider_delim()`:\n&gt; ! Expected 3 pieces in each element of `Address`.\n&gt; ! 792 values were too short.\n&gt; ‚Ñπ Use `too_few = \"debug\"` to diagnose the problem.\n&gt; ‚Ñπ Use `too_few = \"align_start\"/\"align_end\"` to silence this message.\n&gt; ! 223848 values were too long.\n&gt; ‚Ñπ Use `too_many = \"debug\"` to diagnose the problem.\n&gt; ‚Ñπ Use `too_many = \"drop\"/\"merge\"` to silence this message.\n\n\n\nThese debugging options will add 3 new variables to the data frame that begin with the name of the splitting variable with a suffix to designate the information they provide.\n\n\n\n_ok is a binary TRUE/FALSE telling you if that observation split in the expected way.\n\n_pieces returns the number of pieces that observation actually contains.\n_remainder returns the additional pieces left over (if any) for that observation."
  },
  {
    "objectID": "Lectures/Lecture7/CSSS508_Lecture7.html#separate_wider_-functions-1",
    "href": "Lectures/Lecture7/CSSS508_Lecture7.html#separate_wider_-functions-1",
    "title": "",
    "section": "separate_wider_* functions",
    "text": "separate_wider_* functions\nThe nice thing about this set of functions is that they have a built-in debugging method for instances when some rows don‚Äôt have the expected number of pieces.\n\ndebug &lt;- restaurants |&gt; \n  select(Address) |&gt; \n  separate_wider_delim(Address, \n                       delim = \" \", \n                       names = c(\"num\", \"name\", \"type\"), \n1                       too_many = \"debug\",\n                       too_few = \"debug\") \n2debug[debug$Address_pieces == 4, ]\n\n\n1\n\ntoo_many = \"drop\" will drop any additional pieces and too_many = \"merge\" will merge them all into the final column.\n\n2\n\nExample of the too_many error (Address_pieces ranged from 4 to 9 in this dataset).\n\n\n\n\n\n\n&gt; # A tibble: 172,718 √ó 7\n&gt;    num   name  type  Address         Address_ok Address_pieces Address_remainder\n&gt;    &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;           &lt;lgl&gt;               &lt;int&gt; &lt;chr&gt;            \n&gt;  1 2746  NE    45TH  2746 NE 45TH ST FALSE                   4 \" ST\"            \n&gt;  2 2746  NE    45TH  2746 NE 45TH ST FALSE                   4 \" ST\"            \n&gt;  3 2746  NE    45TH  2746 NE 45TH ST FALSE                   4 \" ST\"            \n&gt;  4 2746  NE    45TH  2746 NE 45TH ST FALSE                   4 \" ST\"            \n&gt;  5 2746  NE    45TH  2746 NE 45TH ST FALSE                   4 \" ST\"            \n&gt;  6 2746  NE    45TH  2746 NE 45TH ST FALSE                   4 \" ST\"            \n&gt;  7 1906  N     34TH  1906 N 34TH ST  FALSE                   4 \" ST\"            \n&gt;  8 1906  N     34TH  1906 N 34TH ST  FALSE                   4 \" ST\"            \n&gt;  9 1906  N     34TH  1906 N 34TH ST  FALSE                   4 \" ST\"            \n&gt; 10 1906  N     34TH  1906 N 34TH ST  FALSE                   4 \" ST\"            \n&gt; # ‚Ñπ 172,708 more rows"
  },
  {
    "objectID": "Lectures/Lecture7/CSSS508_Lecture7.html#separate_wider_-functions-2",
    "href": "Lectures/Lecture7/CSSS508_Lecture7.html#separate_wider_-functions-2",
    "title": "",
    "section": "separate_wider_* functions",
    "text": "separate_wider_* functions\nThe nice thing about this set of functions is that they have a built-in debugging method for instances when some rows don‚Äôt have the expected number of pieces.\n\ndebug &lt;- restaurants |&gt; \n  select(Address) |&gt; \n  separate_wider_delim(Address, \n                       delim = \" \", \n                       names = c(\"num\", \"name\", \"type\"),\n                       too_many = \"debug\",\n1                       too_few = \"debug\")\n2debug[debug$Address_pieces == 2, ]\n\n\n1\n\ntoo_few = \"align_start\" and too_few = \"align_end\" will add NAs to the missing pieces depending on where they should go.\n\n2\n\nExample of the too_few error.\n\n\n\n\n\n\n&gt; # A tibble: 792 √ó 7\n&gt;    num   name     type  Address      Address_ok Address_pieces Address_remainder\n&gt;    &lt;chr&gt; &lt;chr&gt;    &lt;chr&gt; &lt;chr&gt;        &lt;lgl&gt;               &lt;int&gt; &lt;chr&gt;            \n&gt;  1 1401  BROADWAY &lt;NA&gt;  1401 BROADW‚Ä¶ FALSE                   2 \"\"               \n&gt;  2 1401  BROADWAY &lt;NA&gt;  1401 BROADW‚Ä¶ FALSE                   2 \"\"               \n&gt;  3 1401  BROADWAY &lt;NA&gt;  1401 BROADW‚Ä¶ FALSE                   2 \"\"               \n&gt;  4 1401  BROADWAY &lt;NA&gt;  1401 BROADW‚Ä¶ FALSE                   2 \"\"               \n&gt;  5 1401  BROADWAY &lt;NA&gt;  1401 BROADW‚Ä¶ FALSE                   2 \"\"               \n&gt;  6 1401  BROADWAY &lt;NA&gt;  1401 BROADW‚Ä¶ FALSE                   2 \"\"               \n&gt;  7 1401  BROADWAY &lt;NA&gt;  1401 BROADW‚Ä¶ FALSE                   2 \"\"               \n&gt;  8 1401  BROADWAY &lt;NA&gt;  1401 BROADW‚Ä¶ FALSE                   2 \"\"               \n&gt;  9 1401  BROADWAY &lt;NA&gt;  1401 BROADW‚Ä¶ FALSE                   2 \"\"               \n&gt; 10 1401  BROADWAY &lt;NA&gt;  1401 BROADW‚Ä¶ FALSE                   2 \"\"               \n&gt; # ‚Ñπ 782 more rows"
  },
  {
    "objectID": "Lectures/Lecture7/CSSS508_Lecture7.html#modifying-strings-converting-cases",
    "href": "Lectures/Lecture7/CSSS508_Lecture7.html#modifying-strings-converting-cases",
    "title": "",
    "section": "Modifying Strings: Converting Cases",
    "text": "Modifying Strings: Converting Cases\nstr_to_upper(), str_to_lower(), str_to_title() convert cases, which is often a good idea to do before searching for values:\n\n\nunique_cities &lt;- unique(restaurants$City)\nunique_cities  |&gt; \n  head()\n\n\n\n&gt; [1] \"SEATTLE\" \"REDMOND\" \"KENT\"    \"KENMORE\" \"Seattle\" \"RENTON\"\n\n\n\n\n\nstr_to_upper(unique_cities) |&gt; \n  head()\n\n\n\n&gt; [1] \"SEATTLE\" \"REDMOND\" \"KENT\"    \"KENMORE\" \"SEATTLE\" \"RENTON\"\n\n\n\nstr_to_lower(unique_cities) |&gt; \n  head()\n\n\n\n&gt; [1] \"seattle\" \"redmond\" \"kent\"    \"kenmore\" \"seattle\" \"renton\"\n\n\n\nstr_to_title(unique_cities) |&gt; \n  head()\n\n\n\n&gt; [1] \"Seattle\" \"Redmond\" \"Kent\"    \"Kenmore\" \"Seattle\" \"Renton\""
  },
  {
    "objectID": "Lectures/Lecture7/CSSS508_Lecture7.html#modifying-strings-removing-whitespace",
    "href": "Lectures/Lecture7/CSSS508_Lecture7.html#modifying-strings-removing-whitespace",
    "title": "",
    "section": "Modifying Strings: Removing Whitespace",
    "text": "Modifying Strings: Removing Whitespace\nExtra leading or trailing whitespace is common in text data:\n\nunique_names &lt;- unique(restaurants$Name)\nunique_names |&gt; head(3)\n\n\n\n&gt; [1] \"#807 TUTTA BELLA\" \"+MAS CAFE \"       \"?al?al Cafe\"\n\n\n\nWe can remove the white space using str_trim():\n\nstr_trim(unique_names) |&gt; head(3)\n\n\n\n&gt; [1] \"#807 TUTTA BELLA\" \"+MAS CAFE\"        \"?al?al Cafe\"\n\n\n\n\n\nTwo related functions are str_squish() which trims spaces around a string but also removes duplicate spaces inside it and str_pad() which adds ‚Äúpadding‚Äù to any string to make it a given minimum width."
  },
  {
    "objectID": "Lectures/Lecture7/CSSS508_Lecture7.html#counting-characters",
    "href": "Lectures/Lecture7/CSSS508_Lecture7.html#counting-characters",
    "title": "",
    "section": "Counting Characters",
    "text": "Counting Characters\nAt the most basic level you can use str_length() to count the characters are in a string.\n\n\nphone_numbers &lt;- restaurants |&gt;\n  select(`Phone`) |&gt; \n1  mutate(phone_length = str_length(`Phone`))\n\n2phone_numbers |&gt; count(phone_length)\n\n\n1\n\nGetting the length of Phone\n\n2\n\nGetting the count of different lengths for Phone found in the data\n\n\n\n\n\n\n&gt; # A tibble: 4 √ó 2\n&gt;   phone_length      n\n&gt;          &lt;int&gt;  &lt;int&gt;\n&gt; 1           14 185717\n&gt; 2           15    155\n&gt; 3           18     49\n&gt; 4           NA  70760\n\n\n\n\n\nphone_numbers |&gt; \n  filter(phone_length %in% c(15, 18)) |&gt; \n3  slice_head(n = 1, by = phone_length)\n\n\n3\n\nFiltering for the two abnormal phone number lengths, and getting the first observation (row) by the two different numbers (15, 18).\n\n\n\n\n\n\n&gt; # A tibble: 2 √ó 2\n&gt;   Phone              phone_length\n&gt;   &lt;chr&gt;                     &lt;int&gt;\n&gt; 1 (714) 670-=5051              15\n&gt; 2 (822) 370-0EXT3700           18"
  },
  {
    "objectID": "Lectures/Lecture7/CSSS508_Lecture7.html#subsetting-strings",
    "href": "Lectures/Lecture7/CSSS508_Lecture7.html#subsetting-strings",
    "title": "",
    "section": "Subsetting Strings",
    "text": "Subsetting Strings\nIf we want to subset a string we can use str_sub(). Let‚Äôs pull out just the area codes from the Phone variable.\n\n\nrestaurants |&gt; \n  select(`Phone`) |&gt; \n1  mutate(area_code = str_sub(`Phone`, start = 2, end = 4)) |&gt;\n  distinct(area_code)\n\n\n1\n\nstart and end are the positions where the ‚Äúsubstring‚Äù should start and end (inclusive). You can also use negative values to count backwards from the end of a string. Note that str_sub() won‚Äôt fail if the string is too short: it will just return as much as possible.\n\n\n\n\n\n\n&gt; # A tibble: 209 √ó 1\n&gt;    area_code\n&gt;    &lt;chr&gt;    \n&gt;  1 206      \n&gt;  2 952      \n&gt;  3 758      \n&gt;  4 425      \n&gt;  5 702      \n&gt;  6 509      \n&gt;  7 512      \n&gt;  8 &lt;NA&gt;     \n&gt;  9 760      \n&gt; 10 801      \n&gt; # ‚Ñπ 199 more rows"
  },
  {
    "objectID": "Lectures/Lecture7/CSSS508_Lecture7.html#working-with-non-english-strings",
    "href": "Lectures/Lecture7/CSSS508_Lecture7.html#working-with-non-english-strings",
    "title": "",
    "section": "Working with Non-English Strings",
    "text": "Working with Non-English Strings\nComputer infrastructure is heavily biased towards English speakers so there are some things to be aware of if you‚Äôre interested in working with character data in a different language.\n\n\nEncoding\n\nUTF-8 can encode just about every character used by humans today and many extra symbols like emojis.\n\nreadr uses UTF-8 everywhere. This is a good default but will fail for data produced by older systems that don‚Äôt use UTF-8.\n\nTo read these correctly, you specify the encoding via the locale argument (hopefully that information is provided in the data documentation).\n\nUnfortunately, that‚Äôs rarely the case, so readr provides guess_encoding() to help you figure it out. It‚Äôs not foolproof and works better when you have lots of text.\n\nLearn more about the intricacies of encoding here."
  },
  {
    "objectID": "Lectures/Lecture7/CSSS508_Lecture7.html#working-with-non-english-strings-1",
    "href": "Lectures/Lecture7/CSSS508_Lecture7.html#working-with-non-english-strings-1",
    "title": "",
    "section": "Working with Non-English Strings",
    "text": "Working with Non-English Strings\nComputer infrastructure is heavily biased towards English speakers so there are some things to be aware of if you‚Äôre interested in working with character data in a different language.\n\nLetter Variations\n\nAccented letters may be either 1 character or 2 depending upon how they‚Äôre encoded, which affects position for str_length() and str_sub().\nstr_equal() will recognize that the different variations have the same appearance while == will evaluate them as different."
  },
  {
    "objectID": "Lectures/Lecture7/CSSS508_Lecture7.html#working-with-non-english-strings-2",
    "href": "Lectures/Lecture7/CSSS508_Lecture7.html#working-with-non-english-strings-2",
    "title": "",
    "section": "Working with Non-English Strings",
    "text": "Working with Non-English Strings\nComputer infrastructure is heavily biased towards English speakers so there are some things to be aware of if you‚Äôre interested in working with character data in a different language.\n\nLocale-Dependent Functions\n\nA locale is similar to a language but includes an optional region specifier to handle regional variations within a language1.\nBase R string functions will automatically use the locale set by your operating system which means that base R string functions do what you expect for your language.\n\nHowever, your code might work differently if you share it with someone who lives in a different country.\nTo avoid this problem, stringr defaults to English rules by using the ‚Äúen‚Äù locale and requires you to specify the locale argument to override it.\n\n\nYou can see which are supported in stringr by looking at stringi::stri_locale_list()"
  },
  {
    "objectID": "Lectures/Lecture7/CSSS508_Lecture7.html#pattern-matching",
    "href": "Lectures/Lecture7/CSSS508_Lecture7.html#pattern-matching",
    "title": "",
    "section": "Pattern-Matching!",
    "text": "Pattern-Matching!\nIt‚Äôs common to want to see if a string satisfies a certain pattern.\n\nWe did this with numeric values earlier in this course!\n\nrestaurants |&gt;  \n  select(Name, `Inspection Score`) |&gt; \n  filter(`Inspection Score` &lt; 10 | `Inspection Score` &gt; 150)\n\n&gt; # A tibble: 139,744 √ó 2\n&gt;    Name               `Inspection Score`\n&gt;    &lt;chr&gt;                           &lt;dbl&gt;\n&gt;  1 \"#807 TUTTA BELLA\"                  0\n&gt;  2 \"#807 TUTTA BELLA\"                  0\n&gt;  3 \"+MAS CAFE \"                        0\n&gt;  4 \"+MAS CAFE \"                        0\n&gt;  5 \"+MAS CAFE \"                        0\n&gt;  6 \"+MAS CAFE \"                        0\n&gt;  7 \"?al?al Cafe\"                       0\n&gt;  8 \"?al?al Cafe\"                       0\n&gt;  9 \"100 LB CLAM\"                       0\n&gt; 10 \"100 LB CLAM\"                       0\n&gt; # ‚Ñπ 139,734 more rows"
  },
  {
    "objectID": "Lectures/Lecture7/CSSS508_Lecture7.html#patterns-str_detect",
    "href": "Lectures/Lecture7/CSSS508_Lecture7.html#patterns-str_detect",
    "title": "",
    "section": "Patterns: str_detect()",
    "text": "Patterns: str_detect()\nWe can do similar pattern-checking using str_detect():\n\n1str_detect(string, pattern)\n\n\n1\n\nstring is the character string (or vector of strings) we want to examine and pattern is the pattern that we‚Äôre checking for, inside string. The output will be a TRUE/FALSE vector indicating if pattern was found.\n\n\n\n\n\n\n\nrestaurants |&gt; \n  select(Name, Address) |&gt; \n  filter(str_detect(Address, \"Pike\")) |&gt; \n  distinct()\n\n\n\n&gt; # A tibble: 5 √ó 2\n&gt;   Name                           Address       \n&gt;   &lt;chr&gt;                          &lt;chr&gt;         \n&gt; 1 Axum Foods DBA Lands Of Origin 1532 Pike PL  \n&gt; 2 CHA CHA LOUNGE                 1013 E Pike ST\n&gt; 3 Kitchen and Market             1926 Pike PL  \n&gt; 4 Luke's Lobster                 104 Pike ST   \n&gt; 5 SAM'S TAVERN                   1024 E Pike ST\n\n\n\n\n\nHmmm‚Ä¶there are only 5 restaurants on a street with Pike in the name?! ü§®ü§î"
  },
  {
    "objectID": "Lectures/Lecture7/CSSS508_Lecture7.html#patterns-str_detect-1",
    "href": "Lectures/Lecture7/CSSS508_Lecture7.html#patterns-str_detect-1",
    "title": "",
    "section": "Patterns: str_detect()",
    "text": "Patterns: str_detect()\nWe can do similar pattern-checking using str_detect():\n\n1str_detect(string, pattern)\n\n\n1\n\nstring is the character string (or vector of strings) we want to examine and pattern is the pattern that we‚Äôre checking for, inside string. The output will be a TRUE/FALSE vector indicating if pattern was found.\n\n\n\n\n\n\nrestaurants |&gt; \n  select(Name, Address) |&gt; \n2  mutate(Address = str_to_title(Address)) |&gt;\n  filter(str_detect(Address, \"Pike\")) |&gt; \n  distinct()\n\n\n2\n\nNote: Results are case-sensitive!! Therefore we need to transform all the addresses to the same case.\n\n\n\n\n&gt; # A tibble: 139 √ó 2\n&gt;    Name                                       Address           \n&gt;    &lt;chr&gt;                                      &lt;chr&gt;             \n&gt;  1 ALDER & ASH                                629 Pike St       \n&gt;  2 ALIBI ROOM, THE                            85 Pike St        \n&gt;  3 AMAZON RETAIL LLC                          610 E Pike St     \n&gt;  4 ATHENIAN INN                               1517 Pike Pl      \n&gt;  5 ATRIUM KITCHEN AT PIKE PLACE MARKET        93 Pike St Ste 101\n&gt;  6 AUDACITY WINEBAR ALEXANDRIA NICOLE CELLARS 800 Pike St       \n&gt;  7 Axum Foods DBA Lands Of Origin             1532 Pike Pl      \n&gt;  8 AYUTTHAYA THAI RESTAURANT                  727 E Pike St     \n&gt;  9 BAGELBOP                                   93 Pike St        \n&gt; 10 BAI TONG THAI STREET CAFE                  1121 E Pike St    \n&gt; # ‚Ñπ 129 more rows\n\n\n\nHmmm‚Ä¶there are only 5 restaurants on a street with Pike in the name?! ü§®ü§î"
  },
  {
    "objectID": "Lectures/Lecture7/CSSS508_Lecture7.html#replacement-str_replace",
    "href": "Lectures/Lecture7/CSSS508_Lecture7.html#replacement-str_replace",
    "title": "",
    "section": "Replacement: str_replace()",
    "text": "Replacement: str_replace()\nWhat about if you want to replace a string with something else? Use str_replace()!\n\nThis function works very similarly to str_detect(), but with one extra argument:\n\n1str_replace(string, pattern, replacement)\n\n\n1\n\nreplacement is what pattern is substituted for.\n\n\n\n\n\n\n\nrestaurants |&gt; \n  select(`Inspection Date`) |&gt; \n  mutate(full_date = str_replace(string = `Inspection Date`, \n2                                 pattern = \"01/\",\n                                 replacement = \"January \"))\n\n\n2\n\nIn this case, our pattern is limited since \"01/\" occurs both for the month and the day. This would be a good place for a regular expression.\n\n\n\n\n&gt; # A tibble: 256,681 √ó 2\n&gt;    `Inspection Date` full_date      \n&gt;    &lt;chr&gt;             &lt;chr&gt;          \n&gt;  1 03/02/2023        03/02/2023     \n&gt;  2 03/02/2023        03/02/2023     \n&gt;  3 08/31/2022        08/31/2022     \n&gt;  4 08/31/2022        08/31/2022     \n&gt;  5 01/13/2022        January 13/2022\n&gt;  6 01/06/2021        January 06/2021\n&gt;  7 06/22/2023        06/22/2023     \n&gt;  8 03/01/2023        03/January 2023\n&gt;  9 03/01/2023        03/January 2023\n&gt; 10 07/13/2022        07/13/2022     \n&gt; # ‚Ñπ 256,671 more rows"
  },
  {
    "objectID": "Lectures/Lecture7/CSSS508_Lecture7.html#what-are-regular-expressions",
    "href": "Lectures/Lecture7/CSSS508_Lecture7.html#what-are-regular-expressions",
    "title": "",
    "section": "What are Regular Expressions? ",
    "text": "What are Regular Expressions? \nRegular expressions1 or regexes are how we describe patterns we are looking for in text in a way that a computer can understand. We write an expression, apply it to a string input, and then can do things with matches we find.\n\n\nLiteral characters are defined snippets to search for like Pike or 01/.\n\n\n\n\nMetacharacters2 let us be flexible in describing patterns. Some basic types of metacharacters are listed below.\n\nQuantifiers control how many times a pattern can match\n\n? makes a pattern optional (i.e.¬†it matches 0 or 1 times)\n+ lets a pattern repeat (i.e.¬†it matches at least once)\n* lets a pattern be optional or repeat (i.e.¬†it matches any number of times, including 0)\n{n} matches exactly n times, {n,} matches at least n times, {n, m} matches between n and m times\n\nCharacter classes are defined by [] and let you match a set of characters\n\n. matches any character except a new line (\\n)\n- allows you to specify a range\nYou can invert a match by starting it with ^\n\nGrouping allows you to override the default precedence rules for regular expressions\n\n() also allows you to create groups which can be referenced later in the regular expression with backreferences, like \\1, \\2\nUse (?:), the non-grouping parentheses, to control precedence but not capture the match in a group. This is slightly more efficient than capturing parentheses and most useful for complex cases where you need to capture matches and control precedence independently.\n\nAlternation, |, allows us to pick between one or more alternative patterns\nAnchors allow you to add specificity as to where the match occurs\n\nUse ^ to anchor the start\nUse $ to anchor the end\nMatch the boundary between words (start or end) with \\b\n\nLookarounds look ahead or behind the current match without ‚Äúconsuming‚Äù any characters. These are useful when you want to check that a pattern exists, but you don‚Äôt want to include it in the result.\n\n(?=...) is a positive look-ahead assertion. Matches if ... matches at the current input\n(?!...) is a negative look-ahead assertion. Matches if ... does not match at the current input\n(?&lt;=...) is a positive look-behind assertion. Matches if ... matches text preceding the current position. Length must be bounded (i.e.¬†no * or +)\n(?&lt;!...) is a negative look-behind assertion. Matches if ... does not match text preceding the current position. Length must be bounded (i.e.¬†no * or +)\n\n\n\n\n\nYou can read more about regular expressions in stringr here and this is a useful tutorial to learn regex if you need to/when you‚Äôre ready!\n\n\nRegular expressions are very compact and use a lot of punctuation characters, so they can seem overwhelming and hard to read at first. DO NOT prioritize learning this right now, especially if you are still a beginner! This information is for future reference and to give you a sense of what you can do if you need/want to work with text data in the future.To treat a metacharacter as a literal character, you must escape it with two preceding backslashes \\\\, e.g.¬†to match (206) including the parentheses, you‚Äôd use \\\\(206\\\\) in your regex."
  },
  {
    "objectID": "Lectures/Lecture7/CSSS508_Lecture7.html#separation-with-regex",
    "href": "Lectures/Lecture7/CSSS508_Lecture7.html#separation-with-regex",
    "title": "",
    "section": "Separation with regex",
    "text": "Separation with regex\nLet‚Äôs go back to our example and see if we can use a regular expression to replace 01/ just for the month position of our date variable.\n\n\nrestaurants |&gt; \n  select(`Inspection Date`) |&gt; \n  mutate(full_date = str_replace(string = `Inspection Date`, \n1                                 pattern = \"^01/\",\n                                 replacement = \"January \"))\n\n\n1\n\nWe can pretty simply use a regex signifier (the starting anchor ^) to make sure our replacement only happens to the 01/s in the month position.\n\n\n\n\n\n\n&gt; # A tibble: 256,681 √ó 2\n&gt;    `Inspection Date` full_date      \n&gt;    &lt;chr&gt;             &lt;chr&gt;          \n&gt;  1 03/02/2023        03/02/2023     \n&gt;  2 03/02/2023        03/02/2023     \n&gt;  3 08/31/2022        08/31/2022     \n&gt;  4 08/31/2022        08/31/2022     \n&gt;  5 01/13/2022        January 13/2022\n&gt;  6 01/06/2021        January 06/2021\n&gt;  7 06/22/2023        06/22/2023     \n&gt;  8 03/01/2023        03/01/2023     \n&gt;  9 03/01/2023        03/01/2023     \n&gt; 10 07/13/2022        07/13/2022     \n&gt; # ‚Ñπ 256,671 more rows"
  },
  {
    "objectID": "Lectures/Lecture7/CSSS508_Lecture7.html#separation-with-regex-1",
    "href": "Lectures/Lecture7/CSSS508_Lecture7.html#separation-with-regex-1",
    "title": "",
    "section": "Separation with regex",
    "text": "Separation with regex\nLet‚Äôs look at a more realistic example and introduce the regex version of our separate_wider_* functions. What if we wanted to separate the Description variable into two separate variables: capacity_description and risk_category?\n\nrestaurants |&gt; \n1  count(Description) |&gt;\n2  print(n = 33)\n\n\n1\n\nSee all distinct values that Description takes to figure out how we need to separate this character vector.\n\n2\n\nYou can force a tibble to print more than the default 10 rows by specifying the number with print(n).\n\n\n\n\n\n\n&gt; # A tibble: 33 √ó 2\n&gt;    Description                                       n\n&gt;    &lt;chr&gt;                                         &lt;int&gt;\n&gt;  1 Bakery-no seating - Risk Category I              15\n&gt;  2 Bakery-no seating - Risk Category II           4396\n&gt;  3 Bakery-no seating - Risk Category III           325\n&gt;  4 Bed and Breakfast - Risk Category I              72\n&gt;  5 Caterer - Risk Category I                        53\n&gt;  6 Caterer - Risk Category II                       85\n&gt;  7 Caterer - Risk Category III                    2006\n&gt;  8 Grocery Store-no seating - Risk Category I     9752\n&gt;  9 Grocery Store-no seating - Risk Category II    2487\n&gt; 10 Limited Food Services - no permanent plumbing  1152\n&gt; 11 Meat/Sea Food - Risk Category III             14258\n&gt; 12 Mobile Food Unit - Risk Category I              735\n&gt; 13 Mobile Food Unit - Risk Category II             494\n&gt; 14 Mobile Food Unit - Risk Category III           4500\n&gt; 15 Non-Profit Institution - Risk Category I        840\n&gt; 16 Non-Profit Institution - Risk Category II       613\n&gt; 17 Non-Profit Institution - Risk Category III     6342\n&gt; 18 School Lunch Program - Risk II                13767\n&gt; 19 Seating 0-12 - Risk Category I                 4329\n&gt; 20 Seating 0-12 - Risk Category II                7102\n&gt; 21 Seating 0-12 - Risk Category III              40880\n&gt; 22 Seating 13-50 - Risk Category I                1511\n&gt; 23 Seating 13-50 - Risk Category II               7331\n&gt; 24 Seating 13-50 - Risk Category III             58592\n&gt; 25 Seating 151-250 - Risk Category I                73\n&gt; 26 Seating 151-250 - Risk Category II               26\n&gt; 27 Seating 151-250 - Risk Category III           10347\n&gt; 28 Seating 51-150 - Risk Category I                667\n&gt; 29 Seating 51-150 - Risk Category II               975\n&gt; 30 Seating 51-150 - Risk Category III            55706\n&gt; 31 Seating &gt; 250 - Risk Category I                  69\n&gt; 32 Seating &gt; 250 - Risk Category II                  4\n&gt; 33 Seating &gt; 250 - Risk Category III              7177"
  },
  {
    "objectID": "Lectures/Lecture7/CSSS508_Lecture7.html#separation-with-regex-2",
    "href": "Lectures/Lecture7/CSSS508_Lecture7.html#separation-with-regex-2",
    "title": "",
    "section": "Separation with regex",
    "text": "Separation with regex\n\nres_sep &lt;- restaurants |&gt; \n1  distinct(Name, Description) |&gt;\n2  separate_wider_regex(cols = Description,\n3                       patterns = c(capacity_description = \"^.+\",\n                                    risk_category = \"Risk ?(?:Category)? ?I{1,3}$\")) \n\n\n1\n\nFor this example I want to limit the dataset just to the pertinent variables for illustrative purposes so I am only keeping the distinct values of Name and Description.\n\n2\n\nThe cols argument of this function is the column you want to separate.\n\n3\n\nThe patterns argument takes a named character vector where the names become the column names and the character strings are regular expressions that match the desired contents of the vector.\n\n\n\n\n\n\n&gt; Error in `separate_wider_regex()`:\n&gt; ! Expected each value of `Description` to match the pattern, the whole\n&gt;   pattern, and nothing but the pattern.\n&gt; ! 104 values have problems.\n&gt; ‚Ñπ Use `too_few = \"debug\"` to diagnose the problem.\n&gt; ‚Ñπ Use `too_few = \"align_start\"` to silence this message.\n\n\n\n\nI‚Äôve triggered the debugging error message which tells me how to diagnose/ignore the mismatch that‚Äôs occurring."
  },
  {
    "objectID": "Lectures/Lecture7/CSSS508_Lecture7.html#separation-with-regex-3",
    "href": "Lectures/Lecture7/CSSS508_Lecture7.html#separation-with-regex-3",
    "title": "",
    "section": "Separation with regex",
    "text": "Separation with regex\n\nres_sep &lt;- restaurants |&gt; \n  distinct(Name, Description) |&gt; \n  separate_wider_regex(cols = Description, \n1                       patterns = c(capacity_description = \"^.+\",\n2                                    risk_category = \"Risk ?(?:Category)? ?I{1,3}$\"),\n                       too_few = \"debug\") |&gt; \n  distinct(capacity_description, risk_category, Description_ok, \n3           Description_matches, Description_remainder) |&gt;\n  print(n = 33)\n\n\n1\n\n\"^\" matches the beginning of a string,  \".\" matches any character except a new line, and \"+\" quantifies that \".\", asking it to return 1 or more characters.\n\n2\n\n\"Risk\" matches exactly, \" ?\" matches a singular white space 0 or 1 time,  \"(?:Category)?\" optionally matches the exact word ‚ÄúCategory‚Äù, again \" ?\" matches a singular white space 0 or 1 time, \"I{1,3}\" matches ‚ÄúI‚Äù 1-3 times, and \"$\" signifies the end of the string.\n\n3\n\nUsing distinct() on the created and debugging variables allows us to see what didn‚Äôt match.\n\n\n\n\n\n\n&gt; # A tibble: 33 √ó 5\n&gt;    capacity_description         risk_category Description_ok Description_matches\n&gt;    &lt;chr&gt;                        &lt;chr&gt;         &lt;lgl&gt;                        &lt;int&gt;\n&gt;  1 \"Seating 0-12 - \"            Risk Categor‚Ä¶ TRUE                             2\n&gt;  2 \"Seating 13-50 - \"           Risk Categor‚Ä¶ TRUE                             2\n&gt;  3 \"Seating 51-150 - \"          Risk Categor‚Ä¶ TRUE                             2\n&gt;  4 \"Bakery-no seating - \"       Risk Categor‚Ä¶ TRUE                             2\n&gt;  5 \"Mobile Food Unit - \"        Risk Categor‚Ä¶ TRUE                             2\n&gt;  6 \"Seating &gt; 250 - \"           Risk Categor‚Ä¶ TRUE                             2\n&gt;  7 \"Seating 151-250 - \"         Risk Categor‚Ä¶ TRUE                             2\n&gt;  8 \"Grocery Store-no seating -‚Ä¶ Risk Categor‚Ä¶ TRUE                             2\n&gt;  9 \"Seating 13-50 - \"           Risk Categor‚Ä¶ TRUE                             2\n&gt; 10 \"Caterer - \"                 Risk Categor‚Ä¶ TRUE                             2\n&gt; 11 \"Caterer - \"                 Risk Categor‚Ä¶ TRUE                             2\n&gt; 12 \"Seating 13-50 - \"           Risk Categor‚Ä¶ TRUE                             2\n&gt; 13 \"Seating 0-12 - \"            Risk Categor‚Ä¶ TRUE                             2\n&gt; 14 \"Meat/Sea Food - \"           Risk Categor‚Ä¶ TRUE                             2\n&gt; 15 \"Bakery-no seating - \"       Risk Categor‚Ä¶ TRUE                             2\n&gt; 16 \"Seating 0-12 - \"            Risk Categor‚Ä¶ TRUE                             2\n&gt; 17 \"Caterer - \"                 Risk Categor‚Ä¶ TRUE                             2\n&gt; 18 \"Limited Food Services - no‚Ä¶ &lt;NA&gt;          FALSE                            1\n&gt; 19 \"Seating 51-150 - \"          Risk Categor‚Ä¶ TRUE                             2\n&gt; 20 \"Seating 51-150 - \"          Risk Categor‚Ä¶ TRUE                             2\n&gt; 21 \"School Lunch Program - \"    Risk II       TRUE                             2\n&gt; 22 \"Mobile Food Unit - \"        Risk Categor‚Ä¶ TRUE                             2\n&gt; 23 \"Mobile Food Unit - \"        Risk Categor‚Ä¶ TRUE                             2\n&gt; 24 \"Non-Profit Institution - \"  Risk Categor‚Ä¶ TRUE                             2\n&gt; 25 \"Grocery Store-no seating -‚Ä¶ Risk Categor‚Ä¶ TRUE                             2\n&gt; 26 \"Bakery-no seating - \"       Risk Categor‚Ä¶ TRUE                             2\n&gt; 27 \"Seating &gt; 250 - \"           Risk Categor‚Ä¶ TRUE                             2\n&gt; 28 \"Non-Profit Institution - \"  Risk Categor‚Ä¶ TRUE                             2\n&gt; 29 \"Non-Profit Institution - \"  Risk Categor‚Ä¶ TRUE                             2\n&gt; 30 \"Seating 151-250 - \"         Risk Categor‚Ä¶ TRUE                             2\n&gt; 31 \"Seating &gt; 250 - \"           Risk Categor‚Ä¶ TRUE                             2\n&gt; 32 \"Seating 151-250 - \"         Risk Categor‚Ä¶ TRUE                             2\n&gt; 33 \"Bed and Breakfast - \"       Risk Categor‚Ä¶ TRUE                             2\n&gt; # ‚Ñπ 1 more variable: Description_remainder &lt;chr&gt;"
  },
  {
    "objectID": "Lectures/Lecture7/CSSS508_Lecture7.html#separation-with-regex-4",
    "href": "Lectures/Lecture7/CSSS508_Lecture7.html#separation-with-regex-4",
    "title": "",
    "section": "Separation with regex",
    "text": "Separation with regex\n\nres_sep &lt;- restaurants |&gt; \n  distinct(Name, Description) |&gt; \n  separate_wider_regex(cols = Description, \n                       patterns = c(capacity_description = \"^.+\",\n                                    risk_category = \"Risk ?(?:Category)? ?I{1,3}$\"), \n1                       too_few = \"align_start\")\nres_sep\n\n\n1\n\nSince the only non-match was the one without a valid value for risk_category, we can give too_few the value align_start which tells the function to fill in anything without a value for the second variable with an NA.\n\n\n\n\n\n\n&gt; # A tibble: 11,209 √ó 3\n&gt;    Name                                capacity_description   risk_category    \n&gt;    &lt;chr&gt;                               &lt;chr&gt;                  &lt;chr&gt;            \n&gt;  1 \"#807 TUTTA BELLA\"                  \"Seating 0-12 - \"      Risk Category III\n&gt;  2 \"+MAS CAFE \"                        \"Seating 0-12 - \"      Risk Category III\n&gt;  3 \"?al?al Cafe\"                       \"Seating 13-50 - \"     Risk Category III\n&gt;  4 \"100 LB CLAM\"                       \"Seating 0-12 - \"      Risk Category III\n&gt;  5 \"1000 SPIRITS\"                      \"Seating 51-150 - \"    Risk Category III\n&gt;  6 \"100TH AVE CAKES\"                   \"Bakery-no seating - \" Risk Category II \n&gt;  7 \"108 VIETNAMESE AUTHENTIC  CUISINE\" \"Seating 51-150 - \"    Risk Category III\n&gt;  8 \"11TH FRAME RESTAURANT & LOUNGE\"    \"Seating 51-150 - \"    Risk Category III\n&gt;  9 \"125TH ST GRILL\"                    \"Seating 51-150 - \"    Risk Category III\n&gt; 10 \"12S TACOS MEXICAN FOOD KC1012\"     \"Mobile Food Unit - \"  Risk Category III\n&gt; # ‚Ñπ 11,199 more rows\n\n\n\nWe can clean up these variables a bit more with a version of str_replace(): str_remove(). This technically replaces the pattern match with \"\", or an empty string."
  },
  {
    "objectID": "Lectures/Lecture7/CSSS508_Lecture7.html#separation-with-regex-5",
    "href": "Lectures/Lecture7/CSSS508_Lecture7.html#separation-with-regex-5",
    "title": "",
    "section": "Separation with regex",
    "text": "Separation with regex\n\nres_sep &lt;- restaurants |&gt; \n  distinct(Name, Description) |&gt; \n  separate_wider_regex(cols = Description, \n                       patterns = c(capacity_description = \"^.+\",\n                                    risk_category = \"Risk ?(?:Category)? ?I{1,3}$\"), \n                       too_few = \"align_start\") |&gt;\n1  mutate(capacity_description = str_remove(capacity_description, pattern = \" - $\"),\n2         risk_category = str_remove(risk_category, pattern = \"Risk ?(?:Category)? \"))\nres_sep\n\n\n1\n\nWe can remove the trailing - by using str_remove and providing the regular expression for that piece of the capacity_description string.\n\n2\n\nSince this variable is already named risk_category, we can remove that language from the beginning of each string, by matching the first part of our original regular expression for this variable.\n\n\n\n\n\n\n&gt; # A tibble: 11,209 √ó 3\n&gt;    Name                                capacity_description risk_category\n&gt;    &lt;chr&gt;                               &lt;chr&gt;                &lt;chr&gt;        \n&gt;  1 \"#807 TUTTA BELLA\"                  Seating 0-12         III          \n&gt;  2 \"+MAS CAFE \"                        Seating 0-12         III          \n&gt;  3 \"?al?al Cafe\"                       Seating 13-50        III          \n&gt;  4 \"100 LB CLAM\"                       Seating 0-12         III          \n&gt;  5 \"1000 SPIRITS\"                      Seating 51-150       III          \n&gt;  6 \"100TH AVE CAKES\"                   Bakery-no seating    II           \n&gt;  7 \"108 VIETNAMESE AUTHENTIC  CUISINE\" Seating 51-150       III          \n&gt;  8 \"11TH FRAME RESTAURANT & LOUNGE\"    Seating 51-150       III          \n&gt;  9 \"125TH ST GRILL\"                    Seating 51-150       III          \n&gt; 10 \"12S TACOS MEXICAN FOOD KC1012\"     Mobile Food Unit     III          \n&gt; # ‚Ñπ 11,199 more rows"
  },
  {
    "objectID": "Lectures/Lecture7/CSSS508_Lecture7.html#separation-with-regex-6",
    "href": "Lectures/Lecture7/CSSS508_Lecture7.html#separation-with-regex-6",
    "title": "",
    "section": "Separation with regex",
    "text": "Separation with regex\nWhat do the final 33 distinct values of these two new variables look like?\n\n\nres_sep |&gt; \n  distinct(capacity_description, risk_category) |&gt; \n  print(n = 33)\n\n\n\n&gt; # A tibble: 33 √ó 2\n&gt;    capacity_description                          risk_category\n&gt;    &lt;chr&gt;                                         &lt;chr&gt;        \n&gt;  1 Seating 0-12                                  III          \n&gt;  2 Seating 13-50                                 III          \n&gt;  3 Seating 51-150                                III          \n&gt;  4 Bakery-no seating                             II           \n&gt;  5 Mobile Food Unit                              III          \n&gt;  6 Seating &gt; 250                                 III          \n&gt;  7 Seating 151-250                               III          \n&gt;  8 Grocery Store-no seating                      I            \n&gt;  9 Seating 13-50                                 II           \n&gt; 10 Caterer                                       II           \n&gt; 11 Caterer                                       III          \n&gt; 12 Seating 13-50                                 I            \n&gt; 13 Seating 0-12                                  I            \n&gt; 14 Meat/Sea Food                                 III          \n&gt; 15 Bakery-no seating                             III          \n&gt; 16 Seating 0-12                                  II           \n&gt; 17 Caterer                                       I            \n&gt; 18 Limited Food Services - no permanent plumbing &lt;NA&gt;         \n&gt; 19 Seating 51-150                                I            \n&gt; 20 Seating 51-150                                II           \n&gt; 21 School Lunch Program                          II           \n&gt; 22 Mobile Food Unit                              I            \n&gt; 23 Mobile Food Unit                              II           \n&gt; 24 Non-Profit Institution                        III          \n&gt; 25 Grocery Store-no seating                      II           \n&gt; 26 Bakery-no seating                             I            \n&gt; 27 Seating &gt; 250                                 I            \n&gt; 28 Non-Profit Institution                        II           \n&gt; 29 Non-Profit Institution                        I            \n&gt; 30 Seating 151-250                               I            \n&gt; 31 Seating &gt; 250                                 II           \n&gt; 32 Seating 151-250                               II           \n&gt; 33 Bed and Breakfast                             I\n\n\n\n\n\nNice!"
  },
  {
    "objectID": "Lectures/Lecture7/CSSS508_Lecture7.html#other-uses-for-regular-expressions",
    "href": "Lectures/Lecture7/CSSS508_Lecture7.html#other-uses-for-regular-expressions",
    "title": "",
    "section": "Other Uses for Regular Expressions",
    "text": "Other Uses for Regular Expressions\nEven if you aren‚Äôt explicitly manipulating/analyzing text data for your research, knowing some things about regular expressions will still come in handy because they‚Äôre used in other places, both in Base R and the tidyverse.\n\n\n\n\napropos(pattern)\nlist.files(path, pattern)\n\n\n\n\nmatches()\npivot_longer()\nseparate_*_delim()"
  },
  {
    "objectID": "Lectures/Lecture7/CSSS508_Lecture7.html#apropos",
    "href": "Lectures/Lecture7/CSSS508_Lecture7.html#apropos",
    "title": "",
    "section": "apropos()",
    "text": "apropos()\napropos(pattern) searches all objects available from the global environment that match the given pattern. This is useful if you can‚Äôt quite remember the name of a function, for example:\n\n\napropos(\"separate\")\n\n\n\n&gt; [1] \"separate\"                 \"separate_\"               \n&gt; [3] \"separate_longer_delim\"    \"separate_longer_position\"\n&gt; [5] \"separate_rows\"            \"separate_rows_\"          \n&gt; [7] \"separate_wider_delim\"     \"separate_wider_position\" \n&gt; [9] \"separate_wider_regex\""
  },
  {
    "objectID": "Lectures/Lecture7/CSSS508_Lecture7.html#list.files",
    "href": "Lectures/Lecture7/CSSS508_Lecture7.html#list.files",
    "title": "",
    "section": "list.files()",
    "text": "list.files()\nlist.files(path, pattern) lists all files in path that match a regular expression pattern. For example, you can find all the Quarto files in the current directory with:\n\n\nlist.files(pattern = \"\\\\.qmd$\")\n\n\n\n&gt; [1] \"CSSS508_Lecture7_index.qmd\" \"CSSS508_Lecture7.qmd\""
  },
  {
    "objectID": "Lectures/Lecture7/CSSS508_Lecture7.html#matches",
    "href": "Lectures/Lecture7/CSSS508_Lecture7.html#matches",
    "title": "",
    "section": "matches()",
    "text": "matches()\nmatches(pattern) will select all variables whose name matches the supplied pattern.. It‚Äôs a tidyselect function (like starts_with() and the like) that you can use in any tidyverse function that selects variables.\n\n\nnames(iris)\n1iris %&gt;% select(matches(\"[pt]al\")) |&gt;\n  names() \n\n\n1\n\n[pt] signifies match either p or t.\n\n\n\n\n\n\n&gt; [1] \"Sepal.Length\" \"Sepal.Width\"  \"Petal.Length\" \"Petal.Width\"  \"Species\"     \n&gt; [1] \"Sepal.Length\" \"Sepal.Width\"  \"Petal.Length\" \"Petal.Width\""
  },
  {
    "objectID": "Lectures/Lecture7/CSSS508_Lecture7.html#pivot_longer",
    "href": "Lectures/Lecture7/CSSS508_Lecture7.html#pivot_longer",
    "title": "",
    "section": "pivot_longer()",
    "text": "pivot_longer()\npivot_longer()‚Äôs argument names_pattern takes a vector of regular expressions, just like separate_wider_regex(). It‚Äôs useful when extracting data out of variable names with a complex structure.\n\n\nnames(who) |&gt; head(n = 10)\n\n\n\n&gt;  [1] \"country\"      \"iso2\"         \"iso3\"         \"year\"         \"new_sp_m014\" \n&gt;  [6] \"new_sp_m1524\" \"new_sp_m2534\" \"new_sp_m3544\" \"new_sp_m4554\" \"new_sp_m5564\"\n\n\n\n\n\n\n\nwho |&gt; \n  pivot_longer(cols = new_sp_m014:newrel_f65,\n               names_to = c(\"diagnosis\", \"gender\", \"age\"), \n1               names_pattern = \"new_?(.*)_(.)(.*)\",\n               values_to = \"count\") |&gt; \n  arrange(desc(count)) |&gt; \n  slice_head(n = 5)\n\n\n1\n\n\"new_?(.*)_(.)(.*)\" explained: new matches exactly, then _? optionally matches an underscore, (.*) matches any number of characters and in this example it captures the new diagnosis variable, _ matches exactly, (.) matches one character which captures the gender variable m or f in this example, and lastly, (.*) again matches any number of characters, in this case it captures the varying digits of the age variable.\n\n\n\n\n\n\n&gt; # A tibble: 5 √ó 8\n&gt;   country iso2  iso3   year diagnosis gender age    count\n&gt;   &lt;chr&gt;   &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt;     &lt;chr&gt;  &lt;chr&gt;  &lt;dbl&gt;\n&gt; 1 India   IN    IND    2007 sn        m      3544  250051\n&gt; 2 India   IN    IND    2007 sn        f      3544  148811\n&gt; 3 China   CN    CHN    2013 rel       m      65    124476\n&gt; 4 China   CN    CHN    2013 rel       m      5564  112558\n&gt; 5 India   IN    IND    2007 ep        m      3544  105825"
  },
  {
    "objectID": "Lectures/Lecture7/CSSS508_Lecture7.html#separate__delim",
    "href": "Lectures/Lecture7/CSSS508_Lecture7.html#separate__delim",
    "title": "",
    "section": "separate_*_delim()",
    "text": "separate_*_delim()\nThe delim argument in separate_longer_delim() and separate_wider_delim() usually matches a fixed string, but you can use regex() to make it match a pattern. This is useful, for example, if you want to match a comma that is optionally followed by a space, i.e.¬†regex(\", ?\")."
  },
  {
    "objectID": "Lectures/Lecture7/CSSS508_Lecture7.html#base-r-equivalents",
    "href": "Lectures/Lecture7/CSSS508_Lecture7.html#base-r-equivalents",
    "title": "",
    "section": "Base R Equivalents1",
    "text": "Base R Equivalents1\n\n\n\nBase R\npaste0(x, sep, collapse)\n\nnchar(x)\nsubstr(x, start, end)\ntoupper(x)\ntolower(x)\ntools::toTitleCase(x)\ntrimws(x)\ngrepl(pattern, x)\nsub(x, pattern, replacement)\nstrwrap(x)\n\nstringr\nstr_c(x, sep, collapse)\nstr_flatten(x, collapse)\nstr_length(x)\nstr_sub(x, start, end)\nstr_to_upper(x)\nstr_to_lower(x)\nstr_to_title(x)\nstr_trim(x)\nstr_detect(x, pattern)\nstr_replace(x, pattern, replacement)\nstr_wrap(x)\n\n\n\nThere are many other useful stringr functions/variants of the functions we used today. Check them out here.\n\n\nYou can see a full list here, including functions we didn‚Äôt look at today."
  },
  {
    "objectID": "Lectures/Lecture7/CSSS508_Lecture7.html#strings-1",
    "href": "Lectures/Lecture7/CSSS508_Lecture7.html#strings-1",
    "title": "",
    "section": "Strings",
    "text": "Strings\n\nFirst, install the babynames packages in your console, then run the following code to load the babynames dataset into your global environment.\n\n1library(babynames)\ndata(babynames) \n\n\n1\n\nUS baby names provided by the Social Security Administration. This package contains all names used for at least 5 children of either sex for 1880-2017.\n\n\n\n\n\n\nWhat is the shortest name length? What is the longest name length? Mean? Median?\nWhat is the most popular letter for a name to start with?1\nPick a year between 1880 and 2017 and use either str_c() or str_glue() to create a new variable that is a sentence stating what the most popular name was for each binary sex category in that year. Add a line break in your sentence and use str_view() to see what the new string looks like2.\nOptional bonus: Make a plot of the popularity of your own name/nickname over time. What year was your name most popular? Is that close to your birth year?\n\n\nHint, each name has a proportion that is necessary to incorporate here.Hint: Use pull() before running str_view() to extract the last column created (your sentence) as a vector."
  },
  {
    "objectID": "Lectures/Lecture7/CSSS508_Lecture7.html#answers",
    "href": "Lectures/Lecture7/CSSS508_Lecture7.html#answers",
    "title": "",
    "section": "Answers",
    "text": "Answers\n\nbabynames\n\n\n\n&gt; # A tibble: 1,924,665 √ó 5\n&gt;     year sex   name          n   prop\n&gt;    &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;     &lt;int&gt;  &lt;dbl&gt;\n&gt;  1  1880 F     Mary       7065 0.0724\n&gt;  2  1880 F     Anna       2604 0.0267\n&gt;  3  1880 F     Emma       2003 0.0205\n&gt;  4  1880 F     Elizabeth  1939 0.0199\n&gt;  5  1880 F     Minnie     1746 0.0179\n&gt;  6  1880 F     Margaret   1578 0.0162\n&gt;  7  1880 F     Ida        1472 0.0151\n&gt;  8  1880 F     Alice      1414 0.0145\n&gt;  9  1880 F     Bertha     1320 0.0135\n&gt; 10  1880 F     Sarah      1288 0.0132\n&gt; # ‚Ñπ 1,924,655 more rows"
  },
  {
    "objectID": "Lectures/Lecture7/CSSS508_Lecture7.html#answers-1",
    "href": "Lectures/Lecture7/CSSS508_Lecture7.html#answers-1",
    "title": "",
    "section": "Answers",
    "text": "Answers\n\nWhat is the shortest name length? What is the longest name length? Mean? Median?\n\n\n\nbabynames |&gt; \n  distinct(name) |&gt; \n  mutate(length = str_length(name)) |&gt; \n  summarise(shortest = min(length), \n            longest = max(length), \n            mean = mean(length), \n            median = median(length))\n\n\n\n&gt; # A tibble: 1 √ó 4\n&gt;   shortest longest  mean median\n&gt;      &lt;int&gt;   &lt;int&gt; &lt;dbl&gt;  &lt;dbl&gt;\n&gt; 1        2      15  6.53      6"
  },
  {
    "objectID": "Lectures/Lecture7/CSSS508_Lecture7.html#answers-2",
    "href": "Lectures/Lecture7/CSSS508_Lecture7.html#answers-2",
    "title": "",
    "section": "Answers",
    "text": "Answers\n\nWhat is the most popular letter for a name to start with?1\n\n\n\nbabynames |&gt; \n  mutate(first = str_sub(name, 1, 1)) |&gt; \n  count(first, wt = prop,) |&gt; \n  arrange(desc(n))\n\n\n\n&gt; # A tibble: 26 √ó 2\n&gt;    first     n\n&gt;    &lt;chr&gt; &lt;dbl&gt;\n&gt;  1 J      32.6\n&gt;  2 M      25.9\n&gt;  3 A      20.9\n&gt;  4 C      18.7\n&gt;  5 R      17.8\n&gt;  6 E      16.0\n&gt;  7 D      15.5\n&gt;  8 L      15.3\n&gt;  9 S      13.8\n&gt; 10 B      11.8\n&gt; # ‚Ñπ 16 more rows\n\n\n\nHint, each name has a proportion that is necessary to account for here."
  },
  {
    "objectID": "Lectures/Lecture7/CSSS508_Lecture7.html#answers-3",
    "href": "Lectures/Lecture7/CSSS508_Lecture7.html#answers-3",
    "title": "",
    "section": "Answers",
    "text": "Answers\n\nPick a year between 1880 and 2017 and use either str_c() or str_glue() to create a new variable that is a sentence stating what the most popular name was for each binary sex category in that year. Bonus: Add a line break in your sentence and use str_view() to see what the new string looks like1.\n\n\n\nbabynames |&gt; \n  filter(year == 1950) |&gt; \n2  mutate(sex2 = if_else(sex == \"F\", \"girl\", \"boy\")) |&gt;\n3  slice_max(prop, by = c(sex)) |&gt;\n  mutate(Sentence = str_wrap(str_glue(\"The most popular name for {sex2}s in \n                                      {year} was {name}.\"), \n                             width = 25)) |&gt; \n4  pull(Sentence) |&gt;\n  str_view()\n\n\n2\n\nCreating a new sex2 variable for better interpretability of the final Sentence variable.\n\n3\n\nGetting the most popular (by proportion of all names) male and female names.\n\n4\n\npull() is similar to indexing with $ in Base R but works well with pipes. This is necessary to do before str_view() which only takes a vector of values (not a column from a data frame).\n\n\n\n\n\n\n&gt; [1] ‚îÇ The most popular name for\n&gt;     ‚îÇ girls in 1950 was Linda.\n&gt; [2] ‚îÇ The most popular name for\n&gt;     ‚îÇ boys in 1950 was James.\n\n\n\nHint: Use pull() before running str_view() to extract the last column created (your sentence) as a vector."
  },
  {
    "objectID": "Lectures/Lecture7/CSSS508_Lecture7.html#answers-4",
    "href": "Lectures/Lecture7/CSSS508_Lecture7.html#answers-4",
    "title": "",
    "section": "Answers",
    "text": "Answers\n\nOptional bonus: Make a plot of the popularity of your own name/nickname over time. What year was your name most popular? Is that close to your birth year?\n\n\n5library(ggrepel)\n6library(ggthemes)\n7library(patchwork)\n\ncolors &lt;- c(\"#4e79a7\",\"#f28e2c\",\"#e15759\",\"#76b7b2\",\"#59a14f\",\"#edc949\",\n            \"#af7aa1\",\"#ff9da7\",\"#9c755f\",\"#bab0ab\")\n\nvictoria_plot &lt;- babynames |&gt; \n  filter(name == \"Victoria\") |&gt; \n8  mutate(sex2 = if_else(sex == \"F\", \"Female\", \"Male\")) |&gt;\n  ggplot(aes(x = year, y = prop, group = name, fill = name)) +\n  geom_density(stat = \"identity\", alpha = 0.25, color = colors[1]) + \n9  geom_vline(xintercept = 1988, color = colors[2], linetype = 2) +\n10  geom_vline(data = babynames |&gt;\n               filter(name == \"Victoria\") |&gt;\n               mutate(sex2 = if_else(sex == \"F\", \"Female\", \"Male\")) |&gt;\n               slice_max(prop, by = sex2),\n             aes(xintercept = year), color = colors[3]) +\n11  facet_grid(sex2 ~ .,\n             scales = \"free_y\") +\n12  scale_fill_manual(values = colors[1]) +\n  labs(title = 'Popularity of the name \"Victoria\"',\n       subtitle = \"1880-2017, by binary sex category\",\n13       y = \"\",\n       x = \"\") +\n  theme_tufte(base_size = 16) + \n  theme(legend.position = \"none\", \n14        strip.background = element_rect(color=\"black\",\n                                        fill= alpha(colors[10], 0.5),\n                                        linetype = 0))\n\nvic_plot &lt;- babynames |&gt; \n  filter(name == \"Vic\") |&gt; \n  mutate(sex2 = if_else(sex == \"F\", \"Female\", \"Male\")) |&gt; \n  ggplot(aes(x = year, y = prop, group = name, fill = name)) +\n  geom_density(stat = \"identity\", alpha = 0.25, color = colors[6]) + \n  geom_vline(xintercept = 1988, color = colors[2], linetype = 2) +\n  geom_vline(data = babynames |&gt; \n               filter(name == \"Vic\") |&gt; \n               mutate(sex2 = if_else(sex == \"F\", \"Female\", \"Male\")) |&gt; \n               slice_max(prop, by = sex2), \n             aes(xintercept = year), color = colors[3]) + \n  facet_grid(sex2 ~ .,\n             scales = \"free_y\") + \n  scale_fill_manual(values = colors[6]) + \n  labs(title = 'Popularity of the name \"Vic\"',\n       y = \"\", \n       caption = \"Note: y-axes are of different scales; \n       Orange, dashed line represents 1988; # \n       Red, solid line represents most popular # \n15       year for that name-sex pairing.\",\n       x = \"Year\") +\n  theme_tufte(base_size = 16) + \n  theme(legend.position = \"none\", \n        strip.background = element_rect(color=\"black\", \n                                        fill= alpha(colors[10], 0.5), \n                                        linetype = 0))\n\n16combo_plots &lt;- victoria_plot / vic_plot + ylab(NULL)\n\n17wrap_elements(combo_plots) +\n  theme_tufte(base_size = 16) +\n18  labs(tag = \"Proportion of all names given to U.S. newborns\") +\n  theme(plot.tag = element_text(size = rel(1.25), angle = 90),\n        plot.tag.position = \"left\")\n\n\n5\n\nFor labels that don‚Äôt overlap.\n\n6\n\nFor extra built-in themes.\n\n7\n\nAllows distinct plots to be put together into one visualization.\n\n8\n\nCreating an alternative sex variable for facet visualization purposes.\n\n9\n\nVertical line for birth year.\n\n10\n\nVertical line for most popular year for that name/nickname.\n\n11\n\nFacetting by sex2 and allowing the y-axis to vary based on facet value.\n\n12\n\nApplying desired colors.\n\n13\n\nLeaving axes blank for final patchwork labelling.\n\n14\n\nSpecifying color for facet labels.\n\n15\n\nAdding note and x-axis text since this plot will be at the bottom of the overall visualization.\n\n16\n\nCreating object for patchwork visuaization.\n\n17\n\nPutting together the two separate plots.\n\n18\n\nCreating and plotting a y axis that spans both plots."
  },
  {
    "objectID": "Lectures/Lecture7/CSSS508_Lecture7.html#answers-5",
    "href": "Lectures/Lecture7/CSSS508_Lecture7.html#answers-5",
    "title": "",
    "section": "Answers",
    "text": "Answers\nExample using regular expressions:\n\nnicknames &lt;- babynames |&gt; \n19  mutate(nickname = case_when(str_detect(name, pattern = \"^Vi.{2}oria$\") ~ \"Victoria\",\n                              str_detect(name, pattern = \"^Vi.{2}or$\") ~ \"Victor\",\n                              str_detect(name, pattern = \"^Vi[ck]{1,2}$\") ~ \"Vic\",\n                              str_detect(name, pattern = \"^Tor[riey]*$\") ~ \"Tori\",\n                              str_detect(name, pattern = \"^Vi[ck]+[iey]*$\") ~ \"Vicky\",\n                               .default = NA)) |&gt; \n20  filter(!is.na(nickname)) |&gt;\n21  mutate(prop2 = sum(prop),\n         .by = c(year, nickname, sex)) |&gt;\n  distinct(year, nickname, prop2, sex) |&gt; \n22  mutate(sex2 = if_else(sex == \"F\", \"Female\", \"Male\"),\n23         nickname = fct(nickname, levels = c(\"Victoria\", \"Victor\", \"Vicky\", \"Tori\", \"Vic\")))\n\nmy_names &lt;- nicknames |&gt; \n  ggplot(aes(x = year, y = prop2, fill = nickname, group = nickname)) +\n  geom_density(aes(color = nickname), stat = \"identity\", alpha = 0.15) +\n  geom_vline(xintercept = 1988, color = colors[4], linetype = 2) +\n24  scale_fill_manual(values = colors[c(1:3, 5:7)]) +\n  scale_color_manual(values = colors[c(1:3, 5:7)]) + \n  facet_grid(sex2 ~ .,\n             scales = \"free_y\") + \n  geom_label_repel(data = nicknames |&gt; slice_max(prop2, by = c(sex2, nickname)),\n                   aes(label = nickname), stat = \"identity\") + \n  labs(title = 'Popularity of all nicknames for \"Victoria\" (including all spelling variants)',\n       caption = \"Note: y-axes are of different scales; Teal, dashed line represents 1988\",\n       subtitle = \"1880-2017, by binary sex category\",\n       y = \"Proportion of all names given to U.S. newborns\", \n       x = \"Year\") +\n  theme_tufte(base_size = 16) + \n  theme(legend.position = \"none\", \n        strip.background = element_rect(color=\"black\", fill= alpha(colors[10], 0.5), linetype = 0))\nmy_names\n\n\n19\n\nCreating a new variable that finds all spelling variations of ‚ÄúVictoria‚Äù and its most common derivatives using regular expressions.\n\n20\n\nRemoving all names that don‚Äôt match any of the versions of ‚ÄúVictoria‚Äù or its nicknames.\n\n21\n\nCalculating a new proportion that collapses all spelling variations into the most common variant.\n\n22\n\nCreating an alternative sex variable for facet visualization purposes.\n\n23\n\nPutting names in the order I want to assign for colors.\n\n24\n\nPicking the specific colors I want to assign to the 5 names"
  },
  {
    "objectID": "Lectures/Lecture9/CSSS508_Lecture9_index.html",
    "href": "Lectures/Lecture9/CSSS508_Lecture9_index.html",
    "title": "Lecture 9",
    "section": "",
    "text": "Iteration\n\nDecember 2, 2025\n\n\n\n\n\nSlides & Code\nHTML slides ‚Ä¢ Raw qmd file ‚Ä¢ R Code\n\n\n\nSuggested Reading (from R for Data Science (2e)1)\nChapter 27: Iteration\n\n\n1¬†Hadley Wickham, Mine √áetinkaya-Rundel & Garrett Grolemund\nUseful Resources\n\nCheatsheets\npurrr ‚Ä¢ dplyr\n\n\nPackage Website\npurrr ‚Ä¢ dplyr\n\n\nOther Readings\nAdvanced R2: Chapter 5 - Control Flow\nAdvanced R: Functional Programming\n2¬†Hadley Wickham\n\nCrowdsource Help\nCS&SS 508 Slack Workspace ‚Ä¢ Posit community ‚Ä¢ Stackoverflow",
    "crumbs": [
      "Lectures",
      "Lecture 9"
    ]
  },
  {
    "objectID": "Lectures/Lecture9/CSSS508_Lecture9.html#title-slide",
    "href": "Lectures/Lecture9/CSSS508_Lecture9.html#title-slide",
    "title": "",
    "section": "",
    "text": "Iteration\nCS&SS 508 ‚Ä¢ Lecture 9\n2 December 2025\nVictoria Sass"
  },
  {
    "objectID": "Lectures/Lecture9/CSSS508_Lecture9.html#bad-repetition",
    "href": "Lectures/Lecture9/CSSS508_Lecture9.html#bad-repetition",
    "title": "",
    "section": "Bad Repetition",
    "text": "Bad Repetition\nIf someone doesn‚Äôt know better, they might find the means of variables in the swiss data by typing a line of code for each column:\n\n\nmean1 &lt;- mean(swiss$Fertility)\nmean2 &lt;- mean(swiss$Agriculture)\nmean3 &lt;- mean(swissExamination)\nmean4 &lt;- mean(swiss$Fertility)\nmean5 &lt;- mean(swiss$Catholic)\nmean5 &lt;- mean(swiss$Infant.Mortality)\nc(mean1, mean2 mean3, mean4, mean5, man6)\n\n\n\n&gt; Error in parse(text = input): &lt;text&gt;:7:16: unexpected symbol\n&gt; 6: mean5 &lt;- mean(swiss$Infant.Mortality)\n&gt; 7: c(mean1, mean2 mean3\n&gt;                   ^\n\n\n\nCan you spot the problems?\n\n\nHow upset would they be if the swiss data had 200 columns instead of 6?"
  },
  {
    "objectID": "Lectures/Lecture9/CSSS508_Lecture9.html#good-repetition",
    "href": "Lectures/Lecture9/CSSS508_Lecture9.html#good-repetition",
    "title": "",
    "section": "Good Repetition",
    "text": "Good Repetition\nToday you‚Äôll learn a better way to repeat tasks, without repeating code, using functions from the dplyr and purrr packages in the tidyverse.\n\n\nswiss |&gt; dplyr::summarize(\n  across(Fertility:Infant.Mortality, mean)\n  )\n\n\n\n&gt;   Fertility Agriculture Examination Education Catholic Infant.Mortality\n&gt; 1     70.14       50.66       16.49     10.98    41.14            19.94\n\n\n\n\nDon‚Äôt worry about the details yet!"
  },
  {
    "objectID": "Lectures/Lecture9/CSSS508_Lecture9.html#goal-dont-repeat-yourself-dry",
    "href": "Lectures/Lecture9/CSSS508_Lecture9.html#goal-dont-repeat-yourself-dry",
    "title": "",
    "section": "Goal: Don‚Äôt Repeat Yourself (DRY)!",
    "text": "Goal: Don‚Äôt Repeat Yourself (DRY)!\nThe DRY idea: Computers are much better at doing the same thing over and over again than we are.\n\nWriting code to repeat tasks for us reduces the most common human coding mistakes.\nIt also substantially reduces the time and effort involved in processing large volumes of data.\nLastly, compact code is more readable and easier to troubleshoot."
  },
  {
    "objectID": "Lectures/Lecture9/CSSS508_Lecture9.html#method-iteration",
    "href": "Lectures/Lecture9/CSSS508_Lecture9.html#method-iteration",
    "title": "",
    "section": "Method: Iteration!",
    "text": "Method: Iteration!\nIteration involves repeatedly performing the same action on different objects.\n\n\nWe‚Äôve already done some iteration, both because it‚Äôs built into R in certain ways, and because many of the tidyverse packages we‚Äôve used have functions that are iterative.\n\n\n\nSome examples we‚Äôve seen:\n\nMultiplying a vector x by any integer\n\nOther languages require explicit looping but R iterates automatically with its recycling rules\n\nFacetting ggplots\nSummarizing a grouped dataset\n\n\n\nWe‚Äôre now going to learn what makes R a functional programming language. That is, we‚Äôll learn some functions that themselves take functions as arguments."
  },
  {
    "objectID": "Lectures/Lecture9/CSSS508_Lecture9.html#simple-motivating-examplecontinued",
    "href": "Lectures/Lecture9/CSSS508_Lecture9.html#simple-motivating-examplecontinued",
    "title": "",
    "section": "Simple, Motivating Example‚Ä¶Continued",
    "text": "Simple, Motivating Example‚Ä¶Continued\nLet‚Äôs return to our first example from last week:\n\nWithout our functionWith our functionWith across()\n\n\n\n\n\n\ndf &lt;- tibble(\n  a = rnorm(5),\n  b = rnorm(5),\n  c = rnorm(5),\n  d = rnorm(5)\n  )\ndf\n\n\n\n\n&gt; # A tibble: 5 √ó 4\n&gt;        a       b      c      d\n&gt;    &lt;dbl&gt;   &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;\n&gt; 1 -0.130 -0.398   0.347  0.368\n&gt; 2 -1.14   1.04   -0.433 -1.07 \n&gt; 3 -2.18  -1.06   -0.278 -1.10 \n&gt; 4  0.765 -0.0376  0.674 -0.185\n&gt; 5 -0.474  1.27    1.25   1.36\n\n\n\n\n\n\n\ndf |&gt; mutate(\n  a = (a - min(a, na.rm = TRUE)) / (max(a, na.rm = TRUE) - min(a, na.rm = TRUE)),\n  b = (b - min(b, na.rm = TRUE)) / (max(b, na.rm = TRUE) - min(a, na.rm = TRUE)),\n  c = (c - min(c, na.rm = TRUE)) / (max(c, na.rm = TRUE) - min(c, na.rm = TRUE)),\n  d = (d - min(d, na.rm = TRUE)) / (max(d, na.rm = TRUE) - min(d, na.rm = TRUE))\n  )\n\n\n\n\n\n\nrescale01 &lt;- function(x) { \n  (x - min(x, na.rm = TRUE)) / (max(x, na.rm = TRUE) - min(x, na.rm = TRUE))\n}\n\n\n\n\n\n\n\n\ndf |&gt; mutate(a = rescale01(a),\n             b = rescale01(b),\n             c = rescale01(c),\n             d = rescale01(d))\n\n\n\n\n&gt; # A tibble: 5 √ó 4\n&gt;       a     b      c      d\n&gt;   &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;\n&gt; 1 0.696 0.284 0.462  0.597 \n&gt; 2 0.354 0.902 0      0.0147\n&gt; 3 0     0     0.0918 0     \n&gt; 4 1     0.439 0.656  0.372 \n&gt; 5 0.580 1     1      1\n\n\n\n\n\n\nCan we make this mutate call even more efficient?\n\n\n\n\n\ndf |&gt; mutate(across(a:d, rescale01))\n\n\n\n&gt; # A tibble: 5 √ó 4\n&gt;       a     b      c      d\n&gt;   &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;\n&gt; 1 0.696 0.284 0.462  0.597 \n&gt; 2 0.354 0.902 0      0.0147\n&gt; 3 0     0     0.0918 0     \n&gt; 4 1     0.439 0.656  0.372 \n&gt; 5 0.580 1     1      1"
  },
  {
    "objectID": "Lectures/Lecture9/CSSS508_Lecture9.html#basics-of-across",
    "href": "Lectures/Lecture9/CSSS508_Lecture9.html#basics-of-across",
    "title": "",
    "section": "Basics of across()",
    "text": "Basics of across()\nacross() makes it easy to apply the same transformation to multiple columns.\n\n\n\nacross(.cols, .fns, .names = NULL)\n\n\n\n\nThere are three particularly important arguments, the first two of which you‚Äôll use in every call to across().\n\n.cols specifies which columns to iterate over.\n.fns specifies what to do with each column.\n.names specifies the names of the output columns."
  },
  {
    "objectID": "Lectures/Lecture9/CSSS508_Lecture9.html#reading-in-columns-with-.cols",
    "href": "Lectures/Lecture9/CSSS508_Lecture9.html#reading-in-columns-with-.cols",
    "title": "",
    "section": "Reading in columns with .cols",
    "text": "Reading in columns with .cols\n.cols uses the same specifications as select() so you can use tidyselect functions like starts_with() to select columns based on their name.\n\n\niris |&gt; \n  summarise(across(starts_with(\"Sepal\"), median))\n\n&gt;   Sepal.Length Sepal.Width\n&gt; 1          5.8           3\n\n\n\n\nYou can also use everything() which selects every (non-grouping) column.\n\n\n\niris |&gt; \n  summarise(across(everything(), median), \n            .by = Species)\n\n&gt;      Species Sepal.Length Sepal.Width Petal.Length Petal.Width\n&gt; 1     setosa          5.0         3.4         1.50         0.2\n&gt; 2 versicolor          5.9         2.8         4.35         1.3\n&gt; 3  virginica          6.5         3.0         5.55         2.0\n\n\n\n\nLastly, where() allows you to select columns based on their type.\n\n\n\niris |&gt; \n1  summarise(across(where(is.numeric), median))\n\n\n1\n\nJust like other selectors, you can combine these with Boolean algebra. For example, !where(is.numeric) selects all non-numeric columns.\n\n\n\n\n&gt;   Sepal.Length Sepal.Width Petal.Length Petal.Width\n&gt; 1          5.8           3         4.35         1.3"
  },
  {
    "objectID": "Lectures/Lecture9/CSSS508_Lecture9.html#calling-a-single-function",
    "href": "Lectures/Lecture9/CSSS508_Lecture9.html#calling-a-single-function",
    "title": "",
    "section": "Calling a single function",
    "text": "Calling a single function\nThe second argument to across() is what makes R a functional programming language. Here we‚Äôre passing a function to another function.\n\n\n\n\n\n Important Distinction\n\n\nWe‚Äôre passing this function to across(), so across() can call it; we‚Äôre not calling it ourselves. That means the function name should never be followed by (). If you forget, you‚Äôll get an error:\n\n\n\n\n\n\n\nairquality |&gt; \n1  summarise(across(Ozone:Temp, median()))\n\n\n1\n\nThis error arises because you‚Äôre calling the function with no input, i.e. median().\n\n\n\n\n&gt; Error in `summarise()`:\n&gt; ‚Ñπ In argument: `across(Ozone:Temp, median())`.\n&gt; Caused by error in `median.default()`:\n&gt; ! argument \"x\" is missing, with no default"
  },
  {
    "objectID": "Lectures/Lecture9/CSSS508_Lecture9.html#anonymous-functions",
    "href": "Lectures/Lecture9/CSSS508_Lecture9.html#anonymous-functions",
    "title": "",
    "section": "Anonymous Functions",
    "text": "Anonymous Functions\nIf the function you pass to across() has its own arguments that you want to specify, you‚Äôll need to use an anonymous function:\n\n\nairquality |&gt; \n1  summarise(across(Ozone:Temp, \\(x) median(x, na.rm = TRUE)))\n\n\n1\n\nSo-called anonymous, because we never explicitly gave it a name with &lt;-. Another term programmers use for this is ‚Äúlambda function‚Äù.\n\n\n\n\n&gt;   Ozone Solar.R Wind Temp\n&gt; 1  31.5     205  9.7   79\n\n\n\n\n\nYou might also see older code that looks like this:\n\nairquality |&gt; \n2  summarise(across(Ozone:Temp, ~ median(.x, na.rm = TRUE)))\n\n\n2\n\nThis is another way to write anonymous functions but it only works inside tidyverse functions and always uses the variable name .x. Base syntax is now recommended (i.e.¬†\\(x) x + 1).\n\n\n\n\n&gt;   Ozone Solar.R Wind Temp\n&gt; 1  31.5     205  9.7   79"
  },
  {
    "objectID": "Lectures/Lecture9/CSSS508_Lecture9.html#calling-multiple-functions",
    "href": "Lectures/Lecture9/CSSS508_Lecture9.html#calling-multiple-functions",
    "title": "",
    "section": "Calling multiple functions",
    "text": "Calling multiple functions\nWhat if we want to know how many missing values we removed, in addition to calculating the median without those values?\n\nIf you need to call multiple functions within across(), you‚Äôll need to turn them into a named list.\n\n\n\nairquality |&gt; \n  summarise(across(Ozone:Temp, \n1                   list(median = \\(x) median(x, na.rm = TRUE),\n                        n_miss = \\(x) sum(is.na(x)))))\n\n\n1\n\nThe names of the list are used to name the new variables. In fact, the columns are named using a glue specification {.col}_{.fn} where .col is the name of the original column and .fn is the name of the function.\n\n\n\n\n&gt;   Ozone_median Ozone_n_miss Solar.R_median Solar.R_n_miss Wind_median\n&gt; 1         31.5           37            205              7         9.7\n&gt;   Wind_n_miss Temp_median Temp_n_miss\n&gt; 1           0          79           0"
  },
  {
    "objectID": "Lectures/Lecture9/CSSS508_Lecture9.html#column-names",
    "href": "Lectures/Lecture9/CSSS508_Lecture9.html#column-names",
    "title": "",
    "section": "Column Names",
    "text": "Column Names\nBy default, the output of across() is given the same names as the inputs. This means that across() inside of mutate() will replace existing columns.\n\n\n\ndf |&gt; mutate(across(a:d, rescale01))\n\n&gt; # A tibble: 5 √ó 4\n&gt;       a     b      c      d\n&gt;   &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;\n&gt; 1 0.696 0.284 0.462  0.597 \n&gt; 2 0.354 0.902 0      0.0147\n&gt; 3 0     0     0.0918 0     \n&gt; 4 1     0.439 0.656  0.372 \n&gt; 5 0.580 1     1      1\n\n\n\n\n\nIf you‚Äôd like to instead create new columns, you can use the .names argument to give the output new names.\n\n\n\n\n1df |&gt; mutate(across(a:d, rescale01, .names = \"{.col}_rescaled\"))\n\n\n1\n\n.col simply represents the original variable name.\n\n\n\n\n&gt; # A tibble: 5 √ó 8\n&gt;        a       b      c      d a_rescaled b_rescaled c_rescaled d_rescaled\n&gt;    &lt;dbl&gt;   &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;      &lt;dbl&gt;      &lt;dbl&gt;      &lt;dbl&gt;      &lt;dbl&gt;\n&gt; 1 -0.130 -0.398   0.347  0.368      0.696      0.284     0.462      0.597 \n&gt; 2 -1.14   1.04   -0.433 -1.07       0.354      0.902     0          0.0147\n&gt; 3 -2.18  -1.06   -0.278 -1.10       0          0         0.0918     0     \n&gt; 4  0.765 -0.0376  0.674 -0.185      1          0.439     0.656      0.372 \n&gt; 5 -0.474  1.27    1.25   1.36       0.580      1         1          1"
  },
  {
    "objectID": "Lectures/Lecture9/CSSS508_Lecture9.html#if_any-and-if_all",
    "href": "Lectures/Lecture9/CSSS508_Lecture9.html#if_any-and-if_all",
    "title": "",
    "section": "if_any() and if_all()",
    "text": "if_any() and if_all()\nacross() works well with mutate() and summarize() but it has two variants that work with filter().\n\n\n1airquality |&gt; filter(if_any(Ozone:Temp, is.na))\n\n\n1\n\nThis is the same as airquality |&gt; filter(is.na(Ozone) | is.na(Solar.R) | is.na(Wind) | is.na(Temp))\n\n\n\n\n&gt;    Ozone Solar.R Wind Temp Month Day\n&gt; 1     NA      NA 14.3   56     5   5\n&gt; 2     28      NA 14.9   66     5   6\n&gt; 3     NA     194  8.6   69     5  10\n&gt; 4      7      NA  6.9   74     5  11\n&gt; 5     NA      66 16.6   57     5  25\n&gt; 6     NA     266 14.9   58     5  26\n&gt; 7     NA      NA  8.0   57     5  27\n&gt; 8     NA     286  8.6   78     6   1\n&gt; 9     NA     287  9.7   74     6   2\n&gt; 10    NA     242 16.1   67     6   3\n&gt; 11    NA     186  9.2   84     6   4\n&gt; 12    NA     220  8.6   85     6   5\n&gt; 13    NA     264 14.3   79     6   6\n&gt; 14    NA     273  6.9   87     6   8\n&gt; 15    NA     259 10.9   93     6  11\n&gt; 16    NA     250  9.2   92     6  12\n&gt; 17    NA     332 13.8   80     6  14\n&gt; 18    NA     322 11.5   79     6  15\n&gt; 19    NA     150  6.3   77     6  21\n&gt; 20    NA      59  1.7   76     6  22\n&gt; 21    NA      91  4.6   76     6  23\n&gt; 22    NA     250  6.3   76     6  24\n&gt; 23    NA     135  8.0   75     6  25\n&gt; 24    NA     127  8.0   78     6  26\n&gt; 25    NA      47 10.3   73     6  27\n&gt; 26    NA      98 11.5   80     6  28\n&gt; 27    NA      31 14.9   77     6  29\n&gt; 28    NA     138  8.0   83     6  30\n&gt; 29    NA     101 10.9   84     7   4\n&gt; 30    NA     139  8.6   82     7  11\n&gt; 31    NA     291 14.9   91     7  14\n&gt; 32    NA     258  9.7   81     7  22\n&gt; 33    NA     295 11.5   82     7  23\n&gt; 34    78      NA  6.9   86     8   4\n&gt; 35    35      NA  7.4   85     8   5\n&gt; 36    66      NA  4.6   87     8   6\n&gt; 37    NA     222  8.6   92     8  10\n&gt; 38    NA     137 11.5   86     8  11\n&gt; 39    NA      64 11.5   79     8  15\n&gt; 40    NA     255 12.6   75     8  23\n&gt; 41    NA     153  5.7   88     8  27\n&gt; 42    NA     145 13.2   77     9  27\n\n\n\n2airquality |&gt; filter(if_all(Ozone:Temp, is.na))\n\n\n2\n\nThis is the same as airquality |&gt; filter(is.na(Ozone) & is.na(Solar.R) & is.na(Wind) & is.na(Temp))\n\n\n\n\n&gt; [1] Ozone   Solar.R Wind    Temp    Month   Day    \n&gt; &lt;0 rows&gt; (or 0-length row.names)"
  },
  {
    "objectID": "Lectures/Lecture9/CSSS508_Lecture9.html#across-in-functions",
    "href": "Lectures/Lecture9/CSSS508_Lecture9.html#across-in-functions",
    "title": "",
    "section": "across() in Functions",
    "text": "across() in Functions\nNaturally, across() lends itself to functions because it allows you to operate on multiple columns simultaneously.\n\nJust remember to embrace with { } when using an argument for column selection since the first argument of across() uses the tidy evaluation method tidy-select.\n\n\n\nsummarize_means &lt;- function(df, summary_vars = where(is.numeric)) {\n  df |&gt; \n    summarize(\n      across({{ summary_vars }}, \\(x) mean(x, na.rm = TRUE)),\n      n = n(),\n      .groups = \"drop\"\n    )\n}\n\n\n\n\n\n\n\ndiamonds |&gt; \n  group_by(cut) |&gt; \n  summarize_means(c(carat, x:z))\n\n\n\n\n&gt; # A tibble: 5 √ó 6\n&gt;   cut       carat     x     y     z     n\n&gt;   &lt;ord&gt;     &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt;\n&gt; 1 Fair      1.05   6.25  6.18  3.98  1610\n&gt; 2 Good      0.849  5.84  5.85  3.64  4906\n&gt; 3 Very Good 0.806  5.74  5.77  3.56 12082\n&gt; 4 Premium   0.892  5.97  5.94  3.65 13791\n&gt; 5 Ideal     0.703  5.51  5.52  3.40 21551"
  },
  {
    "objectID": "Lectures/Lecture9/CSSS508_Lecture9.html#bad-repetition-redux",
    "href": "Lectures/Lecture9/CSSS508_Lecture9.html#bad-repetition-redux",
    "title": "",
    "section": "Bad repetition redux",
    "text": "Bad repetition redux\nImagine you have a directory full of excel spreadsheets you want to read into R.\n\ndata2019 &lt;- readxl::read_excel(\"data/y2019.xlsx\")\ndata2020 &lt;- readxl::read_excel(\"data/y2020.xlsx\")\ndata2021 &lt;- readxl::read_excel(\"data/y2021.xlsx\")\ndata2022 &lt;- readxl::read_excel(\"data/y2022.xlsx\")\n\ndata &lt;- bind_rows(data2019, data2020, data2021, data2022)\n\nYou could technically do it with copy and paste but we know that that‚Äôs probably not the most efficient, least error-prone approach.\n\nNot to mention how inconvenient this would be if you had hundreds of files to read in and combine.\n\n\nThe iterative approach involves three broad steps:\n\nuse list.files() to list all the files in a directory\nuse purrr::map() to read each of them into a list\nuse purrr::list_rbind() to combine them into a single data frame"
  },
  {
    "objectID": "Lectures/Lecture9/CSSS508_Lecture9.html#step-1-listing-files-in-a-directory",
    "href": "Lectures/Lecture9/CSSS508_Lecture9.html#step-1-listing-files-in-a-directory",
    "title": "",
    "section": "Step 1: Listing Files in a Directory",
    "text": "Step 1: Listing Files in a Directory\nThe first part of this method involves creating a character vector of all the file paths for the files you want to read in. We‚Äôll motivate this example by reading in the gapminder data that‚Äôs saved in separate excel sheets by year in my working directory.\n\n\n1paths &lt;- list.files(\"data/gapminder\",\n2                    pattern = \"[.]xlsx$\",\n3                    full.names = TRUE)\npaths\n\n\n1\n\nThe first argument, path, is the directory to look within.\n\n2\n\npattern is a regular expression used to filter the file names. The most common pattern is something like [.]xlsx$ or [.]csv$ to find all files with a specified extension.\n\n3\n\nfull.names determines whether or not the directory name should be included in the output. You almost always want this to be TRUE.\n\n\n\n\n&gt;  [1] \"data/gapminder/1952.xlsx\" \"data/gapminder/1957.xlsx\"\n&gt;  [3] \"data/gapminder/1962.xlsx\" \"data/gapminder/1967.xlsx\"\n&gt;  [5] \"data/gapminder/1972.xlsx\" \"data/gapminder/1977.xlsx\"\n&gt;  [7] \"data/gapminder/1982.xlsx\" \"data/gapminder/1987.xlsx\"\n&gt;  [9] \"data/gapminder/1992.xlsx\" \"data/gapminder/1997.xlsx\"\n&gt; [11] \"data/gapminder/2002.xlsx\" \"data/gapminder/2007.xlsx\""
  },
  {
    "objectID": "Lectures/Lecture9/CSSS508_Lecture9.html#reading-files-into-a-list",
    "href": "Lectures/Lecture9/CSSS508_Lecture9.html#reading-files-into-a-list",
    "title": "",
    "section": "Reading Files into a List",
    "text": "Reading Files into a List\nNow we want to read these excel sheets into a single object so we can use iteration in the next step! A list is the perfect tool for this.\n\n\nfiles &lt;- list(\n  readxl::read_excel(\"data/gapminder/1952.xlsx\"),\n  readxl::read_excel(\"data/gapminder/1957.xlsx\"),\n  readxl::read_excel(\"data/gapminder/1962.xlsx\"),\n  readxl::read_excel(\"data/gapminder/1967.xlsx\"),\n  readxl::read_excel(\"data/gapminder/1972.xlsx\"),\n  readxl::read_excel(\"data/gapminder/1977.xlsx\"),\n  readxl::read_excel(\"data/gapminder/1982.xlsx\"),\n  readxl::read_excel(\"data/gapminder/1987.xlsx\"),\n  readxl::read_excel(\"data/gapminder/1992.xlsx\"),\n  readxl::read_excel(\"data/gapminder/1997.xlsx\"),\n  readxl::read_excel(\"data/gapminder/2002.xlsx\"),\n  readxl::read_excel(\"data/gapminder/2007.xlsx\")\n)\n\n\n\nUnfortunately, this is just as tedious a method as reading in all the separate file paths and creating individual data frame objects!"
  },
  {
    "objectID": "Lectures/Lecture9/CSSS508_Lecture9.html#step-2-using-map-instead",
    "href": "Lectures/Lecture9/CSSS508_Lecture9.html#step-2-using-map-instead",
    "title": "",
    "section": "Step 2: Using map() instead!",
    "text": "Step 2: Using map() instead!\nInstead of listing out all the read_excel() calls in our list, we can used the map() function from the tidyverse‚Äôs purrr package. map() is similar to across(), but instead of doing something to each column in a data frame, it does something to each element of a vector.\n\n\nfiles &lt;- map(paths, readxl::read_excel)\n\n\n\nNow, what does files contain?\n\n\n\n1files[[1]]\n\n\n1\n\nThe first element of files is a tibble, meaning files is a list of all the datasets we told it to read in.\n\n\n\n\n\n\n\n&gt; # A tibble: 142 √ó 5\n&gt;    country     continent lifeExp      pop gdpPercap\n&gt;    &lt;chr&gt;       &lt;chr&gt;       &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt;\n&gt;  1 Afghanistan Asia         28.8  8425333      779.\n&gt;  2 Albania     Europe       55.2  1282697     1601.\n&gt;  3 Algeria     Africa       43.1  9279525     2449.\n&gt;  4 Angola      Africa       30.0  4232095     3521.\n&gt;  5 Argentina   Americas     62.5 17876956     5911.\n&gt;  6 Australia   Oceania      69.1  8691212    10040.\n&gt;  7 Austria     Europe       66.8  6927772     6137.\n&gt;  8 Bahrain     Asia         50.9   120447     9867.\n&gt;  9 Bangladesh  Asia         37.5 46886859      684.\n&gt; 10 Belgium     Europe       68    8730405     8343.\n&gt; # ‚Ñπ 132 more rows"
  },
  {
    "objectID": "Lectures/Lecture9/CSSS508_Lecture9.html#step-3-combine-dataframes-into-one",
    "href": "Lectures/Lecture9/CSSS508_Lecture9.html#step-3-combine-dataframes-into-one",
    "title": "",
    "section": "Step 3: Combine Dataframes into One",
    "text": "Step 3: Combine Dataframes into One\nNow that we have all our individual dataframes in elements of a list, we can use list_rbind to combine them into one dataframe.\n\n\nlist_rbind(files)\n\n&gt; # A tibble: 1,704 √ó 5\n&gt;    country     continent lifeExp      pop gdpPercap\n&gt;    &lt;chr&gt;       &lt;chr&gt;       &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt;\n&gt;  1 Afghanistan Asia         28.8  8425333      779.\n&gt;  2 Albania     Europe       55.2  1282697     1601.\n&gt;  3 Algeria     Africa       43.1  9279525     2449.\n&gt;  4 Angola      Africa       30.0  4232095     3521.\n&gt;  5 Argentina   Americas     62.5 17876956     5911.\n&gt;  6 Australia   Oceania      69.1  8691212    10040.\n&gt;  7 Austria     Europe       66.8  6927772     6137.\n&gt;  8 Bahrain     Asia         50.9   120447     9867.\n&gt;  9 Bangladesh  Asia         37.5 46886859      684.\n&gt; 10 Belgium     Europe       68    8730405     8343.\n&gt; # ‚Ñπ 1,694 more rows\n\n\n\n\nThe super efficient, full code for the last two steps would therefore be:\n\npaths |&gt; \n  map(readxl::read_excel) |&gt; \n  list_rbind()"
  },
  {
    "objectID": "Lectures/Lecture9/CSSS508_Lecture9.html#data-in-the-filepath",
    "href": "Lectures/Lecture9/CSSS508_Lecture9.html#data-in-the-filepath",
    "title": "",
    "section": "Data in the Filepath",
    "text": "Data in the Filepath\nYou may have noticed that we‚Äôre missing a year indicator in our final dataset. That‚Äôs because that information is actually a part of the filename itself.\n\nThere‚Äôs a way to include the filename in the data but we have to add another step to our paths pipeline:\n\n\n\nfiles &lt;- paths |&gt; \n1  set_names(basename) |&gt;\n  map(readxl::read_excel)\n\n\n1\n\nThe set_names function takes the function basename which extracts just the file name from the full path. This line of code will therefore create a named vector of the file paths where the names are actually the filenames.\n\n\n\n\n\n\nWhat is this doing?\n\n\n\n\npaths |&gt; \n  set_names(basename)\n\n\n\n\n\n\n&gt;                  1952.xlsx                  1957.xlsx \n&gt; \"data/gapminder/1952.xlsx\" \"data/gapminder/1957.xlsx\" \n&gt;                  1962.xlsx                  1967.xlsx \n&gt; \"data/gapminder/1962.xlsx\" \"data/gapminder/1967.xlsx\" \n&gt;                  1972.xlsx                  1977.xlsx \n&gt; \"data/gapminder/1972.xlsx\" \"data/gapminder/1977.xlsx\" \n&gt;                  1982.xlsx                  1987.xlsx \n&gt; \"data/gapminder/1982.xlsx\" \"data/gapminder/1987.xlsx\" \n&gt;                  1992.xlsx                  1997.xlsx \n&gt; \"data/gapminder/1992.xlsx\" \"data/gapminder/1997.xlsx\" \n&gt;                  2002.xlsx                  2007.xlsx \n&gt; \"data/gapminder/2002.xlsx\" \"data/gapminder/2007.xlsx\""
  },
  {
    "objectID": "Lectures/Lecture9/CSSS508_Lecture9.html#data-in-the-filepath-1",
    "href": "Lectures/Lecture9/CSSS508_Lecture9.html#data-in-the-filepath-1",
    "title": "",
    "section": "Data in the Filepath",
    "text": "Data in the Filepath\nYou may have noticed that we‚Äôre missing a year indicator in our final dataset. That‚Äôs because that information is actually a part of the filename itself.\nThere‚Äôs a way to include the filename in the data but we have to add another step to our paths pipeline:\n\nfiles &lt;- paths |&gt; \n1  set_names(basename) |&gt;\n  map(readxl::read_excel)\n\n\n1\n\nThe set_names function takes the function basename which extracts just the file name from the full path. This line of code will therefore create a named vector of the file paths where the names are actually the filenames.\n\n\n\n\nWhat is this doing?\n\n\n\n\npaths |&gt; \n  set_names(basename) |&gt; \n  map(readxl::read_excel)\n\n\n\n\nNow each of our dataframes is named for the year of data it contains.\n\n\n\n\n&gt; $`1952.xlsx`\n&gt; # A tibble: 142 √ó 5\n&gt;    country     continent lifeExp      pop gdpPercap\n&gt;    &lt;chr&gt;       &lt;chr&gt;       &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt;\n&gt;  1 Afghanistan Asia         28.8  8425333      779.\n&gt;  2 Albania     Europe       55.2  1282697     1601.\n&gt;  3 Algeria     Africa       43.1  9279525     2449.\n&gt;  4 Angola      Africa       30.0  4232095     3521.\n&gt;  5 Argentina   Americas     62.5 17876956     5911.\n&gt;  6 Australia   Oceania      69.1  8691212    10040.\n&gt;  7 Austria     Europe       66.8  6927772     6137.\n&gt;  8 Bahrain     Asia         50.9   120447     9867.\n&gt;  9 Bangladesh  Asia         37.5 46886859      684.\n&gt; 10 Belgium     Europe       68    8730405     8343.\n&gt; # ‚Ñπ 132 more rows\n&gt; \n&gt; $`1957.xlsx`\n&gt; # A tibble: 142 √ó 5\n&gt;    country     continent lifeExp      pop gdpPercap\n&gt;    &lt;chr&gt;       &lt;chr&gt;       &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt;\n&gt;  1 Afghanistan Asia         30.3  9240934      821.\n&gt;  2 Albania     Europe       59.3  1476505     1942.\n&gt;  3 Algeria     Africa       45.7 10270856     3014.\n&gt;  4 Angola      Africa       32.0  4561361     3828.\n&gt;  5 Argentina   Americas     64.4 19610538     6857.\n&gt;  6 Australia   Oceania      70.3  9712569    10950.\n&gt;  7 Austria     Europe       67.5  6965860     8843.\n&gt;  8 Bahrain     Asia         53.8   138655    11636.\n&gt;  9 Bangladesh  Asia         39.3 51365468      662.\n&gt; 10 Belgium     Europe       69.2  8989111     9715.\n&gt; # ‚Ñπ 132 more rows\n&gt; \n&gt; $`1962.xlsx`\n&gt; # A tibble: 142 √ó 5\n&gt;    country     continent lifeExp      pop gdpPercap\n&gt;    &lt;chr&gt;       &lt;chr&gt;       &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt;\n&gt;  1 Afghanistan Asia         32.0 10267083      853.\n&gt;  2 Albania     Europe       64.8  1728137     2313.\n&gt;  3 Algeria     Africa       48.3 11000948     2551.\n&gt;  4 Angola      Africa       34    4826015     4269.\n&gt;  5 Argentina   Americas     65.1 21283783     7133.\n&gt;  6 Australia   Oceania      70.9 10794968    12217.\n&gt;  7 Austria     Europe       69.5  7129864    10751.\n&gt;  8 Bahrain     Asia         56.9   171863    12753.\n&gt;  9 Bangladesh  Asia         41.2 56839289      686.\n&gt; 10 Belgium     Europe       70.2  9218400    10991.\n&gt; # ‚Ñπ 132 more rows\n&gt; \n&gt; $`1967.xlsx`\n&gt; # A tibble: 142 √ó 5\n&gt;    country     continent lifeExp      pop gdpPercap\n&gt;    &lt;chr&gt;       &lt;chr&gt;       &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt;\n&gt;  1 Afghanistan Asia         34.0 11537966      836.\n&gt;  2 Albania     Europe       66.2  1984060     2760.\n&gt;  3 Algeria     Africa       51.4 12760499     3247.\n&gt;  4 Angola      Africa       36.0  5247469     5523.\n&gt;  5 Argentina   Americas     65.6 22934225     8053.\n&gt;  6 Australia   Oceania      71.1 11872264    14526.\n&gt;  7 Austria     Europe       70.1  7376998    12835.\n&gt;  8 Bahrain     Asia         59.9   202182    14805.\n&gt;  9 Bangladesh  Asia         43.5 62821884      721.\n&gt; 10 Belgium     Europe       70.9  9556500    13149.\n&gt; # ‚Ñπ 132 more rows\n&gt; \n&gt; $`1972.xlsx`\n&gt; # A tibble: 142 √ó 5\n&gt;    country     continent lifeExp      pop gdpPercap\n&gt;    &lt;chr&gt;       &lt;chr&gt;       &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt;\n&gt;  1 Afghanistan Asia         36.1 13079460      740.\n&gt;  2 Albania     Europe       67.7  2263554     3313.\n&gt;  3 Algeria     Africa       54.5 14760787     4183.\n&gt;  4 Angola      Africa       37.9  5894858     5473.\n&gt;  5 Argentina   Americas     67.1 24779799     9443.\n&gt;  6 Australia   Oceania      71.9 13177000    16789.\n&gt;  7 Austria     Europe       70.6  7544201    16662.\n&gt;  8 Bahrain     Asia         63.3   230800    18269.\n&gt;  9 Bangladesh  Asia         45.3 70759295      630.\n&gt; 10 Belgium     Europe       71.4  9709100    16672.\n&gt; # ‚Ñπ 132 more rows\n&gt; \n&gt; $`1977.xlsx`\n&gt; # A tibble: 142 √ó 5\n&gt;    country     continent lifeExp      pop gdpPercap\n&gt;    &lt;chr&gt;       &lt;chr&gt;       &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt;\n&gt;  1 Afghanistan Asia         38.4 14880372      786.\n&gt;  2 Albania     Europe       68.9  2509048     3533.\n&gt;  3 Algeria     Africa       58.0 17152804     4910.\n&gt;  4 Angola      Africa       39.5  6162675     3009.\n&gt;  5 Argentina   Americas     68.5 26983828    10079.\n&gt;  6 Australia   Oceania      73.5 14074100    18334.\n&gt;  7 Austria     Europe       72.2  7568430    19749.\n&gt;  8 Bahrain     Asia         65.6   297410    19340.\n&gt;  9 Bangladesh  Asia         46.9 80428306      660.\n&gt; 10 Belgium     Europe       72.8  9821800    19118.\n&gt; # ‚Ñπ 132 more rows\n&gt; \n&gt; $`1982.xlsx`\n&gt; # A tibble: 142 √ó 5\n&gt;    country     continent lifeExp      pop gdpPercap\n&gt;    &lt;chr&gt;       &lt;chr&gt;       &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt;\n&gt;  1 Afghanistan Asia         39.9 12881816      978.\n&gt;  2 Albania     Europe       70.4  2780097     3631.\n&gt;  3 Algeria     Africa       61.4 20033753     5745.\n&gt;  4 Angola      Africa       39.9  7016384     2757.\n&gt;  5 Argentina   Americas     69.9 29341374     8998.\n&gt;  6 Australia   Oceania      74.7 15184200    19477.\n&gt;  7 Austria     Europe       73.2  7574613    21597.\n&gt;  8 Bahrain     Asia         69.1   377967    19211.\n&gt;  9 Bangladesh  Asia         50.0 93074406      677.\n&gt; 10 Belgium     Europe       73.9  9856303    20980.\n&gt; # ‚Ñπ 132 more rows\n&gt; \n&gt; $`1987.xlsx`\n&gt; # A tibble: 142 √ó 5\n&gt;    country     continent lifeExp       pop gdpPercap\n&gt;    &lt;chr&gt;       &lt;chr&gt;       &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;\n&gt;  1 Afghanistan Asia         40.8  13867957      852.\n&gt;  2 Albania     Europe       72     3075321     3739.\n&gt;  3 Algeria     Africa       65.8  23254956     5681.\n&gt;  4 Angola      Africa       39.9   7874230     2430.\n&gt;  5 Argentina   Americas     70.8  31620918     9140.\n&gt;  6 Australia   Oceania      76.3  16257249    21889.\n&gt;  7 Austria     Europe       74.9   7578903    23688.\n&gt;  8 Bahrain     Asia         70.8    454612    18524.\n&gt;  9 Bangladesh  Asia         52.8 103764241      752.\n&gt; 10 Belgium     Europe       75.4   9870200    22526.\n&gt; # ‚Ñπ 132 more rows\n&gt; \n&gt; $`1992.xlsx`\n&gt; # A tibble: 142 √ó 5\n&gt;    country     continent lifeExp       pop gdpPercap\n&gt;    &lt;chr&gt;       &lt;chr&gt;       &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;\n&gt;  1 Afghanistan Asia         41.7  16317921      649.\n&gt;  2 Albania     Europe       71.6   3326498     2497.\n&gt;  3 Algeria     Africa       67.7  26298373     5023.\n&gt;  4 Angola      Africa       40.6   8735988     2628.\n&gt;  5 Argentina   Americas     71.9  33958947     9308.\n&gt;  6 Australia   Oceania      77.6  17481977    23425.\n&gt;  7 Austria     Europe       76.0   7914969    27042.\n&gt;  8 Bahrain     Asia         72.6    529491    19036.\n&gt;  9 Bangladesh  Asia         56.0 113704579      838.\n&gt; 10 Belgium     Europe       76.5  10045622    25576.\n&gt; # ‚Ñπ 132 more rows\n&gt; \n&gt; $`1997.xlsx`\n&gt; # A tibble: 142 √ó 5\n&gt;    country     continent lifeExp       pop gdpPercap\n&gt;    &lt;chr&gt;       &lt;chr&gt;       &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;\n&gt;  1 Afghanistan Asia         41.8  22227415      635.\n&gt;  2 Albania     Europe       73.0   3428038     3193.\n&gt;  3 Algeria     Africa       69.2  29072015     4797.\n&gt;  4 Angola      Africa       41.0   9875024     2277.\n&gt;  5 Argentina   Americas     73.3  36203463    10967.\n&gt;  6 Australia   Oceania      78.8  18565243    26998.\n&gt;  7 Austria     Europe       77.5   8069876    29096.\n&gt;  8 Bahrain     Asia         73.9    598561    20292.\n&gt;  9 Bangladesh  Asia         59.4 123315288      973.\n&gt; 10 Belgium     Europe       77.5  10199787    27561.\n&gt; # ‚Ñπ 132 more rows\n&gt; \n&gt; $`2002.xlsx`\n&gt; # A tibble: 142 √ó 5\n&gt;    country     continent lifeExp       pop gdpPercap\n&gt;    &lt;chr&gt;       &lt;chr&gt;       &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;\n&gt;  1 Afghanistan Asia         42.1  25268405      727.\n&gt;  2 Albania     Europe       75.7   3508512     4604.\n&gt;  3 Algeria     Africa       71.0  31287142     5288.\n&gt;  4 Angola      Africa       41.0  10866106     2773.\n&gt;  5 Argentina   Americas     74.3  38331121     8798.\n&gt;  6 Australia   Oceania      80.4  19546792    30688.\n&gt;  7 Austria     Europe       79.0   8148312    32418.\n&gt;  8 Bahrain     Asia         74.8    656397    23404.\n&gt;  9 Bangladesh  Asia         62.0 135656790     1136.\n&gt; 10 Belgium     Europe       78.3  10311970    30486.\n&gt; # ‚Ñπ 132 more rows\n&gt; \n&gt; $`2007.xlsx`\n&gt; # A tibble: 142 √ó 5\n&gt;    country     continent lifeExp       pop gdpPercap\n&gt;    &lt;chr&gt;       &lt;chr&gt;       &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;\n&gt;  1 Afghanistan Asia         43.8  31889923      975.\n&gt;  2 Albania     Europe       76.4   3600523     5937.\n&gt;  3 Algeria     Africa       72.3  33333216     6223.\n&gt;  4 Angola      Africa       42.7  12420476     4797.\n&gt;  5 Argentina   Americas     75.3  40301927    12779.\n&gt;  6 Australia   Oceania      81.2  20434176    34435.\n&gt;  7 Austria     Europe       79.8   8199783    36126.\n&gt;  8 Bahrain     Asia         75.6    708573    29796.\n&gt;  9 Bangladesh  Asia         64.1 150448339     1391.\n&gt; 10 Belgium     Europe       79.4  10392226    33693.\n&gt; # ‚Ñπ 132 more rows"
  },
  {
    "objectID": "Lectures/Lecture9/CSSS508_Lecture9.html#data-in-the-filepath-2",
    "href": "Lectures/Lecture9/CSSS508_Lecture9.html#data-in-the-filepath-2",
    "title": "",
    "section": "Data in the Filepath",
    "text": "Data in the Filepath\nTo create a year variable we need to tell list_rbind to save the filename information.\n\n\ngapminder &lt;- paths |&gt; \n  set_names(basename) |&gt; \n  map(readxl::read_excel) |&gt; \n1  list_rbind(names_to = \"year\") |&gt;\n2  mutate(year = parse_number(year))\ngapminder\n\n\n1\n\nThe name of each list element (the filename) will be saved as the variable year.\n\n2\n\nExtracting just the numeric part of the filename which is the actual year.\n\n\n\n\n&gt; # A tibble: 1,704 √ó 6\n&gt;     year country     continent lifeExp      pop gdpPercap\n&gt;    &lt;dbl&gt; &lt;chr&gt;       &lt;chr&gt;       &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt;\n&gt;  1  1952 Afghanistan Asia         28.8  8425333      779.\n&gt;  2  1952 Albania     Europe       55.2  1282697     1601.\n&gt;  3  1952 Algeria     Africa       43.1  9279525     2449.\n&gt;  4  1952 Angola      Africa       30.0  4232095     3521.\n&gt;  5  1952 Argentina   Americas     62.5 17876956     5911.\n&gt;  6  1952 Australia   Oceania      69.1  8691212    10040.\n&gt;  7  1952 Austria     Europe       66.8  6927772     6137.\n&gt;  8  1952 Bahrain     Asia         50.9   120447     9867.\n&gt;  9  1952 Bangladesh  Asia         37.5 46886859      684.\n&gt; 10  1952 Belgium     Europe       68    8730405     8343.\n&gt; # ‚Ñπ 1,694 more rows\n\n\n\n\n\n3write_csv(gapminder, \"gapminder.csv\")\n\n\n3\n\nBe sure to save your work so you can simply read in one file when working on this project in the future!"
  },
  {
    "objectID": "Lectures/Lecture9/CSSS508_Lecture9.html#more-complex-cases",
    "href": "Lectures/Lecture9/CSSS508_Lecture9.html#more-complex-cases",
    "title": "",
    "section": "More Complex Cases",
    "text": "More Complex Cases\n\n\n\n\n Complicated Filenames\n\n\nThere may be other variables stored in the directory name, or maybe the file name contains multiple bits of data. If so, use set_names() (w/o arguments) to record the full path, then use separate_wider_delim() and friends to turn them into useful columns. See example at the end of this section.\n\n\n\n\n\n\n\n\n Untidy data of the same structure\n\n\nYou can use map many times to perform different tidying and data manipulation tasks before combining datasets. Alternatively you can list_rbind first and then perform data manipulation tasks using a standard dplyr approach. See examples here.\n\n\n\n\n\n\n\n\n Heterogenous data\n\n\nRead this section of ‚ÄúR for Data Science‚Äù\n\n\n\n\n\n\n Troubleshooting\n\n\nRead this section of ‚ÄúR for Data Science‚Äù"
  },
  {
    "objectID": "Lectures/Lecture9/CSSS508_Lecture9.html#writing-multiple-csv-files",
    "href": "Lectures/Lecture9/CSSS508_Lecture9.html#writing-multiple-csv-files",
    "title": "",
    "section": "Writing multiple csv files",
    "text": "Writing multiple csv files\nLet‚Äôs imagine we want to save multiple datasets based on a feature of the data.\n\nFor example, what if we want a different csv for each clarity type in the diamonds dataset?\n\n\nThe easiest way to make these individual datasets is using group_nest():\n\nby_clarity &lt;- diamonds |&gt; \n1  group_nest(clarity) |&gt;\n2  mutate(path = str_glue(\"diamonds-{clarity}.csv\"))\n\nby_clarity\n\n\n1\n\nNests a tibble using a grouping specification. You can add the argument keep = TRUE if you want to include the grouping variable in the nested tibbles.\n\n2\n\nCreates a column that gives the name of output file.\n\n\n\n\n&gt; # A tibble: 8 √ó 3\n&gt;   clarity               data path             \n&gt;   &lt;ord&gt;   &lt;list&lt;tibble[,9]&gt;&gt; &lt;glue&gt;           \n&gt; 1 I1               [741 √ó 9] diamonds-I1.csv  \n&gt; 2 SI2            [9,194 √ó 9] diamonds-SI2.csv \n&gt; 3 SI1           [13,065 √ó 9] diamonds-SI1.csv \n&gt; 4 VS2           [12,258 √ó 9] diamonds-VS2.csv \n&gt; 5 VS1            [8,171 √ó 9] diamonds-VS1.csv \n&gt; 6 VVS2           [5,066 √ó 9] diamonds-VVS2.csv\n&gt; 7 VVS1           [3,655 √ó 9] diamonds-VVS1.csv\n&gt; 8 IF             [1,790 √ó 9] diamonds-IF.csv"
  },
  {
    "objectID": "Lectures/Lecture9/CSSS508_Lecture9.html#writing-multiple-csv-files-1",
    "href": "Lectures/Lecture9/CSSS508_Lecture9.html#writing-multiple-csv-files-1",
    "title": "",
    "section": "Writing multiple csv files",
    "text": "Writing multiple csv files\nLet‚Äôs imagine we want to save multiple datasets based on a feature of the data.\nFor example, what if we want a different csv for each clarity type in the diamonds dataset?\nThe easiest way to make these individual datasets is using group_nest():\n\nby_clarity$data[[1]]\n\n&gt; # A tibble: 741 √ó 9\n&gt;    carat cut       color depth table price     x     y     z\n&gt;    &lt;dbl&gt; &lt;ord&gt;     &lt;ord&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n&gt;  1  0.32 Premium   E      60.9    58   345  4.38  4.42  2.68\n&gt;  2  1.17 Very Good J      60.2    61  2774  6.83  6.9   4.13\n&gt;  3  1.01 Premium   F      61.8    60  2781  6.39  6.36  3.94\n&gt;  4  1.01 Fair      E      64.5    58  2788  6.29  6.21  4.03\n&gt;  5  0.96 Ideal     F      60.7    55  2801  6.37  6.41  3.88\n&gt;  6  1.04 Premium   G      62.2    58  2801  6.46  6.41  4   \n&gt;  7  1    Fair      G      66.4    59  2808  6.16  6.09  4.07\n&gt;  8  1.2  Fair      F      64.6    56  2809  6.73  6.66  4.33\n&gt;  9  0.43 Very Good E      58.4    62   555  4.94  5     2.9 \n&gt; 10  1.02 Premium   G      60.3    58  2815  6.55  6.5   3.94\n&gt; # ‚Ñπ 731 more rows"
  },
  {
    "objectID": "Lectures/Lecture9/CSSS508_Lecture9.html#using-walk",
    "href": "Lectures/Lecture9/CSSS508_Lecture9.html#using-walk",
    "title": "",
    "section": "Using walk()",
    "text": "Using walk()\nWe basically want to carry out the following but we can‚Äôt simply use map() because now we have 2 arguments that vary.\n\nwrite_csv(by_clarity$data[[1]], by_clarity$path[[1]])\nwrite_csv(by_clarity$data[[2]], by_clarity$path[[2]])\nwrite_csv(by_clarity$data[[3]], by_clarity$path[[3]])\n...\nwrite_csv(by_clarity$by_clarity[[8]], by_clarity$path[[8]])\n\n\nSo we could use map2(), which allows us to map over 2 inputs!\n\nmap2(by_clarity$data, by_clarity$path, write_csv)\n\n\n\nIf we were to run the above, it will apply the first two arguments to the write_csv() function and also print out all the datasets as it saves them.\n\n\nSince we don‚Äôt actually care about the output (i.e.¬†the printed datasets) and only want the files to be written, there‚Äôs an even better function we can use for this task: walk2().\n\n\n\nwalk2(by_clarity$data, by_clarity$path, write_csv)\n\nThis performs the exact same thing as map2() but throws the output away. Therefore we‚Äôre left with just the file-saving behavior which is what we‚Äôre after."
  },
  {
    "objectID": "Lectures/Lecture9/CSSS508_Lecture9.html#saving-multiple-plots",
    "href": "Lectures/Lecture9/CSSS508_Lecture9.html#saving-multiple-plots",
    "title": "",
    "section": "Saving multiple plots",
    "text": "Saving multiple plots\nThe same basic approach can be used to save multiple plots.\n\nFirst let‚Äôs create a function that draws the plot we want.\n\ncarat_histogram &lt;- function(df) {\n  ggplot(df, aes(x = carat)) + geom_histogram(binwidth = 0.1)  \n}\n\ncarat_histogram(by_clarity$data[[1]])"
  },
  {
    "objectID": "Lectures/Lecture9/CSSS508_Lecture9.html#saving-multiple-plots-1",
    "href": "Lectures/Lecture9/CSSS508_Lecture9.html#saving-multiple-plots-1",
    "title": "",
    "section": "Saving multiple plots ",
    "text": "Saving multiple plots \nNow we can use map() to create a list of many plots and their eventual file paths:\n\n\nby_clarity &lt;- by_clarity |&gt; \n  mutate(\n    plot = map(data, carat_histogram),\n    path = str_glue(\"clarity-{clarity}.png\")\n  )\nby_clarity\n\n&gt; # A tibble: 8 √ó 4\n&gt;   clarity               data path             plot      \n&gt;   &lt;ord&gt;   &lt;list&lt;tibble[,9]&gt;&gt; &lt;glue&gt;           &lt;list&gt;    \n&gt; 1 I1               [741 √ó 9] clarity-I1.png   &lt;ggplt2::&gt;\n&gt; 2 SI2            [9,194 √ó 9] clarity-SI2.png  &lt;ggplt2::&gt;\n&gt; 3 SI1           [13,065 √ó 9] clarity-SI1.png  &lt;ggplt2::&gt;\n&gt; 4 VS2           [12,258 √ó 9] clarity-VS2.png  &lt;ggplt2::&gt;\n&gt; 5 VS1            [8,171 √ó 9] clarity-VS1.png  &lt;ggplt2::&gt;\n&gt; 6 VVS2           [5,066 √ó 9] clarity-VVS2.png &lt;ggplt2::&gt;\n&gt; 7 VVS1           [3,655 √ó 9] clarity-VVS1.png &lt;ggplt2::&gt;\n&gt; 8 IF             [1,790 √ó 9] clarity-IF.png   &lt;ggplt2::&gt;\n\n\n\n\n\nby_clarity$plot[[1]]"
  },
  {
    "objectID": "Lectures/Lecture9/CSSS508_Lecture9.html#saving-multiple-plots-2",
    "href": "Lectures/Lecture9/CSSS508_Lecture9.html#saving-multiple-plots-2",
    "title": "",
    "section": "Saving multiple plots",
    "text": "Saving multiple plots\nThen use walk2() with ggsave() to save each plot:\n\n\nwalk2(\n  by_clarity$path,\n  by_clarity$plot,\n  \\(path, plot) ggsave(path, plot, width = 6, height = 6)\n)\n\n\n\n\nWhich is shorthand for:\n\nggsave(by_clarity$path[[1]], by_clarity$plot[[1]], width = 6, height = 6)\nggsave(by_clarity$path[[2]], by_clarity$plot[[2]], width = 6, height = 6)\nggsave(by_clarity$path[[3]], by_clarity$plot[[3]], width = 6, height = 6)\n...\nggsave(by_clarity$path[[8]], by_clarity$plot[[8]], width = 6, height = 6)"
  },
  {
    "objectID": "Lectures/Lecture9/CSSS508_Lecture9.html#lapply",
    "href": "Lectures/Lecture9/CSSS508_Lecture9.html#lapply",
    "title": "",
    "section": "lapply",
    "text": "lapply\nBase R has it‚Äôs own family of iterative functions: the apply family of functions.\n\nThe most one-to-one translation in this family is lapply (list apply) to map.\n\n\n\n\n1lapply(swiss, FUN = median)\n\n\n1\n\nSince all of the examples of map in today‚Äôs lecture are fairly simple, you can swap in lapply for any of them.\n\n\n\n\n&gt; $Fertility\n&gt; [1] 70.4\n&gt; \n&gt; $Agriculture\n&gt; [1] 54.1\n&gt; \n&gt; $Examination\n&gt; [1] 16\n&gt; \n&gt; $Education\n&gt; [1] 8\n&gt; \n&gt; $Catholic\n&gt; [1] 15.14\n&gt; \n&gt; $Infant.Mortality\n&gt; [1] 20\n\n\n\n\n\nSimply put, lapply() is used to apply a function over a list of any kind (e.g.¬†a data frame) and return a list."
  },
  {
    "objectID": "Lectures/Lecture9/CSSS508_Lecture9.html#sapply-simple-lapply",
    "href": "Lectures/Lecture9/CSSS508_Lecture9.html#sapply-simple-lapply",
    "title": "",
    "section": "sapply(): Simple lapply()",
    "text": "sapply(): Simple lapply()\nA downside to lapply() is that lists can be hard to work with. sapply(), therefore, always tries to simplify the result.\n\n\nsapply(swiss, FUN = median)\n\n&gt;        Fertility      Agriculture      Examination        Education \n&gt;            70.40            54.10            16.00             8.00 \n&gt;         Catholic Infant.Mortality \n&gt;            15.14            20.00\n\n\nIn this case, our list was simplified to a named numeric vector. However, the simplification can fail and give you an unexpected type so proceed with caution if you intend to use sapply().\n\n\nvapply(): vector apply\nThis version takes an additional argument that specifies the expected type, ensuring that simplification occurs the same way regardless of the input.\n\n\nvapply(swiss, median, double(1))\n\n&gt;        Fertility      Agriculture      Examination        Education \n&gt;            70.40            54.10            16.00             8.00 \n&gt;         Catholic Infant.Mortality \n&gt;            15.14            20.00"
  },
  {
    "objectID": "Lectures/Lecture9/CSSS508_Lecture9.html#tapply",
    "href": "Lectures/Lecture9/CSSS508_Lecture9.html#tapply",
    "title": "",
    "section": "tapply()",
    "text": "tapply()\nAnother important member of the apply family is tapply() which computes a single grouped summary.\n\n\n\n\ndiamonds |&gt; \n  group_by(cut) |&gt; \n  summarize(price = mean(price))\n\n&gt; # A tibble: 5 √ó 2\n&gt;   cut       price\n&gt;   &lt;ord&gt;     &lt;dbl&gt;\n&gt; 1 Fair      4359.\n&gt; 2 Good      3929.\n&gt; 3 Very Good 3982.\n&gt; 4 Premium   4584.\n&gt; 5 Ideal     3458.\n\n\n\n\ntapply(diamonds$price, diamonds$cut, mean)\n\n&gt;      Fair      Good Very Good   Premium     Ideal \n&gt;      4359      3929      3982      4584      3458\n\n\n\n\n\n\nUnfortunately tapply() returns its results in a named vector which requires some gymnastics if you want to collect multiple summaries and grouping variables into a data frame."
  },
  {
    "objectID": "Lectures/Lecture9/CSSS508_Lecture9.html#apply",
    "href": "Lectures/Lecture9/CSSS508_Lecture9.html#apply",
    "title": "",
    "section": "apply()",
    "text": "apply()\nLastly, there‚Äôs apply(), which works over matrices or data frames. You can apply the function to each row (MARGIN = 1) or column (MARGIN = 2).\n\n\n\napply(swiss, MARGIN = 2, FUN = summary)\n\n&gt;         Fertility Agriculture Examination Education Catholic Infant.Mortality\n&gt; Min.        35.00        1.20        3.00      1.00    2.150            10.80\n&gt; 1st Qu.     64.70       35.90       12.00      6.00    5.195            18.15\n&gt; Median      70.40       54.10       16.00      8.00   15.140            20.00\n&gt; Mean        70.14       50.66       16.49     10.98   41.144            19.94\n&gt; 3rd Qu.     78.45       67.65       22.00     12.00   93.125            21.70\n&gt; Max.        92.50       89.70       37.00     53.00  100.000            26.60"
  },
  {
    "objectID": "Lectures/Lecture9/CSSS508_Lecture9.html#anatomy-of-a-for-loop",
    "href": "Lectures/Lecture9/CSSS508_Lecture9.html#anatomy-of-a-for-loop",
    "title": "",
    "section": "Anatomy of a for loop",
    "text": "Anatomy of a for loop\nfor loops are the fundamental building block of iteration that both the apply and map families use under the hood.\n\nAs you become a more experienced R programmer, for loops are a powerful and general tool that will be important to learn.\n\n\n\nThe basic structure of a for loop looks like this:\n\nfor (element in vector) {\n  # do something with element\n}"
  },
  {
    "objectID": "Lectures/Lecture9/CSSS508_Lecture9.html#parallel-with-walk",
    "href": "Lectures/Lecture9/CSSS508_Lecture9.html#parallel-with-walk",
    "title": "",
    "section": "Parallel with walk()",
    "text": "Parallel with walk()\nThe most straightforward use of for loops is to achieve the same effect as walk(): call some function with a side-effect on each element of a vector/list.\n\nA very basic example:\n\n\n\nfor(i in 1:10) {\n    print(i)\n}\n\n&gt; [1] 1\n&gt; [1] 2\n&gt; [1] 3\n&gt; [1] 4\n&gt; [1] 5\n&gt; [1] 6\n&gt; [1] 7\n&gt; [1] 8\n&gt; [1] 9\n&gt; [1] 10\n\n\n\n\n1:10 |&gt;\n  walk(\\(x) print(x))\n\n&gt; [1] 1\n&gt; [1] 2\n&gt; [1] 3\n&gt; [1] 4\n&gt; [1] 5\n&gt; [1] 6\n&gt; [1] 7\n&gt; [1] 8\n&gt; [1] 9\n&gt; [1] 10\n\n\n\n\n\nThings get a little trickier if you want to save the output of the for loop.\n\n\nWhen you‚Äôre ready to dive into more advanced functional programming topics, including loops, check out the Control Flow and Functional Programming chapters of Advanced R."
  },
  {
    "objectID": "Lectures/Lecture9/CSSS508_Lecture9.html#iteration-with-across",
    "href": "Lectures/Lecture9/CSSS508_Lecture9.html#iteration-with-across",
    "title": "",
    "section": "Iteration with across",
    "text": "Iteration with across\n\nCompute the number of unique values in each column of palmerpenguins::penguins1.\nCompute the mean of every column in mtcars.\nGroup diamonds by cut, clarity, and color then count the number of observations and compute the mean of each numeric column.\nWhat happens if you use a list of functions in across(), but don‚Äôt name them? How is the output named?\n\nYou‚Äôll need to download the palmerpenguins package in order to use penguins dataset."
  },
  {
    "objectID": "Lectures/Lecture9/CSSS508_Lecture9.html#answers",
    "href": "Lectures/Lecture9/CSSS508_Lecture9.html#answers",
    "title": "",
    "section": "Answers",
    "text": "Answers\n\nCompute the number of unique values in each column of palmerpenguins::penguins1.\n\n\n\nlibrary(palmerpenguins)\ndata(penguins)\n\npenguins |&gt; summarise(across(everything(), n_distinct))\n\n&gt; # A tibble: 1 √ó 8\n&gt;   species island bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n&gt;     &lt;int&gt;  &lt;int&gt;          &lt;int&gt;         &lt;int&gt;             &lt;int&gt;       &lt;int&gt;\n&gt; 1       3      3            165            81                56          95\n&gt; # ‚Ñπ 2 more variables: sex &lt;int&gt;, year &lt;int&gt;\n\n\n\nYou‚Äôll need to download the palmerpenguins package in order to use penguins dataset."
  },
  {
    "objectID": "Lectures/Lecture9/CSSS508_Lecture9.html#answers-1",
    "href": "Lectures/Lecture9/CSSS508_Lecture9.html#answers-1",
    "title": "",
    "section": "Answers",
    "text": "Answers\n\nCompute the mean of every column in mtcars.\n\n\n\nmtcars |&gt; summarise(across(everything(), mean))\n\n&gt;     mpg   cyl  disp    hp  drat    wt  qsec     vs     am  gear  carb\n&gt; 1 20.09 6.188 230.7 146.7 3.597 3.217 17.85 0.4375 0.4062 3.688 2.812"
  },
  {
    "objectID": "Lectures/Lecture9/CSSS508_Lecture9.html#answers-2",
    "href": "Lectures/Lecture9/CSSS508_Lecture9.html#answers-2",
    "title": "",
    "section": "Answers",
    "text": "Answers\n\nGroup diamonds by cut, clarity, and color then count the number of observations and compute the mean of each numeric column.\n\n\n\ndiamonds |&gt; summarise(n = n(),\n                      across(where(is.numeric), mean),\n                      .by = c(cut, clarity, color))\n\n&gt; # A tibble: 276 √ó 11\n&gt;    cut       clarity color     n carat depth table price     x     y     z\n&gt;    &lt;ord&gt;     &lt;ord&gt;   &lt;ord&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n&gt;  1 Ideal     SI2     E       469 0.874  61.7  56.1 3891.  6.02  6.02  3.71\n&gt;  2 Premium   SI1     E       614 0.726  61.2  58.8 3363.  5.64  5.61  3.44\n&gt;  3 Good      VS1     E        89 0.681  61.6  59.2 3713.  5.49  5.52  3.39\n&gt;  4 Premium   VS2     I       315 1.24   61.3  58.9 7156.  6.70  6.67  4.09\n&gt;  5 Good      SI2     J        53 1.32   62.4  59.1 5306.  6.85  6.86  4.27\n&gt;  6 Very Good VVS2    J        29 1.10   62.4  58.3 5960.  6.34  6.37  3.96\n&gt;  7 Very Good VVS1    I        69 0.571  62.2  58.0 2056.  5.17  5.20  3.22\n&gt;  8 Very Good SI1     H       547 0.974  62.0  58.0 4934.  6.15  6.17  3.82\n&gt;  9 Fair      VS2     E        42 0.690  64.5  59.4 3042.  5.50  5.45  3.53\n&gt; 10 Very Good VS1     H       257 0.772  62.0  57.7 3750.  5.68  5.70  3.53\n&gt; # ‚Ñπ 266 more rows"
  },
  {
    "objectID": "Lectures/Lecture9/CSSS508_Lecture9.html#answers-3",
    "href": "Lectures/Lecture9/CSSS508_Lecture9.html#answers-3",
    "title": "",
    "section": "Answers",
    "text": "Answers\n\nWhat happens if you use a list of functions in across() but don‚Äôt name them? How is the output named?\n\n\n\nairquality |&gt; \n  summarize(\n    across(Ozone:Day, list(\n      \\(x) median(x, na.rm = TRUE),\n      \\(x) sum(is.na(x))\n    )),\n    n = n()\n  )\n\n&gt;   Ozone_1 Ozone_2 Solar.R_1 Solar.R_2 Wind_1 Wind_2 Temp_1 Temp_2 Month_1\n&gt; 1    31.5      37       205         7    9.7      0     79      0       7\n&gt;   Month_2 Day_1 Day_2   n\n&gt; 1       0    16     0 153\n\n\nThe default behavior of across if the names for multiple functions are not supplied is simply to append the variable name with a number, i.e.¬†the first function will be {.col}_1, the second function will be {.col}_2, etc."
  },
  {
    "objectID": "Lectures/Lecture8/CSSS508_Lecture8.html#title-slide",
    "href": "Lectures/Lecture8/CSSS508_Lecture8.html#title-slide",
    "title": "",
    "section": "",
    "text": "Writing Functions\nCS&SS 508 ‚Ä¢ Lecture 8\n25 November 2025\nVictoria Sass"
  },
  {
    "objectID": "Lectures/Lecture8/CSSS508_Lecture8.html#why-functions",
    "href": "Lectures/Lecture8/CSSS508_Lecture8.html#why-functions",
    "title": "",
    "section": "Why Functions?",
    "text": "Why Functions?\n\nR (as well as mathematics in general) is full of functions!\n\n\nWe use functions to:\n\nCompute summary statistics (mean(), sd(), min())\nFit models to data (lm(Fertility ~ Agriculture, data = swiss))\nRead in data (read_csv())\nCreate visualizations (ggplot())\nAnd a lot more!!"
  },
  {
    "objectID": "Lectures/Lecture8/CSSS508_Lecture8.html#examples-of-existing-functions",
    "href": "Lectures/Lecture8/CSSS508_Lecture8.html#examples-of-existing-functions",
    "title": "",
    "section": "Examples of Existing Functions",
    "text": "Examples of Existing Functions\n\nmean():\n\nInput: a vector\nOutput: a single number\n\ndplyr::filter():\n\nInput: a data frame, logical conditions\nOutput: a data frame with rows removed using those conditions\n\nreadr::read_csv():\n\nInput: a file path, optionally variable names or types\nOutput: a data frame containing info read in from file\n\n\n\nEach function requires inputs, and returns outputs"
  },
  {
    "objectID": "Lectures/Lecture8/CSSS508_Lecture8.html#why-write-your-own-functions",
    "href": "Lectures/Lecture8/CSSS508_Lecture8.html#why-write-your-own-functions",
    "title": "",
    "section": "Why Write Your Own Functions?",
    "text": "Why Write Your Own Functions?\n\nFunctions allow you to automate common tasks in a more powerful and general way than copy-and-pasting\nAs requirements change, you only need to update code in one place, instead of many.\nYou eliminate the chance of making incidental mistakes compared to when you copy and paste (i.e.¬†updating a variable name in one place, but not in another).\nIt makes it easier to reuse work from project-to-project, increasing your productivity over time.\nIf well named, your function can make your overall code easier to understand."
  },
  {
    "objectID": "Lectures/Lecture8/CSSS508_Lecture8.html#plan-your-function-before-writing",
    "href": "Lectures/Lecture8/CSSS508_Lecture8.html#plan-your-function-before-writing",
    "title": "",
    "section": "Plan your Function before Writing",
    "text": "Plan your Function before Writing\n\nBefore you can write effective code, you need to know exactly what you want:\n\nGoal: Do I want a single value? vector? one observation per person? per year?\nCurrent State: What do I currently have? data frame, vector? long or wide format?\nTranslate: How can I take what I have and turn it into my goal?\n\nSketch out the steps!\nBreak it down into little operations\n\n\n\nAs we become more advanced coders, this concept is key!!\nRemember: When you‚Äôre stuck, try searching your problem on Google!!"
  },
  {
    "objectID": "Lectures/Lecture8/CSSS508_Lecture8.html#simple-motivating-example",
    "href": "Lectures/Lecture8/CSSS508_Lecture8.html#simple-motivating-example",
    "title": "",
    "section": "Simple, Motivating Example",
    "text": "Simple, Motivating Example\n\n\n\n\n1set.seed(5000)\ndf &lt;- tibble(\n  a = rnorm(5),\n  b = rnorm(5),\n  c = rnorm(5),\n  d = rnorm(5)\n  )\ndf\n\ndf |&gt; mutate(\n  a = (a - min(a, na.rm = TRUE)) / \n    (max(a, na.rm = TRUE) - min(a, na.rm = TRUE)),\n  b = (b - min(b, na.rm = TRUE)) / \n    (max(b, na.rm = TRUE) - min(a, na.rm = TRUE)),\n  c = (c - min(c, na.rm = TRUE)) / \n    (max(c, na.rm = TRUE) - min(c, na.rm = TRUE)),\n  d = (d - min(d, na.rm = TRUE)) / \n    (max(d, na.rm = TRUE) - min(d, na.rm = TRUE))\n  )\n\n\n1\n\nset.seed() allows you to reproduce the same numbers from any random number-generating process (i.e.¬†rnorm())\n\n\n\n\n\n\n\nWhat do you think this code does?\nAre there any typos?\nCould we write this more efficiently as a function?\n\n\n\n\n\n\n&gt; # A tibble: 5 √ó 4\n&gt;        a       b      c      d\n&gt;    &lt;dbl&gt;   &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;\n&gt; 1 -0.130 -0.398   0.347  0.368\n&gt; 2 -1.14   1.04   -0.433 -1.07 \n&gt; 3 -2.18  -1.06   -0.278 -1.10 \n&gt; 4  0.765 -0.0376  0.674 -0.185\n&gt; 5 -0.474  1.27    1.25   1.36\n\n\n\n\n\n\n\n\n&gt; # A tibble: 5 √ó 4\n&gt;       a     b      c      d\n&gt;   &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;\n&gt; 1 0.696 0.520 0.462  0.597 \n&gt; 2 0.354 1.65  0      0.0147\n&gt; 3 0     0     0.0918 0     \n&gt; 4 1     0.805 0.656  0.372 \n&gt; 5 0.580 1.83  1      1"
  },
  {
    "objectID": "Lectures/Lecture8/CSSS508_Lecture8.html#writing-a-function",
    "href": "Lectures/Lecture8/CSSS508_Lecture8.html#writing-a-function",
    "title": "",
    "section": "Writing a Function",
    "text": "Writing a Function\nTo write a function you need to first analyse your repeated code to figure what parts are constant and what parts vary.\n\n\nLet‚Äôs look at the contents of the mutate from the last slide again.\n\n\n\n(a - min(a, na.rm = TRUE)) / (max(a, na.rm = TRUE) - min(a, na.rm = TRUE))\n(b - min(b, na.rm = TRUE)) / (max(b, na.rm = TRUE) - min(b, na.rm = TRUE))\n(c - min(c, na.rm = TRUE)) / (max(c, na.rm = TRUE) - min(c, na.rm = TRUE))\n(d - min(d, na.rm = TRUE)) / (max(d, na.rm = TRUE) - min(d, na.rm = TRUE))  \n\n\n\nThere‚Äôs quite a bit of repetition here and only a few elements that change.\n\n\n\nWe can see how concise our code can be if we replace the varying part with üü™:\n\n(üü™ - min(üü™, na.rm = TRUE)) / (max(üü™, na.rm = TRUE) - min(üü™, na.rm = TRUE))"
  },
  {
    "objectID": "Lectures/Lecture8/CSSS508_Lecture8.html#anatomy-of-a-function",
    "href": "Lectures/Lecture8/CSSS508_Lecture8.html#anatomy-of-a-function",
    "title": "",
    "section": "Anatomy of a Function",
    "text": "Anatomy of a Function\nTo turn our code into a function we need three things:\n\nName: What you call the function so you can use it later. The more explanatory this is the easier your code will be to understand.\nArgument(s) (aka input(s), parameter(s)): What the user passes to the function that affects how it works. This is what varies across calls.\nBody: The code that‚Äôs repeated across all the calls.\n\n\nFunction Template\n\n1NAME &lt;- function(ARGUMENT1, ARGUMENT2 = DEFAULT){\n  BODY \n}\n\n\n1\n\nIn this example, ARGUMENT1 and ARGUMENT2 values won‚Äôt exist outside of the function. ARGUMENT2 is an optional argument as it‚Äôs been given a default value to use if the user does not specify one.\n\n\n\n\n\n\nFor our current example, this would be:\n\n2rescale01 &lt;- function(x) {\n  (x - min(x, na.rm = TRUE)) / (max(x, na.rm = TRUE) - min(x, na.rm = TRUE))\n}\n\n\n2\n\nYou can name the placeholder value(s) whatever you want but x is the conventional name for a numeric vector so we‚Äôll use x here."
  },
  {
    "objectID": "Lectures/Lecture8/CSSS508_Lecture8.html#testing-your-function",
    "href": "Lectures/Lecture8/CSSS508_Lecture8.html#testing-your-function",
    "title": "",
    "section": "Testing Your Function",
    "text": "Testing Your Function\n\nIt‚Äôs good practice to test a few simple inputs to make sure your function works as expected.\n\n\n\n\nrescale01(c(-10, 0, 10))\n\n&gt; [1] 0.0 0.5 1.0\n\nrescale01(c(1, 2, 3, NA, 5))\n\n&gt; [1] 0.00 0.25 0.50   NA 1.00\n\n\n\n\n\nNow we can rewrite our original code in a much simpler way!1\n\n\n\n\ndf |&gt; mutate(a = rescale01(a),\n             b = rescale01(b),\n             c = rescale01(c),\n             d = rescale01(d))\n\n&gt; # A tibble: 5 √ó 4\n&gt;       a     b      c      d\n&gt;   &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;\n&gt; 1 0.696 0.284 0.462  0.597 \n&gt; 2 0.354 0.902 0      0.0147\n&gt; 3 0     0     0.0918 0     \n&gt; 4 1     0.439 0.656  0.372 \n&gt; 5 0.580 1     1      1\n\n\n\n\nWe‚Äôll see how we can simplify this even further next week!"
  },
  {
    "objectID": "Lectures/Lecture8/CSSS508_Lecture8.html#improving-your-function",
    "href": "Lectures/Lecture8/CSSS508_Lecture8.html#improving-your-function",
    "title": "",
    "section": "Improving Your Function",
    "text": "Improving Your Function\nWriting a function is often an iterative process: you‚Äôll write the core of the function and then notice the ways it can be made more efficient or that it needs to include additional syntax to handle a specific use-case.\n\n\n\n\nFor instance, you might observe that our function does some unnecessary computational repetition by evaluating min() twice and max() once when both can be computed once with range().\n\n\n\n\nrescale01 &lt;- function(x) {\n  rng &lt;- range(x, na.rm = TRUE)\n  (x - rng[1]) / (rng[2] - rng[1])\n}\n\n\n\n\n\nOr you might find out through trial and error that our function doesn‚Äôt handle infinite values well.\n\nx &lt;- c(1:10, Inf)\nrescale01(x)\n\n&gt;  [1]   0   0   0   0   0   0   0   0   0   0 NaN\n\n\n\n\nUpdating it to exclude infinite values makes it more general as it accounts for more use cases.\n\nrescale01 &lt;- function(x) {\n  rng &lt;- range(x, na.rm = TRUE, finite = TRUE)\n  (x - rng[1]) / (rng[2] - rng[1])\n}"
  },
  {
    "objectID": "Lectures/Lecture8/CSSS508_Lecture8.html#what-are-vector-functions",
    "href": "Lectures/Lecture8/CSSS508_Lecture8.html#what-are-vector-functions",
    "title": "",
    "section": "What are Vector Functions?",
    "text": "What are Vector Functions?\nThe function we just created is a vector function!\n\nVector functions are simply functions that take one or more vectors as input and return a vector as output.\n\n\nThere are two types of vector functions: mutate functions and summary functions.\n\n\nMutate Functions\n\nReturn an output the same length as the input\nTherefore, these functions work well within mutate() and filter()\n\n\n\n\nSummary Functions\n\nReturn a single value\nTherefore well suited for use in summarize()"
  },
  {
    "objectID": "Lectures/Lecture8/CSSS508_Lecture8.html#examples-of-mutate-functions",
    "href": "Lectures/Lecture8/CSSS508_Lecture8.html#examples-of-mutate-functions",
    "title": "",
    "section": "Examples of Mutate Functions",
    "text": "Examples of Mutate Functions\n\n\n\nz_score &lt;- function(x) { \n1  (x - mean(x, na.rm = TRUE)) / sd(x, na.rm = TRUE)\n} \n\nages &lt;- c(25, 82, 73, 44, 5)\nz_score(ages)\n\n\n1\n\nRescales a vector to have a mean of zero and a standard deviation of one.\n\n\n\n\n&gt; [1] -0.64569500  1.12375765  0.84437039 -0.05587745 -1.26655559\n\n\n\n\n\n\n\nclamp &lt;- function(x, min, max) { \n2  case_when(\n    x &lt; min ~ min,\n    x &gt; max ~ max,\n    .default = x\n  ) \n} \n\nclamp(1:10, min = 3, max = 7)\n\n\n2\n\nEnsures all values of a vector lie in between a minimum or a maximum.\n\n\n\n\n&gt;  [1] 3 3 3 4 5 6 7 7 7 7\n\n\n\n\n\n\n\nfirst_upper &lt;- function(x) { \n3  str_sub(x, 1, 1) &lt;- str_to_upper(str_sub(x, 1, 1))\n  x\n} \n\nfirst_upper(\"hi there, how's your day going?\")\n\n\n3\n\nMake the first character upper case.\n\n\n\n\n&gt; [1] \"Hi there, how's your day going?\""
  },
  {
    "objectID": "Lectures/Lecture8/CSSS508_Lecture8.html#examples-of-summarize-functions",
    "href": "Lectures/Lecture8/CSSS508_Lecture8.html#examples-of-summarize-functions",
    "title": "",
    "section": "Examples of Summarize Functions",
    "text": "Examples of Summarize Functions\n\n\ncv &lt;- function(x, na.rm = FALSE) {\n1  sd(x, na.rm = na.rm) / mean(x, na.rm = na.rm)\n}\n\ncv(runif(100, min = 0, max = 50))\n\n\n1\n\nCalculation for the coefficient of variation, which divides the standard deviation by the mean.\n\n\n\n\n&gt; [1] 0.599857\n\n\n\n\n\nn_missing &lt;- function(x) {\n2  sum(is.na(x))\n} \n\n3var &lt;- sample(c(seq(1, 20, 1), NA, NA), size = 100, replace = TRUE)\nn_missing(var)\n\n\n2\n\nCalculates the number of missing values (Source).\n\n3\n\nCreating a random sample of 100 values with a mix of integers from 1 to 100 and NA values.\n\n\n\n\n&gt; [1] 8\n\n\n\n\n\nmape &lt;- function(actual, predicted) {\n4  sum(abs((actual - predicted) / actual)) / length(actual)\n}\n\nmodel1 &lt;- lm(dist ~ speed, data = cars)\n5mape(cars$dist, model1$fitted.values)\n\n\n4\n\nCalculates the mean absolute percentage error which measures the average magnitude of error produced by a model, or how far off predictions are on average.\n\n5\n\nThis tells us that the average absolute percentage difference between the predicted values and the actual values is ~ 38%.\n\n\n\n\n&gt; [1] 0.3836881"
  },
  {
    "objectID": "Lectures/Lecture8/CSSS508_Lecture8.html#what-are-data-frame-functions",
    "href": "Lectures/Lecture8/CSSS508_Lecture8.html#what-are-data-frame-functions",
    "title": "",
    "section": "What are Data Frame Functions?",
    "text": "What are Data Frame Functions?\nVector functions are useful for pulling out code that‚Äôs repeated within a dplyr verb.\n\nBut if you are building a long pipeline that is used repeatedly you‚Äôll want to write a dataframe function.\n\n\nData frame functions work like dplyr verbs: they take a data frame as the first argument, some extra arguments that say what to do with it, and return a data frame or a vector.\nExample\n\ngrouped_mean &lt;- function(df, group_var, mean_var) {\n  df |&gt; \n1    group_by(group_var) |&gt;\n    summarize(mean(mean_var))\n}\n\ndiamonds |&gt; grouped_mean(cut, carat)\n\n\n1\n\nThe goal of this function is to compute the mean of mean_var grouped by group_var.\n\n\n\n\n\n\n&gt; Error in `group_by()`:\n&gt; ! Must group by variables found in `.data`.\n&gt; ‚úñ Column `group_var` is not found.\n\n\n\n\nUh oh, what happened?"
  },
  {
    "objectID": "Lectures/Lecture8/CSSS508_Lecture8.html#tidy-evaluation",
    "href": "Lectures/Lecture8/CSSS508_Lecture8.html#tidy-evaluation",
    "title": "",
    "section": "Tidy Evaluation",
    "text": "Tidy Evaluation\nTidy evaluation is what allows us to refer to the names of variables inside a data frame without any special treatment.\n\nThis is the reason we don‚Äôt have to use the $ operator and can just call the variables directly and tidyverse functions know what we‚Äôre referring to.\n\n\n\nBase Rtidyverse\n\n\n\ndiamonds[diamonds$cut == \"Ideal\" & diamonds$price &lt; 1000, ]\n\n\n\n\ndiamonds |&gt; filter(cut == \"Ideal\" & price &lt; 1000)\n\n\n\n\n\n\n\nMost of the time tidy evaluation does exactly what we want it to do.\n\n\nThe downside of tidy evaluation comes when we want to wrap up repeated tidyverse code into a function.\n\n\nHere we need some way to tell the functions within our function not to treat our argument names as the name of the variables, but instead look inside them for the variable we actually want to use."
  },
  {
    "objectID": "Lectures/Lecture8/CSSS508_Lecture8.html#embracing",
    "href": "Lectures/Lecture8/CSSS508_Lecture8.html#embracing",
    "title": "",
    "section": "Embracing",
    "text": "Embracing\nThe tidy evaluation solution to this issue is called embracing, which means wrapping variable names in two sets of curly braces (i.e.¬†var becomes { var }).\n\nEmbracing a variable tells dplyr to use the value stored inside the argument, not the argument as the literal variable name.\n\n\n\ngrouped_mean &lt;- function(df, group_var, mean_var) {\n  df |&gt; \n    group_by({{ group_var }}) |&gt; \n    summarize(mean({{ mean_var }}))\n}\n\ndiamonds |&gt; grouped_mean(cut, carat)\n\n\n\n&gt; # A tibble: 5 √ó 2\n&gt;   cut       `mean(carat)`\n&gt;   &lt;ord&gt;             &lt;dbl&gt;\n&gt; 1 Fair              1.05 \n&gt; 2 Good              0.849\n&gt; 3 Very Good         0.806\n&gt; 4 Premium           0.892\n&gt; 5 Ideal             0.703"
  },
  {
    "objectID": "Lectures/Lecture8/CSSS508_Lecture8.html#when-to-embrace",
    "href": "Lectures/Lecture8/CSSS508_Lecture8.html#when-to-embrace",
    "title": "",
    "section": "When to Embrace? ",
    "text": "When to Embrace? \nLook up the documentation of the function!\n\nThe two most common sub-types of tidy evaluation are data-masking1 and tidy-selection2.\n\n\n\n\n\n\nUsed in functions like arrange(), filter(), and summarize() that compute with variables.Used in functions like select(), relocate(), and rename() that select variables."
  },
  {
    "objectID": "Lectures/Lecture8/CSSS508_Lecture8.html#data-frame-function-examples",
    "href": "Lectures/Lecture8/CSSS508_Lecture8.html#data-frame-function-examples",
    "title": "",
    "section": "Data Frame Function Examples",
    "text": "Data Frame Function Examples\n\nsummary6 &lt;- function(data, var) {\n1  data |&gt; summarize(\n    min = min({{ var }}, na.rm = TRUE),\n    mean = mean({{ var }}, na.rm = TRUE),\n    median = median({{ var }}, na.rm = TRUE),\n    max = max({{ var }}, na.rm = TRUE),\n    n = n(),\n    n_miss = sum(is.na({{ var }})),\n2    .groups = \"drop\"\n  )\n}\n\ndiamonds |&gt; summary6(carat)\n\n\n1\n\nThe goal of this function is to compute six common summary statistics for a specified variable of a dataset.\n\n2\n\nWhenever you wrap summarize() in a helper function it‚Äôs good practice to set .groups = \"drop\" to both avoid the message and leave the data in an ungrouped state.\n\n\n\n\n\n\n&gt; # A tibble: 1 √ó 6\n&gt;     min  mean median   max     n n_miss\n&gt;   &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt;  &lt;int&gt;\n&gt; 1   0.2 0.798    0.7  5.01 53940      0"
  },
  {
    "objectID": "Lectures/Lecture8/CSSS508_Lecture8.html#data-frame-function-examples-1",
    "href": "Lectures/Lecture8/CSSS508_Lecture8.html#data-frame-function-examples-1",
    "title": "",
    "section": "Data Frame Function Examples",
    "text": "Data Frame Function Examples\n\ncount_prop &lt;- function(df, var, sort = FALSE) {\n1  df |&gt;\n    count({{ var }}, sort = sort) |&gt;\n    mutate(prop = n / sum(n))\n}\n\ndiamonds |&gt; count_prop(clarity)\n\n\n1\n\nThis function is a variation of count() which also calculates the proportion (Source).\n\n\n\n\n\n\n&gt; # A tibble: 8 √ó 3\n&gt;   clarity     n   prop\n&gt;   &lt;ord&gt;   &lt;int&gt;  &lt;dbl&gt;\n&gt; 1 I1        741 0.0137\n&gt; 2 SI2      9194 0.170 \n&gt; 3 SI1     13065 0.242 \n&gt; 4 VS2     12258 0.227 \n&gt; 5 VS1      8171 0.151 \n&gt; 6 VVS2     5066 0.0939\n&gt; 7 VVS1     3655 0.0678\n&gt; 8 IF       1790 0.0332\n\n\n\n\nFor more functions like this one, check out the tabyl() function and additional formatting options in the janitor package."
  },
  {
    "objectID": "Lectures/Lecture8/CSSS508_Lecture8.html#what-are-plot-functions",
    "href": "Lectures/Lecture8/CSSS508_Lecture8.html#what-are-plot-functions",
    "title": "",
    "section": "What are Plot Functions?",
    "text": "What are Plot Functions?\n\n\nWhat if you have a lot of similar plots to create? You can use a function to eliminate redundency.\n\n\nThe same technique can be used if you want to write a function that returns a plot since aes() is a data-masking function.\n\n\n\nSimply use embracing within the aes() call to ggplot()!\n\n\n\n\nhistogram &lt;- function(df, var, binwidth = NULL) {\n  df |&gt; \n1    ggplot(aes(x = {{ var }})) +\n    geom_histogram(binwidth = binwidth)\n}\n\n2diamonds |&gt; histogram(carat, 0.1)\n\n\n1\n\nThis is a useful function for quickly getting histograms of a specified binwidth from a dataset.\n\n2\n\nNote that histogram() returns a ggplot2 plot, meaning you can still add on additional components if you want. Just remember to switch from |&gt; to +."
  },
  {
    "objectID": "Lectures/Lecture8/CSSS508_Lecture8.html#data-manipulation-plotting",
    "href": "Lectures/Lecture8/CSSS508_Lecture8.html#data-manipulation-plotting",
    "title": "",
    "section": "Data Manipulation & Plotting",
    "text": "Data Manipulation & Plotting\nYou might want to create a function that has a bit of data manipulation and returns a plot.\n\n\n1sorted_bars &lt;- function(df, var) {\n  df |&gt; \n2    mutate({{ var }} := fct_rev(fct_infreq({{ var }})))  |&gt;\n    ggplot(aes(y = {{ var }})) + \n    geom_bar() \n}\n\ndiamonds |&gt; sorted_bars(clarity)\n\n\n1\n\nThis function creates a vertical bar chart where you automatically sort the bars in frequency order using fct_infreq().\n\n2\n\n:= (commonly referred to as the ‚Äúwalrus operator‚Äù) is used here because we are generating the variable name based on user-supplied data. R‚Äôs syntax doesn‚Äôt allow anything to the left of = except for a single, literal name. To work around this problem, we use the special operator := which tidy evaluation treats in exactly the same way as =."
  },
  {
    "objectID": "Lectures/Lecture8/CSSS508_Lecture8.html#functions-that-label",
    "href": "Lectures/Lecture8/CSSS508_Lecture8.html#functions-that-label",
    "title": "",
    "section": "Functions that Label",
    "text": "Functions that Label\n\n\nWhat if we want to add labels using our function?\n\n\nFor that we need to use the low-level package rlang that‚Äôs used by just about every other package in the tidyverse because it implements tidy evaluation (as well as many other useful tools).\n\n\n\n\n\n\nLet‚Äôs take our histogram example from before:\n\nhistogram &lt;- function(df, var, binwidth) {\n1  label &lt;- rlang::englue(\"A histogram of {{ var }} with binwidth {binwidth}\")\n  \n  df |&gt; \n    ggplot(aes(x = {{ var }})) + \n    geom_histogram(binwidth = binwidth) + \n    labs(title = label)\n}\n\ndiamonds |&gt; histogram(carat, 0.1)\n\n\n1\n\nrlang::englue() works similarly to str_glue(), so any value wrapped in  { } will be inserted into the string. But it also understands {{ }}, which automatically inserts the appropriate variable name."
  },
  {
    "objectID": "Lectures/Lecture8/CSSS508_Lecture8.html#best-practices",
    "href": "Lectures/Lecture8/CSSS508_Lecture8.html#best-practices",
    "title": "",
    "section": "Best Practices",
    "text": "Best Practices\n\nMake function names descriptive; again longer is better due to RStudio‚Äôs auto-complete feature.\nGenerally, function names should be verbs, and arguments should be nouns.\n\nSome exceptions: computation of a well-known noun (i.e.¬†mean()), accessing a property of an object (i.e.¬†coef())\n\nfunction() should always be followed by squiggly brackets ({}), and the contents should be indented by an additional two spaces1.\nYou should put extra spaces inside of { }. This makes it very obvious that something unusual is happening.\n\n\n\nYou can read the official tidyverse style guide for functions here.\nThis makes it easier to see the hierarchy in your code by skimming the left-hand margin."
  },
  {
    "objectID": "Lectures/Lecture8/CSSS508_Lecture8.html#writing-functions",
    "href": "Lectures/Lecture8/CSSS508_Lecture8.html#writing-functions",
    "title": "",
    "section": "Writing Functions",
    "text": "Writing Functions\n\nPractice turning the following code snippets into functions. Think about what each function does. What would you call it? How many arguments does it need?\n\n\n\nmean(is.na(x))\nmean(is.na(y))\nmean(is.na(z))\n\nx / sum(x, na.rm = TRUE)\ny / sum(y, na.rm = TRUE)\nz / sum(z, na.rm = TRUE)\n\nround(x / sum(x, na.rm = TRUE) * 100, 1)\nround(y / sum(y, na.rm = TRUE) * 100, 1)\nround(z / sum(z, na.rm = TRUE) * 100, 1)\n\n\n\n\n\nBonus: Write a function that takes a name as an input (i.e.¬†a character string) and returns a greeting based on the current time of day. Hint: use a time argument that defaults to lubridate::now(). That will make it easier to test your function."
  },
  {
    "objectID": "Lectures/Lecture8/CSSS508_Lecture8.html#answers",
    "href": "Lectures/Lecture8/CSSS508_Lecture8.html#answers",
    "title": "",
    "section": "Answers",
    "text": "Answers\n\nPractice turning the following code snippets into functions. Think about what each function does. What would you call it? How many arguments does it need?\n\n\nmean(is.na(x))\nmean(is.na(y))\nmean(is.na(z))\n\n\n\n\nprop_na &lt;- function(x){\n  mean(is.na(x))\n}\n\n1set.seed(50)\nvalues &lt;- sample(c(seq(1, 10, 1), NA), 5, replace = TRUE)\nvalues\n\n\n1\n\nset.seed() is a function that can be used to create reproducible results when writing code that involves creating variables that take on random values.\n\n\n\n\n\n\n&gt; [1] NA  4  2  7  3\n\n\n\nprop_na(values)\n\n\n\n&gt; [1] 0.2\n\n\nThis code calculates the proportion of NA values in a vector. I would call it prop_na() which would take a single argument, x, and return a single numeric value, between 0 and 1."
  },
  {
    "objectID": "Lectures/Lecture8/CSSS508_Lecture8.html#answers-1",
    "href": "Lectures/Lecture8/CSSS508_Lecture8.html#answers-1",
    "title": "",
    "section": "Answers",
    "text": "Answers\n\nPractice turning the following code snippets into functions. Think about what each function does. What would you call it? How many arguments does it need?\n\n\nx / sum(x, na.rm = TRUE)\ny / sum(y, na.rm = TRUE)\nz / sum(z, na.rm = TRUE)\n\n\n\n\n\nsums_to_one &lt;- function(x, na.rm = FALSE) {\n  x / sum(x, na.rm = na.rm)\n}\n\nsums_to_one(values)\n\n\n\n&gt; [1] NA NA NA NA NA\n\n\n\nsums_to_one(values, na.rm = TRUE)\n\n\n\n&gt; [1]     NA 0.2500 0.1250 0.4375 0.1875\n\n\nThis code standardizes a vector so that it sums to one. It takes a numeric vector and an optional specification for removing NAs. While the original code had na.rm = TRUE, it‚Äôs best to set the default to FALSE which will alert the user if NAs are present by returning NA."
  },
  {
    "objectID": "Lectures/Lecture8/CSSS508_Lecture8.html#answers-2",
    "href": "Lectures/Lecture8/CSSS508_Lecture8.html#answers-2",
    "title": "",
    "section": "Answers",
    "text": "Answers\n\nPractice turning the following code snippets into functions. Think about what each function does. What would you call it? How many arguments does it need?\n\n\nround(x / sum(x, na.rm = TRUE) * 100, 1)\nround(y / sum(y, na.rm = TRUE) * 100, 1)\nround(z / sum(z, na.rm = TRUE) * 100, 1)\n\n\n\n\n\npct_vec &lt;- function(x, na.rm = FALSE){\n  round(x / sum(x, na.rm = na.rm) * 100, 1)\n}\n\npct_vec(values, na.rm = TRUE)\n\n\n\n&gt; [1]   NA 25.0 12.5 43.8 18.8\n\n\nThis code takes a numeric vector and finds what each value represents as a percentage of the sum of the entire vector and rounds it to the first decimal place. There is also an optional na.rm argument set to FALSE by default."
  },
  {
    "objectID": "Lectures/Lecture8/CSSS508_Lecture8.html#answers-3",
    "href": "Lectures/Lecture8/CSSS508_Lecture8.html#answers-3",
    "title": "",
    "section": "Answers",
    "text": "Answers\n\nBonus: Write a function that takes a name as an input (i.e.¬†a character string) and returns a greeting based on the current time of day. Hint 1: use a time argument that defaults to lubridate::now(). That will make it easier to test your function. Hint 2: Use rlang::englue to combine your greetings with the name input.\n\n\n\n2greet &lt;- function(name, time = now()){\n  hr &lt;- hour(time) \n3  greeting &lt;- case_when(hr &lt; 12 & hr &gt;= 5 ~ rlang::englue(\"Good morning {name}.\"),\n                        hr &lt; 17 & hr &gt;= 12 ~ rlang::englue(\"Good afternoon {name}.\"),\n                        hr &gt;= 17 ~ rlang::englue(\"Good evening {name}.\"),\n                        .default = rlang::englue(\"Why are you awake rn, {name}???\"))\n4  return(greeting)\n}\n\n5greet(\"Vic\")\n\n\n2\n\nBy default this function will take the current time to determine the specific greeting.\n\n\n3\n\nUsing englue() allows you to include user-specified values with { }.\n\n4\n\nreturn() or print() or simply calling the variable greeting is necessary for the function to work as expected.\n\n5\n\nThe last time this lecture (and therefore this code) was rendered was at 2025-09-25 15:43:17.918073\n\n\n\n\n\n\n&gt; [1] \"Good afternoon Vic.\"\n\n\n\ngreet(\"Vic\", time = ymd_h(\"2024-05-14 2am\"))\n\n\n\n&gt; [1] \"Why are you awake rn, Vic???\""
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1_index.html",
    "href": "Lectures/Lecture1/CSSS508_Lecture1_index.html",
    "title": "Lecture 1",
    "section": "",
    "text": "Syllabus and Introduction to R, RStudio, and Quarto\n\nSeptember 30, 2025\n\n\n\n\n\nSlides & Code\nHTML slides ‚Ä¢ qmd file ‚Ä¢ R Code\n\n\n\nSuggested Reading (from R for Data Science (2e)1)\nChapter 1: Introduction ‚Ä¢ Chapter 29: Quarto\n\n\n1¬†Hadley Wickham, Mine √áetinkaya-Rundel & Garrett Grolemund\nUseful Resources\n\nGetting Started\nDownload R ‚Ä¢ Download RStudio ‚Ä¢ Download Quarto ‚Ä¢ Quarto Tutorial\n\n\nCheatsheets\nRStudio ‚Ä¢ Quarto ‚Ä¢ Base R\n\n\nOther Readings\nHands-On Programming with R 2\nAn Introduction to R 3\n2¬†Garrett Grolemund3¬†Alex Douglas, Deon Roos, Francesca Mancini, Ana Couto & David Lusseau\n\nCrowdsource Help\nCS&SS 508 Slack Workspace ‚Ä¢ Posit community ‚Ä¢ Stackoverflow",
    "crumbs": [
      "Lectures",
      "Lecture 1"
    ]
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#title-slide",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#title-slide",
    "title": "",
    "section": "",
    "text": "Introduction to R, RStudio, and Quarto\nCS&SS 508 ‚Ä¢ Lecture 1\n30 September 2025\nVictoria Sass"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#welcome",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#welcome",
    "title": "",
    "section": "Welcome!",
    "text": "Welcome!\n\nIntroductions\nSyllabus\nLecture 1: Introduction to R, RStudio, and Quarto"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#who-am-i",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#who-am-i",
    "title": "",
    "section": "Who Am I?",
    "text": "Who Am I?\n\nVictoria (Vic) Sass\n\n\n\nPhD Candidate in Sociology\n\n\n\n\nI‚Äôve been using R and RStudio for over 10 years üò±\n\n\n\n\nI love teaching this class ü§ì"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#introductions",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#introductions",
    "title": "",
    "section": "Introductions",
    "text": "Introductions\nLet‚Äôs start by getting to know each other a bit better. On your index card write the following:\n\nName and pronouns\nProgram and year\nExperience with programming (in R or more generally)\nOne word that best describes your feelings about taking this class\nWould you rather be able to converse with (non-human) animals, or have lifelong fluency in every (human) language?\n\n\nPair up with someone nearby and introduce yourself to one another. Let‚Äôs take about 5-10 minutes to do this."
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#syllabus",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#syllabus",
    "title": "",
    "section": "Syllabus",
    "text": "Syllabus\nThe syllabus (as well as lots of other information) can be found on our course website:\n\nhttps://vsass.github.io/CSSS508\n\nFeel free to follow along online as I run through the syllabus!"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#course-goals",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#course-goals",
    "title": "",
    "section": "Course goals",
    "text": "Course goals\nThis course is intended to give students a foundational understanding of programming in the statistical language R. This knowledge is intended to be broadly useful wherever you encounter data in your education and career. General topics we will focus on include:\n\nDeveloping intermediate data management and visualization skills\nOrganizing projects and creating reproducible research\nCleaning data\nLinking multiple data sets together\nLearning basic programming skills\n\n\nBy the end of this course you should feel confident approaching any data you encounter in the future. We will cover almost no statistics, however it is the intention that this course will leave you prepared to progress in CS&SS or STAT courses with the ability to focus on statistics instead of coding. Additionally, the basic concepts you learn will be applicable to other programming languages and research in general, such as logic and algorithmic thinking."
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#logistics-general",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#logistics-general",
    "title": "",
    "section": "Logistics: General",
    "text": "Logistics: General\nLecture: On Tuesdays we will meet in Raitt 121 for an interactive session where we‚Äôll cover a specific topic to help you learn fundamental skills, concepts, and principles for learning R. Additionally, these sessions will provide you with the opportunity to work with each other to learn and practice key skills in R. I will be available to answer questions and help troubleshoot code as well.\nOffice Hours: Drop-in to ask questions, get advice, or continue discussions from lab/lecture. We can talk in a breakout room or with the group!\n\nWednesdays, 1-3pm (on Zoom; link on Canvas)\n\n\n\n\n How to Contact Me\n\n\nPlease message me in our Slack Workspace rather than sending me an email. I get far too many emails a day and I don‚Äôt want to miss your message!"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#logistics-three-tools-for-class",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#logistics-three-tools-for-class",
    "title": "",
    "section": "Logistics: Three Tools for Class",
    "text": "Logistics: Three Tools for Class\n\n\n\n\n Communication\n\n\nLearning is collaborative! In addition to being the place to communicate with me, our Slack is also where you can ask one another questions, share resources, and just generally check in with each other about how your adventures with R are going. You can find the link to join our workplace on our course Canvas.\n\n\n\n\n\n\n\n Homework & Peer-Reviews\n\n\nWe will be using Canvas solely for homework & peer review submissions/deadlines and for any links I only want to distribute to those registered for this class (i.e.¬†Slack and Office Hours Zoom).\n\n\n\n\n\n\n\n\n Course Content\n\n\nAll course content will be accessible on our course website: https://vsass.github.io/CSSS508."
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#slack",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#slack",
    "title": "",
    "section": "\n Slack",
    "text": "Slack\nIf you‚Äôve never used Slack before you‚Äôll need to download the desktop app.\n\nA useful quick-start guide can be found here.\n\n\nGo to our Canvas site for the invite link to join our private workspace."
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#schedule",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#schedule",
    "title": "",
    "section": "Schedule",
    "text": "Schedule\n\n\n\n\nSeptember 30\nOctober 7\nOctober 14\nOctober 21\nOctober 28\nNovember 4\nNovember 11\nNovember 18\nNovember 25\nDecember 2\nDecember 9\n\n\n\n\n\n\n\nWeek 1: Introduction to R, RStudio, and Quarto\nWeek 2: Visualizing Data\nWeek 3: Workflow and Reproducibility\nWeek 4: Importing, Exporting, and Cleaning Data\nWeek 5: Manipulating and Summarizing Data\nWeek 6: Data Structures & TypesVeterans Day Holiday (No Class)\nWeek 7: Working with Text Data\nWeek 8: Writing Functions\nÔ∏é\nWeek 9: Iteration\nWeek 10: Next Steps (optional, based on students‚Äô interest)"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#schedule-1",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#schedule-1",
    "title": "",
    "section": "Schedule",
    "text": "Schedule\n\n\n\nSeptember 30October 7October 14October 21October 28November 4\nNovember 11November 18November 25December 2\nDecember 9\n\n\n\n\n\n\n\nWeek 1: Introduction to R, RStudio, and QuartoWeek 2: Visualizing DataWeek 3: Workflow and ReproducibilityWeek 4: Importing, Exporting, and Cleaning DataWeek 5: Manipulating and Summarizing DataWeek 6: Data Structures & TypesVeterans Day Holiday (No Class)Week 7: Working with Text DataWeek 8: Writing Functions\nÔ∏éWeek 9: Iteration\nWeek 10: Next Steps (optional, based on students‚Äô interest)"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#prerequisites",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#prerequisites",
    "title": "",
    "section": "Prerequisites",
    "text": "Prerequisites\n\n\n\nNone üòé"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#course-materials",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#course-materials",
    "title": "",
    "section": "Course Materials",
    "text": "Course Materials\nMaterials: All course materials will be provided on the course website. This includes:\n\nLecture slides and the code used to generate them.\nHomework instructions and/or templates.\nRecommended reading/cheatsheet(s).\nUseful links to other resources.\n\n\nLaptops: You‚Äôre expected to bring a personal laptop to class as it helps to gain familiarity with the software you‚Äôll be using and gaining hands-on experience with the material we‚Äôre learning. If you don‚Äôt have access to a laptop you can loan one from UW through the Student Technology Loan Program.\n\n\n\n\n\n ¬†Keep In Mind\n\n\nThe versions of R, RStudio, and Quarto (as well as any packages you have installed) will not necessarily be the same/up to date if you do your work on different computers. My advice is to consistently use the same device for homework assignments or to make sure to download the latest versions of R, RStudio, and Quarto when using a new machine."
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#readings",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#readings",
    "title": "",
    "section": "Readings",
    "text": "Readings\n\n\n\nTextbooks: This course has no textbook. However, I will be suggesting selections from R for Data Science to pair with each week‚Äôs topic. While not required, I strongly suggest reading those selections before doing the homework for that week."
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#course-assessment",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#course-assessment",
    "title": "",
    "section": "Course Assessment",
    "text": "Course Assessment\nFinal grade\nCredit/No Credit (C/NC); You need at least 60% to get Credit\n\n\n\nHomework (75%; assessed by peers)\n9 total homeworks; assessed on a 0-3 point rubric. Assigned at the end of lecture sessions and due a week later.\n\n\n\n\n\n\n\n\n\n\nEvaluation\nPoints\n\n\n\nDidn‚Äôt turn anything in.\n0\n\n\nTurned in but low effort,  ignoring many directions.\n1\n\n\nDecent effort, followed directions  with some minor issues.\n2\n\n\nNailed it!\n3\n\n\n\n\n\n\n\nPeer Grading (25%; assessed by me)\nOne per homework, assessed on a binary satisfactory/unsatisfactory scale. Due 5 days after homework due date.\n\n\n\n\n\n\n\n\n\n\nEvaluation\nPoints\n\n\n\nDidn‚Äôt follow all peer-review instructions.\n0\n\n\nPeer review is at least several sentences long, mentions any and all key issues from the assignment, and points out at least one positive thing in your peer‚Äôs work (and hopefully more!).\n1"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#due-dates-and-late-policy",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#due-dates-and-late-policy",
    "title": "",
    "section": "Due Dates and Late Policy",
    "text": "Due Dates and Late Policy\nHomework/peer grading instructions and deadlines can be found on the Homework page of the course website. All homework will be turned in on Canvas by 4:30pm the day it is due.\n\n\n\n\n Late Homework Will Automatically Lose Peer-Review Credit\n\n\nPeer reviews are randomly assigned when the due date/time is reached. Therefore, if you don‚Äôt submit your homework on time, you will not be given a peer‚Äôs homework to review and vice versa. That said, life is messy and complicated and we all miss deadlines for a variety of reasons. Therefore, you can request that I review and provide feedback on a late assignment (message me on Slack) but you won‚Äôt be able to earn peer-review credit for that particular homework."
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#ugh-peer-grading",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#ugh-peer-grading",
    "title": "",
    "section": "Ugh, peer grading?",
    "text": "Ugh, peer grading?\nYes, because:\n\nYou will write your reports better knowing others will see them\nYou learn alternate approaches to the same problem\nYou will have more opportunities to practice and have the material sink in\n\n\nHow to peer review:\n\nLeave constructive comments: You‚Äôll only get the point if you write at least several sentences that includes\n\nAny key issues from the assignment and,\nPoints out something positive in your peer‚Äôs work.\n\n\n\nSend me a message on Slack if you would like your assignment to be regraded or for me to provide feedback if no peer review was given."
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#academic-integrity",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#academic-integrity",
    "title": "",
    "section": "Academic Integrity",
    "text": "Academic Integrity\n\n\nAcademic integrity is essential to this course and to your learning. Violations of the academic integrity policy include but are not limited to:\n\nCopying from a peer\nCopying from an online resource\nUsing resources from a previous iteration of the course.\n\n\n\nI hope you will collaborate with peers on assignments and use Internet resources when questions arise to help solve issues. The key is that you ultimately submit your own work.\n\n\nAnything found in violation of this policy will be automatically given a score of 0 with no exceptions. If the situation merits, it will also be reported to the UW Student Conduct Office, at which point it is out of my hands. If you have any questions about this policy, please do not hesitate to reach out and ask.\n\n\n\n\n\n\n\n\n\n\nUsing AI Tools\n\n\nAI tools can be helpful while you‚Äôre learning R, especially for asking clarifying questions about what code is doing. But keep in mind that they often make mistakes ‚Äî and sometimes confidently give you flawed, biased, and/or suboptimal code. If you don‚Äôt understand the basics, fixing those mistakes can be more work than writing the code yourself. Think of AI as a study aid ‚Äî useful for clarification and explanations ‚Äî but if you rely on it too much, it can actually hold back your learning and even weaken your coding skills over time. The real learning happens when you practice coding on your own."
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#classroom-environment",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#classroom-environment",
    "title": "",
    "section": "Classroom Environment",
    "text": "Classroom Environment\n\n\nI‚Äôm committed to fostering a friendly and inclusive classroom environment in which all students have an equal opportunity to learn and succeed. This course is an attempt to make an often difficult and frustrating experience (learning R for the first time) less obfuscating, daunting, and stressful. That said, learning happens in different ways at at a different pace for everyone. Learning is also a collaborative and creative process and my aim is to create an environment in which you all feel comfortable asking questions of me and each other. Treat your peers and yourself with empathy and respect as you all approach this topic from a range of backgrounds and experiences (in programming and in life).\n\n\n\nNames & Pronouns: Everyone deserves to be addressed respectfully and correctly. Fill out your profile on Slack with your picture, preferred name (as your Display Name), and gender pronouns so we can all be on the same page!\n\n\n\nDiversity: Diverse backgrounds, embodiments, and experiences are essential to the critical thinking endeavor at the heart of university education. Therefore, I expect you to follow the UW Student Conduct Code in your interactions with your colleagues and me in this course by respecting the many social and cultural differences among us, which may include, but are not limited to: age, cultural background, disability, ethnicity, family status, gender identity and presentation, body size/shape, citizenship and immigration status, national origin, race, religious and political beliefs, sex, sexual orientation, socioeconomic status, and veteran status."
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#accommodations",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#accommodations",
    "title": "",
    "section": "Accommodations",
    "text": "Accommodations\nAccessibility & Accommodations: Your experience in this class is important to me. If you have already established accommodations with Disability Resources for Students (DRS), please communicate your approved accommodations to me at your earliest convenience so we can discuss your needs in this course. If you have not yet established services through DRS, but have a temporary health condition or permanent disability that requires accommodations (conditions include but not limited to; mental health, attention-related, learning, vision, hearing, physical or health impacts), you are welcome to contact DRS at 206-543-8924, uwdrs@uw.edu, or through their website.\n\n\nReligious Accommodations: Washington state law requires that UW develop a policy for accommodation of student absences or significant hardship due to reasons of faith or conscience, or for organized religious activities. The UW's policy, including more information about how to request an accommodation, is available at Religious Accommodations Policy. Accommodations must be requested within the first two weeks of this course using the Religious Accommodations Request form."
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#help-and-feedback",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#help-and-feedback",
    "title": "",
    "section": "Help and Feedback",
    "text": "Help and Feedback\nGetting Help: If at any point during the quarter you find yourself struggling to keep up, please let me know! I am here to help. A great place to start this process is by chatting before1 class, coming to office hours, or message meon Slack.\n\nAlso, help one another as you navigate this course! Slack allows you to chat directly with one another, send messages to the whole class about specific topics (see the already-created # r-code-questions and # quarto-questions channels), send snippets of code or entire files to one another, and much more.\n\n\n\n\n\n\n Feedback\n\n\nIf you have feedback on any part of this course or the classroom environment I want to hear it! You can message me directly on Slack or send me an anonymous message here. Additionally, I will send out a mid-quarter feedback survey on Slack around Week 5.\n\n\n\n\nUnfortunately I have to leave right after class to catch the ferry so if you want to chat in person, come early to class. I‚Äôll be hanging out in Raitt 121 just after 4pm each Tuesday."
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#asking-questions",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#asking-questions",
    "title": "",
    "section": "Asking Questions",
    "text": "Asking Questions\nDon‚Äôt ask like this:\n\ntried lm(y~x) but it iddn‚Äôt work wat do\n\n\nInstead, ask like this:\n\ny &lt;- seq(1:10) + rnorm(10)\nx &lt;- seq(0:10)\nmodel &lt;- lm(y ~ x)\nRunning the block above gives me the following error, anyone know why?\nError in model.frame.default(formula = y ~ x, \ndrop.unused.levels = TRUE) : variable lengths differ \n(found for 'x')\n\n\n\n\n FYI\n\n\nIf you ask me a question directly over Slack I may send out your question (anonymously) along with my answer to the whole course."
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#a-note-on-slide-formatting",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#a-note-on-slide-formatting",
    "title": "",
    "section": "A Note on Slide Formatting",
    "text": "A Note on Slide Formatting\nBold usually indicates an important vocabulary term. Remember these!\n\nItalics indicate emphasis but also are used to point out things you must click with a mouse.\n\nFor example: ‚ÄúPlease click File &gt; Print‚Äù\n\n\n\nCode represents R code you could use to perform actions.\n\nFor example: ‚ÄúPress Ctrl-P to open the print dialogue.‚Äù\n\n\n\nCode chunks that span the page represent actual R code embedded in the slides.\n\n7 * 49"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#a-note-on-slide-formatting-1",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#a-note-on-slide-formatting-1",
    "title": "",
    "section": "A Note on Slide Formatting",
    "text": "A Note on Slide Formatting\nBold usually indicates an important vocabulary term. Remember these!\nItalics indicate emphasis but also are used to point out things you must click with a mouse.\n\nFor example: ‚ÄúPlease click File &gt; Print‚Äù\n\nCode represents R code you could use to perform actions.\n\nFor example: ‚ÄúPress Ctrl-P to open the print dialogue.‚Äù\n\nCode chunks that span the page represent actual R code embedded in the slides.\n\n7 * 49 \n# Sometimes important stuff is highlighted!"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#a-note-on-how-to-use-these-slides",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#a-note-on-how-to-use-these-slides",
    "title": "",
    "section": "A Note on How to Use These Slides \n",
    "text": "A Note on How to Use These Slides \n\nSince the lectures for this class were created using Quarto, there are numerous built-in features meant to facilitate your learning, particularly of R.\n\nThe  in the bottom left-hand corner will show you a table of contents for the entire slideshow, allowing you to find what you‚Äôre looking for more easily.\nAnything followed by  is a link to an external site. You will be shown a preview (if available) within the presentation first and from there you can open the link in a new tab to explore it more.\nIf you hover over any chunk of R code embedded in the slides you will see a  which you can click to copy the code. You can then paste it in your own Quarto document or R script to run it in your session of RStudio.\nComments about how the code functions or additional options available can be found in numbered circles on the right-hand side of the relevant code-chunk (similar to this: ). You can reveal what they say by simply hovering your cursor over the corresponding circle.\n\nTo get a PDF version of these slides click the  in the bottom left-hand corner, click the  (top, center of the navigation window), and select PDF Export Mode to generate a version you can print or save as PDF. Note: many of these slides are interactive and those features will not translate to the static format of a PDF.\nYou can search the slides for keywords by pressing R and then Command + F (Mac/Linux) or Ctrl + F (PC)\nClicking on the  in the bottom left-hand corner allows you to draw directly on the slides, in a very Microsoft Paint kind of way. See if it‚Äôs useful but I make no promises!\nType ? at any time to see all the available key-board shortcuts.\nSome content may be scrollable (like this page!). If this is the case I will put the  icon in the title to let you know."
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#why-r",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#why-r",
    "title": "",
    "section": "Why R?",
    "text": "Why R?\nR is a programming language built for statistical computing.\nIf one already knows Stata or similar software, why use R?\n\n\nR is free.\n\n\n\n\nR has a very large community.\n\n\n\n\nR can handle virtually any data format.\n\n\n\n\nR makes replication easy.\n\n\n\n\nR is a language so it can do everything.\n\n\n\n\nR skills transfer to other languages like Python and Julia."
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#r-studio",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#r-studio",
    "title": "",
    "section": "R Studio",
    "text": "R Studio\nR Studio is a ‚Äúfront-end‚Äù or integrated development environment (IDE) for R that can make your life easier.\n\nWe‚Äôll show RStudio can‚Ä¶\n\nOrganize your code, output, and plots\nAuto-complete code and highlight syntax\nHelp view data and objects\nEnable easy integration of R code into documents with Quarto\n\n\n\n\nIt can also‚Ä¶\n\nManage git repositories\nRun interactive tutorials\nHandle other languages like C++, Python, SQL, HTML, and shell scripting"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#selling-you-on-quarto",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#selling-you-on-quarto",
    "title": "",
    "section": "Selling You on Quarto",
    "text": "Selling You on Quarto\nBuilt upon many of the developments of the R Markdown ecosystem, Quarto distills them into one coherent system and additionally expands its functionality by supporting other programming languages besides R, including Python and Julia."
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#selling-you-on-quarto-1",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#selling-you-on-quarto-1",
    "title": "",
    "section": "Selling You on Quarto",
    "text": "Selling You on Quarto\nThe ability to create Quarto files in R is a powerful advantage. It allows us to:\n\nDocument analyses by combining text, code, and output\n\nNo copying and pasting into Word\nEasy for collaborators to understand\nShow as little or as much code as you want\n\n\nProduce many different document types as output\n\nPDF documents\nHTML webpages and reports\nWord and PowerPoint documents\n\nPresentations (like these slides)\nBooks\nTheses/Dissertations üòâüéì\nWebsites (like the one for this course!)\n\n\nWorks with LaTeX and HTML for math and more formatting control"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#downloading-r-and-rstudio",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#downloading-r-and-rstudio",
    "title": "",
    "section": "Downloading R and RStudio",
    "text": "Downloading R and RStudio\nIf you don‚Äôt already have R and RStudio on your machine, now is the time to do so!\n\nGo to the course homepage, https://vsass.github.io/CSSS508\n\nClick the Download R link and download R to your machine.\nAfterwards, click the Download RStudio link and download RStudio to your machine.\nRStudio already comes packaged with Quarto so you don‚Äôt need to download it separately.\n\n\n\n\n\n\n\n\nNote\n\n\nAs you become a more advanced R user and want to explore the full functionality of Quarto, it‚Äôs recommended you download the latest version directly from their website to keep track of the most up-to-date developments/features."
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#getting-started",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#getting-started",
    "title": "",
    "section": "Getting Started",
    "text": "Getting Started\nOpen up RStudio now and choose File &gt; New File &gt; R Script.\nThen, let‚Äôs get oriented with the interface:\n\nTop Left: Code editor pane, data viewer (browse with tabs)\nBottom Left: Console for running code (&gt; prompt)\nTop Right: List of objects in environment, code history tab.\nBottom Right: Tabs for browsing files, viewing plots, managing packages, and viewing help files."
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#editing-and-running-code",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#editing-and-running-code",
    "title": "",
    "section": "Editing and Running Code",
    "text": "Editing and Running Code\nThere are several ways to run R code in RStudio:\n\n\nHighlight lines in the editor window and click ‚ÄÉ‚ÄÉ‚ÄÇ Run at the top right corner of said window or hit Ctrl+Enter or ‚åò+Enter to run them all."
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#editing-and-running-code-1",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#editing-and-running-code-1",
    "title": "",
    "section": "Editing and Running Code",
    "text": "Editing and Running Code\nThere are several ways to run R code in RStudio:\n\nHighlight lines in the editor window and click ‚ÄÉ‚ÄÉ‚ÄÇ Run at the top right corner of said window or hit Ctrl+Enter or ‚åò+Enter to run them all.\nWith your caret1 on a line you want to run, hit Ctrl+Enter or ‚åò+Enter. Note your caret moves to the next line, so you can run code sequentially with repeated presses.\n\n\n\nType individual lines in the console and press Enter.\n\n\n\n\nIn quarto documents, click within a code chunk and click the green arrow ‚ÄÉ¬†  to run the chunk. The button beside that (‚ÄÉ‚ÄÉ ) runs all prior chunks.\n\n\n\nThe console will show the lines you ran followed by any printed output.\n\nThis thing is the caret: |"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#incomplete-code",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#incomplete-code",
    "title": "",
    "section": "Incomplete Code",
    "text": "Incomplete Code\nIf you mess up (e.g.¬†leave off a parenthesis), R might show a + sign prompting you to finish the command:\n\n&gt; (11-2\n+\n\nFinish the command or hit Esc to get out of this."
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#r-as-a-calculator",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#r-as-a-calculator",
    "title": "",
    "section": "R as a Calculator",
    "text": "R as a Calculator\nIn the console, type 123 + 456 + 789 and hit Enter.\n\n\n123 + 456 + 789\n\n[1] 1368\n\n\n\n\nThe [1] in the output indicates the numeric index of the first element on that line.\n\n\nNow in your blank R document in the editor, try typing the line sqrt(400) and either clicking Run or hitting Ctrl+Enter or ‚åò+Enter.\n\n\n\nsqrt(400)\n\n[1] 20"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#functions",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#functions",
    "title": "",
    "section": "Functions",
    "text": "Functions\nsqrt() is an example of a function in R.\nArguments are the inputs to a function. In this case, the only argument to sqrt() is x which can be a number or a vector of numbers.\n\n\nThe basic template of a function is\nfunction_name(argument1, argument2 = value2, argument3 = value3...)\n\n\n\n\n\n\n ¬†Something to Note\n\n\nFunctions can have a wide range of arguments and some are required for the function to run, while others remain optional. You can see from each functions‚Äô help page which are not required because they will have an = with some default value pre-selected. If there is no = it is up to the user to define that value and it‚Äôs therefore a required specification."
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#help",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#help",
    "title": "",
    "section": "Help",
    "text": "Help\n\n\nIf we didn‚Äôt have a good guess as to what sqrt() will do, we can type ?sqrt in the console and look at the Help panel on the bottom right.\n\n?sqrt\n\n\nIf you‚Äôre trying to look up the help page for a function and can‚Äôt remember its name you can search by a keyword and you will get a list of help pages containing said keyword.\n\n??exponential"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#help-1",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#help-1",
    "title": "",
    "section": "Help",
    "text": "Help\nHelp files provide documentation on how to use functions and what functions produce. They will generally consist of the following sections:\n\n\nDescription - What does it do?\n\n\nUsage - How do you write it?\n\n\nArguments - What arguments does it take; which are required; what are the defaults?\n\n\nDetails - A more in-depth description\n\n\nValue - What does the function return?\n\n\nSee Also - Related R functions\n\n\nExamples - Example (& reproducible) code"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#objects",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#objects",
    "title": "",
    "section": "Objects",
    "text": "Objects\nR stores everything as an object, including data, functions, models, and output.\n\nCreating an object can be done using the assignment operator: &lt;-\n\n\n\nnew_object &lt;- 144\n\n\n\nOperators like &lt;- are functions that look like symbols but typically sit between their arguments (e.g.¬†numbers or objects) instead of having them inside () like in sqrt(x).\n\n\nWe do math with operators, e.g., x + y.\n+ is the addition operator!"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#calling-objects",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#calling-objects",
    "title": "",
    "section": "Calling Objects",
    "text": "Calling Objects\nYou can display or ‚Äúcall‚Äù an object simply by using its name.\n\nnew_object\n\n[1] 144"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#naming-objects",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#naming-objects",
    "title": "",
    "section": "Naming Objects",
    "text": "Naming Objects\nObject names must begin with a letter and can contain letters, numbers, ., and _.\nTry to be consistent in naming objects. RStudio‚Äôs auto-complete feature means long, descriptive names are better than short, vague ones! Good names save confusion later!\n\n\n\nsnake_case, where you separate lowercase words with _ is a common and practical naming convention that I strongly recommend.\n\n\nsnake_case_is_easy_to_read\nCamelCaseIsAlsoAnOptionButSortOfHardToReadQuickly\nsome.people.use.periods\nAnd_some.People_ARETRUErebels\n\n\n\n\nRemember that object names are CaSe SeNsItIvE!!\nAlso, TYPOS MATTER!"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#using-objects",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#using-objects",
    "title": "",
    "section": "Using Objects",
    "text": "Using Objects\nAn object‚Äôs name represents the information stored in that object, so you can treat the object‚Äôs name as if it were the values stored inside. . . .\n\nnew_object + 10\n\n[1] 154\n\nnew_object + new_object\n\n[1] 288\n\nsqrt(new_object)\n\n[1] 12"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#comments",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#comments",
    "title": "",
    "section": "Comments",
    "text": "Comments\nAnything writen after #1 will be ignorned by R.\n\n# create vector of ages of students\nages &lt;- c(45, 21, 27, 34, 23, 24, 24)\n\n# get average age of students\nmean(ages)\n\n[1] 28.28571\n\n\n\nComments help collaborators and future-you understand what, and more importantly, why you are doing what you‚Äôre doing with that specific line/chunk of code.\n\n\nAdditionally, comments allow you to explain your overall coding plan and record anything important that you‚Äôve discovered along the way.\n\nIn Quarto documents, comments only work in code chunks. Outside of a chunk, # creates headers like Comments at the top of this slide."
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#vectors",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#vectors",
    "title": "",
    "section": "Vectors",
    "text": "Vectors\nA vector is one of many data types available in R. Specifically, it is a series of elements, such as numbers, strings, or booleans (i.e.¬†TRUE, FALSE).\n\nYou can create a vector using the function c() which stands for ‚Äúcombine‚Äù or ‚Äúconcatenate‚Äù. . . .\n\nnew_object &lt;- c(4, 9, 16, 25, 36)\nnew_object\n\n[1]  4  9 16 25 36\n\n\n\n\nIf you name an object the same name as an existing object, it will overwrite it.\n\n\nYou can provide a vector as an argument for many functions. . . .\n\nsqrt(new_object)\n\n[1] 2 3 4 5 6"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#more-complex-objects",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#more-complex-objects",
    "title": "",
    "section": "More Complex Objects",
    "text": "More Complex Objects\nThere are other, more complex data types in R which we will discuss later in the quarter! These include matrices, arrays, lists, and dataframes.\nMost data sets you will work with will be read into R and stored as a dataframe. Each column in a data frame is treated as a vector by R. Therefore, this course will mainly focus on manipulating and visualizing these two data types."
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#creating-a-quarto-document",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#creating-a-quarto-document",
    "title": "",
    "section": "Creating a Quarto Document",
    "text": "Creating a Quarto Document\nLet‚Äôs try making an Quarto file:\n\nChoose File &gt; New File &gt; Quarto Document‚Ä¶\n\nMake sure HTML Output is selected\nIn the Title box call this test document My First Qmd and click Create\n\nSave this document somewhere (you can delete it later) (either with File &gt; Save or clicking ‚ÄÉ‚ÄÇ  towards the top left of the source pane).\nLastly, click ‚ÄÉ‚ÄÉ  Render at the top of the source pane to ‚Äúknit‚Äù your document into an html file. This will produce a minimal webpage since we only have a title. We need to add more content!\n\n\nIf you want to create PDF output in the future, you‚Äôll need to run the following code in your console.\n\ninstall.packages(\"quarto\")\ninstall.packages('tinytex')\ntinytex::install_tinytex()"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#anatomy-of-a-quarto-document",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#anatomy-of-a-quarto-document",
    "title": "",
    "section": "Anatomy of a Quarto Document",
    "text": "Anatomy of a Quarto Document\n\n\n\n\nQuarto file\nRendered html document\n\n\n\n\n\n---\ntitle: \"ggplot2 demo\"\nauthor: \"Norah Jones\"\ndate: \"5/22/2021\"\nformat: \n  html:\n    fig-width: 8\n    fig-height: 4\n    code-fold: true\n---\n\n## Air Quality\n\n@fig-airquality further explores the impact of temperature on ozone level.\n\n```{r}\n#| label: fig-airquality\n#| fig-cap: \"Temperature and ozone level.\"\n#| warning: false\n\nlibrary(ggplot2)\nggplot(airquality, aes(Temp, Ozone)) + \n  geom_point() + \n  geom_smooth(method = \"loess\")\n```\n\n\n\n\n\n\n\n\nThe rendered output of the qmd file shown on the previous tab.\n\n\n\n\n\n\n\nElements of a Quarto document include:\n\n\nAn (optional) YAML header (surrounded by ---s).\n\n\n\n\nPlain text and any associated formatting.\n\n\n\n\nChunks of code (surrounded by ``` s) and/or their output."
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#quarto-headers",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#quarto-headers",
    "title": "",
    "section": "Quarto Headers",
    "text": "Quarto Headers\nThe header of an .qmd file is a YAML1code block, and everything else is part of the main document. Try adding some of these other fields to your YAML and re-render it to see what it looks like.\n\n---\ntitle: \"Untitled\"\nauthor: \"Victoria Sass\"\ndate: \"September 30, 2025\"\noutput: html_document\n---\n\n\nTo mess with global formatting, you can modify the header2.\n\noutput:\n  html_document:\n    theme: readable\n\n\nYou can read a bit more about YAML headers in Quarto here and this reference page lists all options possible for html output.Be careful though, YAML is space-sensitive; indents matter!"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#quarto-syntax",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#quarto-syntax",
    "title": "",
    "section": "Quarto Syntax",
    "text": "Quarto Syntax\n\n\nOutput\nbold/strong emphasis italic/normal emphasis \nHeader\n\n\nSubheader\n\n\nSubsubheader\n\n\n\nBlock quote from famous person\n\n\nQuarto Syntax\n\n**bold/strong emphasis**\n*italic/normal emphasis*\n  \n  \n  \n# Header\n  \n  \n  \n## Subheader\n  \n\n\n### Subsubheader\n  \n\n\n\n&gt; Block quote from\n&gt; famous person"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#quarto-syntax-continued",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#quarto-syntax-continued",
    "title": "",
    "section": "Quarto Syntax1 Continued",
    "text": "Quarto Syntax1 Continued\n\n\nOutput\n\nOrdered lists\nAre real easy\n\nEven with sublists\nOr with lazy numbering\n\n\n\n\nUnordered lists\nAre also real easy\n\nAlso even with sublists\n\nAnd subsublists\n\n\n\n\n\n\nSyntax\n\n1. Ordered lists\n1. Are real easy\n    1. Even with sublists\n    1. Or with lazy numbering\n  \n    \n    \n    \n    \n* Unordered lists\n* Are also real easy\n  + Also even with sublists\n    - And subsublists\n\n\nThis is all basic markdown syntax which you can learn about here."
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#formulae-and-syntax",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#formulae-and-syntax",
    "title": "",
    "section": "Formulae and Syntax",
    "text": "Formulae and Syntax\n\n\nOutput\nInclude math \\(y= \\left( \\frac{2}{3} \\right)^2\\) inline.\nOr centered on your page like so:\n\\[\\frac{1}{n} \\sum_{i=1}^{n} x_i = \\bar{x}_n\\]\nOr write code-looking font.\nOr a block of code:\n\ny &lt;- 1:5\nz &lt;- y^2\n\n\nSyntax\nInclude math $y= \\left(\\frac{2}{3} \\right)^2$ inline. \n\nOr centered on your page like so: \n  \n$$\\frac{1}{n} \\sum_{i=1}^{n}x_i = \\bar{x}_n$$\n\n\n  \n  \nOr write`code-looking font`.\n\nOr a block of code:\n\n```{r}\ny &lt;- 1:5\nz &lt;- y^2\n```\n\n\n\nTry copying any of the code chunks from the previous three slides to add some formatted text to your own qmd."
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#quarto-tinkering",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#quarto-tinkering",
    "title": "",
    "section": "Quarto Tinkering",
    "text": "Quarto Tinkering\nQuarto docs can be modified in many ways. Visit these links for more information.\n\nGetting started with Quarto\n\nTutorial: Hello, Quarto\nTutorial: Computations\nTutorial: Authoring\n\n\nWays to modify the overall document appearance\nWays to format parts of your document\n\nLearn about the visual editor here 1\n\nI suggest while you‚Äôre first learning R and using Quarto documents you don‚Äôt use the visual editor. Its purpose is to facilitate a more limited point-and-click approach to R which will inherently limit your ability to learn the language and how to write code. You can turn this default off by going to Tools &gt; Global Options &gt; R Markdown &gt; Visual and unchecking the first box that says Use visual editor by default for new documents"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#r-code-in-quarto",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#r-code-in-quarto",
    "title": "",
    "section": "R Code in Quarto",
    "text": "R Code in Quarto\nInside Quarto, lines of R code are called chunks. Code is sandwiched between sets of three backticks and {r}. This chunk of code‚Ä¶\n```{r}\nsummary(cars)\n```\nProduces this output in your document:\n\nsummary(cars)\n\n     speed           dist       \n Min.   : 4.0   Min.   :  2.00  \n 1st Qu.:12.0   1st Qu.: 26.00  \n Median :15.0   Median : 36.00  \n Mean   :15.4   Mean   : 42.98  \n 3rd Qu.:19.0   3rd Qu.: 56.00  \n Max.   :25.0   Max.   :120.00  \n\n\n\nAdd this code chunk to your document!"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#chunk-options",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#chunk-options",
    "title": "",
    "section": "Chunk Options",
    "text": "Chunk Options\nChunks have options that control what happens with their code. They are specified as special comments at the top of a block. For example:\n```{r}\n#| label: bar-chart\n#| eval: false\n#| fig-cap: \"A line plot on a polar axis\"\n```"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#chunk-options-1",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#chunk-options-1",
    "title": "",
    "section": "Chunk Options",
    "text": "Chunk Options\nSome useful and common options include:\n\necho: false - Keeps R code from being shown in the document\neval: false - Shows R code in the document without running it\ninclude: false - Hides all output but still runs code (good for setup chunks where you load packages!)\noutput: false - Doesn‚Äôt include the results of that code chunk in the output\ncache: true - Saves results of running that chunk so if it takes a while, you won‚Äôt have to re-run it each time you re-render the document\nfig.height: 5, fig.width: 5 - modify the dimensions of any plots that are generated in the chunk (units are in inches)\nfig.cap: \"Text\" - add a caption to your figure in the chunk"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#playing-with-chunk-options",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#playing-with-chunk-options",
    "title": "",
    "section": "Playing with Chunk Options",
    "text": "Playing with Chunk Options\nTry adding or changing the chunk options for the chunk in my_first_Rmd.qmd and re-render your document to see what happens.\n\n```{r}\n#| eval: false\nsummary(cars)\n```"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#in-line-r-code",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#in-line-r-code",
    "title": "",
    "section": "In-Line R code",
    "text": "In-Line R code\nSometimes we want to insert a value directly into our text. We do that using code in single backticks starting off with r.\n\nFour score and seven years ago is the same as `r 4*20 + 7` years.\n\n\nFour score and seven years ago is the same as 87 years.\n\n\n\nMaybe we‚Äôve saved a variable in a code chunk that we want to reference in the text:\n\nx &lt;- sqrt(77)\n\n\n\nThe value of `x` rounded to the nearest two decimals is `r round(x, 2)`.\n\n\nThe value of x rounded to the nearest two decimals is 8.77."
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#this-is-amazing",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#this-is-amazing",
    "title": "",
    "section": "This is Amazing!",
    "text": "This is Amazing!\nHaving R dump values directly into your document protects you from silly mistakes:\n\n\nNever wonder ‚Äúhow did I come up with this quantity?‚Äù ever again: Just look at your formula in your .qmd file!\n\n\n\n\nConsistency! No ‚Äúfind/replace‚Äù mishaps; reference a variable in-line throughout your document without manually updating if the calculation changes (e.g.¬†reporting sample sizes).\n\n\n\n\nYou are more likely to make a typo in a ‚Äúhard-coded‚Äù number than you are to write R code that somehow runs but gives you the wrong thing."
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#example-keeping-dates",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#example-keeping-dates",
    "title": "",
    "section": "Example: Keeping Dates",
    "text": "Example: Keeping Dates\nIn your YAML header, make the date come from R‚Äôs Sys.time() function by changing:\n\ndate: \"March 26, 2024\"\nto\ndate: \"`r Sys.time()`\""
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#base-r",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#base-r",
    "title": "",
    "section": "Base R\n",
    "text": "Base R\n\nSimply by downloading R you have access to what is referred to as Base R. That is, the built-in functions and datasets that R comes equipped with, right out of the box.\n\nExamples that we‚Äôve already seen include &lt;-, sqrt(), +, Sys.time(), and summary() but there are obviously many many more.\n\n\nYou can see a whole list of what Base R contains by running library(help = \"base\") in the console."
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#a-base-r-dataset-cars",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#a-base-r-dataset-cars",
    "title": "",
    "section": "A Base R Dataset: cars\n",
    "text": "A Base R Dataset: cars\n\nIn the sample Quarto document you are working on, we can load the built-in data cars, which loads as a dataframe, a type of object mentioned earlier. Then, we can look at it in a couple different ways.\n\ndata(cars) loads this dataframe into the Global Environment.\n\n\nView(cars) pops up a Viewer tab in the source pane (‚Äúinteractive‚Äù use only, don‚Äôt put in Quarto document!).\n\n\n\n1head(cars, n = 5)\n\n\n1\n\nprints first 5 rows, can use tail() too\n\n\n\n\n  speed dist\n1     4    2\n2     4   10\n3     7    4\n4     7   22\n5     8   16"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#a-base-r-dataset-cars-1",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#a-base-r-dataset-cars-1",
    "title": "",
    "section": "A Base R Dataset: cars\n",
    "text": "A Base R Dataset: cars\n\nstr() displays the structure of an object:\n\n2str(cars)\n\n\n2\n\nstr[ucture]\n\n\n\n\n'data.frame':   50 obs. of  2 variables:\n $ speed: num  4 4 7 7 8 9 10 10 10 11 ...\n $ dist : num  2 10 4 22 16 10 18 26 34 17 ...\n\n\n\nsummary() displays summary information 1:\n\nsummary(cars)\n\n     speed           dist       \n Min.   : 4.0   Min.   :  2.00  \n 1st Qu.:12.0   1st Qu.: 26.00  \n Median :15.0   Median : 36.00  \n Mean   :15.4   Mean   : 42.98  \n 3rd Qu.:19.0   3rd Qu.: 56.00  \n Max.   :25.0   Max.   :120.00  \n\n\n\nNote R is object-oriented which means summary() provides different information for different types of objects!"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#base-r-is-prettybasic",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#base-r-is-prettybasic",
    "title": "",
    "section": "Base R is pretty‚Ä¶Basic",
    "text": "Base R is pretty‚Ä¶Basic\nhist() generates a histogram of a vector. Note that you can access a vector that is a column of a dataframe using $, the extract operator.\n\n\n\n3hist(cars$speed)\n\n\n3\n\nCreates a histogram of the speed variable from the dataset cars\n\n\n\n\n\n\n\n\n\n\n\n\nhist(cars$dist)"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#base-r-is-prettybasic-1",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#base-r-is-prettybasic-1",
    "title": "",
    "section": "Base R is pretty‚Ä¶Basic",
    "text": "Base R is pretty‚Ä¶Basic\nWe can try and make this histogram a bit more appealing by adding more arguments and their specifications.\n\n\nCode\nPlot\n\n\n\n\nhist(cars$dist,\n4     xlab = \"Distance (ft)\",\n5     main = \"Observed stopping distances of cars\")\n\n\n4\n\nX-axis label\n\n5\n\nTitle"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#base-r-is-prettybasic-2",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#base-r-is-prettybasic-2",
    "title": "",
    "section": "Base R is pretty‚Ä¶Basic",
    "text": "Base R is pretty‚Ä¶Basic\nWe can also make scatterplots to show the relationship between two variables.\n\n\nCode\nPlot\n\n\n\n\nplot(dist ~ speed, data = cars,\n     xlab = \"Speed (mph)\",\n     ylab = \"Stopping distance (ft)\",\n     main = \"Speeds and stopping distances of cars\",\n6     pch = 16)\n7abline(h = mean(cars$dist), col = \"firebrick\")\n8abline(v = mean(cars$speed), col = \"cornflowerblue\")\n\n\n6\n\nSpecify point shape\n\n7\n\nAdds horizontal line (y-intercept value)\n\n8\n\nAdds vertical line (x-intercept value)\n\n\n\n\n\n\n\n\n Note\n\n\ndist ~ speed is a formula of the type y ~ x. The first element (dist) gets plotted on the y-axis and the second (speed) goes on the x-axis. Regression formulae follow this convention as well!"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#base-r-is-prettybasic-3",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#base-r-is-prettybasic-3",
    "title": "",
    "section": "Base R is pretty‚Ä¶Basic",
    "text": "Base R is pretty‚Ä¶Basic\nWe can also make scatterplots to show the relationship between two variables.\n\n\nCode\nPlot\n\n\n\n\nplot(dist ~ speed, data = cars,\n     xlab = \"Speed (mph)\",\n     ylab = \"Stopping distance (ft)\",\n     main = \"Speeds and stopping distances of cars\",\n6     pch = 16)\n7abline(h = mean(cars$dist), col = \"firebrick\")\n8abline(v = mean(cars$speed), col = \"cornflowerblue\")\n\n\n6\n\nSpecify point shape\n\n7\n\nAdds horizontal line (y-intercept value)\n\n8\n\nAdds vertical line (x-intercept value)"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#another-base-r-dataset-swiss",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#another-base-r-dataset-swiss",
    "title": "",
    "section": "Another Base R Dataset: swiss\n",
    "text": "Another Base R Dataset: swiss\n\nLet‚Äôs look at another built-in dataset.\n\nFirst, run ?swiss in the console to see what things mean.\n\n\nThen, load it using data(swiss)\n\n\nAdd chunks to your Quarto document inspecting swiss, defining variables, doing some exploratory plots using hist or plot.\nYou might experiment with colors and shapes."
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#looking-at-swiss",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#looking-at-swiss",
    "title": "",
    "section": "Looking at swiss\n",
    "text": "Looking at swiss\n\n\n\nCode\nPlot\n\n\n\n\n9pairs(swiss,\n      pch = 8, \n      col = \"violet\",\n      main = \"Pairwise comparisons of Swiss variables\")\n\n\n9\n\npairs() is a pairwise scatterplot function. Good for a quick look at small datasets with numerical/continuous data, but mostly useless for larger data."
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#packages",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#packages",
    "title": "",
    "section": "Packages",
    "text": "Packages\nWhat makes R so powerful though is it‚Äôs extensive library of packages. Due to it‚Äôs open-source nature, anyone (even you!) can write a package that others can use.\n\n\nPackages contain pre-made functions and/or data that can be used to extend Base R‚Äôs capabilities.\n\n\n\n\n\n\n ¬†Base R/Package Analogy\n\n\nBase R is like creating a recipe from scratch: going to the store and buying all the ingredients and cooking it by yourself. Using a package is more akin to using a meal-kit service: you still have to cook but you‚Äôre provided with the ingredients and step-by-step instructions for making the recipe.\n\n\n\n\n\n\nAs of this writing there are 22,7371 available packages!\n\nTo put this in perspective, there were 19,940 available packages the first time I taught this course (Fall 2023)."
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#installing-packages",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#installing-packages",
    "title": "",
    "section": "Installing Packages",
    "text": "Installing Packages\nTo use a package outside of Base R you need to do two things:"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#installing-packages-1",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#installing-packages-1",
    "title": "",
    "section": "Installing Packages",
    "text": "Installing Packages\nTo use a package outside of Base R you need to do two things:\n\nDownload the package from CRAN (The Comprehensive R Archive Network) by running the following in your console:1\n\n\n\ninstall.packages(\"package_name\")\n\nYou never want to include this line of code in a Quarto document or an R Script"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#installing-packages-2",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#installing-packages-2",
    "title": "",
    "section": "Installing Packages",
    "text": "Installing Packages\nTo use a package outside of Base R you need to do two things:\n\nDownload the package from CRAN (The Comprehensive R Archive Network) by running the following in your console:1\n\n\n\ninstall.packages(\"package_name\")\n\nThis downloads the package to your local machine (or the server of whatever remote machine you‚Äôre using). Thus, you only every need to do it once for each package2!\nYou never want to include this line of code in a Quarto document or an R ScriptYou‚Äôll only need to re-install a package when you update R or if the package itself comes out with an updated version with new features you want to use."
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#installing-packages-3",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#installing-packages-3",
    "title": "",
    "section": "Installing Packages",
    "text": "Installing Packages\nTo use a package outside of Base R you need to do two things:\n\nDownload the package from CRAN (The Comprehensive R Archive Network) by running the following in your console:1\n\n\n\ninstall.packages(\"package_name\")\n\nThis downloads the package to your local machine (or the server of whatever remote machine you‚Äôre using). Thus, you only every need to do it once for each package2!\n\nOnce a package is installed, you need to load it into the current session of R so you can use it. You‚Äôll do this by putting the following in an R Script or embedded in a code chunk in a Quarto file:\n\n\nlibrary(package_name)\n\nYou never want to include this line of code in a Quarto document or an R ScriptYou‚Äôll only need to re-install a package when you update R or if the package itself comes out with an updated version with new features you want to use."
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#gt-package",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#gt-package",
    "title": "",
    "section": "\ngt Package",
    "text": "gt Package\nLet‚Äôs make a table that‚Äôs more polished than the code-y output R automatically gives us. To do this, we‚Äôll want to install our first package called gt. In the console, run: install.packages(\"gt\").\n\n\n\n Different Syntax\n\n\nNotice that unlike the library() command, the name of a package to be installed must be in quotes? This is because the name here is a search term (text, not an object!) while for library() it is an actual R object."
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#making-cleaner-tables",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#making-cleaner-tables",
    "title": "",
    "section": "Making cleaner tables",
    "text": "Making cleaner tables\n\n\nCode\nTable\n\n\n\n\n10library(gt)\ngt(as.data.frame.matrix(summary(swiss))) \n\n\n10\n\nloads gt, do once in your session\n\n\n\n\n\n\n\n\n Nesting Functions\n\n\nNote that we put the summary(swiss) function call inside the as.data.frame.matrix() call which all went into the gt() function. This is called nesting functions and is very common. I‚Äôll introduce a method next week to avoid confusion from nesting too many functions inside each other.\n\n\n\n\n\n\n\n\n What‚Äôs as.data.frame.matrix() Doing?\n\n\ngt() takes as its first argument a data.frame-type object, while summary() produces a table-type object. Therefore, as.data.frame.matrix() was additionally needed to turn the table into a data.frame.\n\n\n\n\n\n\n\n\n\n\n\n\nFertility\nAgriculture\nExamination\nEducation\nCatholic\nInfant.Mortality\n\n\n\nMin. :35.00\nMin. : 1.20\nMin. : 3.00\nMin. : 1.00\nMin. : 2.150\nMin. :10.80\n\n\n1st Qu.:64.70\n1st Qu.:35.90\n1st Qu.:12.00\n1st Qu.: 6.00\n1st Qu.: 5.195\n1st Qu.:18.15\n\n\nMedian :70.40\nMedian :54.10\nMedian :16.00\nMedian : 8.00\nMedian : 15.140\nMedian :20.00\n\n\nMean :70.14\nMean :50.66\nMean :16.49\nMean :10.98\nMean : 41.144\nMean :19.94\n\n\n3rd Qu.:78.45\n3rd Qu.:67.65\n3rd Qu.:22.00\n3rd Qu.:12.00\n3rd Qu.: 93.125\n3rd Qu.:21.70\n\n\nMax. :92.50\nMax. :89.70\nMax. :37.00\nMax. :53.00\nMax. :100.000\nMax. :26.60"
  },
  {
    "objectID": "Lectures/Lecture1/CSSS508_Lecture1.html#gts-version-of-head-and-tail",
    "href": "Lectures/Lecture1/CSSS508_Lecture1.html#gts-version-of-head-and-tail",
    "title": "",
    "section": "\ngt‚Äôs Version of head() and tail()\n",
    "text": "gt‚Äôs Version of head() and tail()\n\n\n\nhead()\ngt_preview() alternative\n\n\n\n\nhead(swiss)\n\n             Fertility Agriculture Examination Education Catholic\nCourtelary        80.2        17.0          15        12     9.96\nDelemont          83.1        45.1           6         9    84.84\nFranches-Mnt      92.5        39.7           5         5    93.40\nMoutier           85.8        36.5          12         7    33.77\nNeuveville        76.9        43.5          17        15     5.16\nPorrentruy        76.1        35.3           9         7    90.57\n             Infant.Mortality\nCourtelary               22.2\nDelemont                 22.2\nFranches-Mnt             20.2\nMoutier                  20.3\nNeuveville               20.6\nPorrentruy               26.6\n\n\n\n\n\ngt_preview(swiss, \n           top_n = 3, # default is 5\n           bottom_n = 3) # default is 1 \n\n\n\n\n\n\n\n\nFertility\nAgriculture\nExamination\nEducation\nCatholic\nInfant.Mortality\n\n\n\n1\n80.2\n17.0\n15\n12\n9.96\n22.2\n\n\n2\n83.1\n45.1\n6\n9\n84.84\n22.2\n\n\n3\n92.5\n39.7\n5\n5\n93.40\n20.2\n\n\n4..44\n\n\n\n\n\n\n\n\n45\n35.0\n1.2\n37\n53\n42.34\n18.0\n\n\n46\n44.7\n46.6\n16\n29\n50.43\n18.2\n\n\n47\n42.8\n27.7\n22\n29\n58.33\n19.3\n\n\n\n\n\n\n\n\n\n\n\n\n\nüëã Bye Bye as.data.frame.matrix()\n\n\nWe no longer need as.data.frame.matrix() since we‚Äôre no longer using summary(). Both head() and gt_preview() take a data.frame-type object as their first argument which is the same data type as swiss."
  },
  {
    "objectID": "Lectures/Lecture6/CSSS508_Lecture6_index.html",
    "href": "Lectures/Lecture6/CSSS508_Lecture6_index.html",
    "title": "Lecture 6",
    "section": "",
    "text": "Data Structures & Types\n\nNovember 4, 2025\n\n\n\n\n\nSlides & Code\nHTML slides ‚Ä¢ Raw qmd file ‚Ä¢ R Code\n\n\n\nSuggested Reading (from R for Data Science (2e)1)\nChapter 14: Numbers ‚Ä¢ Chapter 19: Missing Values\n\n\n1¬†Hadley Wickham, Mine √áetinkaya-Rundel & Garrett Grolemund\nUseful Resources\n\nCheatsheets\nBase R\n\n\nPackage Websites\nnaniar\n\n\nOther Readings\nChapter 5: R Objects in Hands-On Programming with R 2\n2¬†Garrett Grolemund\n\nCrowdsource Help\nCS&SS 508 Slack Workspace ‚Ä¢ Posit community ‚Ä¢ Stackoverflow",
    "crumbs": [
      "Lectures",
      "Lecture 6"
    ]
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#title-slide",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#title-slide",
    "title": "",
    "section": "",
    "text": "Workflow & Reproducibility\nCS&SS 508 ‚Ä¢ Lecture 3\n14 October 2025\nVictoria Sass"
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#disclaimer",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#disclaimer",
    "title": "",
    "section": "Disclaimer",
    "text": "Disclaimer\nThere are honestly no hard, fast rules about what is the correct code. You can produce all styles of code that will run and get you your desired results.\n\nHowever, the following recommendations are made with these truths in mind:\n\nUsing a consistent style cuts down on the decisions you have to make, therefore allowing you to focus your attention on the substance of your code\n\nThis makes code easier to write and your overall process more efficient!\n\nEasy-to-read code is faster-read-code: both for any collaborators you may have and also future-you.\n\nThis is particularly helpful when scanning code in order to troubleshoot an error\n\n\n\n\nYou can read more about the specific style we‚Äôre using in this class here."
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#naming-objects",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#naming-objects",
    "title": "",
    "section": "Naming Objects",
    "text": "Naming Objects\nIt‚Äôs good practice to name objects (and oftentimes variables) using only lowercase letters, numbers, and _ (to separate words).\n\nRemember to give them descriptive names, even if that means they‚Äôre longer.\n\n\nIf you have many related variables, try and be consistent with your naming convention.\n\nA common prefix is preferable to a common suffix due to RStudio‚Äôs autocomplete feature.\n\n\n# Code goal: \nshort_flights &lt;- flights |&gt; \n  filter(air_time &lt; 60)\n\n# Code foul: \nSHORTFLIGHTS &lt;- flights |&gt; \n  filter(air_time &lt; 60)"
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#spacing",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#spacing",
    "title": "",
    "section": "Spacing",
    "text": "Spacing\nFor readability you‚Äôll want to put spaces around all mathematical operators1 (i.e.¬†+, -, ==, &lt;, etc.) as well as the assignment operator (&lt;-).\n\n# Code goals: \nz &lt;- (a + b)^2 / d\nmean(x, na.rm = TRUE)\n\n# Code foul: \nz&lt;-( a+b ) ^ 2/d\nmean (x ,na.rm=TRUE)\n\n\nTo make code easier to skim quickly it‚Äôs alright to add extra space for better alignment.\n\nflights |&gt; \n  mutate(\n    speed      = distance / air_time,\n    dep_hour   = dep_time %/% 100,\n    dep_minute = dep_time %%  100\n  )\n\n\nexcept for ^"
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#pipes",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#pipes",
    "title": "",
    "section": "Pipes",
    "text": "Pipes\nAs you begin to use more functions, sequentially, it can start to get unclear what‚Äôs happening when, and to what.\n\nmedian(sqrt(log(mean(gapminder$pop))))\n\n\nWith nested functions, like those above, you need to read the order of operations inside out, which is a bit awkward. It becomes even more confusing the more function calls you have, especially when they have multiple arguments each.\n\n\nEnter the pipe1: |&gt;\nPipes read ‚Äúleft to right‚Äù which is much more intuitive!\n\ngapminder$pop |&gt; mean() |&gt; log() |&gt; sqrt() |&gt; median()\n\n\nThe above code takes what‚Äôs on the left-hand side of |&gt; and gives it as the first unnamed argument to the first function (mean()).\nThe result of that function call is then ‚Äúpiped‚Äù to the first unnamed argument of the second function (log())‚Ä¶\n\n\nA component of programming which allows us to break a problem into a number of steps, each of which is straightforward and easy to understand."
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#pipes-1",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#pipes-1",
    "title": "",
    "section": "Pipes",
    "text": "Pipes\nAs you can see, pipes allow us to ‚Äúchain‚Äù many function calls together easily.\n\n\n\nThe so-called ‚Äúnative pipe‚Äù (i.e.¬†built into base R) is relatively new. Before this, the pipe was a function from the magrittr package that looks like this: %&gt;%.\n\n\n\n\nThis latter version continues to work but has a different functionality than the new, native pipe."
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#versus",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#versus",
    "title": "",
    "section": "%>% versus |>",
    "text": "%&gt;% versus |&gt;\nMost importantly, while both the magrittr pipe and the native pipe take the LHS (left-hand side) and ‚Äúpipe‚Äù it to the RHS (right-hand side), they operate differently when it comes to explicitly specifying which argument of the RHS to pipe the LHS into.\n\n\na &lt;- c(\"Z\", NA, \"C\", \"G\", \"A\")\n\n\n\n\n\n\n%&gt;% (magrittr pipe)\n\n1a %&gt;% gsub(pattern = 'A',\n           replacement = '-', \n2           x = .)\n\n\n1\n\ngsub looks for a regular expression pattern (more on this in Week 7) within the specified character vector x, and substitutes it with the specified replacement value.\n\n2\n\nBy default, both pipes will pass the LHS to the first argument of the function on the RHS. If you need to pass the LHS to a different argument, i.e.¬†the second, or third, etc., you need to explicitly tell the pipe which argument to pass it to. The placeholder for %&gt;% is . (a period)\n\n\n\n\n\n\nEach of these examples returns:\n\n\n[1] \"Z\" NA  \"C\" \"G\" \"-\"\n\n\n\n|&gt; (native R pipe)\n\n3a |&gt; gsub('A',\n          '-',\n          x = _)\n4a |&gt; gsub(pattern = 'A',\n          replacement = '-')\n5a |&gt; (\\(placeholder)\n      gsub('A',\n           '-',\n           x = placeholder))()\n\n\n3\n\n_ is the placeholder for |&gt;\n\n4\n\nLeaving the ‚Äúpiped‚Äù argument as the only unnamed argument also works\n\n5\n\nUsing an anonymous function call allows you to be explicit while specifying your own placeholder\n\n\n\n\n\n\n\n\nYou can read more about the differences between |&gt; and %&gt;% here and anonymous functions here. Code above comes from responses to this stackoverflow post."
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#pipes-2",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#pipes-2",
    "title": "",
    "section": "Pipes",
    "text": "Pipes\nSome good syntax practices:\n\nYou should always put a space before |&gt; and it should usually be the last thing on a line.\n\nNew functions should be on a new line, indented 2 spaces (RStudio will automatically do this for you if you hit return after a pipe)\nNamed arguments within a function should also get their own line\n\n\n# code goals\nflights |&gt;  \n  group_by(tailnum) |&gt; \n  summarize(\n    delay = mean(arr_delay, na.rm = TRUE),\n    n = n()\n  )\n\n# code fouls\nflights |&gt; group_by(tailnum) |&gt; \n  summarize(delay = mean(arr_delay, na.rm = TRUE), n = n())"
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#selecting-the-native-pipe",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#selecting-the-native-pipe",
    "title": "",
    "section": "Selecting the native pipe",
    "text": "Selecting the native pipe\nThe |&gt; is recommended over %&gt;% simply because it‚Äôs much simpler to use and it‚Äôs always available (%&gt;% relied on the magrittr package which was a dependency of tidyverse packages).\n\nYou‚Äôll need to specify to R that you want to enable its usage by going to Tools &gt; Global Options &gt; Code. Within the ‚ÄúEditing‚Äù Tab there is an option to ‚ÄúUse native pipe operator, |&gt;‚Äù. Check it! \n\n\n\n\n\n\n\n\n\n\n\n\n Keyboard Shortcut\n\n\nTo insert a pipe (with spaces) quickly: Ctrl+Shift+M (Windows & Linux OS) Shift+Command+M (Mac)"
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#other-formatting-options",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#other-formatting-options",
    "title": "",
    "section": "Other Formatting Options",
    "text": "Other Formatting Options\n\n\n\nThere are some other useful formatting options I‚Äôd suggest setting globally and others you can specify to your preferences.\n\nSuggested:\n\nHighlight Function Calls\nEnable preview of colors\n\nRainbow parentheses"
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#other-formatting-options-1",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#other-formatting-options-1",
    "title": "",
    "section": "Other Formatting Options",
    "text": "Other Formatting Options\n\n\n\nThere are some other useful formatting options I‚Äôd suggest setting globally and others you can specify to your preferences.\n\nSuggested:\n\nHighlight Function Calls\nEnable preview of colors\n\nRainbow parentheses"
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#other-formatting-options-2",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#other-formatting-options-2",
    "title": "",
    "section": "Other Formatting Options",
    "text": "Other Formatting Options\n\n\n\nThere are some other useful formatting options I‚Äôd suggest setting globally and others you can specify to your preferences.\n\nSuggested:\n\nHighlight Function Calls\nEnable preview of colors\nRainbow parentheses"
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#other-formatting-options-3",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#other-formatting-options-3",
    "title": "",
    "section": "Other Formatting Options",
    "text": "Other Formatting Options\n\n\n\nThere are some other useful formatting options I‚Äôd suggest setting globally and others you can specify to your preferences.\n\nSuggested:\n\nHighlight Function Calls\nEnable preview of colors\nRainbow parentheses"
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#other-formatting-options-4",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#other-formatting-options-4",
    "title": "",
    "section": "Other Formatting Options",
    "text": "Other Formatting Options\n\n\n\nThere are some other useful formatting options I‚Äôd suggest setting globally and others you can specify to your preferences.\n\nUp to you:\n\nCode highlight style"
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#other-formatting-options-5",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#other-formatting-options-5",
    "title": "",
    "section": "Other Formatting Options",
    "text": "Other Formatting Options\n\n\n\nThere are some other useful formatting options I‚Äôd suggest setting globally and others you can specify to your preferences.\n\nUp to you:\n\nPane layout"
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#other-formatting-options-6",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#other-formatting-options-6",
    "title": "",
    "section": "Other Formatting Options",
    "text": "Other Formatting Options\n\n\n\nThere are some other useful formatting options I‚Äôd suggest setting globally and others you can specify to your preferences.\n\nUp to you:\n\nMarkdown options\n\nOutput preview\nInline output"
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#styling-existing-code",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#styling-existing-code",
    "title": "",
    "section": "Styling existing code",
    "text": "Styling existing code\nImagine you‚Äôve inherited a bunch of code from someone else and NOTHING is styled in the tidyverse way you‚Äôve become accustomed. Or, you‚Äôve dabbled in R before and you have some old code that is all over the place, with respect to styling.\n\nThanks to Lorenz Walthert there‚Äôs a package for that! Using the styler package you can automatically apply the tidyverse style guide standards to various filetypes (.R, .qmd, .Rmd, etc.) or even entire projects.\n\n\nHave a style or variation of the tidyverse style that you prefer? You can specify that in the package as well. Use the keyboard shortcut Cmd/Ctl + Shift + P and search for ‚Äústyler‚Äù to see all the options available."
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#r-scripts",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#r-scripts",
    "title": "",
    "section": ".R scripts",
    "text": ".R scripts\nWe‚Äôve been working with Quarto documents but you‚Äôll sometimes simply want to use an R script, which is basically an entire file that is just a code chunk.\n\n\nWhy would you prefer an .R file over a .qmd file?When might you use a .qmd file?\n\n\n\nYou just need to run code, without the need for accompanying text output and plots in the same document. Examples include:\n\nReading in and cleaning/manipulating your data before analysis\nWriting functions you‚Äôll use throughout your project\nGetting descriptive statistics/making descriptive plots of data\nRunning models and generating tables/plots of their results\n\n\n\n\n\nHomework assignments (like for this class) that require you to show code, describe your process for arriving at your solution, and include any results (i.e.¬†tables, statistics, visualizations)\nAcademic articles\nPresentations for class, conferences, talks, etc.\nTheses/dissertations\nInteractive visualizations (i.e.¬†widgets)\nBuilding your own website"
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#file-naming",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#file-naming",
    "title": "",
    "section": "File naming",
    "text": "File naming\nFile names should:\n\n\nbe machine readable: avoid spaces, symbols, and special characters. Don‚Äôt rely on case sensitivity to distinguish files.\nbe human readable: use file names to describe what‚Äôs in the file.\nplay well with default ordering: start file names with numbers so that alphabetical sorting puts them in the order they get used."
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#organization-and-portability",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#organization-and-portability",
    "title": "",
    "section": "Organization and Portability",
    "text": "Organization and Portability\nOrganizing research projects is something you either do accidentally ‚Äî and badly ‚Äî or purposefully with some upfront labor.\n\nUniform organization makes switching between or revisiting projects easier.\n\n\n\nGood Example directoryBad Example directory\n\n\n\n\nproject/\n   readme.md\n   data/\n     derived/\n       data_processed.RData\n     raw/\n       data_core.csv\n       data_supplementary.csv\n   docs/\n     paper_asa.qmd\n     paper_journal.qmd\n   syntax/\n     01-functions.R\n     02-cleaning.R\n     03_merging.R\n     04-exploratory.R\n     05-models.R\n     06-visualizations.R\n   visuals/ \n     descriptive.png\n     heatmap.png\n     predicted_probabilities.png\n\n\n\nThere is a clear hierarchy\n\nWritten content is in docs\nCode is in syntax\nData is in data\nVisualizations are in visuals\nThe readme.md describes the project\n\nNaming is uniform\n\nAll lower case\nWords separated by underscores\n\nNames are self-descriptive\nNumbering scripts makes it clear in which order they should be run.\n\n\n\n\n\n\n\nalternative model.R\ncode for exploratory analysis.r\nfinalreport.qmd\nFinalReport.qmd\nfig 1.png\nFigure_02.png\nmodel_first_try.R\nrun-first.r\ntemp.txt\n\n\nOrdering of the files is unclear\nInconsistent naming is confusing (which final report is THE final report?)\nNon-descriptive naming means more work for you in trying to decipher its contents"
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#working-directory",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#working-directory",
    "title": "",
    "section": "Working directory",
    "text": "Working directory\nYour working directory is where R will look for any files that you ask it to load and where it‚Äôll put anything you ask it to save. It is literally just a folder somewhere on your computer or the remote server/cloud you‚Äôre working within.\n\nYou can ask R what your current working directory is by running getwd() (get working directory).\n\n\n\ngetwd()\n\n[1] \"/Users/victoriasass/Desktop/GitHub/CSSS508/Lectures/Lecture3\"\n\n\nYou can see above that this lecture was created in a lecture-specific folder within a lectures folder, in a directory for this class, which is in a folder called GitHub on the Desktop of my laptop.\n\n\nWhile you can technically set your working directory using setwd() (set working directory) and giving R a filepath, in the name of reproducible research DO NOT DO THIS! I strongly advise an alternative: RStudio Projects."
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#projects",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#projects",
    "title": "",
    "section": "Projects",
    "text": "Projects\nA ‚Äúproject‚Äù is RStudio‚Äôs built-in organizational support system which keeps all the files associated with a given project (i.e.¬†data, R scripts, figures, results) together in one directory.\n\nCreating a new project quite basically creates a new folder in a place that you specify. But it also does a few of other extremely useful things:\n\nCreates a .Rproj file which tracks your command history and all the files in your project folder.\nContains all the files needed to reproduce your work\n\ni.e.¬†you can send a project folder to someone and they will be able to run it on their local machine\n\nFacilitates version control with built-in git/GitHub connection (more on this later in the course)"
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#creating-an-rstudio-project",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#creating-an-rstudio-project",
    "title": "",
    "section": "Creating an RStudio Project",
    "text": "Creating an RStudio Project\n\n\n\n\n\n\n\n\nYou can create a project by clicking\n\nFile &gt; New Project‚Ä¶\n‚ÄÉ‚ÄÉ  in the upper-left corner of RStudio\nthe dropdown menu in the upper-right corner of RStudio and selecting New Project‚Ä¶"
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#workflow-versus-product",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#workflow-versus-product",
    "title": "",
    "section": "Workflow versus Product",
    "text": "Workflow versus Product\nTo summarize Jenny Bryan, one should separate workflow (i.e.¬†your personal tastes and habits) from product (i.e.¬†the logic and output that is the essence of your project).\n\n\n\n\nWorkflow\n\nThe software you use to write your code (e.g.¬†R/RStudio)\nThe location you store a project\nThe specific computer you use\nThe code you ran earlier or typed into your console\n\n\nProduct\n\nThe raw data\nThe code that operates on your raw data\nThe packages you use\nThe output files or documents\n\n\n\n\nEach data analysis (or course using R) should be organized as a project.\n\nProjects should NOT modify anything outside of the project nor need to be modified by someone else (or future you) to run.\nProjects should be independent of your workflow."
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#portability",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#portability",
    "title": "",
    "section": "Portability",
    "text": "Portability\nFor research to be reproducible, it must also be portable. Portable software operates independently of workflow.\n\nDo Not:Do:\n\n\n\nUse setwd().\nUse absolute paths except for fixed, immovable sources (secure data).\n\nread_csv(\"C:/my_project/data/my_data.csv\")\n\nUse install.packages() in R script or .qmd files.\nUse rm(list=ls()) anywhere but your console.\n\n\n\n\n\n\nUse RStudio projects (or the here package) to set directories.\nUse relative paths to load and save files:\n\nread_csv(\"./data/my_data.csv\")\n\nLoad all required packages using library().\nClear your workspace when closing RStudio.\n\nSet Tools &gt; Global Options‚Ä¶ &gt; Save workspace‚Ä¶ to Never"
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#psa-setwd-and-rmlistls",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#psa-setwd-and-rmlistls",
    "title": "",
    "section": "PSA: setwd() and rm(list=ls())",
    "text": "PSA: setwd() and rm(list=ls())\n\n\n\n\n\n setwd()\n\n\nSetting your working directory using setwd() makes it impossible for your project to be replicated by anyone but you, and only on the exact same computer on which it was created.\n\n\n\n\n\n\n\n\n\n rm(list=ls())\n\n\nMake sure not to expect rm(list=ls()) to give you a fresh R session. It may feel that way when all the objects in your global environment disappear but there are a host of dependencies (i.e.¬†loaded packages, options set to non-defaults, the working directory) that have not changed. Your script will still be vulnerable to those settings unless you start a fresh R session."
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#file-paths",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#file-paths",
    "title": "",
    "section": "File paths",
    "text": "File paths\nA file path specifies the location of a file in a computer‚Äôs file system structure. They can be used to locate files and web resources. Some important things to note:\n\nFor file systems, each level in the hierarchy is a directory\n\nFor URLs, each level in the hierarchy is a page.\n\nA path is a string of characters which specifies a unique location in a directory or page hierarchy.\nDifferent sections of the path are separated by a path separator, such as a forward slash (/).\n\nThese different sections represent the separate directories or pages in the hierarchy.\n\nIn Unix-based operating systems, such as Linux or macOS, the path separator is a forward slash (/).\n\nIn Windows, the path separator is a back slash (\\).\nURLs follow a standard format that always uses a forward slash (/) as the path separator regardless of the operating system."
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#absolute-versus-relative-paths",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#absolute-versus-relative-paths",
    "title": "",
    "section": "Absolute Versus Relative Paths",
    "text": "Absolute Versus Relative Paths\n\nAbsoluteRelative\n\n\nSpecifies the location of a file from the root directory in the file system structure. They are also called ‚Äúfull file paths‚Äù or ‚Äúfull paths.‚Äù\n\n\"/Users/victoriasass/Desktop/GitHub/CSSS508/Lectures/Lecture3/CSSS508_Lecture3.qmd\"\n\n\n\nIn Linux, the ~ is commonly used to represent a user‚Äôs home directory, i.e.:\n\n\"~/Desktop/GitHub/CSSS508/Lectures/Lecture3/CSSS508_Lecture3.qmd\"\n\n\n\n\nSpecifies the location of a file in the same folder or on the same server. In other words, a relative file path specifies a location of a file that is relative to the current directory.\n\n\"./CSSS508_Lecture3.qmd\"` or `\"CSSS508_Lecture3.qmd\"\n\n\n\nRelative file paths use a dot notation at the start of the path, followed by a path separator and the location of the file.\n\nA single dot (.) indicates the current directory (as shown above)\nA double dot (..) indicates the parent directory.\n\n\n\nFor example, if I wanted to reference the syllabus (which is in the main project folder CSSS508) from my current folder Lecture3 I would write:\n\n\"../../syllabus.qmd\""
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#paths-and-projects",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#paths-and-projects",
    "title": "",
    "section": "Paths and Projects",
    "text": "Paths and Projects\nWhen you work in an RStudio Project your working directory is the project folder.\n\nIf you are working on a R script or qmd file in a subfolder of this project, the working directory of that file will be its subfolder (not the project folder.\n\n\nKeep this in mind when you‚Äôre writing code and testing it interactively! Your current working directory will be the project folder when running code interactively even if you‚Äôre writing code for a qmd that has a subfolder as the working directory.\n\n\n\nThis is only relevant when using file paths (obviously). The most common uses of file paths in an R script or qmd is to read in or write data, and to save plots and tables."
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#divide-and-conquer",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#divide-and-conquer",
    "title": "",
    "section": "Divide and Conquer",
    "text": "Divide and Conquer\nOften you do not want to include all code for a project in one .qmd file:\n\nThe code takes too long to knit.\nThe file is so long it is difficult to read.\n\n\nThere are two ways to deal with this:\n\nUse separate .R scripts or .qmd files which save results from complicated parts of a project, then load these results in the main .qmd file.\n\nThis is good for loading and cleaning large data.\nAlso for running slow models.\n\n\n\n\n\nUse source() to run external .R scripts when the .qmd renders\n\nThis can be used to run large files that aren‚Äôt impractically slow.\nAlso good for loading project-specific functions."
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#the-way-of-many-files",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#the-way-of-many-files",
    "title": "",
    "section": "The Way of Many Files",
    "text": "The Way of Many Files\nI find it beneficial to break projects into many files:\n\nScripts with specialized functions.\nScripts to load and clean each set of variables.\nScripts to run each set of models and make tables and plots.\nA main .qmd that runs some or all of these to reproduce the entire project.\n\n\nSplitting up a project carries benefits:\n\nOnce a portion of the project is done and in its own file, it is out of your way.\nIf you need to make changes, you don‚Äôt need to search through huge files.\nEntire sections of the project can be added or removed quickly (e.g.¬†converted to an appendix of an article)\nIt is the only way to build a proper pipeline for a project."
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#pipelines",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#pipelines",
    "title": "",
    "section": "Pipelines",
    "text": "Pipelines\nProfessional researchers and teams design projects as a pipeline.\n\nA pipeline is a series of consecutive processing elements (scripts and functions in R).\n\n\nEach stage of a pipeline‚Ä¶\n\nHas clearly defined inputs and outputs\nDoes not modify its inputs.\nProduces the exact same output every time it is re-run.\n\n\n\nThis means‚Ä¶\n\nWhen you modify one stage, you only need to rerun subsequent stages.\nDifferent people can work on each stage.\nProblems are isolated within stages.\nYou can depict your project as a directed graph of dependencies."
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#example-pipeline",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#example-pipeline",
    "title": "",
    "section": "Example Pipeline",
    "text": "Example Pipeline\nEvery stage (oval) has an unambiguous input and output. Everything that precedes a given stage is a dependency ‚Äî something required to run it.\n\n\n\nNote: targets is a great package for managing R research pipelines."
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#section",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#section",
    "title": "",
    "section": "",
    "text": "If you haven‚Äôt already, go to Tools &gt; Global Options and adjust your settings (i.e.¬†General, Code &gt; Editing, and Code &gt; Display) to those recommended in the lecture and any others that you‚Äôd like to change (i.e.¬†Appearance, Pane Layout, or R Markdown)\nRestyle the following pipelines following the guidelines discussed in lecture:\n\n\nflights|&gt;filter(dest==\"IAH\")|&gt;group_by(year,month,day)|&gt;summarize(n=n(),\ndelay=mean(arr_delay,na.rm=TRUE))|&gt;filter(n&gt;10)\n\nflights|&gt;filter(carrier==\"UA\",dest%in%c(\"IAH\",\"HOU\"),sched_dep_time&gt;\n0900,sched_arr_time&lt;2000)|&gt;group_by(flight)|&gt;summarize(delay=mean(\narr_delay,na.rm=TRUE),cancelled=sum(is.na(arr_delay)),n=n())|&gt;filter(n&gt;10)\n\n\nPress Option + Shift + K / Alt + Shift + K. What happens? How can you get to the same place using the menus?\nTweak each of the following R commands so that they run correctly:\n\n\nlibary(todyverse)\n\nggplot(dTA = mpg) + \n  geom_point(maping = aes(x = displ y = hwy)) +\n  geom_smooth(method = \"lm)\n\n\nWhat might be a good way to organize your homework assignments for this class?"
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#why-reproducibility",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#why-reproducibility",
    "title": "",
    "section": "Why Reproducibility?",
    "text": "Why Reproducibility?\nReproducibility is not replication.\n\nReplication is running a new study to show if and how results of a prior study hold.\nReproducibility is about rerunning the same study and getting the same results.\n\n\nReproducible studies can still be wrong‚Ä¶ and in fact reproducibility makes proving a study wrong much easier.\n\n\n\n\nReproducibility means:\n\nTransparent research practices.\nMinimal barriers to verifying your results.\n\n\n\nAny study that isn‚Äôt reproducible can only be trusted on faith."
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#reproducibility-definitions",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#reproducibility-definitions",
    "title": "",
    "section": "Reproducibility Definitions",
    "text": "Reproducibility Definitions\nReproducibility comes in three forms (Stodden 2014):\n\nEmpirical: Repeatability in data collection.\nStatistical: Verification with alternate methods of inference.\nComputational: Reproducibility in cleaning, organizing, and presenting data and results.\n\n\nR is particularly well suited to enabling computational reproducibility1.\n\n\nThey will not fix flawed research design, nor offer a remedy for improper application of statistical methods.\nThose are the difficult, non-automatable things you want skills in.\n\n Python is equally well suited. Julia is an option as well."
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#computational-reproducibility",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#computational-reproducibility",
    "title": "",
    "section": "Computational Reproducibility",
    "text": "Computational Reproducibility\nElements of computational reproducibility:\n\n\nShared data\n\nResearchers need your original data to verify and replicate your work.\n\n\n\n\n\nShared code\n\nYour code must be shared to make decisions transparent.\n\n\n\n\n\nDocumentation\n\nThe operation of code should be either self-documenting or have written descriptions to make its use clear.\n\n\n\n\n\nVersion Control1\n\nDocuments the research process.\nPrevents losing work and facilitates sharing.\n\n\n\nWe‚Äôll come back to this on the last week of class."
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#levels-of-reproducibility",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#levels-of-reproducibility",
    "title": "",
    "section": "Levels of Reproducibility",
    "text": "Levels of Reproducibility\nFor academic papers, degrees of reproducibility vary:\n\n‚ÄúRead the article‚Äù\nShared data with documentation\nShared data and all code\nInteractive document1\nResearch compendium2\nDocker compendium3: Self-contained ecosystem\n\nA .qmd is one such example.Usually contains all code, data, documentation, and outputs related to the project, allowing others to reproduce your analyses.A research compendium that includes a Dockerfile or container image so the full computational environment can be recreated, regardless of machine setup."
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#interactive-documents",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#interactive-documents",
    "title": "",
    "section": "Interactive Documents",
    "text": "Interactive Documents\nInteractive documents ‚Äî like Quarto docs ‚Äî combine code and text together into a self-contained document.\n\nLoad and process data\nRun models\nGenerate tables and plots in-line with text\nIn-text values automatically filled in\n\n\nInteractive documents allow a reader to examine your computational methods within the document itself; in effect, they are self-documenting.\n\n\nBy re-running the code, they reproduce your results on demand.\n\n\nCommon Platforms:\n\nR: Quarto\nPython: Jupyter Notebooks"
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#selecting-from-vectors-with",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#selecting-from-vectors-with",
    "title": "",
    "section": "Selecting from vectors with [",
    "text": "Selecting from vectors with [\n\n\nGiven a vector1 of values:\n\nx &lt;- c(a = \"one\", \n       b = NA, \n       c = \"two\", \n       d = \"three\", \n       e = \"four\", \n       f = NA, \n       g = NA, \n       h = \"five\")\n\n\nYou can select from the vector\n\n\n1x[c(3, 1, 5)]\n\n\n1\n\nWith positive integers\n\n\n\n\n\n\n     c      a      e \n \"two\"  \"one\" \"four\" \n\n\n\n\n\n2x[c(3, 1, 1, 5, 3)]\n\n\n2\n\nEven repeated values\n\n\n\n\n\n\n     c      a      a      e      c \n \"two\"  \"one\"  \"one\" \"four\"  \"two\" \n\n\n\n\n\n3x[c(-2, -6, -7)]\n\n\n3\n\nWith negative integers (removes these elements from the vector)\n\n\n\n\n\n\n      a       c       d       e       h \n  \"one\"   \"two\" \"three\"  \"four\"  \"five\" \n\n\n\n\n\n4x[!is.na(x)]\n\n\n4\n\nWith a logical vector\n\n\n\n\n\n\n      a       c       d       e       h \n  \"one\"   \"two\" \"three\"  \"four\"  \"five\" \n\n\n\n\n\n5x[c(\"c\", \"h\")]\n\n\n5\n\nOr with a named vector\n\n\n\n\n\n\n     c      h \n \"two\" \"five\" \n\n\n\n\nThis is an example of a named vector, where each element is given a name (LHS) associated with its value (RHS)."
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#selecting-from-dataframes-with",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#selecting-from-dataframes-with",
    "title": "",
    "section": "Selecting from dataframes with [",
    "text": "Selecting from dataframes with [\nYou can select rows and columns from dataframes with df[rows, cols].\n\n\n\ndf &lt;- tibble(\n  x = 1:3, \n  y = c(\"a\", \"e\", \"f\"), \n1  z = runif(3)\n)\n\ndf\n\n\n1\n\ndefaults: min = 0, max = 1\n\n\n\n\n\n\n# A tibble: 3 √ó 3\n      x y         z\n  &lt;int&gt; &lt;chr&gt; &lt;dbl&gt;\n1     1 a     0.594\n2     2 e     0.169\n3     3 f     0.183\n\n\n\n\n\n2df[1, 2]\n\n\n2\n\nSelect first row and second column\n\n\n\n\n\n\n# A tibble: 1 √ó 1\n  y    \n  &lt;chr&gt;\n1 a    \n\n\n\n\n\n3df[, c(\"x\" , \"y\")]\n\n\n3\n\nSelect all rows and columns x and y\n\n\n\n\n\n\n# A tibble: 3 √ó 2\n      x y    \n  &lt;int&gt; &lt;chr&gt;\n1     1 a    \n2     2 e    \n3     3 f    \n\n\n\n\n\n4df[df$x &gt; 1, ]\n\n\n4\n\nSelect rows based on a logical condition (more on this in Week 4), i.e.¬†where rows of x are greater than 1 and all columns\n\n\n\n\n\n\n# A tibble: 2 √ó 3\n      x y         z\n  &lt;int&gt; &lt;chr&gt; &lt;dbl&gt;\n1     2 e     0.169\n2     3 f     0.183"
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#data.frame-vs.-tibble",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#data.frame-vs.-tibble",
    "title": "",
    "section": "data.frame() vs.¬†tibble()",
    "text": "data.frame() vs.¬†tibble()\nTibbles are the tidyverse version of a base R dataframe. Usually you can use them interchangably without issue but they have slightly different behavior that‚Äôs important to know about when indexing in this way.\n\n\n\nIf df is a data.frame, then df[, cols] will return a vector if col selects a single column and a data frame if it selects more than one column.\n\ndf1 &lt;- data.frame(x = 1:3)\ndf1[, \"x\"]\n\n\n\n[1] 1 2 3\n\n\n\nIf df is a tibble, then [ will always return a tibble.\n\ndf2 &lt;- tibble(x = 1:3)\ndf2[, \"x\"]\n\n\n\n# A tibble: 3 √ó 1\n      x\n  &lt;int&gt;\n1     1\n2     2\n3     3\n\n\n\n\n\n\n\nOne way to avoid this ambiguity with data.frames is to explicitly specify drop = FALSE:\n\ndf1[, \"x\" , drop = FALSE]\n\n\n\n  x\n1 1\n2 2\n3 3"
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#selecting-from-dataframes-with-and",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#selecting-from-dataframes-with-and",
    "title": "",
    "section": "Selecting from dataframes with [[ and $",
    "text": "Selecting from dataframes with [[ and $\n[, which selects many elements, is paired with [[ and $, which extract a single element.\n\n\n\ntb &lt;- tibble(\n  x = 1:4,\n  y = c(10, 4, 1, 21)\n)\n\ntb\n\n\n\n# A tibble: 4 √ó 2\n      x     y\n  &lt;int&gt; &lt;dbl&gt;\n1     1    10\n2     2     4\n3     3     1\n4     4    21\n\n\n\n\n[[ can access by position or by name:\n\n1tb[[1]]\n\n\n1\n\nBy position\n\n\n\n\n\n\n[1] 1 2 3 4\n\n\n\n\n\n2tb[[\"x\"]]\n\n\n2\n\nBy name\n\n\n\n\n\n\n[1] 1 2 3 4\n\n\n\n\n\n3tb$x\n\n\n3\n\n$ is specialized for access by name\n\n\n\n\n\n\n[1] 1 2 3 4\n\n\n\n\nThey can also be used to create new columns.\n\ntb$z &lt;- tb$x + tb$y\ntb\n\n\n\n# A tibble: 4 √ó 3\n      x     y     z\n  &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt;\n1     1    10    11\n2     2     4     6\n3     3     1     4\n4     4    21    25"
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3.html#getting-help",
    "href": "Lectures/Lecture3/CSSS508_Lecture3.html#getting-help",
    "title": "",
    "section": "Getting Help ",
    "text": "Getting Help \nOne of the most difficult things as a beginner in R (or any language tbh) is not always knowing what to ask to solve your issue. Being in this class is a great first step! Some other useful tools:\n\nGoogle\n\nAdding R to your query is basic but useful and often overlooked. Including the package name, if you‚Äôre using one, is another. Finally, what is it you want to do? For example ‚ÄúR dplyr create new variable based on value of another.‚Äù\nCopy and pasting error messages is also helpful!\n\nStackOverflow\n\nMany of your Google queries will take you here anyways so you might try going directly to the source! Filter by R and make sure to include a reprex so people can actually understand what your issue is.\n\nReprex\n\nShort for minimal reproducible example this is a version of your code that someone could copy and run on their own machine, making it possible for them to help you troubleshoot your problem.\nYou want to strip away everything not pertinent to the issue you‚Äôre having so that it‚Äôs simple and straightforward.\nYou can use the reprex package for assistance with this!1\n\nPutting in the work up front\n\nIt‚Äôs clich√©, but investing in your learning right now will pay off down the road.\nLearning how to do something, why R works in a certain way, and developing practices that keep you organized will make you more efficient and help prevent minor and major frustrations going forward.\n\n\ndput() is also a useful function for quickly creating a snippet of your data to share with others to illustrate your issue."
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#title-slide",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#title-slide",
    "title": "",
    "section": "",
    "text": "Manipulating and Summarizing Data\nCS&SS 508 ‚Ä¢ Lecture 4\n21 October 2025\nVictoria Sass"
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#death-to-spreadsheets",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#death-to-spreadsheets",
    "title": "",
    "section": "Death to Spreadsheets",
    "text": "Death to Spreadsheets\nTools like Excel or Google Sheets let you manipulate spreadsheets using functions.\n\nSpreadsheets are not reproducible: It‚Äôs hard to know how someone changed the raw data!\nIt‚Äôs hard to catch mistakes when you use spreadsheets1.\n\n\nToday, we‚Äôll use R to manipulate data more transparently and reproducibly.\n\nDon‚Äôt be the next sad Research Assistant who makes headlines with an Excel error! (Reinhart & Rogoff, 2010)"
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#how-is-data-stored-in-r",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#how-is-data-stored-in-r",
    "title": "",
    "section": "How is data stored in R?",
    "text": "How is data stored in R?\nUnder the hood, R stores different types of data in different ways.\n\n\ne.g., R knows that 4.0 is a number, and that \"Vic\" is not a number.\n\n\n\nSo what exactly are the common data types, and how do we know what R is doing?\n\n\n\n\n\n\nLogicals (logical)\nFactors (factor)\nDate/Date-time (Date, POSIXct, POSIXt)\nNumbers (integer, double)\nMissing Values (NA, NaN, Inf)\nCharacter Strings (character)\n\n\n\n\nc(FALSE, TRUE, TRUE)\nfactor(c(\"red\", \"blue\"))\nas_Date(c(\"2018-10-04\"))\nc(1, 10*3, 4, -3.14)\nc(NA, NA, NA, NaN, NaN, NA)\nc(\"red\", \"blue\", \"blue\")"
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#booleans",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#booleans",
    "title": "",
    "section": "Booleans",
    "text": "Booleans\nThe simplest data type is a Boolean, or binary, variable: TRUE or FALSE1.\n\nMore often than not our data don‚Äôt actually have a variable with this data type, but they are definitely created and evaluated in the data manipulation and summarizing process.\n\n\nLogical operators refer to base functions which allow us to test if a condition is present between two objects.\n\n\nFor example, we may test\n\nIs A equal to B?\nIs A greater than B?\nIs A within B?\n\n\n\nNaturally, these types of expressions produce a binary outcome of T or F which enables us to transform our data in a variety of ways!\n\nor NA"
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#logical-operators-in-r",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#logical-operators-in-r",
    "title": "",
    "section": "Logical Operators in R",
    "text": "Logical Operators in R\nComparing objects\n\n\n\n\n==:\n!=:\n&gt;, &gt;=, &lt;, &lt;=:\n%in%:\n\n\n\n\n\nis equal to1\nnot equal to\nless than, less than or equal to, etc.\nused when checking if equal to one of several values\n\n\n\n\nCombining comparisons\n\n\n\n\n\n&:\n|:\n!:\nxor():\n\n\n\n\n\nboth conditions need to hold (AND)\n\nat least one condition needs to hold (OR)\n\ninverts a logical condition (TRUE becomes FALSE, vice versa)\n\nexclusive OR (i.e.¬†x or y but NOT both)\n\n\n\n\n\nYou may also see && and || but they are what‚Äôs known as short-circuiting operators and are not to be used in dplyr functions (used for programming not data manipulation); they‚Äôll only ever return a single TRUE or FALSE.\nNote: there are TWO equal signs here!"
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#unexpected-behavior",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#unexpected-behavior",
    "title": "",
    "section": "Unexpected Behavior",
    "text": "Unexpected Behavior\nBe careful using == with numbers:\n\n\n1(x &lt;- c(1 / 49 * 49, sqrt(2) ^ 2))\n\n\n1\n\nWrapping an entire object assignment in parentheses simultaneously defines the object and shows you what it represents.\n\n\n\n\n[1] 1 2\n\n\n\n2x == c(1, 2)\n3print(x, digits = 16)\n\n\n2\n\nComputers store numbers with a fixed number of decimal places so there‚Äôs no way to precisely represent decimals.\n\n3\n\ndplyr::near() is a useful alternative which ignores small differences.\n\n\n\n\n[1] FALSE FALSE\n[1] 0.9999999999999999 2.0000000000000004\n\n\n\n\nSimilarly mysterious, missing values (NA) represent the unknown. Almost anything conditional involving NAs will also be unknown:\n\nNA &gt; 5\n10 == NA\n4NA == NA\n\n\n4\n\nThe logic here: if you have one unknown and a second unknown, you don‚Äôt actually know if they equal one another!\n\n\n\n\n[1] NA\n[1] NA\n[1] NA\n\n\n\n\nThis is the reason we use is.na() to check for missingness.\n\nis.na(c(NA, 5))\n\n[1]  TRUE FALSE"
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#examples-of-logical-operators",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#examples-of-logical-operators",
    "title": "",
    "section": "Examples of Logical Operators",
    "text": "Examples of Logical Operators\nLet‚Äôs create two objects, A and B\n\nA &lt;- c(5, 10, 15)\nB &lt;- c(5, 15, 25)\n\n\nComparisons:\n\nA == B\nA &gt; B\n1A %in% B\n\n\n1\n\nWill return a vector the length of A that is TRUE whenever a value in A is anywhere in B.  Note: You CAN use %in% to search for NAs.\n\n\n\n\n[1]  TRUE FALSE FALSE\n[1] FALSE FALSE FALSE\n[1]  TRUE FALSE  TRUE\n\n\n\n\nCombinations:\n\nA &gt; 5 & A &lt;= B \n2B &lt; 10 | B &gt; 20\n!(A == 10)\n\n\n2\n\nBe sure not to cut corners (i.e.¬†writing  B &lt; 10 | &gt; 20). The code won‚Äôt technically error but it won‚Äôt evaluate the way you expect it to. Read more about the confusing logic behind this here. In essence the truncated second part of this conditional statement (&gt; 20) will evaluate to TRUE since any numeric that isn‚Äôt 0 for a logical operator is coerced to TRUE. Therefore this statement will actually always evaluate to TRUE and will return all elements of B instead of the ones that meet your specified condition.\n\n\n\n\n[1] FALSE  TRUE  TRUE\n[1]  TRUE FALSE  TRUE\n[1]  TRUE FALSE  TRUE"
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#logical-summaries",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#logical-summaries",
    "title": "",
    "section": "Logical Summaries",
    "text": "Logical Summaries\n\n\n\n\nany():\nall():\n\n\n\n\n\nthe equivalent of |; it‚Äôll return TRUE if there are any TRUE‚Äôs in x\nthe equivalent of &; it‚Äôll return TRUE only if all values of x are TRUE‚Äôs\n\n\n\n\n\n\n\n\nC &lt;- c(5, 10, NA, 10, 20, NA)\nany(C &lt;= 10) \n\n[1] TRUE\n\n\n\n\n\n1all(C &lt;= 20)\n\n\n1\n\nLike other summary functions, they‚Äôll return NA if there are any missing values present and it‚Äôs FALSE.\n\n\n\n\n[1] NA\n\n\n\n\n\n2all(C &lt;= 20, na.rm = TRUE)\n\n\n2\n\nUse na.rm = TRUE to remove NAs prior to evaluation.\n\n\n\n\n[1] TRUE\n\n\n\n\n\n3mean(C, na.rm = TRUE)\n\n\n3\n\nWhen you evaluate a logical vector numerically, TRUE = 1 and FALSE = 0. This makes sum() and mean() useful when summarizing logical functions (sum gives number of TRUEs and mean gives the proportion).\n\n\n\n\n[1] 11.25"
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#conditional-transformations",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#conditional-transformations",
    "title": "",
    "section": "Conditional transformations",
    "text": "Conditional transformations\n\nif_else()\n\nIf you want to use one value when a condition is TRUE and another value when it‚Äôs FALSE.\n\n\n1if_else(condition = \"A logical vector\",\n        true = \"Output when condition is true\",\n        false = \"Output when condition is false\")\n\n\n1\n\nAll of these arguments are required.\n\n\n\n\n\n\n\nx &lt;- c(-3:3, NA)\n2if_else(x &gt; 0, \"+ve\", \"-ve\", \"???\")\n\n\n2\n\nThere‚Äôs an optional fourth argument, missing, which will be used if the input is NA.\n\n\n\n\n[1] \"-ve\" \"-ve\" \"-ve\" \"-ve\" \"+ve\" \"+ve\" \"+ve\" \"???\"\n\n\n\n\n\ncase_when()\n\nA very useful extension of if_else() for multiple conditions1.\n\n\n\ncase_when(\n  x == 0   ~ \"0\",\n  x &lt; 0    ~ \"-ve\", \n  x &gt; 0    ~ \"+ve\",\n10  is.na(x) ~ \"???\"\n11)\n\n\n10\n\nUse .default if you want to create a ‚Äúdefault‚Äù/catch all value.\n\n11\n\nBoth functions require compatible types: i.e.¬†numerical and logical, strings and factors, dates and datetimes, NA and everything.\n\n\n\n\n[1] \"-ve\" \"-ve\" \"-ve\" \"0\"   \"+ve\" \"+ve\" \"+ve\" \"???\"\n\n\n\nNote that if multiple conditions match in case_when(), only the first will be used."
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#dplyr",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#dplyr",
    "title": "",
    "section": "dplyr",
    "text": "dplyr\nToday, we‚Äôll use tools from the dplyr package to manipulate data!\n\nLike ggplot2, dplyr is part of the Tidyverse, and included in the tidyverse package.\n\n\nlibrary(tidyverse)\n\n\nTo demonstrate data transformations we‚Äôre going to use the nycflights13 dataset, which you‚Äôll need to download and load into R\n\n1library(nycflights13)\n\n\n1\n\nRun install.packages(\"nycflights13\") in console first.\n\n\n\n\n\n\nnycflights13 includes five data frames1:, some of which contain missing data (NA):\n\n2data(flights)\n3data(airlines)\n4data(airports)\n5data(planes)\n6data(weather)\n\n\n2\n\nflights leaving JFK, LGA, or EWR in 2013\n\n3\n\nairline abbreviations\n\n4\n\nairport metadata\n\n5\n\nairplane metadata\n\n6\n\nhourly weather data for JFK, LGA, and EWR\n\n\n\n\n\nNote these are separate data frames, each needing to be loaded separately. When loading a package containing datasets, you can define those data (i.e.¬†explicitly add them to your working environment) by calling data() on their name."
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#dplyr-basics",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#dplyr-basics",
    "title": "",
    "section": "dplyr Basics",
    "text": "dplyr Basics\nAll dplyr functions have the following in common:\n\nThe first argument is always a data frame.\nThe subsequent arguments typically describe which columns to operate on, using the variable names (without quotes).\nThe output is always a new data frame.\n\n\nEach function operates either on rows, columns, groups, or entire tables.\n\n\nTo save the transformations you‚Äôve made to a data frame you‚Äôll need to save the output to a new object."
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#subset-rows-filter",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#subset-rows-filter",
    "title": "",
    "section": "Subset Rows: filter()",
    "text": "Subset Rows: filter()\nWe often get big datasets, and we only want some of the entries. We can subset rows using filter().\n\n\ndelay_2hr &lt;- flights |&gt; \n1  filter(dep_delay &gt; 120)\n2delay_2hr\n\n\n1\n\nHere‚Äôs where all your new knowledge about logical operators comes in handy! Make sure to use == not = to test the logical condition.\n\n2\n\nNow, delay_2hr is an object in our environment which contains rows corresponding to flights that experienced at least a 2 hour delay.\n\n\n\n\n# A tibble: 9,723 √ó 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     1     1      848           1835       853     1001           1950\n 2  2013     1     1      957            733       144     1056            853\n 3  2013     1     1     1114            900       134     1447           1222\n 4  2013     1     1     1540           1338       122     2020           1825\n 5  2013     1     1     1815           1325       290     2120           1542\n 6  2013     1     1     1842           1422       260     1958           1535\n 7  2013     1     1     1856           1645       131     2212           2005\n 8  2013     1     1     1934           1725       129     2126           1855\n 9  2013     1     1     1938           1703       155     2109           1823\n10  2013     1     1     1942           1705       157     2124           1830\n# ‚Ñπ 9,713 more rows\n# ‚Ñπ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;"
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#subset-columns-select",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#subset-columns-select",
    "title": "",
    "section": "Subset Columns: select()",
    "text": "Subset Columns: select()\nWhat if we want to keep every observation, but only use certain variables? Use select()!\n\nWe can select columns by name:\n\nflights |&gt; \n1  select(year, month, day)\n\n\n1\n\nYou can use a - before a variable name or a vector of variables to drop them from the data (i.e.¬† select(-c(year, month, day))).\n\n\n\n\n# A tibble: 336,776 √ó 3\n    year month   day\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;\n 1  2013     1     1\n 2  2013     1     1\n 3  2013     1     1\n 4  2013     1     1\n 5  2013     1     1\n 6  2013     1     1\n 7  2013     1     1\n 8  2013     1     1\n 9  2013     1     1\n10  2013     1     1\n# ‚Ñπ 336,766 more rows"
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#subset-columns-select-1",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#subset-columns-select-1",
    "title": "",
    "section": "Subset Columns: select()",
    "text": "Subset Columns: select()\nWhat if we want to keep every observation, but only use certain variables? Use select()!\nWe can select columns between variables (inclusive):\n\nflights |&gt; \n1  select(year:day)\n\n\n1\n\nAdd a ! before year and you‚Äôll drop this group of variables from the data.\n\n\n\n\n# A tibble: 336,776 √ó 3\n    year month   day\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;\n 1  2013     1     1\n 2  2013     1     1\n 3  2013     1     1\n 4  2013     1     1\n 5  2013     1     1\n 6  2013     1     1\n 7  2013     1     1\n 8  2013     1     1\n 9  2013     1     1\n10  2013     1     1\n# ‚Ñπ 336,766 more rows"
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#subset-columns-select-2",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#subset-columns-select-2",
    "title": "",
    "section": "Subset Columns: select()",
    "text": "Subset Columns: select()\nWhat if we want to keep every observation, but only use certain variables? Use select()!\nWe can select columns based on a condition:\n\nflights |&gt; \n1  select(where(is.character))\n\n\n1\n\nThere are a number of helper functions you can use with select() including starts_with(), ends_with(), contains() and num_range(). Read more about these and more here.\n\n\n\n\n# A tibble: 336,776 √ó 4\n   carrier tailnum origin dest \n   &lt;chr&gt;   &lt;chr&gt;   &lt;chr&gt;  &lt;chr&gt;\n 1 UA      N14228  EWR    IAH  \n 2 UA      N24211  LGA    IAH  \n 3 AA      N619AA  JFK    MIA  \n 4 B6      N804JB  JFK    BQN  \n 5 DL      N668DN  LGA    ATL  \n 6 UA      N39463  EWR    ORD  \n 7 B6      N516JB  EWR    FLL  \n 8 EV      N829AS  LGA    IAD  \n 9 B6      N593JB  JFK    MCO  \n10 AA      N3ALAA  LGA    ORD  \n# ‚Ñπ 336,766 more rows"
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#finding-unique-rows-distinct",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#finding-unique-rows-distinct",
    "title": "",
    "section": "Finding Unique Rows: distinct()",
    "text": "Finding Unique Rows: distinct()\nYou may want to find the unique combinations of variables in a dataset. Use distinct()\n\n\nflights |&gt; \n1  distinct(origin, dest)\n\n\n1\n\nFind all unique origin and destination pairs.\n\n\n\n\n# A tibble: 224 √ó 2\n   origin dest \n   &lt;chr&gt;  &lt;chr&gt;\n 1 EWR    IAH  \n 2 LGA    IAH  \n 3 JFK    MIA  \n 4 JFK    BQN  \n 5 LGA    ATL  \n 6 EWR    ORD  \n 7 EWR    FLL  \n 8 LGA    IAD  \n 9 JFK    MCO  \n10 LGA    ORD  \n# ‚Ñπ 214 more rows"
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#distinct-drops-variables",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#distinct-drops-variables",
    "title": "",
    "section": "distinct() drops variables!",
    "text": "distinct() drops variables!\nBy default, distinct() drops unused variables. If you don‚Äôt want to drop them, add the argument .keep_all = TRUE:\n\n\nflights |&gt; \n1  distinct(origin, dest, .keep_all = TRUE)\n\n\n1\n\nIt‚Äôs not a coincidence that all of these distinct flights are on January 1: distinct() will find the first occurrence of a unique row in the dataset and discard the rest. Use count() if you‚Äôre looking for the number of occurrences.\n\n\n\n\n# A tibble: 224 √ó 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     1     1      517            515         2      830            819\n 2  2013     1     1      533            529         4      850            830\n 3  2013     1     1      542            540         2      923            850\n 4  2013     1     1      544            545        -1     1004           1022\n 5  2013     1     1      554            600        -6      812            837\n 6  2013     1     1      554            558        -4      740            728\n 7  2013     1     1      555            600        -5      913            854\n 8  2013     1     1      557            600        -3      709            723\n 9  2013     1     1      557            600        -3      838            846\n10  2013     1     1      558            600        -2      753            745\n# ‚Ñπ 214 more rows\n# ‚Ñπ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;"
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#count-unique-rows-count",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#count-unique-rows-count",
    "title": "",
    "section": "Count Unique Rows: count()",
    "text": "Count Unique Rows: count()\n\n\nflights |&gt;\n1  count(origin, dest, sort = TRUE)\n\n\n1\n\nsort = TRUE arranges them in descending order of number of occurrences.\n\n\n\n\n# A tibble: 224 √ó 3\n   origin dest      n\n   &lt;chr&gt;  &lt;chr&gt; &lt;int&gt;\n 1 JFK    LAX   11262\n 2 LGA    ATL   10263\n 3 LGA    ORD    8857\n 4 JFK    SFO    8204\n 5 LGA    CLT    6168\n 6 EWR    ORD    6100\n 7 JFK    BOS    5898\n 8 LGA    MIA    5781\n 9 JFK    MCO    5464\n10 EWR    BOS    5327\n# ‚Ñπ 214 more rows"
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#sorting-data-by-rows-arrange",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#sorting-data-by-rows-arrange",
    "title": "",
    "section": "Sorting Data by Rows: arrange()",
    "text": "Sorting Data by Rows: arrange()\nSometimes it‚Äôs useful to sort rows in your data, in ascending (low to high) or descending (high to low) order. We do that with arrange().\n\n\nflights |&gt; \n1  arrange(year, month, day, dep_time)\n\n\n1\n\nIf you provide more than one column name, each additional column will be used to break ties in the values of preceding columns.\n\n\n\n\n# A tibble: 336,776 √ó 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     1     1      517            515         2      830            819\n 2  2013     1     1      533            529         4      850            830\n 3  2013     1     1      542            540         2      923            850\n 4  2013     1     1      544            545        -1     1004           1022\n 5  2013     1     1      554            600        -6      812            837\n 6  2013     1     1      554            558        -4      740            728\n 7  2013     1     1      555            600        -5      913            854\n 8  2013     1     1      557            600        -3      709            723\n 9  2013     1     1      557            600        -3      838            846\n10  2013     1     1      558            600        -2      753            745\n# ‚Ñπ 336,766 more rows\n# ‚Ñπ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;"
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#sorting-data-by-rows-arrange-1",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#sorting-data-by-rows-arrange-1",
    "title": "",
    "section": "Sorting Data by Rows: arrange()",
    "text": "Sorting Data by Rows: arrange()\nTo sort in descending order, using desc() within arrange()\n\n\nflights |&gt; \n  arrange(desc(dep_delay))\n\n# A tibble: 336,776 √ó 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     1     9      641            900      1301     1242           1530\n 2  2013     6    15     1432           1935      1137     1607           2120\n 3  2013     1    10     1121           1635      1126     1239           1810\n 4  2013     9    20     1139           1845      1014     1457           2210\n 5  2013     7    22      845           1600      1005     1044           1815\n 6  2013     4    10     1100           1900       960     1342           2211\n 7  2013     3    17     2321            810       911      135           1020\n 8  2013     6    27      959           1900       899     1236           2226\n 9  2013     7    22     2257            759       898      121           1026\n10  2013    12     5      756           1700       896     1058           2020\n# ‚Ñπ 336,766 more rows\n# ‚Ñπ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;"
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#rename-variables-rename",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#rename-variables-rename",
    "title": "",
    "section": "Rename Variables: rename()",
    "text": "Rename Variables: rename()\nYou may receive data with unintuitive variable names. Change them using rename().\n\n\nflights |&gt; \n1  rename(tail_num = tailnum)\n\n\n1\n\nrename(new_name = old_name) is the format. Reminder to use janitor::clean_names() if you want to automate this process for a lot of variables.\n\n\n\n\n# A tibble: 336,776 √ó 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     1     1      517            515         2      830            819\n 2  2013     1     1      533            529         4      850            830\n 3  2013     1     1      542            540         2      923            850\n 4  2013     1     1      544            545        -1     1004           1022\n 5  2013     1     1      554            600        -6      812            837\n 6  2013     1     1      554            558        -4      740            728\n 7  2013     1     1      555            600        -5      913            854\n 8  2013     1     1      557            600        -3      709            723\n 9  2013     1     1      557            600        -3      838            846\n10  2013     1     1      558            600        -2      753            745\n# ‚Ñπ 336,766 more rows\n# ‚Ñπ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tail_num &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\n\n\n\n\n\n Variable Syntax\n\n\nI recommend against using spaces in a name! It makes things really hard sometimes!!"
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#create-new-columns-mutate",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#create-new-columns-mutate",
    "title": "",
    "section": "Create New Columns: mutate()",
    "text": "Create New Columns: mutate()\nYou can add new columns to a data frame using mutate().\n\n\nflights |&gt; \n  mutate(\n    gain = dep_delay - arr_delay,\n    speed = distance / air_time * 60,\n1    .before = 1\n  )\n\n\n1\n\nBy default, mutate() adds new columns on the right hand side of your dataset, which makes it difficult to see if anything happened. You can use the .before argument to specify which numeric index (or variable name) to move the newly created variable to. .after is an alternative argument for this.\n\n\n\n\n# A tibble: 336,776 √ó 21\n    gain speed  year month   day dep_time sched_dep_time dep_delay arr_time\n   &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;\n 1    -9  370.  2013     1     1      517            515         2      830\n 2   -16  374.  2013     1     1      533            529         4      850\n 3   -31  408.  2013     1     1      542            540         2      923\n 4    17  517.  2013     1     1      544            545        -1     1004\n 5    19  394.  2013     1     1      554            600        -6      812\n 6   -16  288.  2013     1     1      554            558        -4      740\n 7   -24  404.  2013     1     1      555            600        -5      913\n 8    11  259.  2013     1     1      557            600        -3      709\n 9     5  405.  2013     1     1      557            600        -3      838\n10   -10  319.  2013     1     1      558            600        -2      753\n# ‚Ñπ 336,766 more rows\n# ‚Ñπ 12 more variables: sched_arr_time &lt;int&gt;, arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;,\n#   flight &lt;int&gt;, tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;,\n#   distance &lt;dbl&gt;, hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;"
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#specifying-variables-to-keep-mutate",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#specifying-variables-to-keep-mutate",
    "title": "",
    "section": "Specifying Variables to Keep: mutate()",
    "text": "Specifying Variables to Keep: mutate()\nYou can specify which columns to keep with the .keep argument:\n\nflights |&gt; \n  mutate(\n    gain = dep_delay - arr_delay,\n    hours = air_time / 60,\n    gain_per_hour = gain / hours,\n1    .keep = \"used\"\n  )\n\n\n1\n\n\"used\" retains only the variables used to create the new variables, which is useful for checking your work. Other options include: \"all\" (default, returns all columns), \"unused\" (columns not used to create new columns) and \"none\" (only grouping variables and columns created by mutate are retained).\n\n\n\n\n# A tibble: 336,776 √ó 6\n   dep_delay arr_delay air_time  gain hours gain_per_hour\n       &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;         &lt;dbl&gt;\n 1         2        11      227    -9 3.78          -2.38\n 2         4        20      227   -16 3.78          -4.23\n 3         2        33      160   -31 2.67         -11.6 \n 4        -1       -18      183    17 3.05           5.57\n 5        -6       -25      116    19 1.93           9.83\n 6        -4        12      150   -16 2.5           -6.4 \n 7        -5        19      158   -24 2.63          -9.11\n 8        -3       -14       53    11 0.883         12.5 \n 9        -3        -8      140     5 2.33           2.14\n10        -2         8      138   -10 2.3           -4.35\n# ‚Ñπ 336,766 more rows"
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#move-variables-around-relocate",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#move-variables-around-relocate",
    "title": "",
    "section": "Move Variables Around: relocate()",
    "text": "Move Variables Around: relocate()\nYou might want to collect related variables together or move important variables to the front. Use relocate()!\n\nflights |&gt; \n1  relocate(time_hour, air_time)\n\n\n1\n\nBy default relocate() moves variables to the front but you can also specify where to put them using the .before and .after arguments, just like in mutate().\n\n\n\n\n# A tibble: 336,776 √ó 19\n   time_hour           air_time  year month   day dep_time sched_dep_time\n   &lt;dttm&gt;                 &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;\n 1 2013-01-01 05:00:00      227  2013     1     1      517            515\n 2 2013-01-01 05:00:00      227  2013     1     1      533            529\n 3 2013-01-01 05:00:00      160  2013     1     1      542            540\n 4 2013-01-01 05:00:00      183  2013     1     1      544            545\n 5 2013-01-01 06:00:00      116  2013     1     1      554            600\n 6 2013-01-01 05:00:00      150  2013     1     1      554            558\n 7 2013-01-01 06:00:00      158  2013     1     1      555            600\n 8 2013-01-01 06:00:00       53  2013     1     1      557            600\n 9 2013-01-01 06:00:00      140  2013     1     1      557            600\n10 2013-01-01 06:00:00      138  2013     1     1      558            600\n# ‚Ñπ 336,766 more rows\n# ‚Ñπ 12 more variables: dep_delay &lt;dbl&gt;, arr_time &lt;int&gt;, sched_arr_time &lt;int&gt;,\n#   arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;, tailnum &lt;chr&gt;, origin &lt;chr&gt;,\n#   dest &lt;chr&gt;, distance &lt;dbl&gt;, hour &lt;dbl&gt;, minute &lt;dbl&gt;"
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#grouping-data-group_by",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#grouping-data-group_by",
    "title": "",
    "section": "Grouping Data: group_by()",
    "text": "Grouping Data: group_by()\nIf you want to analyze your data by specific groupings, use group_by():\n\nflights |&gt; \n1  group_by(month)\n\n\n1\n\ngroup_by() doesn‚Äôt change the data but you‚Äôll notice that the output indicates that it is ‚Äúgrouped by‚Äù month (Groups: month [12]). This means subsequent operations will now work ‚Äúby month‚Äù.\n\n\n\n\n# A tibble: 336,776 √ó 19\n# Groups:   month [12]\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     1     1      517            515         2      830            819\n 2  2013     1     1      533            529         4      850            830\n 3  2013     1     1      542            540         2      923            850\n 4  2013     1     1      544            545        -1     1004           1022\n 5  2013     1     1      554            600        -6      812            837\n 6  2013     1     1      554            558        -4      740            728\n 7  2013     1     1      555            600        -5      913            854\n 8  2013     1     1      557            600        -3      709            723\n 9  2013     1     1      557            600        -3      838            846\n10  2013     1     1      558            600        -2      753            745\n# ‚Ñπ 336,766 more rows\n# ‚Ñπ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;"
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#summarizing-data-summarize",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#summarizing-data-summarize",
    "title": "",
    "section": "Summarizing Data: summarize()",
    "text": "Summarizing Data: summarize()\nsummarize() calculates summaries of variables in your data:\n\nCount the number of rows\nCalculate the mean\nCalculate the sum\nFind the minimum or maximum value\n\n\nYou can use any function inside summarize() that aggregates multiple values into a single value (like sd(), mean(), or max())."
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#summarize-example",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#summarize-example",
    "title": "",
    "section": "summarize() Example",
    "text": "summarize() Example\nLet‚Äôs see what this looks like in our flights dataset:\n\n\nflights |&gt; \n  summarize(\n1    avg_delay = mean(dep_delay)\n  )\n\n\n1\n\nThe NA produced here is a result of calling mean on dep_delay. Any summarizing function will return NA if any of the values are NA. We can set na.rm = TRUE to change this behavior.\n\n\n\n\n# A tibble: 1 √ó 1\n  avg_delay\n      &lt;dbl&gt;\n1        NA"
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#summarize-example-1",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#summarize-example-1",
    "title": "",
    "section": "summarize() Example",
    "text": "summarize() Example\nLet‚Äôs see what this looks like in our flights dataset:\n\nflights |&gt; \n  summarize(\n    avg_delay = mean(dep_delay, na.rm = TRUE) \n  )\n\n# A tibble: 1 √ó 1\n  avg_delay\n      &lt;dbl&gt;\n1      12.6"
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#summarizing-data-by-groups",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#summarizing-data-by-groups",
    "title": "",
    "section": "Summarizing Data by Groups",
    "text": "Summarizing Data by Groups\nWhat if we want to summarize data by our groups? Use group_by() and summarize()\n\n\nflights |&gt; \n  group_by(month) |&gt; \n  summarize(\n    delay = mean(dep_delay, na.rm = TRUE)\n  )\n\n# A tibble: 12 √ó 2\n   month delay\n   &lt;int&gt; &lt;dbl&gt;\n 1     1 10.0 \n 2     2 10.8 \n 3     3 13.2 \n 4     4 13.9 \n 5     5 13.0 \n 6     6 20.8 \n 7     7 21.7 \n 8     8 12.6 \n 9     9  6.72\n10    10  6.24\n11    11  5.44\n12    12 16.6 \n\n\n\n\nBecause we did group_by() with month, then used summarize(), we get one row per value of month!"
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#summarizing-data-by-groups-1",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#summarizing-data-by-groups-1",
    "title": "",
    "section": "Summarizing Data by Groups",
    "text": "Summarizing Data by Groups\nYou can create any number of summaries in a single call to summarize().\n\nflights |&gt; \n  group_by(month) |&gt; \n  summarize(\n    delay = mean(dep_delay, na.rm = TRUE), \n1    n = n()\n  )\n\n\n1\n\nn() returns the number of rows in each group.\n\n\n\n\n# A tibble: 12 √ó 3\n   month delay     n\n   &lt;int&gt; &lt;dbl&gt; &lt;int&gt;\n 1     1 10.0  27004\n 2     2 10.8  24951\n 3     3 13.2  28834\n 4     4 13.9  28330\n 5     5 13.0  28796\n 6     6 20.8  28243\n 7     7 21.7  29425\n 8     8 12.6  29327\n 9     9  6.72 27574\n10    10  6.24 28889\n11    11  5.44 27268\n12    12 16.6  28135"
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#grouping-by-multiple-variables",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#grouping-by-multiple-variables",
    "title": "",
    "section": "Grouping by Multiple Variables ",
    "text": "Grouping by Multiple Variables \n\ndaily &lt;- flights |&gt; \n  group_by(year, month, day)  \ndaily\n\n# A tibble: 336,776 √ó 19\n# Groups:   year, month, day [365]\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     1     1      517            515         2      830            819\n 2  2013     1     1      533            529         4      850            830\n 3  2013     1     1      542            540         2      923            850\n 4  2013     1     1      544            545        -1     1004           1022\n 5  2013     1     1      554            600        -6      812            837\n 6  2013     1     1      554            558        -4      740            728\n 7  2013     1     1      555            600        -5      913            854\n 8  2013     1     1      557            600        -3      709            723\n 9  2013     1     1      557            600        -3      838            846\n10  2013     1     1      558            600        -2      753            745\n# ‚Ñπ 336,766 more rows\n# ‚Ñπ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\n\n\n\n\n Summary & Grouping Behavior\n\n\nWhen you summarize a tibble grouped by more than one variable, each summary peels off the last group. You can change the default behavior by setting the .groups argument to a different value, e.g., \"drop\" to drop all grouping or \"keep\" to preserve the same groups. The default is \"drop_last\" if all groups have 1 row and keep otherwise (it‚Äôs recommended to use reframe() if this is the case, which is a more general version of summarize() that allows for an arbitrary number of rows per group and drops all grouping variables after execution)."
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#remove-grouping-ungroup",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#remove-grouping-ungroup",
    "title": "",
    "section": "Remove Grouping: ungroup()",
    "text": "Remove Grouping: ungroup()\n\ndaily |&gt; \n  ungroup() \n\n# A tibble: 336,776 √ó 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     1     1      517            515         2      830            819\n 2  2013     1     1      533            529         4      850            830\n 3  2013     1     1      542            540         2      923            850\n 4  2013     1     1      544            545        -1     1004           1022\n 5  2013     1     1      554            600        -6      812            837\n 6  2013     1     1      554            558        -4      740            728\n 7  2013     1     1      555            600        -5      913            854\n 8  2013     1     1      557            600        -3      709            723\n 9  2013     1     1      557            600        -3      838            846\n10  2013     1     1      558            600        -2      753            745\n# ‚Ñπ 336,766 more rows\n# ‚Ñπ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;"
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#new-alternative-for-grouping-.by",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#new-alternative-for-grouping-.by",
    "title": "",
    "section": "New Alternative for Grouping: .by",
    "text": "New Alternative for Grouping: .by\n\nflights |&gt; \n  summarize(\n    delay = mean(dep_delay, na.rm = TRUE), \n    n = n(),\n4    .by = month\n  )\n\n\n4\n\n.by works with all verbs and has the advantage that you don‚Äôt need to use the .groups argument to suppress the grouping message or ungroup() when you‚Äôre done.\n\n\n\n\n# A tibble: 12 √ó 3\n   month delay     n\n   &lt;int&gt; &lt;dbl&gt; &lt;int&gt;\n 1     1 10.0  27004\n 2    10  6.24 28889\n 3    11  5.44 27268\n 4    12 16.6  28135\n 5     2 10.8  24951\n 6     3 13.2  28834\n 7     4 13.9  28330\n 8     5 13.0  28796\n 9     6 20.8  28243\n10     7 21.7  29425\n11     8 12.6  29327\n12     9  6.72 27574"
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#select-specific-rows-per-group-slice_",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#select-specific-rows-per-group-slice_",
    "title": "",
    "section": "Select Specific Rows Per Group: slice_*",
    "text": "Select Specific Rows Per Group: slice_*\nThere are five handy functions that allow you extract specific rows within each group:\n\ndf |&gt; slice_head(n = 1) takes the first row from each group.\ndf |&gt; slice_tail(n = 1) takes the last row in each group.\ndf |&gt; slice_min(x, n = 1) takes the row with the smallest value of column x.\ndf |&gt; slice_max(x, n = 1) takes the row with the largest value of column x.\ndf |&gt; slice_sample(n = 1) takes one random row.\n\n\nLet‚Äôs find the flights that are most delayed upon arrival at each destination."
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#select-specific-rows-per-group-slice_-1",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#select-specific-rows-per-group-slice_-1",
    "title": "",
    "section": "Select Specific Rows Per Group: slice_*",
    "text": "Select Specific Rows Per Group: slice_*\n\nflights |&gt; \n  group_by(dest) |&gt; \n1  slice_max(arr_delay, n = 1) |&gt;\n  relocate(dest, arr_delay) \n\n\n1\n\nYou can vary n to select more than one row, or instead of n, you can use prop to select a proportion (between 0 and 1) of the rows in each group.\n\n\n\n\n# A tibble: 108 √ó 19\n# Groups:   dest [105]\n   dest  arr_delay  year month   day dep_time sched_dep_time dep_delay arr_time\n   &lt;chr&gt;     &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;\n 1 ABQ         153  2013     7    22     2145           2007        98      132\n 2 ACK         221  2013     7    23     1139            800       219     1250\n 3 ALB         328  2013     1    25      123           2000       323      229\n 4 ANC          39  2013     8    17     1740           1625        75     2042\n 5 ATL         895  2013     7    22     2257            759       898      121\n 6 AUS         349  2013     7    10     2056           1505       351     2347\n 7 AVL         228  2013     8    13     1156            832       204     1417\n 8 BDL         266  2013     2    21     1728           1316       252     1839\n 9 BGR         238  2013    12     1     1504           1056       248     1628\n10 BHM         291  2013     4    10       25           1900       325      136\n# ‚Ñπ 98 more rows\n# ‚Ñπ 10 more variables: sched_arr_time &lt;int&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;, hour &lt;dbl&gt;,\n#   minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\n\n\nThere are 105 groups but 108 rows! Why? slice_min() and slice_max() keep tied values so n = 1 means ‚Äúgive us all rows with the highest value.‚Äù If you want exactly one row per group you can set with_ties = FALSE."
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#why-merge-data",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#why-merge-data",
    "title": "",
    "section": "Why Merge Data?",
    "text": "Why Merge Data?\nIn practice, we often collect data from different sources. To analyze the data, we usually must first combine (merge) them.\n\nFor example, imagine you would like to study county-level patterns with respect to age and grocery spending. However, you can only find,\n\nCounty level age data from the US Census, and\nCounty level grocery spending data from the US Department of Agriculture\n\n\n\nMerge the data!!\n\n\nTo do this we‚Äôll be using the various join functions from the dplyr package."
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#joining-in-concept",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#joining-in-concept",
    "title": "",
    "section": "Joining in Concept",
    "text": "Joining in Concept\nWe need to think about the following when we want to merge data frames A and B:\n\n\nWhich rows are we keeping from each data frame?\n\n\n\n\nWhich columns are we keeping from each data frame?\n\n\n\n\n\nWhich variables determine whether rows match?"
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#keys",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#keys",
    "title": "",
    "section": "Keys",
    "text": "Keys\nKeys are the way that two datasets are connected to one another. The two types of keys are:\n\nPrimary: a variable or set of variables that uniquely identifies each observation.\n\nWhen more than one variable makes up the primary key it‚Äôs called a compound key\n\nForeign: a variable (or set of variables) that corresponds to a primary key in another table."
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#primary-keys",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#primary-keys",
    "title": "",
    "section": "Primary Keys",
    "text": "Primary Keys\nLet‚Äôs look at our data to gain a better sense of what this all means.\n\nairlinesairportsplanesweatherflights\n\n\nairlines records two pieces of data about each airline: its carrier code and its full name. You can identify an airline with its two letter carrier code, making carrier the primary key.\n\nairlines \n\n# A tibble: 16 √ó 2\n   carrier name                       \n   &lt;chr&gt;   &lt;chr&gt;                      \n 1 9E      Endeavor Air Inc.          \n 2 AA      American Airlines Inc.     \n 3 AS      Alaska Airlines Inc.       \n 4 B6      JetBlue Airways            \n 5 DL      Delta Air Lines Inc.       \n 6 EV      ExpressJet Airlines Inc.   \n 7 F9      Frontier Airlines Inc.     \n 8 FL      AirTran Airways Corporation\n 9 HA      Hawaiian Airlines Inc.     \n10 MQ      Envoy Air                  \n11 OO      SkyWest Airlines Inc.      \n12 UA      United Air Lines Inc.      \n13 US      US Airways Inc.            \n14 VX      Virgin America             \n15 WN      Southwest Airlines Co.     \n16 YV      Mesa Airlines Inc.         \n\n\n\n\nairports records data about each airport. You can identify each airport by its three letter airport code, making faa the primary key.\n\nairports\n\n# A tibble: 1,458 √ó 8\n   faa   name                             lat    lon   alt    tz dst   tzone    \n   &lt;chr&gt; &lt;chr&gt;                          &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;    \n 1 04G   Lansdowne Airport               41.1  -80.6  1044    -5 A     America/‚Ä¶\n 2 06A   Moton Field Municipal Airport   32.5  -85.7   264    -6 A     America/‚Ä¶\n 3 06C   Schaumburg Regional             42.0  -88.1   801    -6 A     America/‚Ä¶\n 4 06N   Randall Airport                 41.4  -74.4   523    -5 A     America/‚Ä¶\n 5 09J   Jekyll Island Airport           31.1  -81.4    11    -5 A     America/‚Ä¶\n 6 0A9   Elizabethton Municipal Airport  36.4  -82.2  1593    -5 A     America/‚Ä¶\n 7 0G6   Williams County Airport         41.5  -84.5   730    -5 A     America/‚Ä¶\n 8 0G7   Finger Lakes Regional Airport   42.9  -76.8   492    -5 A     America/‚Ä¶\n 9 0P2   Shoestring Aviation Airfield    39.8  -76.6  1000    -5 U     America/‚Ä¶\n10 0S9   Jefferson County Intl           48.1 -123.    108    -8 A     America/‚Ä¶\n# ‚Ñπ 1,448 more rows\n\n\n\n\nplanes records data about each plane. You can identify a plane by its tail number, making tailnum the primary key.\n\nplanes\n\n# A tibble: 3,322 √ó 9\n   tailnum  year type              manufacturer model engines seats speed engine\n   &lt;chr&gt;   &lt;int&gt; &lt;chr&gt;             &lt;chr&gt;        &lt;chr&gt;   &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; \n 1 N10156   2004 Fixed wing multi‚Ä¶ EMBRAER      EMB-‚Ä¶       2    55    NA Turbo‚Ä¶\n 2 N102UW   1998 Fixed wing multi‚Ä¶ AIRBUS INDU‚Ä¶ A320‚Ä¶       2   182    NA Turbo‚Ä¶\n 3 N103US   1999 Fixed wing multi‚Ä¶ AIRBUS INDU‚Ä¶ A320‚Ä¶       2   182    NA Turbo‚Ä¶\n 4 N104UW   1999 Fixed wing multi‚Ä¶ AIRBUS INDU‚Ä¶ A320‚Ä¶       2   182    NA Turbo‚Ä¶\n 5 N10575   2002 Fixed wing multi‚Ä¶ EMBRAER      EMB-‚Ä¶       2    55    NA Turbo‚Ä¶\n 6 N105UW   1999 Fixed wing multi‚Ä¶ AIRBUS INDU‚Ä¶ A320‚Ä¶       2   182    NA Turbo‚Ä¶\n 7 N107US   1999 Fixed wing multi‚Ä¶ AIRBUS INDU‚Ä¶ A320‚Ä¶       2   182    NA Turbo‚Ä¶\n 8 N108UW   1999 Fixed wing multi‚Ä¶ AIRBUS INDU‚Ä¶ A320‚Ä¶       2   182    NA Turbo‚Ä¶\n 9 N109UW   1999 Fixed wing multi‚Ä¶ AIRBUS INDU‚Ä¶ A320‚Ä¶       2   182    NA Turbo‚Ä¶\n10 N110UW   1999 Fixed wing multi‚Ä¶ AIRBUS INDU‚Ä¶ A320‚Ä¶       2   182    NA Turbo‚Ä¶\n# ‚Ñπ 3,312 more rows\n\n\n\n\nweather records data about the weather at the origin airports. You can identify each observation by the combination of location and time, making origin and time_hour the compound primary key.\n\nweather\n\n# A tibble: 26,115 √ó 15\n   origin  year month   day  hour  temp  dewp humid wind_dir wind_speed\n   &lt;chr&gt;  &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;    &lt;dbl&gt;      &lt;dbl&gt;\n 1 EWR     2013     1     1     1  39.0  26.1  59.4      270      10.4 \n 2 EWR     2013     1     1     2  39.0  27.0  61.6      250       8.06\n 3 EWR     2013     1     1     3  39.0  28.0  64.4      240      11.5 \n 4 EWR     2013     1     1     4  39.9  28.0  62.2      250      12.7 \n 5 EWR     2013     1     1     5  39.0  28.0  64.4      260      12.7 \n 6 EWR     2013     1     1     6  37.9  28.0  67.2      240      11.5 \n 7 EWR     2013     1     1     7  39.0  28.0  64.4      240      15.0 \n 8 EWR     2013     1     1     8  39.9  28.0  62.2      250      10.4 \n 9 EWR     2013     1     1     9  39.9  28.0  62.2      260      15.0 \n10 EWR     2013     1     1    10  41    28.0  59.6      260      13.8 \n# ‚Ñπ 26,105 more rows\n# ‚Ñπ 5 more variables: wind_gust &lt;dbl&gt;, precip &lt;dbl&gt;, pressure &lt;dbl&gt;,\n#   visib &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\n\n\nflights has three variables (time_hour, flight, carrier) that uniquely identify an observation. More significantly, however, it contains foreign keys that correspond to the primary keys of the other datasets.\n\nflights\n\n# A tibble: 336,776 √ó 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     1     1      517            515         2      830            819\n 2  2013     1     1      533            529         4      850            830\n 3  2013     1     1      542            540         2      923            850\n 4  2013     1     1      544            545        -1     1004           1022\n 5  2013     1     1      554            600        -6      812            837\n 6  2013     1     1      554            558        -4      740            728\n 7  2013     1     1      555            600        -5      913            854\n 8  2013     1     1      557            600        -3      709            723\n 9  2013     1     1      557            600        -3      838            846\n10  2013     1     1      558            600        -2      753            745\n# ‚Ñπ 336,766 more rows\n# ‚Ñπ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;"
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#foreign-keys",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#foreign-keys",
    "title": "",
    "section": "Foreign Keys",
    "text": "Foreign Keys\n\nNote: grey shading indicates the primary key for that particular dataset.\nflights$origin ‚Äì&gt; airports$faa\nflights$dest ‚Äì&gt; airports$faa\nflights$origin-flights$time_hour ‚Äì&gt; weather$origin-weather$time_hour.\nflights$tailnum ‚Äì&gt; planes$tailnum\nflights$carrier ‚Äì&gt; airlines$carrier"
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#checking-keys",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#checking-keys",
    "title": "",
    "section": "Checking Keys",
    "text": "Checking Keys\nA nice feature of these data are that the primary and foreign keys have the same name and almost every variable name used across multiple tables has the same meaning.1 This isn‚Äôt always the case!2\n\nIt is good practice to make sure your primary keys actually uniquely identify an observation and that they don‚Äôt have any missing values.\n\n\n\nplanes |&gt; \n1  count(tailnum) |&gt;\n  filter(n &gt; 1)\n\n\n1\n\nIf your primary keys uniquely identify each observation you‚Äôll get an empty tibble in return.\n\n\n\n\n\n\n# A tibble: 0 √ó 2\n# ‚Ñπ 2 variables: tailnum &lt;chr&gt;, n &lt;int&gt;\n\n\n\n\n\nplanes |&gt; \n2  filter(is.na(tailnum))\n\n\n2\n\nIf none of your primary keys are missing you‚Äôll get an empty tibble in return here too.\n\n\n\n\n# A tibble: 0 √ó 9\n# ‚Ñπ 9 variables: tailnum &lt;chr&gt;, year &lt;int&gt;, type &lt;chr&gt;, manufacturer &lt;chr&gt;,\n#   model &lt;chr&gt;, engines &lt;int&gt;, seats &lt;int&gt;, speed &lt;int&gt;, engine &lt;chr&gt;\n\n\n\nWith the exception of year: it means year of departure in flights and year of manufacture in planes. We‚Äôll cover how to handle this shortly."
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#surrogate-keys",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#surrogate-keys",
    "title": "",
    "section": "Surrogate Keys",
    "text": "Surrogate Keys\nSometimes you‚Äôll want to create an index of your observations to serve as a surrogate key because the compound primary key is not particularly easy to reference.\n\nFor example, our flights dataset has three variables that uniquely identify each observation: time_hour, carrier, flight.\n\n\n\nflights2 &lt;- flights |&gt; \n1  mutate(id = row_number(), .before = 1)\nflights2\n\n\n1\n\nrow_number() simply specifies the row number of the data frame.\n\n\n\n\n\n\n# A tibble: 336,776 √ó 20\n      id  year month   day dep_time sched_dep_time dep_delay arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;\n 1     1  2013     1     1      517            515         2      830\n 2     2  2013     1     1      533            529         4      850\n 3     3  2013     1     1      542            540         2      923\n 4     4  2013     1     1      544            545        -1     1004\n 5     5  2013     1     1      554            600        -6      812\n 6     6  2013     1     1      554            558        -4      740\n 7     7  2013     1     1      555            600        -5      913\n 8     8  2013     1     1      557            600        -3      709\n 9     9  2013     1     1      557            600        -3      838\n10    10  2013     1     1      558            600        -2      753\n# ‚Ñπ 336,766 more rows\n# ‚Ñπ 12 more variables: sched_arr_time &lt;int&gt;, arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;,\n#   flight &lt;int&gt;, tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;,\n#   distance &lt;dbl&gt;, hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;"
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#basic-equi--joins",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#basic-equi--joins",
    "title": "",
    "section": "Basic (Equi-) Joins",
    "text": "Basic (Equi-) Joins\nAll join functions have the same basic interface: they take a pair of data frames and return one data frame.\n\nThe order of the rows and columns is primarily going to be determined by the first data frame.\n\n\ndplyr has two types of joins: mutating and filtering.\n\n\n\n\nMutating Joins\nAdd new variables to one data frame from matching observations from another data frame.\n\nleft_join()\nright_join()\ninner_join()\nfull_join()\n\n\n\n\nFiltering Joins\nFilter observations from one data frame based on whether or not they match an observation in another data frame.\n\nsemi_join()\nanti-join()"
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#mutating-joins-1",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#mutating-joins-1",
    "title": "",
    "section": "Mutating Joins",
    "text": "Mutating Joins"
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#left_join",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#left_join",
    "title": "",
    "section": "left_join()",
    "text": "left_join()\n\n\nThe most common type of join Appends columns from y to x by the rows in x\n(NA added if there is nothing from y) Natural join: when all variables that appear in both datasets are used as the join key.\n\nIf the join_by() argument is not specified, left_join() will automatically join by all columns that have names and values in common."
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#left_join-in-nycflights13",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#left_join-in-nycflights13",
    "title": "",
    "section": "left_join in nycflights13",
    "text": "left_join in nycflights13\n\nflights2 &lt;- flights |&gt; \n  select(year, time_hour, origin, dest, tailnum, carrier)\n\nWith only the pertinent variables from the flights dataset, we can see how a left_join works with the airlines dataset.\n\nflights2 |&gt;\n1  left_join(y = airlines)\n\n\n1\n\nThe airlines dataset has variables carrier and name\n\n\n\n\n\n\nJoining with `by = join_by(carrier)`\n\n\n# A tibble: 336,776 √ó 7\n    year time_hour           origin dest  tailnum carrier name                  \n   &lt;int&gt; &lt;dttm&gt;              &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt;   &lt;chr&gt;   &lt;chr&gt;                 \n 1  2013 2013-01-01 05:00:00 EWR    IAH   N14228  UA      United Air Lines Inc. \n 2  2013 2013-01-01 05:00:00 LGA    IAH   N24211  UA      United Air Lines Inc. \n 3  2013 2013-01-01 05:00:00 JFK    MIA   N619AA  AA      American Airlines Inc.\n 4  2013 2013-01-01 05:00:00 JFK    BQN   N804JB  B6      JetBlue Airways       \n 5  2013 2013-01-01 06:00:00 LGA    ATL   N668DN  DL      Delta Air Lines Inc.  \n 6  2013 2013-01-01 05:00:00 EWR    ORD   N39463  UA      United Air Lines Inc. \n 7  2013 2013-01-01 06:00:00 EWR    FLL   N516JB  B6      JetBlue Airways       \n 8  2013 2013-01-01 06:00:00 LGA    IAD   N829AS  EV      ExpressJet Airlines I‚Ä¶\n 9  2013 2013-01-01 06:00:00 JFK    MCO   N593JB  B6      JetBlue Airways       \n10  2013 2013-01-01 06:00:00 LGA    ORD   N3ALAA  AA      American Airlines Inc.\n# ‚Ñπ 336,766 more rows"
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#different-variable-meanings",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#different-variable-meanings",
    "title": "",
    "section": "Different variable meanings",
    "text": "Different variable meanings\n\nflights2 |&gt; \n1  left_join(planes)\n\n\n1\n\nThe planes dataset has variables tailnum, year, type, manufacturer, model, engines, seats, speed, and engine\n\n\n\n\n\n\nJoining with `by = join_by(year, tailnum)`\n\n\n# A tibble: 336,776 √ó 13\n    year time_hour           origin dest  tailnum carrier type  manufacturer\n   &lt;int&gt; &lt;dttm&gt;              &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt;   &lt;chr&gt;   &lt;chr&gt; &lt;chr&gt;       \n 1  2013 2013-01-01 05:00:00 EWR    IAH   N14228  UA      &lt;NA&gt;  &lt;NA&gt;        \n 2  2013 2013-01-01 05:00:00 LGA    IAH   N24211  UA      &lt;NA&gt;  &lt;NA&gt;        \n 3  2013 2013-01-01 05:00:00 JFK    MIA   N619AA  AA      &lt;NA&gt;  &lt;NA&gt;        \n 4  2013 2013-01-01 05:00:00 JFK    BQN   N804JB  B6      &lt;NA&gt;  &lt;NA&gt;        \n 5  2013 2013-01-01 06:00:00 LGA    ATL   N668DN  DL      &lt;NA&gt;  &lt;NA&gt;        \n 6  2013 2013-01-01 05:00:00 EWR    ORD   N39463  UA      &lt;NA&gt;  &lt;NA&gt;        \n 7  2013 2013-01-01 06:00:00 EWR    FLL   N516JB  B6      &lt;NA&gt;  &lt;NA&gt;        \n 8  2013 2013-01-01 06:00:00 LGA    IAD   N829AS  EV      &lt;NA&gt;  &lt;NA&gt;        \n 9  2013 2013-01-01 06:00:00 JFK    MCO   N593JB  B6      &lt;NA&gt;  &lt;NA&gt;        \n10  2013 2013-01-01 06:00:00 LGA    ORD   N3ALAA  AA      &lt;NA&gt;  &lt;NA&gt;        \n# ‚Ñπ 336,766 more rows\n# ‚Ñπ 5 more variables: model &lt;chr&gt;, engines &lt;int&gt;, seats &lt;int&gt;, speed &lt;int&gt;,\n#   engine &lt;chr&gt;\n\n\n\n\nWhen we try to do this, however, we get a bunch of NAs. Why?\n\n\nJoin is trying to use tailnum and year as a compound key. While both datasets have year as a variable, they mean different things. Therefore, we need to be explicit here about what to join by."
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#different-variable-meanings-1",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#different-variable-meanings-1",
    "title": "",
    "section": "Different variable meanings",
    "text": "Different variable meanings\n\nflights2 |&gt; \n1  left_join(y = planes, by = join_by(tailnum))\n\n\n1\n\njoin_by(tailnum) is short for join_by(tailnum == tailnum) making these types of basic joins equi joins.\n\n\n\n\n\n\n# A tibble: 336,776 √ó 14\n   year.x time_hour           origin dest  tailnum carrier year.y type          \n    &lt;int&gt; &lt;dttm&gt;              &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt;   &lt;chr&gt;    &lt;int&gt; &lt;chr&gt;         \n 1   2013 2013-01-01 05:00:00 EWR    IAH   N14228  UA        1999 Fixed wing mu‚Ä¶\n 2   2013 2013-01-01 05:00:00 LGA    IAH   N24211  UA        1998 Fixed wing mu‚Ä¶\n 3   2013 2013-01-01 05:00:00 JFK    MIA   N619AA  AA        1990 Fixed wing mu‚Ä¶\n 4   2013 2013-01-01 05:00:00 JFK    BQN   N804JB  B6        2012 Fixed wing mu‚Ä¶\n 5   2013 2013-01-01 06:00:00 LGA    ATL   N668DN  DL        1991 Fixed wing mu‚Ä¶\n 6   2013 2013-01-01 05:00:00 EWR    ORD   N39463  UA        2012 Fixed wing mu‚Ä¶\n 7   2013 2013-01-01 06:00:00 EWR    FLL   N516JB  B6        2000 Fixed wing mu‚Ä¶\n 8   2013 2013-01-01 06:00:00 LGA    IAD   N829AS  EV        1998 Fixed wing mu‚Ä¶\n 9   2013 2013-01-01 06:00:00 JFK    MCO   N593JB  B6        2004 Fixed wing mu‚Ä¶\n10   2013 2013-01-01 06:00:00 LGA    ORD   N3ALAA  AA          NA &lt;NA&gt;          \n# ‚Ñπ 336,766 more rows\n# ‚Ñπ 6 more variables: manufacturer &lt;chr&gt;, model &lt;chr&gt;, engines &lt;int&gt;,\n#   seats &lt;int&gt;, speed &lt;int&gt;, engine &lt;chr&gt;\n\n\n\n\nWhen you have the same variable name but they mean different things you can specify a particular suffix with the suffix argument in the _join function. By default the suffix will be .x for the variable from the first dataset and .y for the variable from the second dataset."
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#different-variable-meanings-2",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#different-variable-meanings-2",
    "title": "",
    "section": "Different variable meanings",
    "text": "Different variable meanings\n\nflights2 |&gt; \n1  left_join(y = planes, by = join_by(tailnum))\n\n\n1\n\njoin_by(tailnum) is short for join_by(tailnum == tailnum) making these types of basic joins equi joins.\n\n\n\n\n\n\n# A tibble: 336,776 √ó 14\n   year.x time_hour           origin dest  tailnum carrier year.y type          \n    &lt;int&gt; &lt;dttm&gt;              &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt;   &lt;chr&gt;    &lt;int&gt; &lt;chr&gt;         \n 1   2013 2013-01-01 05:00:00 EWR    IAH   N14228  UA        1999 Fixed wing mu‚Ä¶\n 2   2013 2013-01-01 05:00:00 LGA    IAH   N24211  UA        1998 Fixed wing mu‚Ä¶\n 3   2013 2013-01-01 05:00:00 JFK    MIA   N619AA  AA        1990 Fixed wing mu‚Ä¶\n 4   2013 2013-01-01 05:00:00 JFK    BQN   N804JB  B6        2012 Fixed wing mu‚Ä¶\n 5   2013 2013-01-01 06:00:00 LGA    ATL   N668DN  DL        1991 Fixed wing mu‚Ä¶\n 6   2013 2013-01-01 05:00:00 EWR    ORD   N39463  UA        2012 Fixed wing mu‚Ä¶\n 7   2013 2013-01-01 06:00:00 EWR    FLL   N516JB  B6        2000 Fixed wing mu‚Ä¶\n 8   2013 2013-01-01 06:00:00 LGA    IAD   N829AS  EV        1998 Fixed wing mu‚Ä¶\n 9   2013 2013-01-01 06:00:00 JFK    MCO   N593JB  B6        2004 Fixed wing mu‚Ä¶\n10   2013 2013-01-01 06:00:00 LGA    ORD   N3ALAA  AA          NA &lt;NA&gt;          \n# ‚Ñπ 336,766 more rows\n# ‚Ñπ 6 more variables: manufacturer &lt;chr&gt;, model &lt;chr&gt;, engines &lt;int&gt;,\n#   seats &lt;int&gt;, speed &lt;int&gt;, engine &lt;chr&gt;\n\n\n\n\nWhen you have the same variable name but they mean different things you can specify a particular suffix with the suffix argument in the _join function. By default the suffix will be .x for the variable from the first dataset and .y for the variable from the second dataset."
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#different-variable-names",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#different-variable-names",
    "title": "",
    "section": "Different variable names",
    "text": "Different variable names\nIf you have keys that have the same meaning (values) but are named different things in their respective datasets you‚Äôd also specify that with join_by()\n\n\nflights2 |&gt; \n1  left_join(airports, join_by(dest == faa))\n\n\n1\n\nby = c(\"dest\" = \"faa\") was the former syntax for this and you still might see that in older code. You can specify multiple join_bys by simply separating the conditional statements with , (i.e.¬†join_by(x == y, a == b)).\n\n\n\n\n\n\n# A tibble: 336,776 √ó 13\n    year time_hour           origin dest  tailnum carrier name         lat   lon\n   &lt;int&gt; &lt;dttm&gt;              &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt;   &lt;chr&gt;   &lt;chr&gt;      &lt;dbl&gt; &lt;dbl&gt;\n 1  2013 2013-01-01 05:00:00 EWR    IAH   N14228  UA      George Bu‚Ä¶  30.0 -95.3\n 2  2013 2013-01-01 05:00:00 LGA    IAH   N24211  UA      George Bu‚Ä¶  30.0 -95.3\n 3  2013 2013-01-01 05:00:00 JFK    MIA   N619AA  AA      Miami Intl  25.8 -80.3\n 4  2013 2013-01-01 05:00:00 JFK    BQN   N804JB  B6      &lt;NA&gt;        NA    NA  \n 5  2013 2013-01-01 06:00:00 LGA    ATL   N668DN  DL      Hartsfiel‚Ä¶  33.6 -84.4\n 6  2013 2013-01-01 05:00:00 EWR    ORD   N39463  UA      Chicago O‚Ä¶  42.0 -87.9\n 7  2013 2013-01-01 06:00:00 EWR    FLL   N516JB  B6      Fort Laud‚Ä¶  26.1 -80.2\n 8  2013 2013-01-01 06:00:00 LGA    IAD   N829AS  EV      Washingto‚Ä¶  38.9 -77.5\n 9  2013 2013-01-01 06:00:00 JFK    MCO   N593JB  B6      Orlando I‚Ä¶  28.4 -81.3\n10  2013 2013-01-01 06:00:00 LGA    ORD   N3ALAA  AA      Chicago O‚Ä¶  42.0 -87.9\n# ‚Ñπ 336,766 more rows\n# ‚Ñπ 4 more variables: alt &lt;dbl&gt;, tz &lt;dbl&gt;, dst &lt;chr&gt;, tzone &lt;chr&gt;\n\n\n\n\n\nThis will match dest to faa for the join and then drop faa."
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#different-variable-names-1",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#different-variable-names-1",
    "title": "",
    "section": "Different variable names",
    "text": "Different variable names\nYou can request dplyr to keep both keys with keep = TRUE argument.\n\n\nflights2 |&gt; \n  left_join(airports, join_by(dest == faa), keep = TRUE) \n\n\n\n# A tibble: 336,776 √ó 14\n    year time_hour           origin dest  tailnum carrier faa   name         lat\n   &lt;int&gt; &lt;dttm&gt;              &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt;   &lt;chr&gt;   &lt;chr&gt; &lt;chr&gt;      &lt;dbl&gt;\n 1  2013 2013-01-01 05:00:00 EWR    IAH   N14228  UA      IAH   George Bu‚Ä¶  30.0\n 2  2013 2013-01-01 05:00:00 LGA    IAH   N24211  UA      IAH   George Bu‚Ä¶  30.0\n 3  2013 2013-01-01 05:00:00 JFK    MIA   N619AA  AA      MIA   Miami Intl  25.8\n 4  2013 2013-01-01 05:00:00 JFK    BQN   N804JB  B6      &lt;NA&gt;  &lt;NA&gt;        NA  \n 5  2013 2013-01-01 06:00:00 LGA    ATL   N668DN  DL      ATL   Hartsfiel‚Ä¶  33.6\n 6  2013 2013-01-01 05:00:00 EWR    ORD   N39463  UA      ORD   Chicago O‚Ä¶  42.0\n 7  2013 2013-01-01 06:00:00 EWR    FLL   N516JB  B6      FLL   Fort Laud‚Ä¶  26.1\n 8  2013 2013-01-01 06:00:00 LGA    IAD   N829AS  EV      IAD   Washingto‚Ä¶  38.9\n 9  2013 2013-01-01 06:00:00 JFK    MCO   N593JB  B6      MCO   Orlando I‚Ä¶  28.4\n10  2013 2013-01-01 06:00:00 LGA    ORD   N3ALAA  AA      ORD   Chicago O‚Ä¶  42.0\n# ‚Ñπ 336,766 more rows\n# ‚Ñπ 5 more variables: lon &lt;dbl&gt;, alt &lt;dbl&gt;, tz &lt;dbl&gt;, dst &lt;chr&gt;, tzone &lt;chr&gt;"
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#right_join",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#right_join",
    "title": "",
    "section": "right_join()",
    "text": "right_join()\n\nHas the same interface as a left_join but keeps all rows in y instead of x"
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#inner_join",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#inner_join",
    "title": "",
    "section": "inner_join()",
    "text": "inner_join()\n\nHas the same interface as a left_join but only keeps rows that occur in both x and y"
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#full_join",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#full_join",
    "title": "",
    "section": "full_join()",
    "text": "full_join()\n\nHas the same interface as a left_join but keeps all rows in either x or y"
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#filtering-joins-1",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#filtering-joins-1",
    "title": "",
    "section": "Filtering Joins",
    "text": "Filtering Joins"
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#semi_join",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#semi_join",
    "title": "",
    "section": "semi_join()",
    "text": "semi_join()\n\nKeeps all rows in x that have a match in y"
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#semi_join-in-nycflights13",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#semi_join-in-nycflights13",
    "title": "",
    "section": "semi_join() in nycflights13",
    "text": "semi_join() in nycflights13\nWe could use a semi-join to filter the airports dataset to show just the origin airports.\n\n\nairports |&gt; \n  semi_join(flights2, join_by(faa == origin))\n\n\n\n# A tibble: 3 √ó 8\n  faa   name                  lat   lon   alt    tz dst   tzone           \n  &lt;chr&gt; &lt;chr&gt;               &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;           \n1 EWR   Newark Liberty Intl  40.7 -74.2    18    -5 A     America/New_York\n2 JFK   John F Kennedy Intl  40.6 -73.8    13    -5 A     America/New_York\n3 LGA   La Guardia           40.8 -73.9    22    -5 A     America/New_York"
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#anti_join",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#anti_join",
    "title": "",
    "section": "anti_join()",
    "text": "anti_join()\n\nReturns all rows in x that don‚Äôt have a match in y"
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#anti_join-in-nycflights13",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#anti_join-in-nycflights13",
    "title": "",
    "section": "anti_join() in nycflights13",
    "text": "anti_join() in nycflights13\nWe can find rows that are missing from airports by looking for flights that don‚Äôt have a matching destination airport.\n\n\nairports |&gt; \n  anti_join(flights2, join_by(faa == origin))\n\n\n\n# A tibble: 1,455 √ó 8\n   faa   name                             lat    lon   alt    tz dst   tzone    \n   &lt;chr&gt; &lt;chr&gt;                          &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;    \n 1 04G   Lansdowne Airport               41.1  -80.6  1044    -5 A     America/‚Ä¶\n 2 06A   Moton Field Municipal Airport   32.5  -85.7   264    -6 A     America/‚Ä¶\n 3 06C   Schaumburg Regional             42.0  -88.1   801    -6 A     America/‚Ä¶\n 4 06N   Randall Airport                 41.4  -74.4   523    -5 A     America/‚Ä¶\n 5 09J   Jekyll Island Airport           31.1  -81.4    11    -5 A     America/‚Ä¶\n 6 0A9   Elizabethton Municipal Airport  36.4  -82.2  1593    -5 A     America/‚Ä¶\n 7 0G6   Williams County Airport         41.5  -84.5   730    -5 A     America/‚Ä¶\n 8 0G7   Finger Lakes Regional Airport   42.9  -76.8   492    -5 A     America/‚Ä¶\n 9 0P2   Shoestring Aviation Airfield    39.8  -76.6  1000    -5 U     America/‚Ä¶\n10 0S9   Jefferson County Intl           48.1 -123.    108    -8 A     America/‚Ä¶\n# ‚Ñπ 1,445 more rows\n\n\n\n\n\nThis type of join is useful for finding missing values that are implicit in the data (i.e.¬†NAs that don‚Äôt show up in the data but only exist as an absence.)"
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#more-than-one-match",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#more-than-one-match",
    "title": "",
    "section": "More Than One Match",
    "text": "More Than One Match\n\n\nThere are three possible outcomes for a row in x:\n\nIf it doesn‚Äôt match anything, it‚Äôs dropped.\nIf it matches 1 row in y, it‚Äôs preserved.\nIf it matches more than 1 row iny, it‚Äôs duplicated once for each match.\n\n\n\nWhat happens if we match on more than one row?"
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#more-than-one-match-1",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#more-than-one-match-1",
    "title": "",
    "section": "More Than One Match",
    "text": "More Than One Match\n\ndf1 &lt;- tibble(key = c(1, 2, 2), val_x = c(\"x1\", \"x2\", \"x3\"))\ndf2 &lt;- tibble(key = c(1, 2, 2), val_y = c(\"y1\", \"y2\", \"y3\"))\n\ndf1 |&gt; \n  inner_join(df2, join_by(key))\n\n\n\nWarning in inner_join(df1, df2, join_by(key)): Detected an unexpected many-to-many relationship between `x` and `y`.\n‚Ñπ Row 2 of `x` matches multiple rows in `y`.\n‚Ñπ Row 2 of `y` matches multiple rows in `x`.\n‚Ñπ If a many-to-many relationship is expected, set `relationship =\n  \"many-to-many\"` to silence this warning.\n\n\n# A tibble: 5 √ó 3\n    key val_x val_y\n  &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;\n1     1 x1    y1   \n2     2 x2    y2   \n3     2 x2    y3   \n4     2 x3    y2   \n5     2 x3    y3   \n\n\n\n\n\nIf you are doing this deliberately, you can set relationship = \"many-to-many\", as the warning suggests.\nNote: Given their nature, filtering joins never duplicate rows like mutating joins do. They will only ever return a subset of the datasets."
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#non-equi-joins",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#non-equi-joins",
    "title": "",
    "section": "Non-Equi Joins",
    "text": "Non-Equi Joins\nThe joins we‚Äôve discussed thus far have all been equi-joins, where the rows match if the x key equals the y key. But you can also specify other types of relationships.\n\ndplyr has four different types of non-equi joins:\n\n\n\n\n\nCross joins match every pair of rows.\n\n\n\n\n\n\n\nCross joins, aka self-joins, are useful when generating permutations (e.g.¬†creating every possible combination of values). This comes in handy when creating datasets of predicted probabilities for plotting in ggplot."
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#non-equi-joins-1",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#non-equi-joins-1",
    "title": "",
    "section": "Non-Equi Joins",
    "text": "Non-Equi Joins\nThe joins we‚Äôve discussed thus far have all been equi-joins, where the rows match if the x key equals the y key. But you can also specify other types of relationships.\ndplyr has four different types of non-equi joins:\n\n\n\nCross joins match every pair of rows.\nInequality joins use &lt;, &lt;=, &gt;, and &gt;= instead of ==.\n\nOverlap joins are a special type of inequality join designed to work with ranges1.\n\n\n\n\n\n\n\nInequality joins can be used to restrict the cross join so that instead of generating all permutations, we generate all combinations.\nOverlap joins provide three helpers that use inequality joins to make it easier to work with intervals: between(), within(), overlaps(). Read more about their functionality and specifications here."
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#non-equi-joins-2",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#non-equi-joins-2",
    "title": "",
    "section": "Non-Equi Joins",
    "text": "Non-Equi Joins\nThe joins we‚Äôve discussed thus far have all been equi-joins, where the rows match if the x key equals the y key. But you can also specify other types of relationships.\ndplyr has four different types of non-equi joins:\n\n\n\nCross joins match every pair of rows.\nInequality joins use &lt;, &lt;=, &gt;, and &gt;= instead of ==.\n\nOverlap joins are a special type of inequality join designed to work with ranges.\n\nRolling joins are similar to inequality joins but only find the closest match.\n\n\n\n\n\n\nRolling joins are a special type of inequality join where instead of getting every row that satisfies the inequality, you get just the closest row. You can turn any inequality join into a rolling join by adding closest()."
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#manipulating-data",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#manipulating-data",
    "title": "",
    "section": "Manipulating Data",
    "text": "Manipulating Data\n\nCreate a new object that contains the following from gapminder1\n\nobservations from China, India, and United States after 1980, and\nvariables corresponding to country, year, population, and life expectancy.\n\nHow many rows and columns does the object contain?\nSort the rows by year (ascending order) and population (descending order) and save that over (i.e.¬†overwrite) the object created for answer 1. Print the first 6 rows.\nCreate a new variable that contains population in billions.\nBy year, calculate the total population (in billions) across these three countries\nIn ggplot, create a line plot showing life expectancy over time by country. Make the plot visually appealing!\n\nUsing the gapminder package"
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#answers",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#answers",
    "title": "",
    "section": "Answers",
    "text": "Answers\nQuestion 1:\n\nsubset_gapminder &lt;- gapminder |&gt; \n1  filter(country %in% c(\"China\",\"India\",\"United States\"),  year &gt; 1980 ) |&gt;\n  select(country, year, pop, lifeExp)\nsubset_gapminder\n\n\n1\n\nYou can specify multiple conditional conditions in filter() by separating them with commas\n\n\n\n\n# A tibble: 18 √ó 4\n   country        year        pop lifeExp\n   &lt;fct&gt;         &lt;int&gt;      &lt;int&gt;   &lt;dbl&gt;\n 1 China          1982 1000281000    65.5\n 2 China          1987 1084035000    67.3\n 3 China          1992 1164970000    68.7\n 4 China          1997 1230075000    70.4\n 5 China          2002 1280400000    72.0\n 6 China          2007 1318683096    73.0\n 7 India          1982  708000000    56.6\n 8 India          1987  788000000    58.6\n 9 India          1992  872000000    60.2\n10 India          1997  959000000    61.8\n11 India          2002 1034172547    62.9\n12 India          2007 1110396331    64.7\n13 United States  1982  232187835    74.6\n14 United States  1987  242803533    75.0\n15 United States  1992  256894189    76.1\n16 United States  1997  272911760    76.8\n17 United States  2002  287675526    77.3\n18 United States  2007  301139947    78.2"
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#answers-1",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#answers-1",
    "title": "",
    "section": "Answers",
    "text": "Answers\nQuestion 2:\n\n# Option 1\nc(nrow(subset_gapminder), ncol(subset_gapminder))\n\n[1] 18  4\n\n# Option 2\nglimpse(subset_gapminder)\n\nRows: 18\nColumns: 4\n$ country &lt;fct&gt; \"China\", \"China\", \"China\", \"China\", \"China\", \"China\", \"India\",‚Ä¶\n$ year    &lt;int&gt; 1982, 1987, 1992, 1997, 2002, 2007, 1982, 1987, 1992, 1997, 20‚Ä¶\n$ pop     &lt;int&gt; 1000281000, 1084035000, 1164970000, 1230075000, 1280400000, 13‚Ä¶\n$ lifeExp &lt;dbl&gt; 65.525, 67.274, 68.690, 70.426, 72.028, 72.961, 56.596, 58.553‚Ä¶\n\n# Option 3\ndim(subset_gapminder)\n\n[1] 18  4"
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#answers-2",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#answers-2",
    "title": "",
    "section": "Answers",
    "text": "Answers\nQuestion 3:\n\nsubset_gapminder &lt;- subset_gapminder |&gt; \n1  arrange(year, desc(pop))\n\n\n1\n\nThe default for arrange() is to sort in ascending order\n\n\n\n\n\n\n\n\n\nsubset_gapminder |&gt; head(6)\n\n# A tibble: 6 √ó 4\n  country        year        pop lifeExp\n  &lt;fct&gt;         &lt;int&gt;      &lt;int&gt;   &lt;dbl&gt;\n1 China          1982 1000281000    65.5\n2 India          1982  708000000    56.6\n3 United States  1982  232187835    74.6\n4 China          1987 1084035000    67.3\n5 India          1987  788000000    58.6\n6 United States  1987  242803533    75.0\n\n\n\n\nprint(subset_gapminder[1:6, ])\n\n# A tibble: 6 √ó 4\n  country        year        pop lifeExp\n  &lt;fct&gt;         &lt;int&gt;      &lt;int&gt;   &lt;dbl&gt;\n1 China          1982 1000281000    65.5\n2 India          1982  708000000    56.6\n3 United States  1982  232187835    74.6\n4 China          1987 1084035000    67.3\n5 India          1987  788000000    58.6\n6 United States  1987  242803533    75.0"
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#answers-3",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#answers-3",
    "title": "",
    "section": "Answers",
    "text": "Answers\nQuestion 4:\n\nsubset_gapminder &lt;- subset_gapminder |&gt; \n  mutate(pop_billions = pop/1000000000)\n\nsubset_gapminder\n\n# A tibble: 18 √ó 5\n   country        year        pop lifeExp pop_billions\n   &lt;fct&gt;         &lt;int&gt;      &lt;int&gt;   &lt;dbl&gt;        &lt;dbl&gt;\n 1 China          1982 1000281000    65.5        1.00 \n 2 India          1982  708000000    56.6        0.708\n 3 United States  1982  232187835    74.6        0.232\n 4 China          1987 1084035000    67.3        1.08 \n 5 India          1987  788000000    58.6        0.788\n 6 United States  1987  242803533    75.0        0.243\n 7 China          1992 1164970000    68.7        1.16 \n 8 India          1992  872000000    60.2        0.872\n 9 United States  1992  256894189    76.1        0.257\n10 China          1997 1230075000    70.4        1.23 \n11 India          1997  959000000    61.8        0.959\n12 United States  1997  272911760    76.8        0.273\n13 China          2002 1280400000    72.0        1.28 \n14 India          2002 1034172547    62.9        1.03 \n15 United States  2002  287675526    77.3        0.288\n16 China          2007 1318683096    73.0        1.32 \n17 India          2007 1110396331    64.7        1.11 \n18 United States  2007  301139947    78.2        0.301"
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#answers-4",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#answers-4",
    "title": "",
    "section": "Answers",
    "text": "Answers\nQuestion 5:\n\nClassic syntaxNew syntax (dplyr 1.1.0)\n\n\n\nsubset_gapminder |&gt; \n  group_by(year) |&gt; \n  summarize(TotalPop_Billions = sum(pop_billions))\n\n# A tibble: 6 √ó 2\n   year TotalPop_Billions\n  &lt;int&gt;             &lt;dbl&gt;\n1  1982              1.94\n2  1987              2.11\n3  1992              2.29\n4  1997              2.46\n5  2002              2.60\n6  2007              2.73\n\n\n\n\n\nsubset_gapminder |&gt; \n  summarize(TotalPop_Billions = sum(pop_billions), \n1            .by = year)\n\n\n1\n\nThis new syntax allows for per-operation grouping which means it is only active within a single verb at a time (as opposed to being applied to the entire tibble until ungroup() is called). Learn more about this new feature here)\n\n\n\n\n# A tibble: 6 √ó 2\n   year TotalPop_Billions\n  &lt;int&gt;             &lt;dbl&gt;\n1  1982              1.94\n2  1987              2.11\n3  1992              2.29\n4  1997              2.46\n5  2002              2.60\n6  2007              2.73"
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#answers-5",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#answers-5",
    "title": "",
    "section": "Answers",
    "text": "Answers\nQuestion 6:\n\nCodePlot\n\n\n\nlibrary(ggplot2) \nlibrary(ggthemes)\nlibrary(geomtextpath)\nggplot(subset_gapminder, \n1       aes(year, lifeExp, color = country)) +\n2  geom_point() +\n3  geom_textpath(aes(label = country),\n4                show.legend = FALSE) +\n5  labs(title = \"Life Expectancy (1982-2007)\",\"China, India, and United States\",\n       x = \"Year\",\n       y = \"Life Expectancy (years)\") +\n6  scale_x_continuous(breaks = c(1982, 1987, 1992, 1997, 2002, 2007)) +\n7  ylim(c(50, 80)) +\n8  theme_tufte(base_size = 20)\n\n\n1\n\nMap year to the x-axis, lifeExp to the y-axis, and country to color\n\n2\n\nAdd points geom to plot data\n\n3\n\nUse geom_textpath() from the geomtextpath package to make nice labelled lines (specify mapping of country to the label)\n\n4\n\nRemove legend (redundant with labelled lines)\n\n5\n\nAdd descriptive plot title and axis labels\n\n6\n\nLimit x-axis ticks and labels to only six specified years\n\n7\n\nZoom in on y-axis range to limit whitespace\n\n8\n\nUse nice theme from ggthemes package and increase text size throughout plot"
  },
  {
    "objectID": "Lectures/Lecture10/CSSS508_Lecture10_index.html",
    "href": "Lectures/Lecture10/CSSS508_Lecture10_index.html",
    "title": "Lecture 10",
    "section": "",
    "text": "Next Steps\n\nDecember 9, 2025\n\n\n\n\n\nSlides & Code\nHTML slides ‚Ä¢ Raw qmd file\n\n\n\nSuggested Reading (from R for Data Science (2e)1)\nChapter 28: A field guide to base R\nChapter 30: Quarto formats\n\n\n1¬†Hadley Wickham, Mine √áetinkaya-Rundel & Garrett Grolemund\nUseful Resources\n\nCheatsheets\nBest Practice for R ‚Ä¢ git and GitHub ‚Ä¢ Shiny ‚Ä¢ gganimate\n\n\nPackage Websites\ntidymodels ‚Ä¢ ggmap ‚Ä¢ sf ‚Ä¢ tidycensus ‚Ä¢ usethis ‚Ä¢ Shiny\n\n\nOther Readings\nFeature Engineering and Selection: A Practical Approach for Predictive Models 2 ‚Ä¢\nStatistical Inference via Data Science: A ModernDive into R and the Tidyverse 3 ‚Ä¢\nSupervised Machine Learning for Text Analysis in R 4 ‚Ä¢\nWelcome to Text Mining with R 5 ‚Ä¢\nggplot2: Elegant Graphics for Data Analysis (3e) 6 ‚Ä¢\nSpatial Data Science: With Applications in R 7 ‚Ä¢\nHappy Git and GitHub for the useR 8\n2¬†Max Kuhn and Kjell Johnson3¬†Chester Ismay, Albert Y. Kim, and Arturo Valdivia4¬†Emil Hvitfeldt and Julia Silge5¬†Julia Silge and David Robinson6¬†Hadley Wickham, Danielle Navarro, and Thomas Lin Pedersen7¬†Edzer Pebesma and Roger Bivand8¬†Jennifer Bryan\n\nOther Resources\nTop 50 ggplot Visualizations ‚ÄúMaster List‚Äù 9 ‚Ä¢ ggplot2 Extension Packages\nawesome ggplot2 10 ‚Ä¢ Software Carpentry Class: Version Control with Git\n9¬†Good for ideas and sample code!10¬†A curated list of awesome ggplot2 tutorials, packages etc.\n\nCrowdsource Help\nCS&SS 508 Slack Workspace ‚Ä¢ Posit community ‚Ä¢ Stackoverflow\nCSSCR @ UW 11\n\n\n11¬†Drop by, say hello, get help!",
    "crumbs": [
      "Lectures",
      "Lecture 10"
    ]
  },
  {
    "objectID": "Lectures/Lecture10/scratch.html",
    "href": "Lectures/Lecture10/scratch.html",
    "title": "scratch",
    "section": "",
    "text": "Tidy model output with broom\nVisualizing models with ggeffects\nTables with gt, modelsummary, and gtsummary\n\n\n\n\n\n\n\n\nOrganization\nPortability\nVersion Control"
  },
  {
    "objectID": "Lectures/Lecture10/scratch.html#topics-for-today",
    "href": "Lectures/Lecture10/scratch.html#topics-for-today",
    "title": "scratch",
    "section": "",
    "text": "Tidy model output with broom\nVisualizing models with ggeffects\nTables with gt, modelsummary, and gtsummary\n\n\n\n\n\n\n\n\nOrganization\nPortability\nVersion Control"
  },
  {
    "objectID": "Lectures/Lecture10/scratch.html#broom",
    "href": "Lectures/Lecture10/scratch.html#broom",
    "title": "scratch",
    "section": "broom",
    "text": "broom\nbroom is a package that ‚Äútidies up‚Äù the output from models such a lm() and glm().\nIt has a small number of key functions:\n\ntidy() - Creates a dataframe summary of a model.\naugment() - Adds columns‚Äîsuch as fitted values‚Äîto the data used in the model.\nglance() - Provides one row of fit statistics for models.\n\n\nlibrary(broom)"
  },
  {
    "objectID": "Lectures/Lecture10/scratch.html#model-output-is-a-list",
    "href": "Lectures/Lecture10/scratch.html#model-output-is-a-list",
    "title": "scratch",
    "section": "Model Output is a List",
    "text": "Model Output is a List\nlm() and summary() produce lists as output, which cannot go directly into tidyverse functions, particularly those in ggplot2.\n\nlm_1 &lt;- lm(yn ~ num1 + fac1, data = ex_dat)\nsummary(lm_1)\n\n\nCall:\nlm(formula = yn ~ num1 + fac1, data = ex_dat)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-6.9278 -1.7483  0.0797  1.7133  6.9180 \n\nCoefficients:\n            Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)   1.2368     0.4023   3.074  0.00241 ** \nnum1          0.6080     0.1083   5.616 6.61e-08 ***\nfac1B         1.0854     0.5196   2.089  0.03799 *  \nfac1C         2.5245     0.5230   4.827 2.78e-06 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 2.874 on 196 degrees of freedom\nMultiple R-squared:  0.2308,    Adjusted R-squared:  0.219 \nF-statistic:  19.6 on 3 and 196 DF,  p-value: 3.732e-11\n...."
  },
  {
    "objectID": "Lectures/Lecture10/scratch.html#model-output-varies",
    "href": "Lectures/Lecture10/scratch.html#model-output-varies",
    "title": "scratch",
    "section": "Model Output Varies!",
    "text": "Model Output Varies!\nEach type of model also produces somewhat different output, so you can‚Äôt just reuse the same code to handle output from every model.\n\nglm_1 &lt;- glm(yb ~ num1 + fac1, data = ex_dat, family=binomial(link=\"logit\"))\nsummary(glm_1)\n\n\nCall:\nglm(formula = yb ~ num1 + fac1, family = binomial(link = \"logit\"), \n    data = ex_dat)\n\nCoefficients:\n            Estimate Std. Error z value Pr(&gt;|z|)    \n(Intercept) -1.38172    0.34647  -3.988 6.66e-05 ***\nnum1         0.34216    0.08952   3.822 0.000132 ***\nfac1B        0.84734    0.40377   2.099 0.035853 *  \nfac1C        1.56168    0.41602   3.754 0.000174 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n(Dispersion parameter for binomial family taken to be 1)\n\n    Null deviance: 276.76  on 199  degrees of freedom\nResidual deviance: 244.41  on 196  degrees of freedom\nAIC: 252.41\n\n...."
  },
  {
    "objectID": "Lectures/Lecture10/scratch.html#broomtidy",
    "href": "Lectures/Lecture10/scratch.html#broomtidy",
    "title": "scratch",
    "section": "broom::tidy()",
    "text": "broom::tidy()\ntidy() produces similar output, but as a dataframe.\n\nlm_1 %&gt;% tidy()\n\n# A tibble: 4 √ó 5\n  term        estimate std.error statistic      p.value\n  &lt;chr&gt;          &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;        &lt;dbl&gt;\n1 (Intercept)    1.24      0.402      3.07 0.00241     \n2 num1           0.608     0.108      5.62 0.0000000661\n3 fac1B          1.09      0.520      2.09 0.0380      \n4 fac1C          2.52      0.523      4.83 0.00000278  \n\n\nEach type of model (e.g.¬†glm, lmer) has a different method with its own additional arguments. See ?tidy.lm for an example."
  },
  {
    "objectID": "Lectures/Lecture10/scratch.html#broomtidy-1",
    "href": "Lectures/Lecture10/scratch.html#broomtidy-1",
    "title": "scratch",
    "section": "broom::tidy()",
    "text": "broom::tidy()\nThis output is also completely identical between different models.\nThis can be very useful and important if running models with different test statistics‚Ä¶ or just running a lot of models!\n\nglm_1 %&gt;% tidy()\n\n# A tibble: 4 √ó 5\n  term        estimate std.error statistic   p.value\n  &lt;chr&gt;          &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;\n1 (Intercept)   -1.38     0.346      -3.99 0.0000666\n2 num1           0.342    0.0895      3.82 0.000132 \n3 fac1B          0.847    0.404       2.10 0.0359   \n4 fac1C          1.56     0.416       3.75 0.000174"
  },
  {
    "objectID": "Lectures/Lecture10/scratch.html#broomglance",
    "href": "Lectures/Lecture10/scratch.html#broomglance",
    "title": "scratch",
    "section": "broom::glance()",
    "text": "broom::glance()\nglance() produces dataframes of fit statistics for models.\nIf you run many models, you can compare each model row-by-row in each column‚Ä¶ or even plot their different fit statistics to allow holistic comparison.\n\nglance(lm_1)\n\n# A tibble: 1 √ó 12\n  r.squared adj.r.squared sigma statistic  p.value    df logLik   AIC   BIC\n      &lt;dbl&gt;         &lt;dbl&gt; &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1     0.231         0.219  2.87      19.6 3.73e-11     3  -493.  996. 1012.\n# ‚Ñπ 3 more variables: deviance &lt;dbl&gt;, df.residual &lt;int&gt;, nobs &lt;int&gt;"
  },
  {
    "objectID": "Lectures/Lecture10/scratch.html#broomaugment",
    "href": "Lectures/Lecture10/scratch.html#broomaugment",
    "title": "scratch",
    "section": "broom::augment()",
    "text": "broom::augment()\naugment() takes values generated by a model and adds them back to the original data. This includes fitted values, residuals, and leverage statistics.\n\naugment(lm_1) %&gt;% \n  head()\n\n# A tibble: 6 √ó 9\n      yn   num1 fac1  .fitted .resid   .hat .sigma    .cooksd .std.resid\n   &lt;dbl&gt;  &lt;dbl&gt; &lt;fct&gt;   &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;      &lt;dbl&gt;      &lt;dbl&gt;\n1  1.60   0.583 B       2.68  -1.08  0.0141   2.88 0.000512      -0.379 \n2 11.5    1.76  C       4.83   6.64  0.0148   2.84 0.0204         2.33  \n3  9.26   0.350 C       3.97   5.29  0.0148   2.86 0.0129         1.85  \n4  0.826 -0.480 A       0.945 -0.119 0.0209   2.88 0.00000940    -0.0420\n5  5.10   1.61  B       3.30   1.80  0.0132   2.88 0.00134        0.632 \n6 -2.90  -0.962 C       3.18  -6.08  0.0198   2.85 0.0230        -2.13  \n\n\nSee ?augment.lm for examples of what augment() can do."
  },
  {
    "objectID": "Lectures/Lecture10/scratch.html#the-power-of-broom",
    "href": "Lectures/Lecture10/scratch.html#the-power-of-broom",
    "title": "scratch",
    "section": "The Power of broom",
    "text": "The Power of broom\nThe real advantage of broom becomes apparent when running many models at once. Here we run separate models for each level of fac1:\n\nex_dat %&gt;% \n  nest_by(fac1) %&gt;% #&lt;&lt;\n  mutate(model = list(lm(yn ~  num1 + fac2, data = data))) %&gt;%  \n  summarize(tidy(model), .groups = \"drop\")\n\nWarning: Returning more (or less) than 1 row per `summarise()` group was deprecated in\ndplyr 1.1.0.\n‚Ñπ Please use `reframe()` instead.\n‚Ñπ When switching from `summarise()` to `reframe()`, remember that `reframe()`\n  always returns an ungrouped data frame and adjust accordingly.\n\n\n# A tibble: 9 √ó 6\n  fac1  term        estimate std.error statistic      p.value\n  &lt;fct&gt; &lt;chr&gt;          &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;        &lt;dbl&gt;\n1 A     (Intercept)  -0.0447     0.522   -0.0857 0.932       \n2 A     num1          0.746      0.167    4.48   0.0000442   \n3 A     fac2No        2.24       0.695    3.22   0.00224     \n4 B     (Intercept)   1.71       0.417    4.11   0.000104    \n5 B     num1          0.788      0.154    5.11   0.00000252  \n6 B     fac2No        0.737      0.550    1.34   0.184       \n7 C     (Intercept)   3.94       0.635    6.20   0.0000000373\n8 C     num1          0.291      0.223    1.30   0.197       \n9 C     fac2No        0.306      0.811    0.377  0.708       \n\n\n\n\nnest_by() nests data into a list column by levels of fac1."
  },
  {
    "objectID": "Lectures/Lecture10/scratch.html#geom_smooth",
    "href": "Lectures/Lecture10/scratch.html#geom_smooth",
    "title": "scratch",
    "section": "geom_smooth()",
    "text": "geom_smooth()\nI have used geom_smooth() in many past examples.\ngeom_smooth() generates ‚Äúsmoothed conditional means‚Äù including loess curves and generalized additive models (GAMs).\n. . .\nNote, however, that most regression models are conditional mean models, such as ordinary least squares and generalized linear models.\n. . .\nWe can use geom_smooth() to add a layer depicting common bivariate models.\nWe‚Äôll look at this with the gapminder data from Week 2.\n\nlibrary(gapminder)\n\n. . ."
  },
  {
    "objectID": "Lectures/Lecture10/scratch.html#default-geom_smooth",
    "href": "Lectures/Lecture10/scratch.html#default-geom_smooth",
    "title": "scratch",
    "section": "Default geom_smooth()",
    "text": "Default geom_smooth()\n\nggplot(data = gapminder, aes(x = year, y = lifeExp, color = continent)) +\n  geom_point(position = position_jitter(1, 0), size = 0.5) +\n  geom_smooth()\n\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\nBy default, geom_smooth() chooses either a loess smoother (N &lt; 1000) or a GAM depending on the number of observations."
  },
  {
    "objectID": "Lectures/Lecture10/scratch.html#linear-glm",
    "href": "Lectures/Lecture10/scratch.html#linear-glm",
    "title": "scratch",
    "section": "Linear glm",
    "text": "Linear glm\n\nggplot(data = gapminder, aes(x = year, y = lifeExp, color = continent)) +\n  geom_point(position = position_jitter(1,0), size = 0.5) +\n  geom_smooth(method = \"glm\", formula = y ~ x)\n\n\n\n\n\n\n\n\nWe could also fit a standard linear model using either method = \"glm\" or method = \"lm\" and a formula like y ~ x."
  },
  {
    "objectID": "Lectures/Lecture10/scratch.html#polynomial-glm",
    "href": "Lectures/Lecture10/scratch.html#polynomial-glm",
    "title": "scratch",
    "section": "Polynomial glm",
    "text": "Polynomial glm\n\nggplot(data = gapminder, aes(x = year, y = lifeExp, color = continent)) +\n  geom_point(position = position_jitter(1,0), size = 0.5) +\n  geom_smooth(method = \"glm\", formula = y ~ poly(x, 2)) \n\n\n\n\n\n\n\n\npoly(x, 2) produces a quadratic model which contains a linear term (x) and a quadratic term (x^2)."
  },
  {
    "objectID": "Lectures/Lecture10/scratch.html#more-complex-models",
    "href": "Lectures/Lecture10/scratch.html#more-complex-models",
    "title": "scratch",
    "section": "More Complex Models",
    "text": "More Complex Models\nWhat if we want something more complex than a bivariate model?\nWhat if we have a statistically complex model, like nonlinear probability model or multilevel model?\nWe need to go beyond geom_smooth()!"
  },
  {
    "objectID": "Lectures/Lecture10/scratch.html#but-first-vocab",
    "href": "Lectures/Lecture10/scratch.html#but-first-vocab",
    "title": "scratch",
    "section": "But first, vocab!",
    "text": "But first, vocab!\nWe are often interested in what might happen if some variables take particular values, often ones not seen in the actual data.\n. . .\nWhen we set variables to certain values, we refer to them as counterfactual values or just counterfactuals.\n. . .\nFor example, if we know nothing about a new observation, our prediction for that estimate is often based on assuming every variable is at its mean.\n. . .\nSometimes, however, we might have very specific questions which require setting (possibly many) combinations of variables to particular values and making an estimate or prediction.\n. . .\nProviding specific estimates, conditional on values of covariates, is a nice way to summarize results, particularly for models with unintuitive parameters (e.g.¬†logit models)."
  },
  {
    "objectID": "Lectures/Lecture10/scratch.html#ggeffects-1",
    "href": "Lectures/Lecture10/scratch.html#ggeffects-1",
    "title": "scratch",
    "section": "ggeffects",
    "text": "ggeffects\nIf we want to look at more complex models, we can use ggeffects to create and plot tidy marginal effects.\nThat is, tidy dataframes of ranges of predicted values that can be fed straight into ggplot2 for plotting model results.\nWe will focus on two ggeffects functions:\n\nggpredict() - Computes predicted values for the outcome variable at margins of specific variables.\nplot.ggeffects() - A plot method for ggeffects objects (like ggpredict() output)\n\n\nlibrary(ggeffects)"
  },
  {
    "objectID": "Lectures/Lecture10/scratch.html#quick-simulated-data",
    "href": "Lectures/Lecture10/scratch.html#quick-simulated-data",
    "title": "scratch",
    "section": "Quick Simulated Data",
    "text": "Quick Simulated Data\nTo best show off ggeffects, I need a data frame with numeric and categorical variables with strong relationships. It is easiest to just simulate it:\n\nex_dat &lt;- data.frame(num1 = rnorm(200, 1, 2), \n                     fac1 = sample(c(1, 2, 3), 200, TRUE),\n                     num2 = rnorm(200, 0, 3),\n                     fac2 = sample(c(1, 2))) %&gt;%\n  mutate(yn = num1 * 0.5 + fac1 * 1.1 + num2 * 0.7 +\n              fac2 - 1.5  + rnorm(200, 0, 2)) %&gt;% \n  mutate(yb = as.numeric(yn &gt; mean(yn))) %&gt;%\n  mutate(fac1 = factor(fac1, labels = c(\"A\", \"B\", \"C\")),\n         fac2 = factor(fac2, labels = c(\"Yes\", \"No\")))\nglimpse(ex_dat)\n\nRows: 200\nColumns: 6\n$ num1 &lt;dbl&gt; -0.45014624, 1.03493712, 3.42843174, 1.36083964, 2.76882846, 3.85‚Ä¶\n$ fac1 &lt;fct&gt; C, B, A, A, C, B, B, A, B, A, A, C, B, B, B, C, A, C, B, A, B, B,‚Ä¶\n$ num2 &lt;dbl&gt; 2.6583679, 0.3557909, -5.2896277, -4.4824902, 3.0269356, 1.738611‚Ä¶\n$ fac2 &lt;fct&gt; No, Yes, No, Yes, No, Yes, No, Yes, No, Yes, No, Yes, No, Yes, No‚Ä¶\n$ yn   &lt;dbl&gt; 6.5666766, 5.3085002, -1.9277200, -1.3685167, 6.6159192, 3.143335‚Ä¶\n$ yb   &lt;dbl&gt; 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0,‚Ä¶\n\n\nNow we can get ggpredicting!"
  },
  {
    "objectID": "Lectures/Lecture10/scratch.html#ggpredict",
    "href": "Lectures/Lecture10/scratch.html#ggpredict",
    "title": "scratch",
    "section": "ggpredict()",
    "text": "ggpredict()\nWhen you run ggpredict(), it produces a dataframe with a row for every unique value of a supplied predictor (‚Äúindependent‚Äù) variable (term).\nEach row contains an expected (estimated) value for the outcome (‚Äúdependent‚Äù) variable, plus confidence intervals.\n\nlm_1 &lt;- lm(yn ~ num1 + fac1, data = ex_dat)\nlm_1_est &lt;- ggpredict(lm_1, terms = \"num1\")\n\nIf desired, the argument interval = \"prediction\" will give predicted intervals instead."
  },
  {
    "objectID": "Lectures/Lecture10/scratch.html#ggpredict-output",
    "href": "Lectures/Lecture10/scratch.html#ggpredict-output",
    "title": "scratch",
    "section": "ggpredict() output",
    "text": "ggpredict() output\n\nlm_1_est\n\n# Predicted values of yn\n\nnum1 | Predicted |      95% CI\n------------------------------\n  -6 |     -0.01 | -1.59, 1.57\n  -4 |      0.39 | -0.83, 1.61\n  -2 |      0.79 | -0.12, 1.70\n   0 |      1.19 |  0.48, 1.89\n   2 |      1.58 |  0.87, 2.30\n   4 |      1.98 |  1.05, 2.91\n   6 |      2.38 |  1.13, 3.63\n\nAdjusted for:\n* fac1 = A"
  },
  {
    "objectID": "Lectures/Lecture10/scratch.html#plot-for-ggpredict",
    "href": "Lectures/Lecture10/scratch.html#plot-for-ggpredict",
    "title": "scratch",
    "section": "plot() for ggpredict()",
    "text": "plot() for ggpredict()\nggeffects features a plot() method, plot.ggeffects(), which produces a ggplot when you give plot() output from ggpredict().\n\nplot(lm_1_est)"
  },
  {
    "objectID": "Lectures/Lecture10/scratch.html#grouping-with-ggpredict",
    "href": "Lectures/Lecture10/scratch.html#grouping-with-ggpredict",
    "title": "scratch",
    "section": "Grouping with ggpredict()",
    "text": "Grouping with ggpredict()\nWhen using a vector of terms, ggeffects will plot the first along the x-axis and use others for grouping. Note we can pipe a model into ggpredict()!\n\nglm(yb ~ num1 + fac1 + num2 + fac2, data = ex_dat, family = binomial(link = \"logit\")) %&gt;%\n  ggpredict(terms = c(\"num1\", \"fac1\")) %&gt;% \n  plot()"
  },
  {
    "objectID": "Lectures/Lecture10/scratch.html#faceting-with-ggpredict",
    "href": "Lectures/Lecture10/scratch.html#faceting-with-ggpredict",
    "title": "scratch",
    "section": "Faceting with ggpredict()",
    "text": "Faceting with ggpredict()\nYou can add facet = TRUE to the plot() call to facet over grouping terms.\n\nglm(yb ~ num1 + fac1 + num2 + fac2, data = ex_dat, family = binomial(link = \"logit\")) %&gt;%\n  ggpredict(terms = c(\"num1\", \"fac1\")) %&gt;% \n  plot(facet = TRUE)\n\nData were 'prettified'. Consider using `terms=\"num1 [all]\"` to get\n  smooth plots."
  },
  {
    "objectID": "Lectures/Lecture10/scratch.html#counterfactual-values",
    "href": "Lectures/Lecture10/scratch.html#counterfactual-values",
    "title": "scratch",
    "section": "Counterfactual Values",
    "text": "Counterfactual Values\nYou can add values in square brackets in the terms = argument to specify counterfactual values.\n\nglm(yb ~ num1 + fac1 + num2 + fac2, data = ex_dat, family = binomial(link = \"logit\")) %&gt;%\n  ggpredict(terms = c(\"num1 [-1,0,1]\", \"fac1 [A,B]\")) %&gt;% plot(facet = TRUE)"
  },
  {
    "objectID": "Lectures/Lecture10/scratch.html#representative-values",
    "href": "Lectures/Lecture10/scratch.html#representative-values",
    "title": "scratch",
    "section": "Representative Values",
    "text": "Representative Values\nYou can also use [meansd] or [minmax] to set representative values.\n\nglm(yb ~ num1 + fac1 + num2 + fac2, data = ex_dat, family = binomial(link = \"logit\")) %&gt;%\n  ggpredict(terms = c(\"num1 [meansd]\", \"num2 [minmax]\")) %&gt;% plot(facet = TRUE)"
  },
  {
    "objectID": "Lectures/Lecture10/scratch.html#dot-plots-with-ggpredict",
    "href": "Lectures/Lecture10/scratch.html#dot-plots-with-ggpredict",
    "title": "scratch",
    "section": "Dot plots with ggpredict()",
    "text": "Dot plots with ggpredict()\nggpredict will produce dot plots with error bars for categorical predictors.\n\nlm(yn ~ fac1 + fac2, data = ex_dat) %&gt;% \n  ggpredict(terms = c(\"fac1\", \"fac2\")) %&gt;% \n  plot()\n\nIgnoring unknown labels:\n‚Ä¢ linetype : \"fac2\"\n‚Ä¢ shape : \"fac2\""
  },
  {
    "objectID": "Lectures/Lecture10/scratch.html#notes-on-ggeffects",
    "href": "Lectures/Lecture10/scratch.html#notes-on-ggeffects",
    "title": "scratch",
    "section": "Notes on ggeffects",
    "text": "Notes on ggeffects\nThere is a lot more to the ggeffects package that you can see in the package vignette and the github repository. This includes, but is not limited to:\n\nPredicted values for polynomial and interaction terms\nGetting predictions from models from dozens of other packages\nSending ggeffects objects to ggplot2 to freely modify plots"
  },
  {
    "objectID": "Lectures/Lecture10/scratch.html#pander-regression-tables",
    "href": "Lectures/Lecture10/scratch.html#pander-regression-tables",
    "title": "scratch",
    "section": "pander Regression Tables",
    "text": "pander Regression Tables\nWe‚Äôve used pander to create nice tables for dataframes. But pander has methods to handle all sort of objects that you might want displayed nicely.\nThis includes model output, such as from lm(), glm(), and summary().\n\nlibrary(pander)"
  },
  {
    "objectID": "Lectures/Lecture10/scratch.html#pander-and-lm",
    "href": "Lectures/Lecture10/scratch.html#pander-and-lm",
    "title": "scratch",
    "section": "pander() and lm()",
    "text": "pander() and lm()\nYou can send an lm() object straight to pander:\n\npander(lm_1) # this creates an markdown-formatted chunk of text you can add to your qmd document\n\n\nFitting linear model: yn ~ num1 + fac1\n\n\n¬†\nEstimate\nStd. Error\nt value\nPr(&gt;\n\n\n\n\n(Intercept)\n1.003\n0.3866\n2.594\n0.01019\n\n\nnum1\n0.6407\n0.1047\n6.118\n5.06e-09\n\n\nfac1B\n1.675\n0.5341\n3.137\n0.001972\n\n\nfac1C\n2.16\n0.5349\n4.038\n7.719e-05"
  },
  {
    "objectID": "Lectures/Lecture10/scratch.html#pander-and-summary",
    "href": "Lectures/Lecture10/scratch.html#pander-and-summary",
    "title": "scratch",
    "section": "pander() and summary()",
    "text": "pander() and summary()\nYou can do this with summary() as well, for added information:\n\npander(summary(lm_1))\n\n\n\n\n¬†\nEstimate\nStd. Error\nt value\nPr(&gt;\n\n\n\n\n(Intercept)\n1.003\n0.3866\n2.594\n0.01019\n\n\nnum1\n0.6407\n0.1047\n6.118\n5.06e-09\n\n\nfac1B\n1.675\n0.5341\n3.137\n0.001972\n\n\nfac1C\n2.16\n0.5349\n4.038\n7.719e-05\n\n\n\n\nFitting linear model: yn ~ num1 + fac1\n\n\nObservations\nResidual Std. Error\n\\(R^2\\)\nAdjusted \\(R^2\\)\n\n\n\n\n200\n3.093\n0.2126\n0.2005"
  },
  {
    "objectID": "Lectures/Lecture10/scratch.html#advanced-tables",
    "href": "Lectures/Lecture10/scratch.html#advanced-tables",
    "title": "scratch",
    "section": "Advanced Tables",
    "text": "Advanced Tables\npander tables are great for basic rmarkdown documents, but they‚Äôre not generally publication ready.\nWe‚Äôre going to talk about a few different approaches for making nicer tables:\n\ngt from RStudio for general table construction\nmodelsummary for creating model tables\ngtsummary for creating data summaries"
  },
  {
    "objectID": "Lectures/Lecture10/scratch.html#gt",
    "href": "Lectures/Lecture10/scratch.html#gt",
    "title": "scratch",
    "section": "gt",
    "text": "gt\nIf you need to more customizability or different output types, RStudio‚Äôs gt package is a new and powerful system for creating tables from dataframes. We‚Äôll use dplyr‚Äôs built-in starwars data for some examples.\n\nlibrary(gt)\ntes_chars &lt;- starwars %&gt;% \n  unnest(films) %&gt;% \n  unnest(starships, keep_empty = TRUE) %&gt;% \n  filter(films == \"The Empire Strikes Back\") %&gt;% \n  select(name, species, starships, mass, height) %&gt;%\n  distinct(name, .keep_all = TRUE) %&gt;%\n  mutate(starships = ifelse(name == \"Obi-Wan Kenobi\" | is.na(starships), \n                            \"No Ship\", starships))\nglimpse(tes_chars)\n\nRows: 16\nColumns: 5\n$ name      &lt;chr&gt; \"Luke Skywalker\", \"C-3PO\", \"R2-D2\", \"Darth Vader\", \"Leia Org‚Ä¶\n$ species   &lt;chr&gt; \"Human\", \"Droid\", \"Droid\", \"Human\", \"Human\", \"Human\", \"Wooki‚Ä¶\n$ starships &lt;chr&gt; \"X-wing\", \"No Ship\", \"No Ship\", \"TIE Advanced x1\", \"No Ship\"‚Ä¶\n$ mass      &lt;dbl&gt; 77.0, 75.0, 32.0, 136.0, 49.0, 77.0, 112.0, 80.0, 77.0, 17.0‚Ä¶\n$ height    &lt;int&gt; 172, 167, 96, 202, 150, 182, 228, 180, 170, 66, 170, 183, 20‚Ä¶"
  },
  {
    "objectID": "Lectures/Lecture10/scratch.html#initialize",
    "href": "Lectures/Lecture10/scratch.html#initialize",
    "title": "scratch",
    "section": "Initialize",
    "text": "Initialize\n\n\n\ntes_chars %&gt;%\n  gt() \n\ngt() just renders the dataframe as a table using markdown."
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture5_index.html",
    "href": "Lectures/Lecture5/CSSS508_Lecture5_index.html",
    "title": "Lecture 5",
    "section": "",
    "text": "Importing, Exporting, and Cleaning Data\n\nOctober 28, 2025\n\n\n\n\n\nSlides & Code\nHTML slides ‚Ä¢ Raw qmd file ‚Ä¢ R Code\n\n\n\nData\nBillboard Top 100 (2000) ‚Ä¢ Religion & Income\n\n\n\nSuggested Reading (from R for Data Science (2e)1)\nChapter 8: Data import ‚Ä¢ Chapter 6: Data tidying ‚Ä¢ Chapter 17: Factors ‚Ä¢\nChapter 28: Dates and Times\n\n\n1¬†Hadley Wickham, Mine √áetinkaya-Rundel & Garrett Grolemund\nUseful Resources\n\nCheatsheets\ntidyr ‚Ä¢ readr ‚Ä¢ SAS --&gt; R ‚Ä¢ Stata to R ‚Ä¢ forcats ‚Ä¢ lubridate\n\n\nPackage Websites\ntidyr ‚Ä¢ readr ‚Ä¢ haven ‚Ä¢ readxl ‚Ä¢ googlesheets4 ‚Ä¢ googledrive ‚Ä¢\nforcats ‚Ä¢ lubridate\n\n\nCrowdsource Help\nCS&SS 508 Slack Workspace ‚Ä¢ Posit community ‚Ä¢ Stackoverflow",
    "crumbs": [
      "Lectures",
      "Lecture 5"
    ]
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2_index.html",
    "href": "Lectures/Lecture2/CSSS508_Lecture2_index.html",
    "title": "Lecture 2",
    "section": "",
    "text": "Visualizing Data\n\nOctober 7, 2025\n\n\n\n\n\nSlides & Code\nHTML slides ‚Ä¢ Raw qmd file ‚Ä¢ R Code\n\n\n\nSuggested Reading (from R for Data Science (2e)1)\nBeginner:\nChapter 2: Data Visualization\n\nIntermediate:\nChapter 10: Layers\nChapter 11: Exploratory Data Analysis\nChapter 12: Communication\n\n\n1¬†Hadley Wickham, Mine √áetinkaya-Rundel & Garrett Grolemund\nUseful Resources\n\nCheatsheets\nggplot2\n\n\nMore ggplot2 Resources\nggplot2 Website ‚Ä¢ ggplot2: Elegant Graphics for Data Analysis (3e)\nR Graphics Cookbook ‚Ä¢ ggplot2 extensions ‚Ä¢ awesome ggplot2 2\n2¬†A curated list of awesome ggplot2 tutorials, packages etc.\n\nOther Package Websites\nggrepel ‚Ä¢ geomtextpath ‚Ä¢ ggridges ‚Ä¢ GGally ‚Ä¢ ggcorrplot ‚Ä¢ patchwork\n\nggthemes ‚Ä¢ hrbrthemes ‚Ä¢ urbnthemes ‚Ä¢ bbplot ‚Ä¢ ggpomological\n\n\nOther Readings\nData Visualization: A Practical Introduction 3\nThe Truthful Art: Data, Charts, and Maps for Communication 4\nThe Visual Display of Quantitative Information 5\n3¬†Kieran Healy4¬†Alberto Cairo5¬†Edward Tufte\n\nCrowdsource Help\nCS&SS 508 Slack Workspace ‚Ä¢ Posit community ‚Ä¢ Stackoverflow",
    "crumbs": [
      "Lectures",
      "Lecture 2"
    ]
  },
  {
    "objectID": "Homework/HW7/homework7_key.html",
    "href": "Homework/HW7/homework7_key.html",
    "title": "Homework 7 Key",
    "section": "",
    "text": "Code\nknitr::opts_chunk$set(comment = \"&gt;\")\n\nlibrary(tidyverse)\nlibrary(ggrepel)\nlibrary(ggthemes)\n\nload(url(\"https://github.com/vsass/CSSS508/raw/main/Lectures/Lecture7/data/restaurants.Rdata\"))"
  },
  {
    "objectID": "Homework/HW7/homework7_key.html#footnotes",
    "href": "Homework/HW7/homework7_key.html#footnotes",
    "title": "Homework 7 Key",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nAnything that is separated by spaces counts as a word for this problem.‚Ü©Ô∏é\nNote: To accurately reflect the true average you‚Äôll want to weight this by restaurant: i.e.¬†get the average grade by restaurant first, then get the average of those averages by zip code.‚Ü©Ô∏é\nThere are a few ways to do this. Use the method that makes most sense to you!‚Ü©Ô∏é"
  },
  {
    "objectID": "Homework/HW9/homework9.html",
    "href": "Homework/HW9/homework9.html",
    "title": "Homework 9",
    "section": "",
    "text": "Instructions\nAnswer each of the following questions using the iterative techniques covered in lecture. Be sure to display all your code in the rendered version (use echo: true throughout1).\n1¬†You can make this a global option for your whole document by putting it directly in the YAML of your qmd:\n\n---\ntitle: \"My Document\"\nexecute:\n  echo: true\n---\n\n\n\nExercises\n\nQuestion 1:\nCompute the number of unique values in each column of palmerpenguins::penguins2.\n2¬†You‚Äôll need to download the palmerpenguins package in order to use penguins dataset.\n\nQuestion 2:\nCompute the mean of every column in mtcars.\n\n\nQuestion 3:\nGroup diamonds by cut, clarity, and color then count the number of observations and compute the mean of each numeric column.\n\n\nQuestion 4:\nWhat happens if you use a list of functions in across(), but don‚Äôt name them? How is the output named?\n\n\nQuestion 5:\n\nExplain what each step of the following pipeline does. If you haven‚Äôt seen the function before, look up its help page to learn the specifics of what it does.\n\n\ndiamonds |&gt; \n1  split(diamonds$cut) |&gt;\n  map(\\(df) lm(price ~ carat, data = df)) |&gt; \n  map(summary) |&gt; \n  map_dbl(\"r.squared\")\n\n\n1\n\nA function from base R that does not use tidy evaluation and therefore requires base indexing with $\n\n\n\n\n&gt;      Fair      Good Very Good   Premium     Ideal \n&gt; 0.7383940 0.8509539 0.8581622 0.8556336 0.8670887\n\n\n\n\n\n\n\n\n Before you submit:\n\n\n\nHave you remembered to add embed-resources: true to your YAML?\n\n\n\n\n\nDue Dates\n\n\n\n\n\n\n\n\n\n\n\n\n\n#\nHomework Due\nPeer Review Due\n\n\n\n\n1\n7 October\n12 October\n\n\n2\n14 October\n19 October\n\n\n3\n21 October\n26 October\n\n\n4\n28 October\n2 November\n\n\n5\n11 November\n16 November\n\n\n6\n18 November\n21 November\n\n\n7\n25 November\n30 November\n\n\n8\n2 December\n7 December\n\n\n9\n9 December\n14 December",
    "crumbs": [
      "Homework",
      "Homework 9"
    ]
  },
  {
    "objectID": "Homework/HW8/homework8.html",
    "href": "Homework/HW8/homework8.html",
    "title": "Homework 8",
    "section": "",
    "text": "Instructions\nAnswer each of the following questions. Be sure to display all your code in the rendered version (use echo: true throughout1).\n1¬†You can make this a global option for your whole document by putting it directly in the YAML of your qmd:\n\n---\ntitle: \"My Document\"\nexecute:\n  echo: true\n---\n\n\n\nExercises\n\nQuestion 1:\nGiven a vector of birthdates2, write a function to compute the age in years3.\n2¬†Assume mdy format for this vector.3¬†Depending upon how you want to solve this problem, the lubridate functions today() and time_length() could be useful here :)\n\nQuestion 2:\nFor each of the following functions list all arguments that use tidy evaluation and describe whether they use data-masking or tidy-selection: distinct(), count(), group_by()4, rename_with(), slice_min(), slice_sample().\n4¬†Note: group_by() doesn‚Äôt list what type of tidy evaluation it uses for its ... argument but you can find the answer in the introduction to this article.\n\nQuestion 3:\nBuild up a rich plotting function by incrementally implementing each of the steps below:\n\nDraw a scatterplot given dataset and x and y variables.\nAdd a line of best fit (i.e.¬†a linear model with no standard errors)5.\n\nAdd a title that includes the names of the variables used.\n\n5¬†geom_smooth() has a method and se argument that will be necessary to specify here.Test your function with the built-in cars, swiss, and iris datasets.\n\n\n\n\n\n\n Before you submit:\n\n\n\nHave you remembered to add embed-resources: true to your YAML?\n\n\n\n\n\nDue Dates\n\n\n\n\n\n\n\n\n\n\n\n\n\n#\nHomework Due\nPeer Review Due\n\n\n\n\n1\n7 October\n12 October\n\n\n2\n14 October\n19 October\n\n\n3\n21 October\n26 October\n\n\n4\n28 October\n2 November\n\n\n5\n11 November\n16 November\n\n\n6\n18 November\n21 November\n\n\n7\n25 November\n30 November\n\n\n8\n2 December\n7 December\n\n\n9\n9 December\n14 December",
    "crumbs": [
      "Homework",
      "Homework 8"
    ]
  },
  {
    "objectID": "Homework/HW1/CSSS508_HW1_Example.html",
    "href": "Homework/HW1/CSSS508_HW1_Example.html",
    "title": "CSSS508 Homework 1 Example",
    "section": "",
    "text": "I‚Äôm interested in exploring a dataset from base R called iris. From its documentation I see that it is data about 50 flowers from each of 3 species of iris and their respective measurements of sepal length, sepal width, petal length, and petal width.\nI first want to take a look at a preview of the dataset by making a nice table.\n\n\n\n\n\n\n\n\n\nSepal.Length\nSepal.Width\nPetal.Length\nPetal.Width\nSpecies\n\n\n\n\n1\n5.1\n3.5\n1.4\n0.2\nsetosa\n\n\n2\n4.9\n3.0\n1.4\n0.2\nsetosa\n\n\n3\n4.7\n3.2\n1.3\n0.2\nsetosa\n\n\n4\n4.6\n3.1\n1.5\n0.2\nsetosa\n\n\n5\n5.0\n3.6\n1.4\n0.2\nsetosa\n\n\n6..145\n\n\n\n\n\n\n\n146\n6.7\n3.0\n5.2\n2.3\nvirginica\n\n\n147\n6.3\n2.5\n5.0\n1.9\nvirginica\n\n\n148\n6.5\n3.0\n5.2\n2.0\nvirginica\n\n\n149\n6.2\n3.4\n5.4\n2.3\nvirginica\n\n\n150\n5.9\n3.0\n5.1\n1.8\nvirginica\n\n\n\n\n\n\n\nThe mean petal length is 3.76 but its median petal length is 4.35. It‚Äôs range is 5.9 which additionally suggests a certain degree of spread.\nIt might be useful to look at the distribution to gain a better sense of the variation of this variable.\n\n\n\n\n\n\n\n\n\nThere seems to be a cluster of much smaller petals and then another cluster of average to bigger petals. I wonder how this varies by species‚Ä¶?\n\n\n\n\n\n\n\n\n\nWe can see from this plot that the overall mean and median of petal length is quite misleading! Only the verisicolor species of iris is close to those values while setosa is much mush smaller and virginica is a bit bigger.\nIs there a similar thing happening for sepal length and width? Let‚Äôs look at some basic descriptives of the dataset.\n\n\n\n\n\n\n\n\nSepal.Length\nSepal.Width\nPetal.Length\nPetal.Width\nSpecies\n\n\n\n\nMin. :4.300\nMin. :2.000\nMin. :1.000\nMin. :0.100\nsetosa :50\n\n\n1st Qu.:5.100\n1st Qu.:2.800\n1st Qu.:1.600\n1st Qu.:0.300\nversicolor:50\n\n\nMedian :5.800\nMedian :3.000\nMedian :4.350\nMedian :1.300\nvirginica :50\n\n\nMean :5.843\nMean :3.057\nMean :3.758\nMean :1.199\nNA\n\n\n3rd Qu.:6.400\n3rd Qu.:3.300\n3rd Qu.:5.100\n3rd Qu.:1.800\nNA\n\n\nMax. :7.900\nMax. :4.400\nMax. :6.900\nMax. :2.500\nNA\n\n\n\n\n\n\n\nIt‚Äôs interesting to note with the summary function that for numerical data it‚Äôll calculate the classic 5 statistics used to construct a boxplot plus the mean but for a categorical variable like iris$Species it returns the frequency of each value of the variable.\nThe distribution of sepal length looks wider than sepal width, similar to how it was for those measurements of the petals. Let‚Äôs see how sepal length and width relate to one another graphically.\n\n\n\n\n\n\n\n\n\nThere are still clusters by each species type but for verisicolor and virginica there‚Äôs much more overlap. Overall, there‚Äôs tighter clustering by species for the petal length and width than there is for the sepal length and width."
  },
  {
    "objectID": "Homework/HW1/homework1.html",
    "href": "Homework/HW1/homework1.html",
    "title": "Homework 1",
    "section": "",
    "text": "Instructions\nWrite up a .qmd file showing some exploratory analyses of the Swiss fertility data1. Upload both the .qmd file and the .html file to Canvas. You must upload BOTH for credit.\n1¬†swiss ia a built-in dataset in R. You can print the whole dataset by running swiss in your console. Use names(swiss) to see all available variable names. Running View(swiss) will pop up an interactive data viewer window.2¬†You can explore all built-in plots available in base R by running library(help = \"graphics\") in the console or check out sections 4.2 & 4.3 of An Introduction to R.3¬†You can keep this simple (like the example from lecture) or make it as complex as you‚Äôd like!Mix in-line R calculations, R output, and plots with text describing the relationships you see. Include at least one plot2 and one table using the gt package3. You are encouraged to include more! You must use in-line R calculations/references at least once (e.g.¬†functions like nrow(), mean(), sd(), cor(), median(), min()) and may not hard-code any numbers referenced in your text.\nYour document should be pleasant for a peer to look at, with some organization using sections or lists, and all plots labeled clearly. Use chunk options echo and output to limit the code/output you show in the .html. Discussion of specific values should be summarized in sentences in your text‚Äînot as printed code and output‚Äîand rounded so as not to be absurdly precise (e.g.¬†round x with round(x, 2)).\n\n\n\n\n\n\n Before you submit:\n\n\n\nHave you remembered to add embed-resources: true to your YAML?\n\n\n\n\nTemplate\nrendered html file ‚Ä¢ raw qmd file\n\n\nExample\nrendered html file ‚Ä¢ raw qmd file\n\n\nDue Dates\n\n\n\n\n\n\n\n\n\n\n\n\n\n#\nHomework Due\nPeer Review Due\n\n\n\n\n1\n7 October\n12 October\n\n\n2\n14 October\n19 October\n\n\n3\n21 October\n26 October\n\n\n4\n28 October\n2 November\n\n\n5\n11 November\n16 November\n\n\n6\n18 November\n21 November\n\n\n7\n25 November\n30 November\n\n\n8\n2 December\n7 December\n\n\n9\n9 December\n14 December",
    "crumbs": [
      "Homework",
      "Homework 1"
    ]
  },
  {
    "objectID": "Homework/HW6/homework6.html",
    "href": "Homework/HW6/homework6.html",
    "title": "Homework 6",
    "section": "",
    "text": "Instructions\nAnswer each of the following questions. Be sure to display all your code in the rendered version (use echo: true throughout1).\n1¬†You can make this a global option for your whole document by putting it directly in the YAML of your qmd:\n\n---\ntitle: \"My Document\"\nexecute:\n  echo: true\n---\n\n\n\nExercises\n\nQuestion 1: Vectors\n\nLETTERS2 contains the 26 capital letters in order. Use LETTERS and [ ] to create a vector called vec_char of the first 10 capital letters.\nletters contains the 26 lowercase letters in order. Use factor, letters, and [ ] to create a factor variable called vec_fac using the last 10 lower case letters.\nUse rev() to reverse the order of vec_fac.\nIf you used c() to combine vec_fac with a vector of integers, what class of vector would you get? Why?\nConsider the vector c(TRUE, FALSE, TRUE, TRUE). In words, what happens to its values when you try to convert it to numeric? To character? To numeric and then character?\n\n2¬†LETTERS and letters are built-in vectors in R that you can use without loading any external packages.\n\nQuestion 2: Matrices\n\nUse matrix() to create a matrix called matrix_mixed with 10 rows and four columns filled with NA. What data type does this matrix contain3?\nAdd the numbers 1 through 10 to the first column of this empty matrix and get it‚Äôs data type.\nAdd 10 random deviates from the normal distribution4 to the second column and get it‚Äôs data type.\nAssign vec_char and vec_fac to the third and fourth columns of matrix_mixed using one assignment operator. What is the data type of the matrix now?\nExplain this progression of data types from part i to part iv.\nLook at matrix_mixed. What happened to the letters in column 4?\nRun this code in your console: matrix(letters, ncol = 2). It consists of letters a to m in the first column and n to z in the second column. How can you change this code to make it go in alphabetical order left to right, top to bottom instead?\nConsider the code below:\n\n3¬†Use typeof() to find this.4¬†Using rnorm().\nmath_matrix &lt;- matrix(1:5, nrow = 5, ncol = 5)\nmath_vec &lt;- 1:5\n\nWhat happens when you add math_matrix and math_vec to one another? What‚Äôs the difference between the results of math_matrix %*% math_vec and math_matrix * math_vec5?\n5¬†Run all three calculations for this problem in your console, no need to include them in your qmd\n\nQuestion 3: Lists\n\nCreate a list called first_list that contains letters, math_matrix, the number 17, and vec_fac (in that order) and assign them their vector names.\nIndex first_list to pull out just the letters \"l\" \"m\" \"n\" \"o\" \"p\".\nCreate another list called second_list and put math_vec and vec_char as named elements in it.\nAdd second_list as the fifth element of first_list.\nIndex into first_list and pull out the capital A from vec_char.\nRun the following code:\n\n\nlm_output &lt;- lm(mpg ~ wt, data = mtcars)\nlm_output\n\n\nCall:\nlm(formula = mpg ~ wt, data = mtcars)\n\nCoefficients:\n(Intercept)           wt  \n     37.285       -5.344  \n\n\nHow many elements does lm_output have and what are the dimensions of the model element?\n\n\nQuestion 4: Data Frames\n\nUse data.frame() to combine vec_char (first column) and math_vec (second column) into df_1.\nLook at df_1. What happened with math_vec in the second column? Why?\nUse $ to add vec_fac from first_list to df_1 and call it fac_letters.\nUse names(), colnames(), and rownames() on df_1. How does this compare to the behavior of these functions on lists and matrices?\nSimilarly, how do the results of length() and dim() differ between data frames, lists, matrices, and vectors?\n\n\n\n\n\n\n\n Before you submit:\n\n\n\nHave you remembered to add embed-resources: true to your YAML?\n\n\n\n\n\nDue Dates\n\n\n\n\n\n\n\n\n\n\n\n\n\n#\nHomework Due\nPeer Review Due\n\n\n\n\n1\n7 October\n12 October\n\n\n2\n14 October\n19 October\n\n\n3\n21 October\n26 October\n\n\n4\n28 October\n2 November\n\n\n5\n11 November\n16 November\n\n\n6\n18 November1\n21 November\n\n\n7\n25 November\n30 November\n\n\n8\n2 December\n7 December\n\n\n9\n9 December\n14 December\n\n\n\n1 We will cover content for Homework 6 two weeks prior to its due date",
    "crumbs": [
      "Homework",
      "Homework 6"
    ]
  },
  {
    "objectID": "Homework/HW3/answer_key_formatting.html",
    "href": "Homework/HW3/answer_key_formatting.html",
    "title": "answer_key_formatting",
    "section": "",
    "text": "Key\nClick link above for answers to homework 3.\n\n\nTips & Tricks\nAbove is a compiled list of all the tips & tricks you submitted for this homework. Hope it helps!"
  },
  {
    "objectID": "Homework/HW3/homework3_key.html",
    "href": "Homework/HW3/homework3_key.html",
    "title": "Homework 3 Key",
    "section": "",
    "text": "Answer 1\nBelow is one possible way you may have organized your folder for this class into a project/series of projects. Note: for whichever folder you set as a project(s) you will have a .Rproj file which maintains specific project settings. That project folder is your default working directory when you‚Äôre doing any work within this folder (including within subfolders). Individual .qmd files will have a working directory of the specific folder they are in when they are rendered. Keep this in mind when trying to run code from a source document saved in a folder separate from its associated project folder.\n    CSSS508\n      Week1/\n        homework1.qmd\n        lab1.qmd\n        Week1.RProj\n      Week2/\n        homework2.qmd\n        lab2.qmd\n        Week2.RProj\n      Week3/\n        homework3.qmd\n        lab3.qmd\n        Week3.RProj\n\n\n\nAnswer 2\n\n1(x &lt;- rnorm(20, 10, 5))\n\n\n1\n\nIf you want to simultaneously create and call an object to see what it looks like you can put parentheses around the entire assignment and it will be created and called in one step!\n\n\n\n\n&gt;  [1] 19.475369 11.844331  5.964080 13.288929  7.498921 11.928206 12.055033\n&gt;  [8] 14.830171 18.446140 11.987418 17.098565 12.062338  8.918627 11.253752\n&gt; [15]  8.073895  8.136099 12.469007 10.696738 14.059436 12.448869\n\n\n\nrnorm takes a number of observations (n) and a specified mean (mean) and standard deviation (sd). It returns n number of random deviates from the normal distribution with the specified mean and standard deviation.\nn is required but mean and sd are optional. If they are not specified they default to 0 and 1 respectively.\nrandom\n\n\n\n2x[-20]\n3x[c(1:19)]\n4x[c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19)]\n\n\n2\n\nSimplest approach\n\n3\n\nAlso a fairly straightforward approach\n\n4\n\nMore tedious approach\n\n\n\n\n\n\n&gt;  [1] 19.475369 11.844331  5.964080 13.288929  7.498921 11.928206 12.055033\n&gt;  [8] 14.830171 18.446140 11.987418 17.098565 12.062338  8.918627 11.253752\n&gt; [15]  8.073895  8.136099 12.469007 10.696738 14.059436\n\n\n\n\n\n\n5x[x &gt; 10]\n\n\n5\n\nWhen writing a conditional argument you always include the object you‚Äôre evaluating. This also allows you to make comparisons of x to conditional statements of different vectors of the same length. See example below.\n\n\n\n\n&gt;  [1] 19.47537 11.84433 13.28893 11.92821 12.05503 14.83017 18.44614 11.98742\n&gt;  [9] 17.09857 12.06234 11.25375 12.46901 10.69674 14.05944 12.44887\n\n\nExample of indexing with another variable‚Äôs condition:\n\n6(a &lt;- rnorm(20, 7, 5))\n\n\n6\n\nCreating another 20 element length vector\n\n\n\n\n&gt;  [1]  3.6320570  3.5437470  7.3533188 13.6841148  5.7035996  9.8471221\n&gt;  [7] 13.0806977 17.8833714  7.2954685 13.0390650 -0.6993762  0.7870445\n&gt; [13]  5.8895860  3.5793913  3.2743381 10.2234107  9.8446188 11.4392605\n&gt; [19] -2.5565371  6.6083716\n\n\n\n7x[a &lt; 5]\n\n\n7\n\nThe numerical indices that evaluate to TRUE for a &lt; 5 will be the same indices returned of x in this indexing call.\n\n\n\n\n&gt; [1] 19.475369 11.844331 17.098565 12.062338 11.253752  8.073895 14.059436\n\n\n\n\n\nAnswer 3\n\nggplot(mpg, aes(x = class)) +\n  geom_bar() \n\n\n\n\n\n\n\n\n\n\n\nggplot(mpg, aes(x = cty, y = hwy)) +\n  geom_point() \n\n\n\n\n\n\n\n\n\n\n\nggsave(\"mpg-plot.png\")\n\n\nThe second plot is saved because the default for ggsave() when not explicitly given a plot object as the second argument is to save the last plot displayed.\nThe plot image mpg-plot.png should have been added to your current project folder. Note: If your project is at the course level and you‚Äôre running this interactively, it will be saved in the overall course folder. When you render the file for homework3.qmd it will be saved in whichever folder that file is saved (i.e.¬†the project folder is always the working durectory when you‚Äôre running code interactively in an R session. Each rendered file has a working directory of whichever folder they are saved to).\n\n    CSSS508\n      Week1/\n        homework1.qmd\n        lab1.qmd\n        Week1.RProj\n      Week2/\n        homework2.qmd\n        lab2.qmd\n        Week2.RProj\n      Week3/\n        homework3.qmd\n        lab3.qmd\n        mpg-plot.png\n        Week3.RProj\n\n\n\nAnswer 4\nOne of my favorite keyboard shortcuts is multi-cursor editing which is demonstrated in this subsection. If you use Ctrl + Alt_left + Mouse_left you can create new cursors wherever you click your mouse. This then allows you to type something once and have it repeated wherever the cursors are.\n\n\n\nAnswer 5\n\ny &lt;- tibble(a = seq(1, 10, 2), \n            b = c(\"apple\", \"banana\", \"strawberry\", \"peach\", \"mango\"), \n            c = c(rep(TRUE, 3), rep(FALSE, 2)))\ny\n\n&gt; # A tibble: 5 √ó 3\n&gt;       a b          c    \n&gt;   &lt;dbl&gt; &lt;chr&gt;      &lt;lgl&gt;\n&gt; 1     1 apple      TRUE \n&gt; 2     3 banana     TRUE \n&gt; 3     5 strawberry TRUE \n&gt; 4     7 peach      FALSE\n&gt; 5     9 mango      FALSE\n\n\n\nseq creates a sequence of numbers from the first argument from to the second argument to by increments of the third argument by.\nrep repeats the first argument x by the second argument which can be the integer number of times, length.out (length of final vector), or each (how many times each element of x should be repeated).\n\n\n\ny[c(2, 5), 2]\n\n&gt; # A tibble: 2 √ó 1\n&gt;   b     \n&gt;   &lt;chr&gt; \n&gt; 1 banana\n&gt; 2 mango\n\n\n\n\n\n\ny$c\n\n&gt; [1]  TRUE  TRUE  TRUE FALSE FALSE\n\n\n\ny[3:5, ] prints out the 3rd, 4th, and 5th rows and : is a shortcut for giving a sequence from the first number (on the left) to the second number (on the right) in increments of 1 or -1."
  },
  {
    "objectID": "Homework/HW4/homework4_key.html",
    "href": "Homework/HW4/homework4_key.html",
    "title": "Homework 4 Key",
    "section": "",
    "text": "Code\nlibrary(tidyverse)\nlibrary(ggthemes)\nlibrary(nycflights13)\nlibrary(scales)\nlibrary(gt)\n\n\n\nAnswer 1\nChoose an airport outside New York, and count how many flights went to that airport from NYC in 2013. How many of those flights started at JFK, LGA, and EWR respectively?\n\n\nCode\nsd_flights &lt;- flights |&gt; \n  filter(dest == \"SAN\") |&gt; \n  summarize(n = n(), \n1            .by = origin)\n\n\n\n1\n\nAn alternative to this summarize call would be to call count(origin).\n\n\n\n\nThere were 2,737 total flights from New York to San Diego. 1,603 of those flights originated from JFK and 1,134 from EWR.1\n1¬†To add various punctuation to inline numeric values try the number function from the scales package.\n\nAnswer 2\nThe variable arr_delay contains arrival delays in minutes (negative values represent early arrivals). Make a ggplot histogram displaying arrival delays for 2013 flights from NYC to the airport you chose.\n\n\nCode\nflights |&gt; \n  filter(dest == \"SAN\") |&gt; \n  ggplot(aes(x = arr_delay)) +\n  geom_histogram() + \n1  geom_vline(xintercept = 0, color = \"#e15759\") +\n  labs(title = \"Arrival delays from NYC airports to SAN in 2013\",\n       x = \"Arrival delays (minutes)\",\n       y = \"Count\") +\n  theme_tufte(base_size = 14) + \n  theme(plot.background = element_rect(fill = \"#f6f7f9\", \n2                                       color = NA))\n\n\n\n1\n\ngeom_vline adds a vertical line to your plot which can be useful for demarcating comparison or threshold values.\n\n2\n\nChanging the background color of my plot to match the website‚Äôs color using fill and removing the border of the plot using color.\n\n\n\n\n\n\n\n\n\n\n\n\n\nAnswer 3\nUse left_join to add weather data at departure to the subsetted data. If time_hour didn‚Äôt exist in one or both of these datasets, which variables would you need to merge on? Calculate the mean temperature by month at departure (temp) across all flights.\n\n\nCode\nflights |&gt; \n  filter(dest == \"SAN\") |&gt; \n  left_join(weather) |&gt; \n1  summarize(avg_temp = mean(temp, na.rm = TRUE) |&gt; round(2) |&gt; number(suffix = \"¬∞F\"),\n            .by = month) |&gt; \n  arrange(month) |&gt; \n2  gt() |&gt;\n  cols_align(align = \"center\") |&gt;\n  cols_label(month = \"Month\",\n             avg_temp = \"Average Temperature\") |&gt;\n  tab_options(table.background.color = \"#f6f7f9\")\n\n\n\n1\n\nWhen creating the mean temperature I also chose to round to two decimal places with round() and add the suffix ¬∞F with the number function from the scales package. This level of detail is not necessary for this assignment but it illustrates additional options available to you in the scales package.\n\n2\n\nMaking the table a bit nicer looking (again, not necessary here)\n\n\n\n\n\n\n\n\n\n\nMonth\nAverage Temperature\n\n\n\n\n1\n37¬∞F\n\n\n2\n36¬∞F\n\n\n3\n41¬∞F\n\n\n4\n54¬∞F\n\n\n5\n64¬∞F\n\n\n6\n74¬∞F\n\n\n7\n82¬∞F\n\n\n8\n77¬∞F\n\n\n9\n70¬∞F\n\n\n10\n61¬∞F\n\n\n11\n46¬∞F\n\n\n12\n40¬∞F\n\n\n\n\n\n\n\nIf time_hour didn‚Äôt exist in one of both of these datasets you would have to join on origin, year, month, day, and hour.\n\n\nAnswer 4\nInvestigate if there is a relationship between departure delay (dep_delay) and precipitation (precip) in the full dataset. Is the relationship different between JFK, LGA, and EWR? I suggest answering this question by making a plot and writing down a one-sentence interpretation2.\n2¬†Hint: Read about geom_smooth() and consider how you might use it with the argument method = \"lm\" to plot a relationship between these two variables.\n\nCode\nflights |&gt; \n  left_join(weather) |&gt; \n  ggplot(aes(x = precip, \n             y = dep_delay)) + \n1  geom_jitter(alpha = 0.1) +\n2  geom_smooth(method = \"lm\") +\n  labs(title = \"Does precipitation increase the likelihood of departure delays?\",\n       x = \"Precipitation (in inches)\",\n       y = \"Departure delay (in minutes)\") + \n  theme_tufte(base_size = 14) + \n  theme(plot.background = element_rect(fill = \"#f6f7f9\", \n                                       color = NA))\n\n\n\n1\n\nIt can be helpful to make all points transparent if there is extreme over-plotting like in this plot. It allows you see more clearly see where there is over-plotting.\n\n2\n\nAdding a regression line allows for better visualization of the relationship between precipitation and departure delays.\n\n\n\n\n\n\n\n\n\n\n\nIt looks like there is a slightly positive relationship between precipitation and the length of a departure delay.\n\n\nCode\nflights |&gt; \n  left_join(weather) |&gt; \n  ggplot(aes(x = precip, \n             y = dep_delay, \n1             color = origin,\n             linetype = origin)) +\n2  geom_jitter(shape = 1) +\n  geom_smooth(method = \"lm\", \n              fill = \"#f6f7f9\") + \n3  scale_color_manual(values = c(\"EWR\" = \"#fdc57e\",\n                                \"JFK\" = \"#648f7b\",\n                                \"LGA\" = \"#66629c\")) +\n  labs(title = \"Does precipitation increase the likelihood of departure delays?\",\n       x = \"Precipitation (in inches)\",\n       y = \"Departure delay (in minutes)\") + \n  theme_tufte(base_size = 14) + \n  theme(plot.background = element_rect(fill = \"#f6f7f9\", \n                                       color = NA), \n        legend.position = \"bottom\")\n\n\n\n1\n\nJust added the mapping aesthetic by color and linetype to visualize this by origin airport.\n\n2\n\nAn alternative to using alpha to facilitate viewing over-plotted points is to use a shape that only applies color to the outline, rather than the whole point shape.\n\n3\n\nAdding custom colors\n\n\n\n\n\n\n\n\n\n\n\nWhen broken down by origin airport it looks like this slight positive association is just a bit larger for JFK and LGA than it is for EWR."
  },
  {
    "objectID": "Homework/HW4/homework4_key.html#footnotes",
    "href": "Homework/HW4/homework4_key.html#footnotes",
    "title": "Homework 4 Key",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nTo add various punctuation to inline numeric values try the number function from the scales package.‚Ü©Ô∏é\nHint: Read about geom_smooth() and consider how you might use it with the argument method = \"lm\" to plot a relationship between these two variables.‚Ü©Ô∏é"
  },
  {
    "objectID": "Homework/HW5/homework5_key.html",
    "href": "Homework/HW5/homework5_key.html",
    "title": "Homework 5 Key",
    "section": "",
    "text": "Code\nknitr::opts_chunk$set(comment = \"&gt;\")\nlibrary(tidyverse)\nlibrary(ggrepel)\nlibrary(ggthemes)\n\n\n\nAnswer 2\nRead in the data, clean up the names, and pivot it in a way so the first few rows look like this:\n\n\nCode\nbillboard &lt;- read_csv(\"billboard_top100.csv\") \nbillboard_tidy &lt;- billboard |&gt; \n  pivot_longer(starts_with(\"wk\"), \n               names_to = \"week\", \n               values_to = \"rank\", \n               values_drop_na = TRUE, \n               names_prefix = \"wk\", \n               names_transform = list(week = as.integer)) |&gt; \n  janitor::clean_names() \nbillboard_tidy\n\n\n&gt; # A tibble: 5,307 √ó 6\n&gt;    artist  track                   time   date_entered  week  rank\n&gt;    &lt;chr&gt;   &lt;chr&gt;                   &lt;time&gt; &lt;date&gt;       &lt;int&gt; &lt;dbl&gt;\n&gt;  1 2 Pac   Baby Don't Cry (Keep... 04:22  2000-02-26       1    87\n&gt;  2 2 Pac   Baby Don't Cry (Keep... 04:22  2000-02-26       2    82\n&gt;  3 2 Pac   Baby Don't Cry (Keep... 04:22  2000-02-26       3    72\n&gt;  4 2 Pac   Baby Don't Cry (Keep... 04:22  2000-02-26       4    77\n&gt;  5 2 Pac   Baby Don't Cry (Keep... 04:22  2000-02-26       5    87\n&gt;  6 2 Pac   Baby Don't Cry (Keep... 04:22  2000-02-26       6    94\n&gt;  7 2 Pac   Baby Don't Cry (Keep... 04:22  2000-02-26       7    99\n&gt;  8 2Ge+her The Hardest Part Of ... 03:15  2000-09-02       1    91\n&gt;  9 2Ge+her The Hardest Part Of ... 03:15  2000-09-02       2    87\n&gt; 10 2Ge+her The Hardest Part Of ... 03:15  2000-09-02       3    92\n&gt; # ‚Ñπ 5,297 more rows\n\n\n\n\nAnswer 3\nCreate a variable named date that corresponds to the week based on the date_entered.\n\n\nCode\nbillboard_tidy_date &lt;- billboard_tidy |&gt; \n1  mutate(date = if_else(week == 1,\n                       date_entered,\n                       date_entered + weeks(x = week - 1)))\nbillboard_tidy_date\n\n\n\n1\n\nThis if_else basically says, ‚Äúif week is equal to 1 then assign the date_entered value to date. Otherwise, add the number of weeks minus 1 to the date_entered value (i.e.¬†for the second week you would want to add 2 - 1 or 1 week to the date_entered value).\n\n\n\n\n&gt; # A tibble: 5,307 √ó 7\n&gt;    artist  track                   time   date_entered  week  rank date      \n&gt;    &lt;chr&gt;   &lt;chr&gt;                   &lt;time&gt; &lt;date&gt;       &lt;int&gt; &lt;dbl&gt; &lt;date&gt;    \n&gt;  1 2 Pac   Baby Don't Cry (Keep... 04:22  2000-02-26       1    87 2000-02-26\n&gt;  2 2 Pac   Baby Don't Cry (Keep... 04:22  2000-02-26       2    82 2000-03-04\n&gt;  3 2 Pac   Baby Don't Cry (Keep... 04:22  2000-02-26       3    72 2000-03-11\n&gt;  4 2 Pac   Baby Don't Cry (Keep... 04:22  2000-02-26       4    77 2000-03-18\n&gt;  5 2 Pac   Baby Don't Cry (Keep... 04:22  2000-02-26       5    87 2000-03-25\n&gt;  6 2 Pac   Baby Don't Cry (Keep... 04:22  2000-02-26       6    94 2000-04-01\n&gt;  7 2 Pac   Baby Don't Cry (Keep... 04:22  2000-02-26       7    99 2000-04-08\n&gt;  8 2Ge+her The Hardest Part Of ... 03:15  2000-09-02       1    91 2000-09-02\n&gt;  9 2Ge+her The Hardest Part Of ... 03:15  2000-09-02       2    87 2000-09-09\n&gt; 10 2Ge+her The Hardest Part Of ... 03:15  2000-09-02       3    92 2000-09-16\n&gt; # ‚Ñπ 5,297 more rows\n\n\n\n\nAnswer 4\nCreate a dataset of the song(s) with the most weeks in the top 3 by month of 2000.\n\n\nCode\nbillboard_top3_month &lt;- billboard_tidy_date |&gt; \n2  mutate(month = month(date),\n3         year = year(date),\n4         top3 = if_else(rank &lt;= 3 & year == 2000, 1, 0)) |&gt;\n5  mutate(peak_weeks = sum(top3),\n         .by = c(month, artist, track)) |&gt;\n6  slice_max(peak_weeks,\n            by = month) |&gt;\n7  distinct(month, artist, track, peak_weeks) |&gt;\n8  arrange(month)\nbillboard_top3_month\n\n\n\n2\n\nWe need to be able to filter rows by month so we need to create a month variable from out date variable.\n\n3\n\nThis dataset is about the 2000 top 100 but many of these songs charted before or after that year. Therefore, we will need a variable for year as well so we make sure we‚Äôre finding the songs that charted in the months of 2000.\n\n4\n\nTo create our top3 indicator we provide the two conditions that the rank for that observation is less than or equal to 3 AND the year is 2000. If so, top3 will be assigned a value of 1 and if not it will get a value of 0.\n\n5\n\nTo filter for the most weeks in the top 3 we need to count how many weeks a song was in the top 3, grouped by month, song, and artist.\n\n6\n\nThen, by month we can slice the song(s) with the most weeks in the top 3.\n\n7\n\nNow we just want the name of the artist, song, the month they were charting in the top 3 for the most weeks, and the number of weeks\n\n8\n\nTo see this in chronological order we want to arrange by the month\n\n\n\n\n&gt; # A tibble: 19 √ó 4\n&gt;    month artist              track                   peak_weeks\n&gt;    &lt;dbl&gt; &lt;chr&gt;               &lt;chr&gt;                        &lt;dbl&gt;\n&gt;  1     1 Aguilera, Christina What A Girl Wants                3\n&gt;  2     2 Savage Garden       I Knew I Loved You               4\n&gt;  3     3 Lonestar            Amazed                           4\n&gt;  4     4 Hill, Faith         Breathe                          5\n&gt;  5     4 Santana             Maria, Maria                     5\n&gt;  6     5 Hill, Faith         Breathe                          4\n&gt;  7     5 Santana             Maria, Maria                     4\n&gt;  8     6 Aaliyah             Try Again                        2\n&gt;  9     6 Anthony, Marc       You Sang To Me                   2\n&gt; 10     6 Hill, Faith         Breathe                          2\n&gt; 11     6 Santana             Maria, Maria                     2\n&gt; 12     6 Vertical Horizon    Everything You Want              2\n&gt; 13     7 Aaliyah             Try Again                        4\n&gt; 14     8 Sisqo               Incomplete                       4\n&gt; 15     8 matchbox twenty     Bent                             4\n&gt; 16     9 Janet               Doesn't Really Matte...          5\n&gt; 17    10 Madonna             Music                            4\n&gt; 18    11 Creed               With Arms Wide Open              4\n&gt; 19    12 Destiny's Child     Independent Women Pa...          5\n\n\n\n\nAnswer 5\nPick one month of 2000 and visualize the entire charting trajectory of the songs that spent at least 1 week in the top 3 during that month.\n\n\nCode\nbillboard_top3_month_viz &lt;- billboard_tidy_date |&gt; \n  mutate(month = month(date),\n         year = year(date),\n         top3 = if_else(rank &lt;= 3 & year == 2000, 1, 0)) |&gt; \n9  mutate(month_peak = ifelse(top3 == 1, month, NA),\n         .by = c(month, artist, track)) |&gt; \n10  filter(any(month_peak == 4),\n         .by = c(track, artist)) \n\ndate_order &lt;- billboard_top3_month_viz |&gt; \n  filter(date == date(\"2000-05-06\")) |&gt; \n  arrange(desc(rank))\n\nggplot(billboard_top3_month_viz, aes(date, rank, group = track, color = artist)) + \n11  annotate(geom = \"rect\", xmin = ymd(\"2000-04-01\"), xmax = ymd(\"2000-05-01\"), ymin = 0, ymax = 85,\n           fill = \"#59a14f\", alpha = 0.25) +\n12  geom_line(show.legend = TRUE) +\n13  geom_label_repel(data = billboard_top3_month_viz |&gt; slice_max(date, by = track),\n                   aes(label = track), \n14                   show.legend = FALSE) +\n15  scale_color_manual(\"Artist\", values = c(\"#4e79a7\",\"#f28e2c\",\"#e15759\",\"#76b7b2\")) +\n  labs(title = \"Billboard Top 100 Trajectory for Songs that Hit Top 3 During April 2000\", \n       x = \"Date\", \n       y = \"Rank\", \n       caption = \"Note: April shaded in green\") + \n  theme_tufte(base_size = 14) + \n16  theme(legend.position = c(0.85, 0.85),\n17        legend.title.align = 0.5,\n18        legend.box.background = element_rect(colour = \"black\", fill = \"#f6f7f9\"),\n19        plot.background = element_rect(fill = \"#f6f7f9\", color = \"#f6f7f9\"))\n\n\n\n9\n\nIn order to visualize the entire trajectory, we need to have a variable that indicates when a song was charting in the top 3\n\n10\n\nThis allows us to filter by each song whether any of the weeks charted in the top 3 for the month we‚Äôre interested in. Without these two steps we could only filter for the weeks in which they were charting and therefore couldn‚Äôt plot their entire ranking trajectory.\n\n11\n\nShading the region for April for reference.\n\n12\n\nWant the legend for the line to appear.\n\n13\n\nNeed to use a subset of the data otherwise each row will try to plot a label; I picked the last charting date for each song.\n\n14\n\nWanted to remove the legend for the label (a lower-case ‚Äúa‚Äù).\n\n15\n\nSpecifying the colors I want to use for the 4 different lines.\n\n16\n\nMoving the legend to maximize plotting space.\n\n17\n\nCentering the legend title in the legend box.\n\n18\n\nPutting a black border around the legend.\n\n19\n\nChanging the plot color to the same color as the website."
  },
  {
    "objectID": "Homework/HW2/homework2.html",
    "href": "Homework/HW2/homework2.html",
    "title": "Homework 2",
    "section": "",
    "text": "Instructions\nIn this homework, you‚Äôll pose a question regarding the Gapminder dataset and investigate it graphically. Rather than using the gapminder package like we did in lecture, you‚Äôll want to use the dslabs package1, which has a larger subset of the Gapminder data (i.e.¬†more observations and variables).\n1¬†Remember to install the package in your console first (not in your .qmd file) and then load it in your .qmd file with the library() function.\nAt the beginning of your document, write down a research question that is based on this larger version of the Gapminder dataset2 (e.g., ‚ÄúHow does population change over time in different countries?‚Äù)\nCreate 3-6 plots to answer/investigate your research question. Consider histograms (geom_histogram()), scatterplots (geom_point()), or lineplots (geom_line()).\nBe sure all titles, axes, and legends are clearly labelled (no raw variable names).\nInclude at least one plot with facet_wrap() or facet_grid().\nYou can use other geoms like bar charts or box plots, add meaningful vertical or horizontal lines, etc. You may find this data visualization cheat sheet helpful.\n\n2¬†Run dslabs::gapminder in the console to read descriptions of all available variables.Your document should be pleasant for a peer to look at, with some organization. You must write up your observations in words as well as showing the graphs. Upload both the .qmd file and the .html file to Canvas.\nOptional: If you‚Äôd like to compare several specific countries, you can adapt the following pseudo code3 below to create a subset of the data with as many countries as you like. Replace \"country1\" et al.¬†with the country name as it appears in the dataset. Use unique(gapminder$country) to see a complete list of all the countries available.\n3¬†We‚Äôll cover how to do this type of data manipulation in Week 4.\nsubset &lt;- gapminder |&gt; \n1  filter(country %in% c(\"county1\", \"country2\", \"country3\"))\n\n\n1\n\nfilter() filters the rows of the dataset gapminder based upon a logical condition. %in% creates a logical vector the same length as country, evaluating whether each element in country matches any of the available values in the vector to its right (in this case, country1, country2, or country3).\n\n\n\n\n\n\n\n\n\n\n Before you submit:\n\n\n\nHave you remembered to add embed-resources: true to your YAML?\n\n\n\n\nDue Dates\n\n\n\n\n\n\n\n\n\n\n\n\n\n#\nHomework Due\nPeer Review Due\n\n\n\n\n1\n7 October\n12 October\n\n\n2\n14 October\n19 October\n\n\n3\n21 October\n26 October\n\n\n4\n28 October\n2 November\n\n\n5\n11 November\n16 November\n\n\n6\n18 November\n21 November\n\n\n7\n25 November\n30 November\n\n\n8\n2 December\n7 December\n\n\n9\n9 December\n14 December",
    "crumbs": [
      "Homework",
      "Homework 2"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "CS&SS 508",
    "section": "",
    "text": "Instructor:\nVictoria (Vic) Sass\n\n\nLecture:\nTuesdays 4:30-6:20pm\n\n\nLocation:\nRaitt 121\n\n\nOffice Hours:\nWednesdays 1-3pm on Zoom  (link on Canvas)"
  },
  {
    "objectID": "Homework/HW5/homework5.html",
    "href": "Homework/HW5/homework5.html",
    "title": "Homework 5",
    "section": "",
    "text": "Data\nbillboard_top100.csv\n\n\nInstructions\nAnswer each of the following questions. Be sure to display all your code in the rendered version (use echo: true throughout1).\n1¬†You can make this a global option for your whole document by putting it directly in the YAML of your qmd:\n\n---\ntitle: \"My Document\"\nexecute:\n  echo: true\n---\n\n\n\nExercises\n\nDownload the billboard data set introduced in lecture (above) to the same folder where you‚Äôre saving your qmd for this homework2.\nRead in the data, clean up the names, and pivot it in a way so the first few rows look like this:\n\n2¬†If your project directory is different from the directory where you‚Äôll be saving these two files, you should use the here() package to be able to run code interactively and knit your .qmd without conflict\n\n&gt; # A tibble: 5,307 √ó 6\n&gt;    artist  track                   time   date_entered  week  rank\n&gt;    &lt;chr&gt;   &lt;chr&gt;                   &lt;time&gt; &lt;date&gt;       &lt;int&gt; &lt;dbl&gt;\n&gt;  1 2 Pac   Baby Don't Cry (Keep... 04:22  2000-02-26       1    87\n&gt;  2 2 Pac   Baby Don't Cry (Keep... 04:22  2000-02-26       2    82\n&gt;  3 2 Pac   Baby Don't Cry (Keep... 04:22  2000-02-26       3    72\n&gt;  4 2 Pac   Baby Don't Cry (Keep... 04:22  2000-02-26       4    77\n&gt;  5 2 Pac   Baby Don't Cry (Keep... 04:22  2000-02-26       5    87\n&gt;  6 2 Pac   Baby Don't Cry (Keep... 04:22  2000-02-26       6    94\n&gt;  7 2 Pac   Baby Don't Cry (Keep... 04:22  2000-02-26       7    99\n&gt;  8 2Ge+her The Hardest Part Of ... 03:15  2000-09-02       1    91\n&gt;  9 2Ge+her The Hardest Part Of ... 03:15  2000-09-02       2    87\n&gt; 10 2Ge+her The Hardest Part Of ... 03:15  2000-09-02       3    92\n&gt; # ‚Ñπ 5,297 more rows\n\n\n\nCreate a variable named date that corresponds to the week based on the date_entered3. Read the footnote for a hint but if you need help visualizing what the final dataset might look like, you can reveal another hint below.\n\n3¬†For instance, if the date_entered is 1-13-2000 and week is 1, then when week is 2 date will have a value of 1-20-2000. Hint: Try using if_else() here.\n\n\n\n\n\n Click for a preview of what the final dataset should look like\n\n\n\n\n\n\nbillboard_tidy_date\n\n&gt; # A tibble: 5,307 √ó 7\n&gt;    artist  track                   time   date_entered  week  rank date      \n&gt;    &lt;chr&gt;   &lt;chr&gt;                   &lt;time&gt; &lt;date&gt;       &lt;int&gt; &lt;dbl&gt; &lt;date&gt;    \n&gt;  1 2 Pac   Baby Don't Cry (Keep... 04:22  2000-02-26       1    87 2000-02-26\n&gt;  2 2 Pac   Baby Don't Cry (Keep... 04:22  2000-02-26       2    82 2000-03-04\n&gt;  3 2 Pac   Baby Don't Cry (Keep... 04:22  2000-02-26       3    72 2000-03-11\n&gt;  4 2 Pac   Baby Don't Cry (Keep... 04:22  2000-02-26       4    77 2000-03-18\n&gt;  5 2 Pac   Baby Don't Cry (Keep... 04:22  2000-02-26       5    87 2000-03-25\n&gt;  6 2 Pac   Baby Don't Cry (Keep... 04:22  2000-02-26       6    94 2000-04-01\n&gt;  7 2 Pac   Baby Don't Cry (Keep... 04:22  2000-02-26       7    99 2000-04-08\n&gt;  8 2Ge+her The Hardest Part Of ... 03:15  2000-09-02       1    91 2000-09-02\n&gt;  9 2Ge+her The Hardest Part Of ... 03:15  2000-09-02       2    87 2000-09-09\n&gt; 10 2Ge+her The Hardest Part Of ... 03:15  2000-09-02       3    92 2000-09-16\n&gt; # ‚Ñπ 5,297 more rows\n\n\n\n\n\n\nCreate a dataset of the song(s) with the most weeks in the top 3 by month of 2000. The final dataset should look like this:\n\n\n\n&gt; # A tibble: 19 √ó 4\n&gt;    month artist              track                   peak_weeks\n&gt;    &lt;dbl&gt; &lt;chr&gt;               &lt;chr&gt;                        &lt;dbl&gt;\n&gt;  1     1 Aguilera, Christina What A Girl Wants                3\n&gt;  2     2 Savage Garden       I Knew I Loved You               4\n&gt;  3     3 Lonestar            Amazed                           4\n&gt;  4     4 Hill, Faith         Breathe                          5\n&gt;  5     4 Santana             Maria, Maria                     5\n&gt;  6     5 Hill, Faith         Breathe                          4\n&gt;  7     5 Santana             Maria, Maria                     4\n&gt;  8     6 Aaliyah             Try Again                        2\n&gt;  9     6 Anthony, Marc       You Sang To Me                   2\n&gt; 10     6 Hill, Faith         Breathe                          2\n&gt; 11     6 Santana             Maria, Maria                     2\n&gt; 12     6 Vertical Horizon    Everything You Want              2\n&gt; 13     7 Aaliyah             Try Again                        4\n&gt; 14     8 Sisqo               Incomplete                       4\n&gt; 15     8 matchbox twenty     Bent                             4\n&gt; 16     9 Janet               Doesn't Really Matte...          5\n&gt; 17    10 Madonna             Music                            4\n&gt; 18    11 Creed               With Arms Wide Open              4\n&gt; 19    12 Destiny's Child     Independent Women Pa...          5\n\n\n\nPick one month of 2000 and visualize the entire charting trajectory of the songs that spent at least 1 week in the top 3 during that month. Hint: start with the data set created in question 3. An example of what this could look like for April is provided below.\n\n\n\n\n\n\n\n\n\n\n\nNote: This example plot is an extremely specified and polished version of what this can look like. There are a number of ways this can look and you should not be graded nor grade lower for aesthetic features that many of you are still learning. The takeaway here is to challenge yourself to figure out the code to create something that can plot the entire trajectory of the songs that reached the top 3 in whatever month you choose. This will require a combination of the skills you‚Äôve learned in this class thus far. Try this with the content available from lecture first. If you get stuck, there is a hint you can reveal below.\n\n\n\n\n\n\n\n Click for skeleton code you can fill in\n\n\n\n\n\nNote: This is how I did this problem but there are many approaches to every coding puzzle in R. If this skeleton code is useful, use it. If not, I‚Äôm happy to chat through your approach in office hours ü§ì\nReplace all instances of function, variable, and value with what you think the correct answer should be. Additional hints provided by hovering over the code annotation.\n\nbillboard_top3_month_viz &lt;- billboard_tidy_date |&gt; \n1  mutate(month = function(variable),\n2         year = function(variable),\n3         top3 = if_else(variable &lt;= value & variable == value, 1, 0)) |&gt;\n4  mutate(month_peak = ifelse(variable &gt; 0, variable, NA),\n         .by = c(month, artist, track)) |&gt; \n5  filter(function(month_peak == \"value\"),\n         .by = c(track, artist)) \n\n6library(ggrepel)\nggplot(billboard_top3_month_viz, \n7       aes(variable, variable, group = variable, color = variable)) +\n8  function +\n9  geom_label_repel(data = billboard_top3_month_viz |&gt; function(variable, by = track),\n10                   mapping = aes(label = variable))\n\n\n1\n\nWhat month is associated with each row‚Äôs chart position?\n\n2\n\nAre there multiple years in this dataset?! Given that we‚Äôre interested in the Billboard Top 100 for 2000 it might be useful to have a variable that allows us to discriminate between years.\n\n3\n\nTo create some indicator of top 3 status you‚Äôll need to provide two conditions (one variable needs to be less than or equal to a certain value and another needs to equal a certain value)\n\n4\n\nNeed to create a variable that reflects when a particular song charted in the top 3 and NA otherwise\n\n5\n\nIn order to get the entire trajectory of a song we can‚Äôt simply filter for the month when it peaked. Then we‚Äôd only be able to plot that snippet of its trajectory. Hint: Which function returns TRUE if even 1 element it‚Äôs given is TRUE?\n\n6\n\nLoad if you want to add labels\n\n7\n\nYou want to visualize the ranking trajectory of a song over time. Hint: group is the variable you want to visualize.\n\n8\n\nWhat geometry would be appropriate here?\n\n9\n\nTo properly label this plot you‚Äôll need to subset the data, otherwise it will try to plot a label for every date available.\n\n10\n\nWhich variable‚Äôs text are you trying to label?\n\n\n\n\n\n\n\n\n\n\n\n\n\n Before you submit:\n\n\n\nHave you remembered to add embed-resources: true to your YAML?\n\n\n\n\nDue Dates\n\n\n\n\n\n\n\n\n\n\n\n\n\n#\nHomework Due\nPeer Review Due\n\n\n\n\n1\n7 October\n12 October\n\n\n2\n14 October\n19 October\n\n\n3\n21 October\n26 October\n\n\n4\n28 October\n2 November\n\n\n5\n11 November1\n16 November\n\n\n6\n18 November\n21 November\n\n\n7\n25 November\n30 November\n\n\n8\n2 December\n7 December\n\n\n9\n9 December\n14 December\n\n\n\n1 You will have two weeks to complete Homework 5",
    "crumbs": [
      "Homework",
      "Homework 5"
    ]
  },
  {
    "objectID": "Homework/HW4/homework4.html",
    "href": "Homework/HW4/homework4.html",
    "title": "Homework 4",
    "section": "",
    "text": "Instructions\nAnswer each of the following questions. Be sure to display all your code in the rendered version (use echo: true throughout1).\n1¬†You can make this a global option for your whole document by putting it directly in the YAML of your qmd:\n\n---\ntitle: \"My Document\"\nexecute:\n  echo: true\n---\n\nRemember, the package nycflights13 contains data on flights originating in NYC during the year 2013. There are three airports servicing NYC: JFK, LGA (‚ÄúLaGuardia‚Äù), and EWR (‚ÄúNewark‚Äù).\n\n\nExercises\n\nChoose an airport outside New York, and count how many flights went to that airport from NYC in 2013. How many of those flights started at JFK, LGA, and EWR respectively?\nThe variable arr_delay contains arrival delays in minutes (negative values represent early arrivals). Make a ggplot histogram displaying arrival delays for 2013 flights from NYC to the airport you chose.\n\n\nUse left_join to add weather data at departure to the subsetted data. If time_hour didn‚Äôt exist in one or both of these datasets, which variables would you need to merge on? Calculate the mean temperature by month at departure (temp) across all flights.\n\n\nInvestigate if there is a relationship between departure delay (dep_delay) and precipitation (precip) in the full dataset. Is the relationship different between JFK, LGA, and EWR? I suggest answering this question by making a plot and writing down a one-sentence interpretation2.\n\n2¬†Hint: Read about geom_smooth() and consider how you might use it with the argument method = \"lm\" to plot a relationship between these two variables.As always, submit both the .qmd and knitted .html to Canvas.\n\n\n\n\n\n\n Before you submit:\n\n\n\nHave you remembered to add embed-resources: true to your YAML?\n\n\n\n\nDue Dates\n\n\n\n\n\n\n\n\n\n\n\n\n\n#\nHomework Due\nPeer Review Due\n\n\n\n\n1\n7 October\n12 October\n\n\n2\n14 October\n19 October\n\n\n3\n21 October\n26 October\n\n\n4\n28 October\n2 November\n\n\n5\n11 November\n16 November\n\n\n6\n18 November\n21 November\n\n\n7\n25 November\n30 November\n\n\n8\n2 December\n7 December\n\n\n9\n9 December\n14 December",
    "crumbs": [
      "Homework",
      "Homework 4"
    ]
  },
  {
    "objectID": "Homework/HW3/homework3.html",
    "href": "Homework/HW3/homework3.html",
    "title": "Homework 3",
    "section": "",
    "text": "Instructions\nFor this assignment, include all code and relevant output in your rendered html document1.\n1¬†You can set the echo: true (and other) code chunk option(s) globally (will set it as the document default) by specifying it in your YAML header like so:\n\n---\ntitle: \"My Document\"\nexecute:\n  echo: true\n---\n\n\n\nExercises\n\nOrganize your files for this class in a way that facilitates reproducible research.\n\nYou can do this any number of ways, such as:\n\nCreating a project for this class. If you already have a folder for this class you can retroactively turn it into a project by selecting File &gt; New Project‚Ä¶ &gt; Existing Directory and browsing to that folder2.\nCreating a folder for this class and make weekly sub-folders which are each, themselves, projects.3 You would need to retroactively make week 1 and 2 folders projects by using this method. For any new weekly folders you can directly create that directory by selecting File &gt; New Project‚Ä¶ &gt; New Directory\n\nCreate your .qmd for this homework within your new project4.\nWhen you‚Äôre done organizing the folder for this class, write out its current organizational structure (i.e.¬†something similar to the solution to lab question 55 with the specific names for files and folders that you used). Write a one-sentence description of how you‚Äôve organized your project/projects for this class.\n\n\n2¬†Note: this approach will complicate your file path specification since markdown documents internally set the working directory to the folder they are in when they knit. That will be at odds with the working directory of your project, (one folder-level up from each of your homework assignment .qmds). If you‚Äôd like to use this method for organizing your folders/files, you should familiarize yourself with the here package to limit file path frustration and enable you to set up more complex projects in the future.3¬†I highly recommend this approach if the concept of relative versus absolute paths is new(er) to you. If each homework is its own project, your working directory will be set directly to that homework folder which will make relative file paths work whether you‚Äôre running code interactively or knitting your .qmd since they will be the same.4¬†You‚Äôll notice that the upper-right hand corner of your RStudio IDE now displays the name of that new project. This is your current working directory. Whatever files you create will have a working directory of the folder of the project they‚Äôre saved within (except for .qmd files when they are knit in any subfolder of your root project folder.5¬†You can embed output-looking text like this example by using a code chunk without the {r} like so:\n```\nCSSS 508\n  Homework1/\n  ...etc...\n```\n\n\nx &lt;- rnorm(20, 10, 5)\n\n\nCreate the vector above:\n\nLook at the help file for rnorm and in your own words describe what arguments it takes and what it produces.\nWhich arguments are required and which are optional (if any)?\nWhat does the r in rnorm stand for?\nUsing [, select every value except the last one\nUsing [, select only values that are greater than 10.\n\n\n\n\nggplot(mpg, aes(x = class)) +\n  geom_bar()\nggplot(mpg, aes(x = cty, y = hwy)) +\n  geom_point()\nggsave(\"mpg-plot.png\")\n\n\nRun the code above.\n\nWhich of the two plots is saved as mpg-plot.png? Why?6\nIn the files tab of the lower-right pane of your RStudio, look at the project folder for this homework7 and re-write the current organizational structure for this class with any changes that have occurred (i.e.¬†update your answer to question 1.iii.).\n\n\n6¬†Hint: Check out the help page!7¬†This will depend on which organizational method you chose for question 1.i.\n\nGo to RStudio Shortcuts and Tips and find one tip that makes sense to you and looks interesting. Describe it and link to its section url8 in your qmd. Maybe practice using it!9\n\n8¬†See how to link to websites in markdown syntax here9¬†No need to demonstrate this in your qmd.\n\ny &lt;- tibble(a = seq(1, 10, 2), \n            b = c(\"apple\", \"banana\", \"strawberry\", \"peach\", \"mango\"), \n            c = c(rep(TRUE, 3), rep(FALSE, 2)))\n\n\nCreate the tibble above.\n\nWhat does seq10 do in this example and what arguments does it take?\nWhat does rep11 do in this example and what arguments does it take?\nIndex y using [ to arrive at the results:\n\n\n10¬†Run ?seq to see the help file11¬†Run ?rep to see the help file\n\n&gt; # A tibble: 2 √ó 1\n&gt;   b     \n&gt;   &lt;chr&gt; \n&gt; 1 banana\n&gt; 2 mango\n\n\n‚ÄÉ‚ÄÉ iv) Index y using $ to arrive at the results:\n\n\n&gt; [1]  TRUE  TRUE  TRUE FALSE FALSE\n\n\n‚ÄÉ‚ÄÉ v) What does y[3:5, ] produce? What does : do?\n\n\n\n\n\n\n Before you submit:\n\n\n\nHave you remembered to add embed-resources: true to your YAML?\n\n\n\n\nDue Dates\n\n\n\n\n\n\n\n\n\n\n\n\n\n#\nHomework Due\nPeer Review Due\n\n\n\n\n1\n7 October\n12 October\n\n\n2\n14 October\n19 October\n\n\n3\n21 October\n26 October\n\n\n4\n28 October\n2 November\n\n\n5\n11 November\n16 November\n\n\n6\n18 November\n21 November\n\n\n7\n25 November\n30 November\n\n\n8\n2 December\n7 December\n\n\n9\n9 December\n14 December",
    "crumbs": [
      "Homework",
      "Homework 3"
    ]
  },
  {
    "objectID": "Homework/HW3/tips_tricks.html",
    "href": "Homework/HW3/tips_tricks.html",
    "title": "Tips & Tricks",
    "section": "",
    "text": "Here‚Äôre all the shortcuts/tips & tricks you gathered from the RStudio Tips Twitter account."
  },
  {
    "objectID": "Homework/HW3/tips_tricks.html#footnotes",
    "href": "Homework/HW3/tips_tricks.html#footnotes",
    "title": "Tips & Tricks",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nEditing datasets in this way is not reproducible unless this also generates the code required to make those changes and you save that code in your source document. Proceed with caution.‚Ü©Ô∏é"
  },
  {
    "objectID": "Homework/homework.html",
    "href": "Homework/homework.html",
    "title": "Overview",
    "section": "",
    "text": "This page contains general instructions for assignments/peer reviews. For homework-specific instructions and templates go to the specific assignment listed on the left.\n\n\nA Note About Rendering Your HTML documents\nYou need to include embed-resources: true in your YAML header in order for your HTML documents to include any plot output when you upload them to Canvas. It should look something like the following:\n\nYou can read more about this option here but basically, whenever you render a .qmd file to HTML, all output created goes into a separate, associated folder, which is referenced when displaying the page in your web browser. However, when you upload the HTML file separately from that folder (e.g.¬†to Canvas or through email), it doesn‚Äôt have the specific output images to reference, so they won‚Äôt appear. When you specify in your YAML header that you want to embed resources, you‚Äôre explicitly adding the output created by your code to the HTML file so that a separate output folder is longer created and you can send your HTML file with all its output as one entity.\n\n\nAssignment Due Dates\n\n\n\n\n\n\n\n\n\n\n\n\n\n#\nHomework Due\nPeer Review Due\n\n\n\n\n1\n7 October\n12 October\n\n\n2\n14 October\n19 October\n\n\n3\n21 October\n26 October\n\n\n4\n28 October\n2 November\n\n\n5\n11 November1\n16 November\n\n\n6\n18 November2\n21 November\n\n\n7\n25 November\n30 November\n\n\n8\n2 December\n7 December\n\n\n9\n9 December\n14 December\n\n\n\n1 You will have two weeks to complete Homework 5\n\n\n2 We will cover content for Homework 6 two weeks prior to its due date\n\n\n\n\n\n\n\n\n\nAll assignments should be created using Quarto and uploaded to Canvas as both html and qmd files. Your document should be pleasant for a peer to look at and follow all instructions. Use sections for organization, label figures/tables, and use code chunks.\n\n\nRubric Students Use to Grade Assignments:\n\n\n\n\n\n\n\n\n\n\n\n\nEvaluation\nPoints\n\n\n\n\nDidn‚Äôt turn anything in.\n0\n\n\nTurned in but low effort,  ignoring many directions.\n1\n\n\nDecent effort, followed directions  with some minor issues.\n2\n\n\nNailed it!\n3\n\n\n\n\n\n\n\n\n\nPeer Review:\nYou are required to both grade and provide feedback on a peer‚Äôs homework each week. Reading/evaluating the work of others is useful and important! Good programmers realize that most problems have been solved by others; the trick is figuring out how to apply existing code to new problems. You will develop this skill by reading others‚Äô code, evaluating their approach to problems, providing suggestions, and pointing out when you learned something new. Poor peer reviews are impolite or unprofessional, are generic (i.e., could be applied to anyone‚Äôs homework), or fail to provide useful suggestions. Good peer reviews give constructive, polite, and insightful comments, are specific and concise, use the grading rubric above, and point out what you learned from their code.\n\n\n\n\n\n\nLate Homework Will Automatically Lose Peer-Review Credit\n\n\n\nPeer reviews are randomly assigned when the due date/time is reached. Therefore, if you don‚Äôt submit your homework on time, you will not be given a peer‚Äôs homework to review and vice versa. That said, life is messy and complicated and we all miss deadlines for a variety of reasons. Therefore, you can request that I review and provide feedback on a late assignment (message me on Slack) but you won‚Äôt be able to earn peer-review credit for that particular homework.\n\n\n\n\nRubric Instructor Uses to Grade Peer Review:\n\n\n\n\n\n\n\n\n\n\n\n\nEvaluation\nPoints\n\n\n\n\nDidn‚Äôt follow all peer-review instructions.\n0\n\n\nPeer review is at least several sentences long, mentions any and all key issues from the assignment, and points out at least one positive thing in your peer‚Äôs work (and hopefully more!).\n1\n\n\n\n\n\n\n\n\n\nWhen to Contact the Instructor:\nA number of situations may warrant contacting the instructor:\n\nIf you believe you have received an unfair peer review, you can request for evaluation by the instructor. The assignment will be regraded, which may result in a higher, same, or lower grade.\nIf you wish for more feedback on a particular part of the homework, you can ask the instructor for additional explanation during office hours or over Slack.\nIf you receive no feedback, I will provide peer review by request.",
    "crumbs": [
      "Homework",
      "Overview"
    ]
  },
  {
    "objectID": "Homework/HW6/homework6_key.html",
    "href": "Homework/HW6/homework6_key.html",
    "title": "Homework 6 Key",
    "section": "",
    "text": "Code\nknitr::opts_chunk$set(comment = \"&gt;\")\nlibrary(tidyverse)\nlibrary(ggrepel)\nlibrary(ggthemes)"
  },
  {
    "objectID": "Homework/HW6/homework6_key.html#footnotes",
    "href": "Homework/HW6/homework6_key.html#footnotes",
    "title": "Homework 6 Key",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nYou can, however, assign row names and column names to a matrix using rownames() and columnnames() respectively. Alternatively, if you create a matrix using cbind and named vectors, the colnames will be taken from the names of the vectors used.‚Ü©Ô∏é"
  },
  {
    "objectID": "Homework/HW1/CSSS508_HW1_Template.html",
    "href": "Homework/HW1/CSSS508_HW1_Template.html",
    "title": "Homework 1",
    "section": "",
    "text": "This basic R markdown file has some text, inline code, and code chunks!"
  },
  {
    "objectID": "Homework/HW1/CSSS508_HW1_Template.html#code-chunks",
    "href": "Homework/HW1/CSSS508_HW1_Template.html#code-chunks",
    "title": "Homework 1",
    "section": "Code Chunks",
    "text": "Code Chunks\n\nset.seed(1)\nnorm &lt;- rnorm(100)\nhist(x = norm, \n     xlab = \"X Axis Name\", \n     ylab = \"Count\", \n     main = \"Histogram of 100 observations from a Standard Normal\")\n\n\n\n\n\n\n\n\nUnless you include the chunk option #| echo: false, your code chunk will be displayed in your final document."
  },
  {
    "objectID": "Homework/HW1/CSSS508_HW1_Template.html#text-and-inline-text",
    "href": "Homework/HW1/CSSS508_HW1_Template.html#text-and-inline-text",
    "title": "Homework 1",
    "section": "Text and Inline Text",
    "text": "Text and Inline Text\nThe sample mean of the data plotted above (rounded to 3 decimal points) is 0.109 and the variance is 0.807.\nWhat‚Äôs the relationship between standard deviation and variance?\n\\[ \\text{Standard Deviation}(X) = \\sqrt{\\text{Variance}(X)} \\]\nThe standard deviation of the data plotted above is 0.898."
  },
  {
    "objectID": "Homework/HW8/homework8_key.html",
    "href": "Homework/HW8/homework8_key.html",
    "title": "Homework 8 Key",
    "section": "",
    "text": "Code\nknitr::opts_chunk$set(comment = \"&gt;\")\n\nlibrary(tidyverse)\nlibrary(ggthemes)\n\nload(url(\"https://github.com/vsass/CSSS508/raw/main/Lectures/Lecture7/data/restaurants.Rdata\"))"
  },
  {
    "objectID": "Homework/HW8/homework8_key.html#footnotes",
    "href": "Homework/HW8/homework8_key.html#footnotes",
    "title": "Homework 8 Key",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nFormat in mdy().‚Ü©Ô∏é\nThe documentation for group_by() doesn‚Äôt explicitly tell you which tidy evaluation method it uses so check out this resource to figure it out.‚Ü©Ô∏é"
  },
  {
    "objectID": "Homework/HW9/homework9_key.html",
    "href": "Homework/HW9/homework9_key.html",
    "title": "Homework 9 Key",
    "section": "",
    "text": "Code\nknitr::opts_chunk$set(comment = \"&gt;\")\n\nlibrary(tidyverse)\nlibrary(ggthemes)"
  },
  {
    "objectID": "Homework/HW9/homework9_key.html#footnotes",
    "href": "Homework/HW9/homework9_key.html#footnotes",
    "title": "Homework 9 Key",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nYou‚Äôll need to download the palmerpenguins package in order to use penguins dataset.‚Ü©Ô∏é"
  },
  {
    "objectID": "Homework/HW7/homework7.html",
    "href": "Homework/HW7/homework7.html",
    "title": "Homework 7",
    "section": "",
    "text": "Instructions\nAnswer each of the following questions. Be sure to display all your code in the rendered version (use echo: true throughout1).\n1¬†You can make this a global option for your whole document by putting it directly in the YAML of your qmd:\n\n---\ntitle: \"My Document\"\nexecute:\n  echo: true\n---\n\nUse the following code to read in the King County restaurants data:\n\nload(url(\"https://github.com/vsass/CSSS508/raw/main/Lectures/Lecture7/data/restaurants.Rdata\"))\n\n\n\nExercises\n\nQuestion 1:\nWhat is the shortest restaurant name? What is the longest restaurant name?\n\n\nQuestion 2:\nRead the documentation for separate_longer_delim(). Use this function to figure out what 10 ‚Äúwords‚Äù2 are most frequently used for the restaurant names in this data set.\n2¬†Anything that is separated by spaces counts as a word for this problem.\n\nQuestion 3:\nWhich zip code has the highest (meaning worst) mean Grade?3 For that worst-rated zip code, how has its average rating changed by year?4\n3¬†Note: To accurately reflect the true average you‚Äôll want to weight this by restaurant: i.e.¬†get the average grade by restaurant first, then get the average of those averages by zip code.4¬†There are a few ways to do this. Use the method that makes most sense to you!\n\nQuestion 4 (OPTIONAL):\nSeparate the variable Phone into three variables that only contain numerical digits: area_code, first_3, and last_4.\n\n\n\n\n\n\n Before you submit:\n\n\n\nHave you remembered to add embed-resources: true to your YAML?\n\n\n\n\n\nDue Dates\n\n\n\n\n\n\n\n\n\n\n\n\n\n#\nHomework Due\nPeer Review Due\n\n\n\n\n1\n7 October\n12 October\n\n\n2\n14 October\n19 October\n\n\n3\n21 October\n26 October\n\n\n4\n28 October\n2 November\n\n\n5\n11 November\n16 November\n\n\n6\n18 November\n21 November\n\n\n7\n25 November\n30 November\n\n\n8\n2 December\n7 December\n\n\n9\n9 December\n14 December",
    "crumbs": [
      "Homework",
      "Homework 7"
    ]
  },
  {
    "objectID": "syllabus.html",
    "href": "syllabus.html",
    "title": "Syllabus",
    "section": "",
    "text": "This syllabus is subject to change. All changes will be announced both in class, on Slack, and on this page.\n\nCourse Info:\nInstructor: Victoria (Vic) Sass\nLecture: Tuesdays 4:30-6:20pm\nLocation: Raitt 121\nOffice Hours: Wednesdays 1pm-3pm on Zoom (link on Canvas)\n\n\nOverview and Learning Objectives:\nThis course is intended to give students a foundational understanding of programming in the statistical language R. This knowledge is intended to be broadly useful wherever you encounter data in your education and career. General topics we will focus on include:\n\nDeveloping intermediate data management and visualization skills in R\nOrganizing projects and creating reproducible research\nCleaning data\nLinking multiple data sets together\nLearning basic programming skills\n\nBy the end of this course you should feel confident approaching any data you encounter in the future. We will cover almost no statistics, however it is the intention that this course will leave you prepared to progress in CS&SS or STAT courses with the ability to focus on statistics instead of coding. Additionally, the basic concepts you learn will be applicable to other programming languages and research in general, such as logic and algorithmic thinking.\n\n\nStructure:\nThis course has a hands-on lecture and drop-in office hours, each once a week:\n\nLecture: On Tuesdays we will meet for an interactive session where we‚Äôll cover a specific topic to help you learn fundamental skills, concepts, and principles for learning R. Additionally, these sessions will provide you with the opportunity to work with each other to learn and practice key skills in R. I will be available to answer questions and help troubleshoot code as well.\nOffice Hours (remote; one 2-hour session): On Wednesdays, I will hold drop-in office hours on Zoom from 1-3pm. This is a great time to ask questions, get advice, or continue discussions from lecture. We can talk in a breakout room or with the group! A link to the Zoom meeting can be found on Canvas.\n\n\n\nSchedule:\nBelow is a summary of topics that will be covered each week in lecture.\n\n\nSeptember 30\n\nOctober 7\n\nOctober 14\n\nOctober 21\n\nOctober 28\n\nNovember 4\n\nNovember 11\n\nNovember 18\n\nNovember 25\n\nDecember 2\n\nDecember 9\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWeek 1: Introduction to R, RStudio, and Quarto\n\nWeek 2: Visualizing Data\n\nWeek 3: Workflow and Reproducibility\n\nWeek 4: Importing, Exporting, and Cleaning Data\n\nWeek 5: Manipulating and Summarizing Data\n\nWeek 6: Data Structures & Types\n\nVeterans Day Holiday (No Class)\n\nWeek 7: Working with Text Data\n\nWeek 8: Writing Functions\nÔ∏é\nWeek 9: Iteration\n\nWeek 10: Next Steps (optional, based on students‚Äô interest)¬†\n\n\n\nThis course has no scheduled meeting during final exam week but if enough students are interested in attending a remote lecture about how to progress further with R, an optional final lecture will be offered.\n\n\nPrerequisites:\nThis course has no prerequisites.\n\n\nMaterials and Texts:\nThis course has no required materials or texts. However, there are a few things to note:\n\nComputers: This course is primarily focused on computation. You‚Äôre expected to bring a personal laptop to class as it helps to gain familiarity with the software you‚Äôll be using and gaining hands-on experience with the material we‚Äôre learning. If you don‚Äôt have access to a laptop you can loan one from UW through the Student Technology Loan Program.\n\n\n\n\n\n\n\nKeep In Mind\n\n\n\nThe versions of R, RStudio, and Quarto (as well as any packages you have installed) will not necessarily be the same/up to date if you do your work on different computers. My advice is to consistently use the same device for homework assignments or to make sure to download the latest versions of R, RStudio, and Quarto when using a new machine.\n\n\n\nOnline Textbooks: This course has no required textbooks, but there are many helpful resources available for free online. I will be suggesting selections from R for Data Science by Hadley Wickham, Mine √áetinkaya-Rundel, & Garrett Grolemund to pair with each week‚Äôs topic. While not required, I strongly suggest reading those selections before doing the homework for that week.\n\n\n\nTools for Class:\n\n\n\n\n\n\n Communication\n\n\n\nLearning is collaborative! In addition to being the place to communicate with me, our Slack is also where you can ask one another questions, share resources, and just generally check in with each other about how your adventures with R are going. You can find the link to join our workplace on our course Canvas.\n\n\n\n\n\n\n\n\n Homework & Peer-Reviews\n\n\n\nWe will be using Canvas solely for homework & peer review submissions/deadlines and for any links I only want to distribute to those registered for this class (i.e.¬†Slack and Office Hours Zoom).\n\n\n\n\n\n\n\n\n Course Content\n\n\n\nAll course content will be accessible on this website.\n\n\n\n\nGrading\nThis course is graded as credit/no credit. To pass you need to receive at least 60% of the available points. There will be 9 graded homework assignments: one for each week of content (except week 10). There are 4 points possible for each week that features a homework.\n\nHomework (75%; 3 points): These must be turned in as rendered Markdown documents which we will learn to create and for which templates are provided. They will be graded on a 0 to 3 point scale based on a simple effort-focused rubric found on the course website. These are designed first and foremost to develop skills rather than \"prove\" you have learned concepts. I encourage you to communicate and work together, so long as you write and explain your code yourself and do not copy work. You can learn a lot from replicating others' code, but you will learn nothing if you copy it without knowing how it works! In other words, you‚Äôre not really going to learn unless you do the coding yourself!1\nPeer Review (25%; 1 point): Each week an assignment is due, students will be randomly assigned to grade another student's assignment following a 0 to 3 rubric. They will be expected to provide constructive feedback and commentary if something new was learned. Reading others' code is an important skill and you will write better code knowing others will see it. These reviews will be due 5 days after homework is due. Each peer review is worth 1 point and will be evaluated by the instructor on a binary satisfactory/not satisfactory scale.\nSchedule: We have a 2-hour interactive lecture/lab session on Tuesdays. Office Hours will be be held on Wednesdays. Homeworks will be due before class each Tuesday and peer reviews will be due 5 days later, by end-of-day on Sundays. Make sure to check the homework page or Canvas for all due dates!\n\n1¬†Note: AI tools can be helpful while you‚Äôre learning R, especially for asking clarifying questions about what code is doing. But keep in mind that they often make mistakes ‚Äî and sometimes confidently give you flawed, biased, and/or suboptimal code. If you don‚Äôt understand the basics, fixing those mistakes can be more work than writing the code yourself. Think of AI as a study aid ‚Äî useful for clarification and explanations ‚Äî but if you rely on it too much, it can actually hold back your learning and even weaken your coding skills over time. The real learning happens when you practice coding on your own.\n\n\n\n\n\nLate Homework Will Automatically Lose Peer-Review Credit\n\n\n\nPeer reviews are randomly assigned when the due date/time is reached. Therefore, if you don‚Äôt submit your homework on time, you will not be given a peer‚Äôs homework to review and vice versa. That said, life is messy and complicated and we all miss deadlines for a variety of reasons. Therefore, you can request that I review and provide feedback on a late assignment (message me on Slack) but you won‚Äôt be able to earn peer-review credit for that particular homework.\n\n\n\n\nClassroom Environment\nI‚Äôm committed to fostering a friendly and inclusive classroom environment in which all students have an equal opportunity to learn and succeed. This course is an attempt to make an often difficult and frustrating experience (learning R for the first time) less obfuscating, daunting, and stressful. That said, learning happens in different ways at at a different pace for everyone. Learning is also a collaborative and creative process and my aim is to create an environment in which you all feel comfortable asking questions of me and each other. Treat your peers and yourself with empathy and respect as you all approach this topic from a range of backgrounds and experiences (in programming and in life).\n\nNames & Pronouns: Everyone deserves to be addressed respectfully and correctly. You are welcome to send me your preferred name and correct gender pronouns at any time.\nGetting Help: If at any point during the quarter you find yourself struggling to keep up, please let me know! I am here to help. A great place to start this process is by chatting before class, coming to office hours, or sending me a message on Slack.\nDiversity: Diverse backgrounds, embodiments, and experiences are essential to the critical thinking endeavor at the heart of university education. Therefore, I expect you to follow the UW Student Conduct Code in your interactions with your colleagues and me in this course by respecting the many social and cultural differences among us, which may include, but are not limited to: age, cultural background, disability, ethnicity, family status, gender identity and presentation, body size/shape, citizenship and immigration status, national origin, race, religious and political beliefs, sex, sexual orientation, socioeconomic status, and veteran status.\nAccessibility & Accommodations: Your experience in this class is important to me. If you have already established accommodations with Disability Resources for Students (DRS), please communicate your approved accommodations to me at your earliest convenience so we can discuss your needs in this course. If you have not yet established services through DRS, but have a temporary health condition or permanent disability that requires accommodations (conditions include but not limited to; mental health, attention-related, learning, vision, hearing, physical or health impacts), you are welcome to contact DRS at 206-543-8924, uwdrs@uw.edu, or through their website. DRS offers resources and coordinates reasonable accommodations for students with disabilities and/or temporary health conditions. Reasonable accommodations are established through an interactive process between you, me (your instructor), and DRS. It is the policy and practice of the University of Washington to create inclusive and accessible learning environments consistent with federal and state law.\nAcademic Integrity: Academic integrity is essential to this course and to your learning. In this course, violations of the academic integrity policy include but are not limited to: copying from a peer, copying from an online resource, or using resources from a previous iteration of the course. That said, I hope you will collaborate with peers on assignments, and use Internet resources when questions arise to help solve issues. The key is that you ultimately submit your own work. Anything found in violation of this policy will be automatically given a score of 0 with no exceptions. If the situation merits, it will also be reported to the UW Student Conduct Office, at which point it is out of my hands. If you have any questions about this policy, please do not hesitate to reach out and ask.\nReligious Accommodations: Washington state law requires that UW develop a policy for accommodation of student absences or significant hardship due to reasons of faith or conscience, or for organized religious activities. The UW's policy, including more information about how to request an accommodation, is available at Religious Accommodations Policy. Accommodations must be requested within the first two weeks of this course using the Religious Accommodations Request form.\n\n\n\n\n\n\n\nFeedback\n\n\n\nIf you have feedback on any part of this course or the classroom environment I want to hear it! You can message me directly on Slack or send me an anonymous message here. Additionally, I will send out a mid-quarter feedback survey on Slack around Week 5."
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#title-slide",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#title-slide",
    "title": "",
    "section": "",
    "text": "Visualizing Data\nCS&SS 508 ‚Ä¢ Lecture 2\n7 October 2025\nVictoria Sass"
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#file-types",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#file-types",
    "title": "",
    "section": "File Types",
    "text": "File Types\nWe mainly work with three types of files in this class:\n\n.qmd1: These are markdown syntax files, where you write code and plain or formatted text to make documents.\n.R: These are R syntax files, where you write code to process and analyze data without making an output document 2.\n.html (or .pdf, .docx, etc.): These are the output documents created when you Render a quarto markdown document.\n\n\nMake sure you understand the difference between the uses of these file types! Please ask for clarification if needed!\n\nQuarto builds on a decade of developments with R Markdown documents. .Rmd files operate very similarly to Quarto documents but there are minor differences that you can read more about here.You can use the source() function to run a .R script file inside a .qmd or .R file. Using this you can break a large project up into multiple files but still run it all at once!"
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#packages",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#packages",
    "title": "",
    "section": "Packages",
    "text": "Packages\nLast week we discussed Base R and the fact that what makes R extremely powerful and flexible is the large number of diverse user-created packages.\n\n\n\n\n What are packages again?\n\n\nRecall that packages are simply collections of functions and code1 others have already created, that will make your life easier!\n\n\n\n\n\n\n\n\n The package 2-step\n\n\nRemember that to install a new package you use install.packages(\"package_name\") in the console. You only need to do this once per machine (unless you want to update to a newer version of a package).\nTo load a package into your current session of R you use library(package_name), preferably at the beginning of your R script or Quarto document. Every time you open RStudio it‚Äôs a new session and you‚Äôll have to call library() on the packages you want to use.\n\n\n\n\nOftentimes packages will include sample datasets for instructive purposes."
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#packages-1",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#packages-1",
    "title": "",
    "section": "Packages",
    "text": "Packages\nThe Packages tab in the bottom-right pane of RStudio lists your installed packages."
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#the-tidyverse",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#the-tidyverse",
    "title": "",
    "section": "The tidyverse",
    "text": "The tidyverse\nThe tidyverse refers to two things:\n\na specific package in R that loads several core packages within the tidyverse.\n\na specific design philosophy, grammar, and focus on ‚Äútidy‚Äù data structures developed by Hadley Wickham1 and his team at RStudio (now named Posit).\n\nYou can read the official manifesto here."
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#the-tidyverse-package",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#the-tidyverse-package",
    "title": "",
    "section": "The tidyverse package",
    "text": "The tidyverse package\n\n\nThe core packages within the tidyverse include:\n\nggplot2 (visualizations)\ndplyr (data manipulation)\ntidyr (data reshaping)\nreadr (data import/export)\npurrr (iteration)\ntibble (modern dataframe)\nstringr (text data)\nforcats (factors)"
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#the-tidyverse-philosophy",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#the-tidyverse-philosophy",
    "title": "",
    "section": "The tidyverse philosophy",
    "text": "The tidyverse philosophy\n\n\nThe principles underlying the tidyverse are:\n\nReuse existing data structures.\nCompose simple functions with the pipe.\nEmbrace functional programming.\nDesign for humans."
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#gapminder-data",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#gapminder-data",
    "title": "",
    "section": "Gapminder Data",
    "text": "Gapminder Data\n\nWe‚Äôll be working with data from Hans Rosling‚Äôs Gapminder project. An excerpt of these data can be accessed through an R package called gapminder1. Check the packages tab to see if gapminder appears (unchecked) in your computer‚Äôs list of downloaded packages.\n\nIf it doesn‚Äôt, run install.packages(\"gapminder\") in the console.\n\n\nNow, load the gapminder package as well as the tidyverse package:\n\nlibrary(gapminder)\n1library(tidyverse)\n\n\n1\n\nEvery time you library (i.e.¬†load) tidyverse it will tell you which individual packages it is loading, as well as all function conflicts it has with other packages loaded in the current session. This is useful information but you can suppress seeing/printing this output by adding the message: false chunk option to your code chunk.\n\n\n\n\n‚îÄ‚îÄ Attaching core tidyverse packages ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ tidyverse 2.0.0 ‚îÄ‚îÄ\n‚úî dplyr     1.1.4     ‚úî readr     2.1.5\n‚úî forcats   1.0.0     ‚úî stringr   1.5.1\n‚úî ggplot2   4.0.0     ‚úî tibble    3.3.0\n‚úî lubridate 1.9.4     ‚úî tidyr     1.3.1\n‚úî purrr     1.1.0     \n‚îÄ‚îÄ Conflicts ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ tidyverse_conflicts() ‚îÄ‚îÄ\n‚úñ dplyr::filter() masks stats::filter()\n‚úñ dplyr::lag()    masks stats::lag()\n‚Ñπ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\n\n\nCleaned and assembled by Jenny Bryan at UBC."
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#check-out-gapminder",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#check-out-gapminder",
    "title": "",
    "section": "Check Out Gapminder ",
    "text": "Check Out Gapminder \nThe data frame we will work with is called gapminder, available once you have loaded the package. Let‚Äôs see its structure:\n\nstr(gapminder)\n\ntibble [1,704 √ó 6] (S3: tbl_df/tbl/data.frame)\n $ country  : Factor w/ 142 levels \"Afghanistan\",..: 1 1 1 1 1 1 1 1 1 1 ...\n $ continent: Factor w/ 5 levels \"Africa\",\"Americas\",..: 3 3 3 3 3 3 3 3 3 3 ...\n $ year     : int [1:1704] 1952 1957 1962 1967 1972 1977 1982 1987 1992 1997 ...\n $ lifeExp  : num [1:1704] 28.8 30.3 32 34 36.1 ...\n $ pop      : int [1:1704] 8425333 9240934 10267083 11537966 13079460 14880372 12881816 13867957 16317921 22227415 ...\n $ gdpPercap: num [1:1704] 779 821 853 836 740 ...\n\n\n\n\nWhat‚Äôs Notable Here?\n\nFactor variables country and continent\n\nFactors are categorical data with an underlying numeric representation\nWe‚Äôll spend a lot of time on factors later!\n\nMany observations: \\(n=1704\\) rows\nFor each observation, a few variables: \\(p=6\\) columns\nA nested/hierarchical structure: year in country in continent\n\nThese are panel data!"
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#base-r-plot",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#base-r-plot",
    "title": "",
    "section": "Base R plot",
    "text": "Base R plot\n\n\n\nChina &lt;- gapminder |&gt; \n  filter(country == \"China\")\nplot(lifeExp ~ year, \n     data = China, \n     xlab = \"Year\", \n     ylab = \"Life expectancy\",\n     main = \"Life expectancy in China\", \n     col = \"red\", \n     pch = 16)\n\n\nThis plot is made with one function and many arguments.\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote: Don‚Äôt worry about the code used to create the object China. We‚Äôll explore data manipulation in a couple weeks!"
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#fancier-ggplot",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#fancier-ggplot",
    "title": "",
    "section": "Fancier: ggplot",
    "text": "Fancier: ggplot\n\n\n\nggplot(data = China, \n       mapping = aes(x = year, y = lifeExp)) +\n  geom_point(color = \"red\", size = 3) +\n  labs(title = \"Life expectancy in China\", \n       x = \"Year\", \n       y = \"Life expectancy\") +\n  theme_minimal(base_size = 18)\n\n\nThis ggplot is made with many functions and fewer arguments in each."
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#ggplot2",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#ggplot2",
    "title": "",
    "section": "ggplot2",
    "text": "ggplot2\nThe ggplot2 package provides an alternative toolbox for plotting.\n\nThe core idea underlying this package is the layered grammar of graphics: i.e.¬†that we can break up elements of a plot into pieces and combine them.\n\n\nggplots take a bit more work to create than Base R plots, but are usually:\n\nprettier\nmore professional\nmuch more customizable"
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#layered-grammar-of-graphics",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#layered-grammar-of-graphics",
    "title": "",
    "section": "Layered grammar of graphics",
    "text": "Layered grammar of graphics\n\n\n\n\n\n\n\n\n\n\n\nThis is based on Leland Wilkinson‚Äôs book The Grammar of Graphics and extended by Hadley Wickham in his paper ‚ÄúA layered grammar of graphics‚Äù."
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#structure-of-a-ggplot",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#structure-of-a-ggplot",
    "title": "",
    "section": "Structure of a ggplot",
    "text": "Structure of a ggplot\nggplot graphics objects consist of two primary components:\n\n\nLayers, the components of a graph.\n\nWe add layers to a ggplot object using +.\nThis includes adding lines, shapes, and text to a plot.\n\n\n\n\n\nAesthetics, which determine how the layers appear.\n\nWe set aesthetics using arguments (e.g.¬†color = \"red\") inside layer functions.\nThis includes modifying locations, colors, and sizes of the layers.\n\n\n\n\n\n Aesthetic Vignette\n\n\nLearn more about all possible aesthetic mappings here."
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#layers",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#layers",
    "title": "",
    "section": "Layers",
    "text": "Layers\nLayers are the components of the graph, such as:\n\nggplot(): initializes basic plotting object, specifies input data\ngeom_point(): layer of scatterplot points\ngeom_line(): layer of lines\ngeom_histogram(): layer of a histogram\nlabs (or to specify individually: ggtitle(), xlab(), ylab()): layers of labels\nfacet_wrap(): layer creating multiple plot panels\ntheme_bw(): layer replacing default gray background with black-and-white\n\n\nLayers are separated by a + sign. For clarity, I usually put each layer on a new line.\n\n\n\n Syntax Warning\n\n\nBe sure to end each line with the +. The code will not run if a new line begins with a +."
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#aesthetics",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#aesthetics",
    "title": "",
    "section": "Aesthetics",
    "text": "Aesthetics\nAesthetics control the appearance of the layers:\n\nx, y: \\(x\\) and \\(y\\) coordinate values to use\ncolor: set color of elements based on some data value\ngroup: describe which points are conceptually grouped together for the plot (often used with lines)\nsize: set size of points/lines based on some data value (greater than 0)\nalpha: set transparency based on some data value (between 0 and 1)\n\n\n\n\n Mapping data inside aes() vs.¬†creating plot-wise settings outside aes()\n\n\nWhen aesthetic arguments are called within aes() they specify a variable of the data and therefore map said value of the data by that aesthetic. Called outside aes(), these are only settings that can be given a specific value but will not display a dimension of the data."
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#ggplot-templates",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#ggplot-templates",
    "title": "",
    "section": "ggplot Templates",
    "text": "ggplot Templates\n\n\nAll layers have:\nan initializing ggplot call and at least one geom function.\n\n\nsame data & aestheticssame data, diff aestheticsdiff data & aesthetics\n\n\n\nggplot(data = [dataset], \n       mapping = aes(x = [x_variable], y = [y_variable])) +\n  geom_xxx() +\n  other options\n\n\n\n\nggplot(data = [dataset], \n       mapping = aes(x = [x_variable], y = [y_variable])) +\n  geom_xxx() +\n  geom_yyy(mapping = aes(x = [x_variable], y = [y_variable])) +\n  other options\n\n\n\n\nggplot() +\n  geom_xxx(data = [dataset1],\n           mapping = aes(x = [x_variable], y = [y_variable])) +\n  geom_yyy(data = [dataset2],\n           mapping = aes(x = [x_variable], y = [y_variable])) +\n  other options"
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#axis-labels-points-no-background",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#axis-labels-points-no-background",
    "title": "",
    "section": "Axis Labels, Points, No Background",
    "text": "Axis Labels, Points, No Background\nBase ggplot\n\n\n\nggplot(data = China,  \n       aes(x = year, y = lifeExp)) \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nInitialize the plot with ggplot() and x and y aesthetics mapped to variables. These aesthetics will be accessible to any future layers since they‚Äôre in the primary layer."
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#axis-labels-points-no-background-1",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#axis-labels-points-no-background-1",
    "title": "",
    "section": "Axis Labels, Points, No Background",
    "text": "Axis Labels, Points, No Background\nScatterplot\n\n\n\nggplot(data = China, \n       aes(x = year, y = lifeExp)) +\n  geom_point()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdd a scatterplot layer."
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#axis-labels-points-no-background-2",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#axis-labels-points-no-background-2",
    "title": "",
    "section": "Axis Labels, Points, No Background",
    "text": "Axis Labels, Points, No Background\nPoint Color and Size\n\n\n\nggplot(data = China, \n       aes(x = year, y = lifeExp)) +\n  geom_point(color = \"red\", size = 3)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSet aesthetics to make the points larger and red. Notice that these ‚Äúaesthetics‚Äù are not inside the aes call the way x and y are on line 2. These are therefore global settings rather than mapping aesthetics."
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#axis-labels-points-no-background-3",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#axis-labels-points-no-background-3",
    "title": "",
    "section": "Axis Labels, Points, No Background",
    "text": "Axis Labels, Points, No Background\nX-Axis Label\n\n\n\nggplot(data = China, \n       aes(x = year, y = lifeExp)) +\n  geom_point(color = \"red\", size = 3) +\n  labs(x = \"Year\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdd a layer to capitalize the x-axis label."
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#axis-labels-points-no-background-4",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#axis-labels-points-no-background-4",
    "title": "",
    "section": "Axis Labels, Points, No Background",
    "text": "Axis Labels, Points, No Background\nY-Axis Label\n\n\n\nggplot(data = China, \n       aes(x = year, y = lifeExp)) +\n  geom_point(color = \"red\", size = 3) +\n  labs(x = \"Year\", \n       y = \"Life expectancy\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdd a layer to clean up the y-axis label."
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#axis-labels-points-no-background-5",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#axis-labels-points-no-background-5",
    "title": "",
    "section": "Axis Labels, Points, No Background",
    "text": "Axis Labels, Points, No Background\nTitle\n\n\n\nggplot(data = China, \n       aes(x = year, y = lifeExp)) +\n  geom_point(color = \"red\", size = 3) +\n  labs(x = \"Year\",\n       y = \"Life expectancy\",\n       title = \"Life expectancy in China\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdd a title layer."
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#axis-labels-points-no-background-6",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#axis-labels-points-no-background-6",
    "title": "",
    "section": "Axis Labels, Points, No Background",
    "text": "Axis Labels, Points, No Background\nTheme\n\n\n\nggplot(data = China, \n       aes(x = year, y = lifeExp)) +\n  geom_point(color = \"red\", size = 3) +\n  labs(x = \"Year\",\n       y = \"Life expectancy\",\n       title = \"Life expectancy in China\") +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPick a nicer theme with a new layer."
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#axis-labels-points-no-background-7",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#axis-labels-points-no-background-7",
    "title": "",
    "section": "Axis Labels, Points, No Background",
    "text": "Axis Labels, Points, No Background\nText Size\n\n\n\nggplot(data = China, \n       aes(x = year, y = lifeExp)) +\n  geom_point(color = \"red\", size = 3) +\n  labs(x = \"Year\",\n       y = \"Life expectancy\",\n       title = \"Life expectancy in China\") +\n  theme_minimal(base_size = 18) \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIncrease the base text size."
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#plotting-all-countries",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#plotting-all-countries",
    "title": "",
    "section": "Plotting All Countries",
    "text": "Plotting All Countries\nWe have a plot we like for China‚Ä¶\n\n‚Ä¶ but what if we want all the countries?"
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#plotting-all-countries-1",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#plotting-all-countries-1",
    "title": "",
    "section": "Plotting All Countries",
    "text": "Plotting All Countries\nA Mess!\n\n\n\nggplot(data = gapminder,\n       aes(x = year, y = lifeExp)) +\n  geom_point(color = \"red\", size = 3) +\n  labs(x = \"Year\",\n       y = \"Life expectancy\",\n       title = \"Life expectancy over time\") + \n  theme_minimal(base_size = 18) \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWe can‚Äôt tell countries apart! Maybe we could follow lines?"
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#plotting-all-countries-2",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#plotting-all-countries-2",
    "title": "",
    "section": "Plotting All Countries",
    "text": "Plotting All Countries\nLines\n\n\n\nggplot(data = gapminder, \n       aes(x = year, y = lifeExp)) +\n  geom_line(color = \"red\", size = 3) + \n  labs(x = \"Year\",\n       y = \"Life expectancy\",\n       title = \"Life expectancy over time\") + \n  theme_minimal(base_size = 18) \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot2 doesn‚Äôt know how to connect the lines!"
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#plotting-all-countries-3",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#plotting-all-countries-3",
    "title": "",
    "section": "Plotting All Countries",
    "text": "Plotting All Countries\nGrouping\n\n\n\nggplot(data = gapminder, \n       aes(x = year, y = lifeExp, \n           group = country)) +\n  geom_line(color = \"red\", size = 3) +\n  labs(x = \"Year\",\n       y = \"Life expectancy\",\n       title = \"Life expectancy over time\") + \n  theme_minimal(base_size = 18) \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThat looks more reasonable‚Ä¶ but the lines are too thick!"
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#plotting-all-countries-4",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#plotting-all-countries-4",
    "title": "",
    "section": "Plotting All Countries",
    "text": "Plotting All Countries\nSize\n\n\n\nggplot(data = gapminder, \n       aes(x = year, y = lifeExp, \n           group = country)) +\n  geom_line(color = \"red\") +\n  labs(x = \"Year\",\n       y = \"Life expectancy\",\n       title = \"Life expectancy over time\") + \n  theme_minimal(base_size = 18) \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMuch better‚Ä¶ but what if we highlight regional differences?"
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#plotting-all-countries-5",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#plotting-all-countries-5",
    "title": "",
    "section": "Plotting All Countries",
    "text": "Plotting All Countries\nColor\n\n\n\nggplot(data = gapminder, \n       aes(x = year, y = lifeExp, \n           group = country, \n           color = continent)) +\n  geom_line() +\n  labs(x = \"Year\",\n       y = \"Life expectancy\",\n       title = \"Life expectancy over time\") + \n  theme_minimal(base_size = 18) \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPatterns are obvious‚Ä¶ but it might be even more impactful if we separate continents completely."
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#plotting-all-countries-6",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#plotting-all-countries-6",
    "title": "",
    "section": "Plotting All Countries",
    "text": "Plotting All Countries\nFacets\n\n\n\nggplot(data = gapminder, \n       aes(x = year, y = lifeExp, \n           group = country, \n           color = continent)) +\n  geom_line() +\n  labs(x = \"Year\",\n       y = \"Life expectancy\",\n       title = \"Life expectancy over time\") + \n  theme_minimal(base_size = 18) +\n  facet_wrap(vars(continent))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNow the text is too big!"
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#plotting-all-countries-7",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#plotting-all-countries-7",
    "title": "",
    "section": "Plotting All Countries",
    "text": "Plotting All Countries\nText Size\n\n\n\nggplot(data = gapminder, \n       aes(x = year, y = lifeExp, \n           group = country, \n           color = continent)) +\n  geom_line() +\n  labs(x = \"Year\",\n       y = \"Life expectancy\",\n       title = \"Life expectancy over time\") + \n  theme_minimal() +\n  facet_wrap(vars(continent))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBetter. Do we even need the legend anymore?"
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#plotting-all-countries-8",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#plotting-all-countries-8",
    "title": "",
    "section": "Plotting All Countries",
    "text": "Plotting All Countries\nNo Legend\n\n\n\nggplot(data = gapminder, \n       aes(x = year, y = lifeExp, \n           group = country, \n           color = continent)) +\n  geom_line() +\n  labs(x = \"Year\",\n       y = \"Life expectancy\",\n       title = \"Life expectancy over time\") + \n  theme_minimal() +\n  facet_wrap(vars(continent)) + \n  theme(legend.position = \"none\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLooking pretty good!"
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#make-a-histogram",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#make-a-histogram",
    "title": "",
    "section": "Make a histogram",
    "text": "Make a histogram\nIn pairs, create a histogram of life expectancy observations in the complete Gapminder dataset.\n\nSet the base layer by specifying the data as gapminder and the x variable as lifeExp\nAdd a second layer to create a histogram using the function geom_histogram()\nCustomize your plot with nice axis labels and a title.\nAdd the color ‚Äúsalmon‚Äù to the entire plot (hint: use the fill argument, not color).\nChange this fill setting to an aesthetic and map continent onto it.\nChange the geom to geom_freqpoly. What happened and how might you fix it?\nAdd facets for continent (create only 1 column).\nAdd one of the built-in themes from ggplot2.\nRemove the legend from the plot."
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#further-customization",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#further-customization",
    "title": "",
    "section": "Further customization",
    "text": "Further customization\nNext, we‚Äôll discuss:\n\nStoring, modifying, and saving ggplots\nAdvanced axis changes (scales, text, ticks)\nLegend changes (scales, colors, locations)\nUsing multiple geoms\nAdding annotation for emphasis"
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#storing-plots",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#storing-plots",
    "title": "",
    "section": "Storing Plots",
    "text": "Storing Plots\nWe can assign a ggplot object to a name:\n\nlifeExp_by_year &lt;- \n  ggplot(data = gapminder, \n       aes(x = year, y = lifeExp, \n           group = country, \n           color = continent)) +\n  geom_line() +\n  labs(x = \"Year\",\n       y = \"Life expectancy\",\n       title = \"Life expectancy over time\") + \n  theme_minimal() + \n  facet_wrap(vars(continent)) +\n  theme(legend.position = \"none\")\n\nAfterwards, you can display or modify ggplots‚Ä¶"
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#showing-a-stored-graph",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#showing-a-stored-graph",
    "title": "",
    "section": "Showing a Stored Graph",
    "text": "Showing a Stored Graph\n\nlifeExp_by_year"
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#overriding-previous-specifications",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#overriding-previous-specifications",
    "title": "",
    "section": "Overriding previous specifications",
    "text": "Overriding previous specifications\n\nlifeExp_by_year + \n  facet_grid(cols = vars(continent))"
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#adding-more-layers",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#adding-more-layers",
    "title": "",
    "section": "Adding More Layers",
    "text": "Adding More Layers\n\nlifeExp_by_year +\n  facet_grid(cols = vars(continent)) + \n    theme(legend.position = \"bottom\")"
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#saving-ggplot-plots",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#saving-ggplot-plots",
    "title": "",
    "section": "Saving ggplot Plots",
    "text": "Saving ggplot Plots\nIf you want to save a ggplot, use ggsave():\n\nggsave(filename = \"I_saved_a_file.pdf\", \n       plot = lifeExp_by_year,\n       height = 3, width = 5, units = \"in\")\n\nIf you didn‚Äôt manually set font sizes, these will usually come out at a reasonable size given the dimensions of your output file."
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#changing-the-axes",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#changing-the-axes",
    "title": "",
    "section": "Changing the Axes",
    "text": "Changing the Axes\nWe can modify the axes in a variety of ways, such as:\n\nChange the \\(x\\) or \\(y\\) range using xlim() or ylim() layers\nChange to a logarithmic or square-root scale on either axis: scale_x_log10(), scale_y_sqrt()\nChange where the major/minor breaks are: scale_x_continuous(breaks = value(s), minor_breaks = value(s))"
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#axis-changes",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#axis-changes",
    "title": "",
    "section": "Axis Changes",
    "text": "Axis Changes\n\nggplot(data = China, aes(x = year, y = gdpPercap)) +\n    geom_line() +\n    xlim(1940, 2010) + \n    scale_y_log10(breaks = c(1000, 2000, 3000, 4000, 5000)) + \n    ggtitle(\"Chinese GDP per capita\")"
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#precise-legend-position",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#precise-legend-position",
    "title": "",
    "section": "Precise Legend Position",
    "text": "Precise Legend Position\n\nlifeExp_by_year +\n1  theme(legend.position = \"inside\", legend.position.inside = c(0.8, 0.2))\n\n\n1\n\nIf you choose position the legend inside the plot pane itself, you need to provide the coordinates (between c(1, 1)) for where it should be placed.\n\n\n\n\n\nInstead of plot-pane coordinates, you could also use top, bottom, left, or right."
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#scales-for-color-shape-etc.",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#scales-for-color-shape-etc.",
    "title": "",
    "section": "Scales for Color, Shape, etc.",
    "text": "Scales for Color, Shape, etc.\nScales are layers that control how the mapped aesthetics appear.\nYou can modify these with a scale_[aesthetic]_[option]() layer:\n\n[aesthetic] is x, y, color, shape, linetype, alpha, size, fill, etc.\n[option] is something like manual, continuous, binned or discrete (depending on nature of the variable).\n\n\nExamples:\n\nscale_alpha_ordinal(): scales alpha transparency for ordinal categorical variable\nscale_x_log10(): maps a log10 transformation of the x-axis variable\nscale_color_manual(): allows manual specification of color aesthetic"
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#legend-name-and-manual-colors",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#legend-name-and-manual-colors",
    "title": "",
    "section": "Legend Name and Manual Colors",
    "text": "Legend Name and Manual Colors\n\nlifeExp_by_year +\n  theme(legend.position = \"inside\", legend.position.inside = c(0.8, 0.2)) +\n1  scale_color_manual(\n2    name = \"Which continent are\\nwe looking at?\",\n    values = c(\"Africa\" = \"#80719e\", \"Americas\" = \"#fdc57e\", \n               \"Asia\" = \"#c55347\", \"Europe\" = \"#007190\", \"Oceania\" = \"#648f7b\"))\n\n\n1\n\nThis scale argument knows to ‚Äúmap‚Äù onto continent because it is specified as the aesthetic for color in our original ggplot object.\n\n2\n\n\\n adds a line break"
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#fixed-versus-free-scales",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#fixed-versus-free-scales",
    "title": "",
    "section": "Fixed versus Free Scales ",
    "text": "Fixed versus Free Scales \n\nUntransformedFixedFree xFree yFree x & y\n\n\n\n\nCode\ngapminder_sub &lt;- gapminder |&gt; \n1  filter(year %in% c(1952, 1982, 2002))\n  \nscales_plot &lt;- ggplot(data = gapminder_sub, \n       aes(x = lifeExp, y = gdpPercap, fill = continent)) + \n2  geom_jitter(alpha = 0.5,\n3              pch = 21,\n4              size = 3,\n5              color = \"black\") +\n6  scale_fill_viridis_d(option = \"D\") +\n7  facet_grid(rows = vars(year),\n             cols = vars(continent)) +\n8  ggthemes::theme_tufte(base_size = 20)\nscales_plot\n\n\n\n1\n\nCreate subset with only 3 years of the data\n\n2\n\nalpha controls transparency and ranges from 0 (completely opaque) to 1 (completely solid)\n\n3\n\nThis shape is a circle with fill (therefore it can take different colors for its outline, via color, and its interior, via fill)\n\n4\n\nIncrease size of points\n\n5\n\nOutline of circle is black\n\n6\n\nCircle is filled by colors perceptable for various forms of color-blindness\n\n7\n\nFacet by years in the row and by continent in the columns\n\n8\n\nUse a nice theme from the ggthemes package and increase text size throughout the plot\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\n9scales_plot + scale_y_log10(breaks = c(250, 1000, 10000, 50000, 115000))\n\n\n\n9\n\nTransform the y axis to the logarithm to gain better visualization\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nscales_plot + scale_y_log10(breaks = c(250, 1000, 10000, 50000, 115000)) +\n  facet_grid(rows = vars(year), \n             cols = vars(continent), \n10             scales = \"free_x\")\n\n\n\n10\n\nMake the x-axis vary by data\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nscales_plot + scale_y_log10(breaks = c(250, 1000, 10000, 50000, 115000)) +\n  facet_grid(rows = vars(year), \n             cols = vars(continent), \n11             scales = \"free_y\")\n\n\n\n11\n\nMake the y-axis vary by data\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nscales_plot + scale_y_log10(breaks = c(250, 1000, 10000, 50000, 115000)) +\n  facet_grid(rows = vars(year), \n             cols = vars(continent), \n12             scales = \"free\")\n\n\n\n12\n\nMake both axes vary by data"
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#using-multiple-geoms",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#using-multiple-geoms",
    "title": "",
    "section": "Using multiple geoms",
    "text": "Using multiple geoms\n\nggplot(gapminder, aes(x = continent, y = lifeExp)) +\n  geom_boxplot(outlier.colour = \"maroon\")"
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#using-multiple-geoms-1",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#using-multiple-geoms-1",
    "title": "",
    "section": "Using multiple geoms",
    "text": "Using multiple geoms\n\nggplot(gapminder, aes(x = continent, y = lifeExp)) +\n  geom_boxplot(outlier.colour = \"maroon\") +\n  geom_point(alpha = 0.25)"
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#using-multiple-geoms-2",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#using-multiple-geoms-2",
    "title": "",
    "section": "Using multiple geoms",
    "text": "Using multiple geoms\n\nggplot(gapminder, aes(x = continent, y = lifeExp)) +\n  geom_boxplot(outlier.colour = \"maroon\") +\n  geom_jitter(alpha = 0.25)"
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#using-multiple-geoms-3",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#using-multiple-geoms-3",
    "title": "",
    "section": "Using multiple geoms",
    "text": "Using multiple geoms\n\nggplot(gapminder, aes(x = continent, y = lifeExp)) +\n  geom_boxplot(outlier.colour = \"maroon\") +\n1  geom_jitter(position = position_jitter(width = 0.1, height = 0),\n              alpha = 0.25)\n\n\n1\n\nYou‚Äôll notice our outliers are repeated here since we‚Äôve mapped them with both geoms. We‚Äôll clean that up in the next slide‚Ä¶"
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#section-4",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#section-4",
    "title": "",
    "section": "",
    "text": "Annotating specific datapoints for emphasis \n\nSpecify outliersRemove outliersBasic annotationOffset annotation\n\n\n\n\nCode\noutliers &lt;- gapminder |&gt; \n  group_by(continent) |&gt; \n  mutate(outlier = case_when(\n1    quantile(lifeExp, probs = 0.25) - (IQR(lifeExp) * 1.5) &gt; lifeExp ~ \"outlier\",\n2    quantile(lifeExp, probs = 0.75) + (IQR(lifeExp) * 1.5) &lt; lifeExp ~ \"outlier\",\n    .default = NA)\n    ) |&gt; \n3  filter(!is.na(outlier)) |&gt;\n4  ungroup() |&gt; group_by(country) |&gt;\n5  filter(lifeExp == min(lifeExp))\n\noutliers\n\n\n\n1\n\nAnything lower than the 1st quartile - 1.5*IQR\n\n2\n\nAnything higher than the 3rd quartile + 1.5*IQR\n\n3\n\nRemove non-outliers (coded as missing in previous step)\n\n4\n\nRegroup by country\n\n5\n\nFilter for just the minimum life expectancy for each country\n\n\n\n\n# A tibble: 13 √ó 7\n# Groups:   country [13]\n   country                continent  year lifeExp      pop gdpPercap outlier\n   &lt;fct&gt;                  &lt;fct&gt;     &lt;int&gt;   &lt;dbl&gt;    &lt;int&gt;     &lt;dbl&gt; &lt;chr&gt;  \n 1 Albania                Europe     1952    55.2  1282697     1601. outlier\n 2 Bosnia and Herzegovina Europe     1952    53.8  2791000      974. outlier\n 3 Bulgaria               Europe     1952    59.6  7274900     2444. outlier\n 4 Haiti                  Americas   1952    37.6  3201488     1840. outlier\n 5 Libya                  Africa     2002    72.7  5368585     9535. outlier\n 6 Mauritius              Africa     2007    72.8  1250882    10957. outlier\n 7 Montenegro             Europe     1952    59.2   413834     2648. outlier\n 8 Portugal               Europe     1952    59.8  8526050     3068. outlier\n 9 Reunion                Africa     1992    73.6   622191     6101. outlier\n10 Rwanda                 Africa     1992    23.6  7290203      737. outlier\n11 Serbia                 Europe     1952    58.0  6860147     3581. outlier\n12 Tunisia                Africa     2002    73.0  9770575     5723. outlier\n13 Turkey                 Europe     1952    43.6 22235677     1969. outlier\n\n\n\n\n\n\nCode\nno_outliers &lt;- gapminder |&gt; \n  group_by(continent) |&gt; \n  mutate(outlier = case_when(\n    quantile(lifeExp, probs = 0.25) - (IQR(lifeExp) * 1.5) &gt; lifeExp ~ \"outlier\",\n    quantile(lifeExp, probs = 0.75) + (IQR(lifeExp) * 1.5) &lt; lifeExp ~ \"outlier\",\n    .default = NA)) |&gt; \n6  filter(is.na(outlier))\n\nno_outliers\n\n\n\n6\n\nRemove outliers from original data\n\n\n\n\n# A tibble: 1,679 √ó 7\n# Groups:   continent [5]\n   country     continent  year lifeExp      pop gdpPercap outlier\n   &lt;fct&gt;       &lt;fct&gt;     &lt;int&gt;   &lt;dbl&gt;    &lt;int&gt;     &lt;dbl&gt; &lt;chr&gt;  \n 1 Afghanistan Asia       1952    28.8  8425333      779. &lt;NA&gt;   \n 2 Afghanistan Asia       1957    30.3  9240934      821. &lt;NA&gt;   \n 3 Afghanistan Asia       1962    32.0 10267083      853. &lt;NA&gt;   \n 4 Afghanistan Asia       1967    34.0 11537966      836. &lt;NA&gt;   \n 5 Afghanistan Asia       1972    36.1 13079460      740. &lt;NA&gt;   \n 6 Afghanistan Asia       1977    38.4 14880372      786. &lt;NA&gt;   \n 7 Afghanistan Asia       1982    39.9 12881816      978. &lt;NA&gt;   \n 8 Afghanistan Asia       1987    40.8 13867957      852. &lt;NA&gt;   \n 9 Afghanistan Asia       1992    41.7 16317921      649. &lt;NA&gt;   \n10 Afghanistan Asia       1997    41.8 22227415      635. &lt;NA&gt;   \n# ‚Ñπ 1,669 more rows\n\n\n\n\n\n\nCode\nggplot(gapminder, aes(x = continent, y = lifeExp)) +\n7  geom_boxplot(outlier.shape = NA) +\n8  geom_jitter(data = no_outliers,\n              position = position_jitter(width = 0.1, height = 0), \n              alpha = 0.25, \n              size = 3) + \n9  geom_jitter(data = outliers,\n              color = \"maroon\",\n              position = position_jitter(width = 0.1, height = 0), \n              alpha = 0.7, \n              size = 3) +\n10  geom_text(data = outliers,\n            aes(label = country),\n            color = \"maroon\", \n            size = 8) + \n  theme_minimal(base_size = 18)\n\n\n\n7\n\nRemove outliers from boxplot geom\n\n8\n\nPlot points that are not categorized as outliers without color\n\n9\n\nPlot points that are categorized as outliers with color\n\n10\n\nOnly add identifying text to outlier points\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\n11library(ggrepel)\nggplot(gapminder, aes(x = continent, y = lifeExp)) +\n  geom_boxplot(outlier.shape = NA) +\n  geom_jitter(data = no_outliers, \n              position = position_jitter(width = 0.1, height = 0), \n              alpha = 0.25, \n              size = 3) + \n  geom_jitter(data = outliers, \n              color = \"maroon\",\n              position = position_jitter(width = 0.1, height = 0), \n              alpha = 0.7, \n              size = 3) +\n  geom_label_repel(data = outliers, \n                   aes(label = country), \n                   color = \"maroon\", \n12                   alpha = 0.7,\n                   size = 8, \n13                   max.overlaps = 13) +\n  theme_minimal(base_size = 18)\n\n\n\n11\n\nA package that provides additional geoms for ggplot2 to repel overlapping text labels\n\n12\n\nAllow points to be somewhat visible through text labels\n\n13\n\nTolerance for permissible overlapping labels (default is 10; I chose 13 so none of the outliers would be removed)"
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#end-result",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#end-result",
    "title": "",
    "section": "End Result",
    "text": "End Result\nWe‚Äôre going to slowly build up a really detailed plot now!"
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#base-ggplot-1",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#base-ggplot-1",
    "title": "",
    "section": "Base ggplot",
    "text": "Base ggplot\n\nCodePlot\n\n\n\nggplot(data = gapminder, \n       aes(x = year, y = lifeExp, group = country)) \n\n\n\n\n\n\n\n\nWhat might be a good geom layer for this data?"
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#lines-1",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#lines-1",
    "title": "",
    "section": "Lines",
    "text": "Lines\n\nCodePlot\n\n\n\nggplot(data = gapminder, \n       aes(x = year, y = lifeExp, group = country)) +\n  geom_line() \n\n\n\n\n\n\n\n\nLet‚Äôs also add a continent-specific average so we can visualize country-deviations from the regional average."
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#continent-average",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#continent-average",
    "title": "",
    "section": "Continent Average",
    "text": "Continent Average\n\nCodePlot\n\n\n\nggplot(data = gapminder, \n       aes(x = year, y = lifeExp, group = country)) +\n  geom_line() +\n  geom_line(stat = \"smooth\", \n1            method = \"loess\",\n            aes(group = continent)) \n\n\n1\n\nA loess curve is something like a moving average.\n\n\n\n\n\n\n\n\n\n\n\nWe can‚Äôt quite distinguish the averages from everything else yet. Let‚Äôs facet by continent and start mapping aesthetics to our data to visualize things more clearly."
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#facets-1",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#facets-1",
    "title": "",
    "section": "Facets",
    "text": "Facets\n\nCodePlot\n\n\n\nggplot(data = gapminder, \n       aes(x = year, y = lifeExp, group = country)) +\n  geom_line() +\n  geom_line(stat = \"smooth\", \n            method = \"loess\", \n            aes(group = continent)) +\n1  facet_wrap(vars(continent),\n             nrow = 2)\n\n\n1\n\nYou can specify the faceting variable by wrapping the variable name in vars() (preferred), using ~ variable_name notation, or quoting variable name(s) as a character vector.\n\n\n\n\n\n\n\n\n\n\n\nFacets allow us to gain a clearer understanding of the regional patterns. We want to differentiate the continent-average line from the country-specific lines though so let‚Äôs change it‚Äôs color."
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#color-scale",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#color-scale",
    "title": "",
    "section": "Color Scale",
    "text": "Color Scale\n\nCodePlot\n\n\n\nggplot(data = gapminder, \n       aes(x = year, y = lifeExp, group = country)) +\n  geom_line() +\n  geom_line(stat = \"smooth\", \n            method = \"loess\", \n            aes(group = continent)) +\n  facet_wrap(~ continent, \n             nrow = 2) +\n1  scale_color_manual(name = \"Life Exp. for:\",\n2                     values = c(\"Country\" = \"black\", \"Continent\" = \"blue\"))\n\n\n1\n\nCreate informative legend title\n\n2\n\nSpecify mapping variables and their respective color values\n\n\n\n\n\n\n\n\n\n\n\nHmm, can‚Äôt quite see the blue line yet. Let‚Äôs make it bigger?"
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#size-scale",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#size-scale",
    "title": "",
    "section": "Size Scale",
    "text": "Size Scale\n\nCodePlot\n\n\n\nggplot(data = gapminder, \n       aes(x = year, y = lifeExp, group = country)) +\n  geom_line() +\n  geom_line(stat = \"smooth\", \n            method = \"loess\", \n            aes(group = continent)) +\n  facet_wrap(~ continent, \n             nrow = 2) +\n  scale_color_manual(name = \"Life Exp. for:\", \n                     values = c(\"Country\" = \"black\", \"Continent\" = \"blue\")) +\n1  scale_size_manual(name = \"Life Exp. for:\",\n2                    values = c(\"Country\" = 0.25, \"Continent\" = 3))\n\n\n1\n\nUse same legend title as previous scale to combine separate aesthetics into one legend\n\n2\n\nSpecify mapping variables and their respective size values\n\n\n\n\n\n\n\n\n\n\n\nIt doesn‚Äôt look like our color and size scales are actually mapping onto our variables. Why is that?"
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#mapping-color-size",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#mapping-color-size",
    "title": "",
    "section": "Mapping Color & Size",
    "text": "Mapping Color & Size\n\nCodePlot\n\n\n\nggplot(data = gapminder, \n       aes(x = year, y = lifeExp, group = country)) +\n1  geom_line(aes(color = \"Country\", size = \"Country\")) +\n  geom_line(stat = \"smooth\", method = \"loess\", \n            aes(group = continent, color = \"Continent\", size = \"Continent\")) +\n  facet_wrap(~ continent, \n             nrow = 2) +\n  scale_color_manual(name = \"Life Exp. for:\", \n                     values = c(\"Country\" = \"black\", \"Continent\" = \"blue\")) +\n  scale_size_manual(name = \"Life Exp. for:\", \n                    values = c(\"Country\" = 0.25, \"Continent\" = 3))\n\n\n1\n\nAdd mapping aesthetics for color and size for both Country- and Continent-specific line geoms\n\n\n\n\n\n\n\n\n\n\n\nHuzzah! Let‚Äôs change the transparency on these lines a touch so we can see all our data more easily."
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#alpha-transparency",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#alpha-transparency",
    "title": "",
    "section": "Alpha (Transparency)",
    "text": "Alpha (Transparency)\n\nCodePlot\n\n\n\nggplot(data = gapminder, \n       aes(x = year, y = lifeExp, group = country)) +\n  geom_line(alpha = 0.5, \n            aes(color = \"Country\", size = \"Country\")) +\n  geom_line(stat = \"smooth\", method = \"loess\", \n            aes(group = continent, color = \"Continent\", size = \"Continent\"), \n            alpha = 0.5) +\n  facet_wrap(~ continent, \n             nrow = 2) +\n  scale_color_manual(name = \"Life Exp. for:\", \n                     values = c(\"Country\" = \"black\", \"Continent\" = \"blue\")) +\n  scale_size_manual(name = \"Life Exp. for:\", \n                    values = c(\"Country\" = 0.25, \"Continent\" = 3))\n\n\n\n\n\n\n\n\nNow we‚Äôre getting somewhere! We can also add useful labels and clean up the theme."
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#theme-and-labels",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#theme-and-labels",
    "title": "",
    "section": "Theme and Labels",
    "text": "Theme and Labels\n\nCodePlot\n\n\n\nggplot(data = gapminder, \n       aes(x = year, y = lifeExp, group = country)) +\n  geom_line() +\n  geom_line(stat = \"smooth\", \n            method = \"loess\", \n            aes(group = continent)) +\n  facet_wrap(~ continent, \n             nrow = 2) +\n  scale_color_manual(name = \"Life Exp. for:\", \n                     values = c(\"Country\" = \"black\", \"Continent\" = \"blue\")) +\n  scale_size_manual(name = \"Life Exp. for:\", \n                    values = c(\"Country\" = 0.25, \"Continent\" = 3)) +\n1  theme_minimal(base_size = 14) +\n2  labs(y = \"Years\",\n       x = \"\")\n\n\n1\n\nAdd a nicer theme and increase relative font size throughout plot\n\n2\n\nSince our x-axis is calendar year and our y-axis is years of life expectancy, let‚Äôs avoid confusion by assigning Years to the y-axis and removing the x-axis label (which can be inferred from the plot title we‚Äôll add next)\n\n\n\n\n\n\n\n\n\n\n\nWhat‚Äôs our plot showing? We should be explicit about that."
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#title-and-subtitle",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#title-and-subtitle",
    "title": "",
    "section": "Title and Subtitle",
    "text": "Title and Subtitle\n\nCodePlot\n\n\n\nggplot(data = gapminder, \n       aes(x = year, y = lifeExp, group = country)) +\n  geom_line() +\n  geom_line(stat = \"smooth\", \n            method = \"loess\", \n            aes(group = continent)) +\n  facet_wrap(~ continent, \n             nrow = 2) +\n  scale_color_manual(name = \"Life Exp. for:\", \n                     values = c(\"Country\" = \"black\", \"Continent\" = \"blue\")) +\n  scale_size_manual(name = \"Life Exp. for:\", \n                    values = c(\"Country\" = 0.25, \"Continent\" = 3)) +\n  theme_minimal(base_size = 14) + \n  labs(y = \"Years\", \n       x = \"\", \n       title = \"Life Expectancy, 1952-2007\", \n       subtitle = \"By continent and country\")\n\n\n\n\n\n\n\n\nThe x-axis feels a little busy right now‚Ä¶"
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#angled-tick-values",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#angled-tick-values",
    "title": "",
    "section": "Angled Tick Values",
    "text": "Angled Tick Values\n\nCodePlot\n\n\n\nggplot(data = gapminder, \n       aes(x = year, y = lifeExp, group = country)) +\n  geom_line() +\n  geom_line(stat = \"smooth\", \n            method = \"loess\", \n            aes(group = continent)) +\n  facet_wrap(~ continent, \n             nrow = 2) +\n  scale_color_manual(name = \"Life Exp. for:\", \n                     values = c(\"Country\" = \"black\", \"Continent\" = \"blue\")) +\n  scale_size_manual(name = \"Life Exp. for:\", \n                    values = c(\"Country\" = 0.25, \"Continent\" = 3)) +\n  theme_minimal(base_size = 14) + \n  labs(y = \"Years\", \n       x = \"\", \n       title = \"Life Expectancy, 1952-2007\", \n       subtitle = \"By continent and country\") +\n1  theme(axis.text.x = element_text(angle = 45))\n\n\n1\n\nThe theme() function has many arguments that allow you to provide more granular, non-data, aesthetic customizations, such as rotating the x-axis text in this example.\n\n\n\n\n\n\n\n\n\n\n\nNote - fewer values might be better than angled labels! Finally, let‚Äôs move our legend so it isn‚Äôt wasting space."
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#legend-position",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#legend-position",
    "title": "",
    "section": "Legend Position",
    "text": "Legend Position\n\nCodePlot\n\n\n\nggplot(data = gapminder, \n       aes(x = year, y = lifeExp, group = country)) +\n  geom_line() +\n  geom_line(stat = \"smooth\", \n            method = \"loess\", \n            aes(group = continent)) +\n  facet_wrap(~ continent, \n             nrow = 2) +\n  scale_color_manual(name = \"Life Exp. for:\", \n                     values = c(\"Country\" = \"black\", \"Continent\" = \"blue\")) +\n  scale_size_manual(name = \"Life Exp. for:\", \n                    values = c(\"Country\" = 0.25, \"Continent\" = 3)) +\n  theme_minimal(base_size = 14) + \n  labs(y = \"Years\", \n       x = \"\", \n       title = \"Life Expectancy, 1952-2007\", \n       subtitle = \"By continent and country\") +\n  theme(legend.position = \"inside\", legend.position.inside = c(0.82, 0.15), \n        axis.text.x = element_text(angle = 45))\n\n\n\n\n\n\n\n\nVoil√†!"
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#tidyverse-extended-universe",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#tidyverse-extended-universe",
    "title": "",
    "section": "tidyverse extended universe",
    "text": "tidyverse extended universe\nggplot2 can obviously do a lot on its own. But because R allows for anyone and everyone to expand the functionality of what already exists, numerous extensions1 to ggplot2 have been created.\n\nWe‚Äôve already seen one example with ggrepel. But let‚Äôs look at a few others‚Ä¶\n\nThe full list can be found here."
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#geomtextpath",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#geomtextpath",
    "title": "",
    "section": "geomtextpath ",
    "text": "geomtextpath \nIf you want your labels to follow along the path of your plot (and maintain proper angles and spacing) try using geomtextpath.\n\n\nCode\n1library(geomtextpath)\ngapminder |&gt; \n2  filter(country %in% c(\"Cuba\", \"Haiti\", \"Dominican Republic\")) |&gt;\n  ggplot(aes(x = year, \n             y = lifeExp, \n             color = country, \n3             label = country)) +\n4  geom_textpath() +\n5  theme(legend.position = \"none\")\n\n\n\n1\n\nRun install.packages(\"geomtextpath\") in console first\n\n2\n\nRestricting data to 3 regionally-specific countries\n\n3\n\nSpecify label with text to appear\n\n4\n\nAdding textpath geom to put labels within lines\n\n5\n\nRemoving legend"
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#ggridges",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#ggridges",
    "title": "",
    "section": "ggridges ",
    "text": "ggridges \nWe can visualize the differing distributions of a continuous variable by levels of a categorical variable with ggridges!\n\n\nCode\n1library(ggridges)\nggplot(gapminder, \n       aes(x = lifeExp, \n           y = continent, \n           fill = continent, \n           color = continent)) +\n2  geom_density_ridges(alpha = 0.5,\n                      show.legend = FALSE)\n\n\n\n1\n\nRun install.packages(\"ggridges\") in console first\n\n2\n\nAdd ridges, make all ridges a bit transparent, remove legend"
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#correlation-matricies",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#correlation-matricies",
    "title": "",
    "section": "Correlation Matricies ",
    "text": "Correlation Matricies \nMake visually appealing & informative correlation plots in GGally or ggcorrplot.\n\nGGallyggcorrplotBonus: ggpairs() from GGally\n\n\n\n\nCode\n1library(GGally)\n\nggcorr(swiss, \n       geom = \"circle\", \n2       min_size = 25,\n3       max_size = 25,\n4       label = TRUE,\n5       label_alpha = TRUE,\n6       label_round = 2,\n       legend.position = \"inside\",\n       legend.position.inside = c(0.15, 0.6), \n       legend.size = 12)\n\n\n\n1\n\nRun install.packages(\"GGally\") in console first\n\n2\n\nSpecify minimum size of shape\n\n3\n\nSpecify maximum size of shape\n\n4\n\nLabel circles with correlation coefficient\n\n5\n\nWeaker correlations have lower alpha\n\n6\n\nRound correlations coefficients to 2 decimal points\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\n1library(ggcorrplot)\n\n2corr &lt;- round(cor(swiss), 1)\n3p_mat &lt;- cor_pmat(swiss)\n\nggcorrplot(corr,\n4           hc.order = TRUE,\n5           type = \"lower\",\n6           p.mat = p_mat,\n7           insig = \"pch\",\n8           outline.color = \"black\",\n9           ggtheme = ggthemes::theme_tufte(),\n10           colors = c(\"#4e79a7\", \"white\", \"#e15759\")) +\n  theme(legend.position = \"inside\", legend.position.inside = c(0.15, 0.67))\n\n\n\n1\n\nRun install.packages(\"ggcorrplot\") in console first\n\n2\n\nCompute correlation matrix\n\n3\n\nCompute matrix of correlation p-values\n\n4\n\nUse hierarchical clustering to group like-correlations together\n\n5\n\nOnly show lower half of correlation matrix\n\n6\n\nGive corresponding p-values for correlation matrix\n\n7\n\nAdd default shape (an X) to correlations that are insignificant\n\n8\n\nOutline cells in white\n\n9\n\nUsing a specific theme I like from ggthemes package\n\n10\n\nSpecify custom colors\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nggpairs(swiss, \n1        lower = list(continuous = wrap(\"smooth\",\n                                       alpha = 0.5, \n                                       size=0.2))) + \n2  ggthemes::theme_tufte()\n\n\n\n1\n\nSpecify a smoothing line added to scatterplots\n\n2\n\nAdd nice theme from ggthemes"
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#patchwork",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#patchwork",
    "title": "",
    "section": "patchwork ",
    "text": "patchwork \nCombine separate plots into the same graphic using patchwork.\n\n\nCode\n1library(patchwork)\n\n2plot_lifeExp &lt;- ggplot(gapminder,\n                       aes(x = lifeExp, \n                           y = continent, \n                           fill = continent, \n                           color = continent)) + \n  geom_density_ridges(alpha = 0.5, show.legend = FALSE)\n\n3plot_boxplot &lt;- ggplot(gapminder,\n                       aes(x = continent, \n                           y = lifeExp, \n                           color = continent), \n                       alpha = 0.5) +\n4  ggplot2::geom_boxplot(outlier.shape = NA, varwidth = TRUE) +\n5  coord_flip() +\n6  geom_jitter(data = outliers,\n              color = \"black\",\n              position = position_jitter(width = 0.1, height = 0), \n              alpha = 0.6) + \n7  geom_jitter(data = no_outliers,\n              position = position_jitter(width = 0.1, height = 0), \n              alpha = 0.25) + \n8  geom_label_repel(data = outliers,\n                   aes(label = country), \n                   color = \"black\", \n                   alpha = 0.6, \n                   max.overlaps = 13) +\n9  theme(axis.text.y = element_blank(),\n10        axis.ticks.y = element_blank(),\n11        axis.title.y = element_blank(),\n        legend.position = \"none\")\n\n12plot_lifeExp + plot_boxplot\n\n\n\n1\n\nRun install.packages(\"patchwork\") in console first\n\n2\n\nCreate first plot object\n\n3\n\nCreate second plot object\n\n4\n\nRemove geom_boxplot outliers and make width of boxes relative to N\n\n5\n\nFlip the coordinates (x & y) to align with first plot\n\n6\n\nAdd outlier datapoints\n\n7\n\nAdd non-outlier datapoints\n\n8\n\nMapping new dataset with the outliers\n\n9\n\nRemove y-axis text\n\n10\n\nRemove y-axis ticks\n\n11\n\nRemove y-axis title\n\n12\n\nAdding both objects together places them side by side"
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#themes-in-ggplot2",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#themes-in-ggplot2",
    "title": "",
    "section": "themes in ggplot2 ",
    "text": "themes in ggplot2 \nThere are several built-in themes within ggplot2.\n\nbwlightclassiclinedrawdarkminimalgrayvoid\n\n\n\n\nCode\n1plot_lifeExp + theme_bw()\n\n\n\n1\n\nReusing plot_lifeExp from previous slide and changing theme\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nplot_lifeExp + theme_light()\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nplot_lifeExp + theme_classic()\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nplot_lifeExp + theme_linedraw()\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nplot_lifeExp + theme_dark()\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nplot_lifeExp + theme_minimal()\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nplot_lifeExp + theme_gray()\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nplot_lifeExp + theme_void()"
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#ggthemes",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#ggthemes",
    "title": "",
    "section": "ggthemes ",
    "text": "ggthemes \n\nexceleconomistfewfivethirtyeightgdocsstatatuftewsj\n\n\n\n\nCode\nlibrary(ggthemes)\nplot_lifeExp + theme_excel()\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nplot_lifeExp + theme_economist()\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nplot_lifeExp + theme_few()\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nplot_lifeExp + theme_fivethirtyeight()\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nplot_lifeExp + theme_gdocs()\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nplot_lifeExp + theme_stata()\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nplot_lifeExp + theme_tufte()\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nplot_lifeExp + theme_wsj()"
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#other-theme-packages-and-making-your-own",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#other-theme-packages-and-making-your-own",
    "title": "",
    "section": "Other theme packages and making your own!",
    "text": "Other theme packages and making your own!\nThese are just a handful of all the ready-made theme options available out there. Some other packages that might be useful/fun to check out:\n\nhrbrthemes - provides typography-centric themes and theme components for ggplot2\nurbnthemes a set of tools for creating Urban Institute-themed plots and maps in R\nbbplot - provides helpful functions for creating and exporting graphics made in ggplot in the style used by the BBC News data team\nggpomological - A ggplot2 theme based on the USDA Pomological Watercolor Collection\n\n\nYou are also able to design your own theme using the theme() function and really getting into the weeds with how to specify all the non-data ink in your plot. Once you come up with a theme you like you can save it as an object (i.e.¬†my_theme) and add it to any ggplot you create to maintain your own unique and consistent style."
  },
  {
    "objectID": "Lectures/Lecture2/CSSS508_Lecture2.html#summary-1",
    "href": "Lectures/Lecture2/CSSS508_Lecture2.html#summary-1",
    "title": "",
    "section": "Summary",
    "text": "Summary\nggplot2 can do a LOT! I don‚Äôt expect you to memorize all these tools, and neither should you! With time and practice, you‚Äôll start to remember the key tools.\n\n\n\nWhen in doubt, Google it! (i.e.¬†‚ÄúR ggplot ‚Äòwhatever issue you need help with‚Äô‚Äù)\nThere are lots of great resources out there:\n\nThe ggplot2 reference page\nThe Cookbook for R website\nThe RStudio ggplot Cheatsheets.\nKieran Healy‚Äôs book Data Visualization: A Practical Introduction (right) is targeted at social scientists without technical backgrounds and uses the same tools we‚Äôll be learning in this class."
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture5.html#title-slide",
    "href": "Lectures/Lecture5/CSSS508_Lecture5.html#title-slide",
    "title": "",
    "section": "",
    "text": "Importing, Exporting, & Cleaning Data\nCS&SS 508 ‚Ä¢ Lecture 5\n28 October 2025\nVictoria Sass"
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture5.html#office-hours",
    "href": "Lectures/Lecture5/CSSS508_Lecture5.html#office-hours",
    "title": "",
    "section": "Office Hours",
    "text": "Office Hours\nI‚Äôll be holding office hours at a different day/time this week:\n\n\n\n\nThursday (April 25th) from 10am - 12pm"
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture5.html#data-packages",
    "href": "Lectures/Lecture5/CSSS508_Lecture5.html#data-packages",
    "title": "",
    "section": "Data Packages",
    "text": "Data Packages\nR has a big user base. If you are working with a popular data source, it will often have a devoted R package on CRAN or Github.\n\nExamples:\n\n\nWDI: World Development Indicators (World Bank)\n\ntidycensus: Census and American Community Survey\n\nquantmod: financial data from Yahoo, FRED, Google\n\ngssr: The General Social Survey Cumulative Data (1972-2021)\n\npsidR: Panel Study of Income Dynamics (basic & public datasets)\n\n\n\nIf you have an actual data file, you‚Äôll have to import it yourself‚Ä¶"
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture5.html#delimited-text-files",
    "href": "Lectures/Lecture5/CSSS508_Lecture5.html#delimited-text-files",
    "title": "",
    "section": "Delimited Text Files",
    "text": "Delimited Text Files\nBesides a package, it‚Äôs easiest when data is stored in a text file. The most commonly encountered delimited file is a .csv.\n\nA comma-separated values (.csv) file looks like the following:\n\"Subject\",\"Depression\",\"Sex\",\"Week\",\"HamD\",\"Imipramine\"\n101,\"Non-endogenous\",\"Second\",0,26,NA\n101,\"Non-endogenous\",\"Second\",1,22,NA\n101,\"Non-endogenous\",\"Second\",2,18,4.04305\n101,\"Non-endogenous\",\"Second\",3,7,3.93183\n101,\"Non-endogenous\",\"Second\",4,4,4.33073\n101,\"Non-endogenous\",\"Second\",5,3,4.36945\n103,\"Non-endogenous\",\"First\",0,33,NA\n103,\"Non-endogenous\",\"First\",1,24,NA\n103,\"Non-endogenous\",\"First\",2,15,2.77259"
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture5.html#readr",
    "href": "Lectures/Lecture5/CSSS508_Lecture5.html#readr",
    "title": "",
    "section": "readr",
    "text": "readr\nR has some built-in functions for importing data, such as read.table() and read.csv().\n\nThe readr package provides similar functions, like read_csv(), that have slightly better features:\n\nFaster!\nBetter defaults (e.g.¬†doesn‚Äôt automatically convert characters to factors)\nA bit smarter about dates and times\nLoading progress bars for large files\n\n\n\nreadr is one of the core tidyverse packages so loading tidyverse will load it too:\n\nlibrary(tidyverse)\n\n\n\nAlternatively, you can just load readr like so:\n\nlibrary(readr)"
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture5.html#readr-importing-example",
    "href": "Lectures/Lecture5/CSSS508_Lecture5.html#readr-importing-example",
    "title": "",
    "section": "\nreadr Importing Example",
    "text": "readr Importing Example\nLet‚Äôs import some data about song ranks on the Billboard Hot 100 in 2000:\n\nbillboard_2000_raw &lt;- read_csv(file = \"data/billboard_top100.csv\")\n\n\nHow do we know it loaded?\n\n\nLet‚Äôs look at it!\n\nglimpse(billboard_2000_raw)\n\n\n\n&gt; Rows: 317\n&gt; Columns: 80\n&gt; $ artist       &lt;chr&gt; \"2 Pac\", \"2Ge+her\", \"3 Doors Down\", \"3 Doors Down\", \"504 ‚Ä¶\n&gt; $ track        &lt;chr&gt; \"Baby Don't Cry (Keep...\", \"The Hardest Part Of ...\", \"Kr‚Ä¶\n&gt; $ time         &lt;time&gt; 04:22:00, 03:15:00, 03:53:00, 04:24:00, 03:35:00, 03:24:‚Ä¶\n&gt; $ date.entered &lt;date&gt; 2000-02-26, 2000-09-02, 2000-04-08, 2000-10-21, 2000-04-‚Ä¶\n&gt; $ wk1          &lt;dbl&gt; 87, 91, 81, 76, 57, 51, 97, 84, 59, 76, 84, 57, 50, 71, 7‚Ä¶\n&gt; $ wk2          &lt;dbl&gt; 82, 87, 70, 76, 34, 39, 97, 62, 53, 76, 84, 47, 39, 51, 6‚Ä¶\n&gt; $ wk3          &lt;dbl&gt; 72, 92, 68, 72, 25, 34, 96, 51, 38, 74, 75, 45, 30, 28, 5‚Ä¶\n&gt; $ wk4          &lt;dbl&gt; 77, NA, 67, 69, 17, 26, 95, 41, 28, 69, 73, 29, 28, 18, 4‚Ä¶\n&gt; $ wk5          &lt;dbl&gt; 87, NA, 66, 67, 17, 26, 100, 38, 21, 68, 73, 23, 21, 13, ‚Ä¶\n&gt; $ wk6          &lt;dbl&gt; 94, NA, 57, 65, 31, 19, NA, 35, 18, 67, 69, 18, 19, 13, 3‚Ä¶\n&gt; $ wk7          &lt;dbl&gt; 99, NA, 54, 55, 36, 2, NA, 35, 16, 61, 68, 11, 20, 11, 34‚Ä¶\n&gt; $ wk8          &lt;dbl&gt; NA, NA, 53, 59, 49, 2, NA, 38, 14, 58, 65, 9, 17, 1, 29, ‚Ä¶\n&gt; $ wk9          &lt;dbl&gt; NA, NA, 51, 62, 53, 3, NA, 38, 12, 57, 73, 9, 17, 1, 27, ‚Ä¶\n&gt; $ wk10         &lt;dbl&gt; NA, NA, 51, 61, 57, 6, NA, 36, 10, 59, 83, 11, 17, 2, 30,‚Ä¶\n&gt; $ wk11         &lt;dbl&gt; NA, NA, 51, 61, 64, 7, NA, 37, 9, 66, 92, 1, 17, 2, 36, N‚Ä¶\n&gt; $ wk12         &lt;dbl&gt; NA, NA, 51, 59, 70, 22, NA, 37, 8, 68, NA, 1, 3, 3, 37, N‚Ä¶\n&gt; $ wk13         &lt;dbl&gt; NA, NA, 47, 61, 75, 29, NA, 38, 6, 61, NA, 1, 3, 3, 39, N‚Ä¶\n&gt; $ wk14         &lt;dbl&gt; NA, NA, 44, 66, 76, 36, NA, 49, 1, 67, NA, 1, 7, 4, 49, N‚Ä¶\n&gt; $ wk15         &lt;dbl&gt; NA, NA, 38, 72, 78, 47, NA, 61, 2, 59, NA, 4, 10, 12, 57,‚Ä¶\n&gt; $ wk16         &lt;dbl&gt; NA, NA, 28, 76, 85, 67, NA, 63, 2, 63, NA, 8, 17, 11, 63,‚Ä¶\n&gt; $ wk17         &lt;dbl&gt; NA, NA, 22, 75, 92, 66, NA, 62, 2, 67, NA, 12, 25, 13, 65‚Ä¶\n&gt; $ wk18         &lt;dbl&gt; NA, NA, 18, 67, 96, 84, NA, 67, 2, 71, NA, 22, 29, 15, 68‚Ä¶\n&gt; $ wk19         &lt;dbl&gt; NA, NA, 18, 73, NA, 93, NA, 83, 3, 79, NA, 23, 29, 18, 79‚Ä¶\n&gt; $ wk20         &lt;dbl&gt; NA, NA, 14, 70, NA, 94, NA, 86, 4, 89, NA, 43, 40, 20, 86‚Ä¶\n&gt; $ wk21         &lt;dbl&gt; NA, NA, 12, NA, NA, NA, NA, NA, 5, NA, NA, 44, 43, 30, NA‚Ä¶\n&gt; $ wk22         &lt;dbl&gt; NA, NA, 7, NA, NA, NA, NA, NA, 5, NA, NA, NA, 50, 40, NA,‚Ä¶\n&gt; $ wk23         &lt;dbl&gt; NA, NA, 6, NA, NA, NA, NA, NA, 6, NA, NA, NA, NA, 39, NA,‚Ä¶\n&gt; $ wk24         &lt;dbl&gt; NA, NA, 6, NA, NA, NA, NA, NA, 9, NA, NA, NA, NA, 44, NA,‚Ä¶\n&gt; $ wk25         &lt;dbl&gt; NA, NA, 6, NA, NA, NA, NA, NA, 13, NA, NA, NA, NA, NA, NA‚Ä¶\n&gt; $ wk26         &lt;dbl&gt; NA, NA, 5, NA, NA, NA, NA, NA, 14, NA, NA, NA, NA, NA, NA‚Ä¶\n&gt; $ wk27         &lt;dbl&gt; NA, NA, 5, NA, NA, NA, NA, NA, 16, NA, NA, NA, NA, NA, NA‚Ä¶\n&gt; $ wk28         &lt;dbl&gt; NA, NA, 4, NA, NA, NA, NA, NA, 23, NA, NA, NA, NA, NA, NA‚Ä¶\n&gt; $ wk29         &lt;dbl&gt; NA, NA, 4, NA, NA, NA, NA, NA, 22, NA, NA, NA, NA, NA, NA‚Ä¶\n&gt; $ wk30         &lt;dbl&gt; NA, NA, 4, NA, NA, NA, NA, NA, 33, NA, NA, NA, NA, NA, NA‚Ä¶\n&gt; $ wk31         &lt;dbl&gt; NA, NA, 4, NA, NA, NA, NA, NA, 36, NA, NA, NA, NA, NA, NA‚Ä¶\n&gt; $ wk32         &lt;dbl&gt; NA, NA, 3, NA, NA, NA, NA, NA, 43, NA, NA, NA, NA, NA, NA‚Ä¶\n&gt; $ wk33         &lt;dbl&gt; NA, NA, 3, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA‚Ä¶\n&gt; $ wk34         &lt;dbl&gt; NA, NA, 3, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA‚Ä¶\n&gt; $ wk35         &lt;dbl&gt; NA, NA, 4, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA‚Ä¶\n&gt; $ wk36         &lt;dbl&gt; NA, NA, 5, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA‚Ä¶\n&gt; $ wk37         &lt;dbl&gt; NA, NA, 5, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA‚Ä¶\n&gt; $ wk38         &lt;dbl&gt; NA, NA, 9, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA‚Ä¶\n&gt; $ wk39         &lt;dbl&gt; NA, NA, 9, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA‚Ä¶\n&gt; $ wk40         &lt;dbl&gt; NA, NA, 15, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N‚Ä¶\n&gt; $ wk41         &lt;dbl&gt; NA, NA, 14, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N‚Ä¶\n&gt; $ wk42         &lt;dbl&gt; NA, NA, 13, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N‚Ä¶\n&gt; $ wk43         &lt;dbl&gt; NA, NA, 14, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N‚Ä¶\n&gt; $ wk44         &lt;dbl&gt; NA, NA, 16, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N‚Ä¶\n&gt; $ wk45         &lt;dbl&gt; NA, NA, 17, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N‚Ä¶\n&gt; $ wk46         &lt;dbl&gt; NA, NA, 21, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N‚Ä¶\n&gt; $ wk47         &lt;dbl&gt; NA, NA, 22, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N‚Ä¶\n&gt; $ wk48         &lt;dbl&gt; NA, NA, 24, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N‚Ä¶\n&gt; $ wk49         &lt;dbl&gt; NA, NA, 28, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N‚Ä¶\n&gt; $ wk50         &lt;dbl&gt; NA, NA, 33, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N‚Ä¶\n&gt; $ wk51         &lt;dbl&gt; NA, NA, 42, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N‚Ä¶\n&gt; $ wk52         &lt;dbl&gt; NA, NA, 42, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N‚Ä¶\n&gt; $ wk53         &lt;dbl&gt; NA, NA, 49, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N‚Ä¶\n&gt; $ wk54         &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N‚Ä¶\n&gt; $ wk55         &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N‚Ä¶\n&gt; $ wk56         &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N‚Ä¶\n&gt; $ wk57         &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N‚Ä¶\n&gt; $ wk58         &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N‚Ä¶\n&gt; $ wk59         &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N‚Ä¶\n&gt; $ wk60         &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N‚Ä¶\n&gt; $ wk61         &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N‚Ä¶\n&gt; $ wk62         &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N‚Ä¶\n&gt; $ wk63         &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N‚Ä¶\n&gt; $ wk64         &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N‚Ä¶\n&gt; $ wk65         &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N‚Ä¶\n&gt; $ wk66         &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N‚Ä¶\n&gt; $ wk67         &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N‚Ä¶\n&gt; $ wk68         &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N‚Ä¶\n&gt; $ wk69         &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N‚Ä¶\n&gt; $ wk70         &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N‚Ä¶\n&gt; $ wk71         &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N‚Ä¶\n&gt; $ wk72         &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N‚Ä¶\n&gt; $ wk73         &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N‚Ä¶\n&gt; $ wk74         &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N‚Ä¶\n&gt; $ wk75         &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N‚Ä¶\n&gt; $ wk76         &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N‚Ä¶"
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture5.html#alternate-solution",
    "href": "Lectures/Lecture5/CSSS508_Lecture5.html#alternate-solution",
    "title": "",
    "section": "Alternate Solution",
    "text": "Alternate Solution\nWhen you import data from an external file you‚Äôll also see it in the Global Environment tab in the upper-right pane of RStudio:\n\n\n\nYou can also import the data manually!\nIn the upper right-hand pane of RStudio (make sure you‚Äôre in the Environment tab), select:\nImport Dataset &gt; From Text (readr) and browse to the file on your computer1.\n\n\nOnce you‚Äôve imported the data, you can copy/paste the import code from the console into your file!!\nThis makes the process reproducible!\n\n\n\n\nIdeally you‚Äôve saved it in your project folder! üòå"
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture5.html#manual-data-import",
    "href": "Lectures/Lecture5/CSSS508_Lecture5.html#manual-data-import",
    "title": "",
    "section": "Manual Data Import",
    "text": "Manual Data Import"
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture5.html#specifying-nas",
    "href": "Lectures/Lecture5/CSSS508_Lecture5.html#specifying-nas",
    "title": "",
    "section": "Specifying NAs",
    "text": "Specifying NAs\nNAs are technically logical (boolean) variables that indicate a missing value.\n\nSometimes a particular dataset or file read from a different software will code NAs differently than R. If that‚Äôs the case, you can add additional specifications to read_csv for what to read in as NA.\n\nbillboard_2000_raw &lt;- read_csv(file = \"data/billboard_top100.csv\", \n                               na = c(\"N/A\", \"999\"))"
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture5.html#skipping-lines",
    "href": "Lectures/Lecture5/CSSS508_Lecture5.html#skipping-lines",
    "title": "",
    "section": "Skipping lines",
    "text": "Skipping lines\nDepending on how the data were input, there may be several lines that precede the beginning of the data table you‚Äôre interested in importing. You can skip these lines of metadata with the skip argument:\n\nbillboard_2000_raw &lt;- read_csv(file = \"data/billboard_top100.csv\", \n                               skip = 1)"
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture5.html#variable-names",
    "href": "Lectures/Lecture5/CSSS508_Lecture5.html#variable-names",
    "title": "",
    "section": "Variable names",
    "text": "Variable names\nread_csv will automatically take the first row as column names. If you want to rename them you can save yourself some time recoding later on if you specify your preferred variable names upfront with the col_names argument.\n\nIt takes a character vector to be used as column names (in their order of appearance).\n\nbillboard_renamed &lt;- read_csv(\n  file = \"data/billboard_top100.csv\",\n  col_names = c(\"year\", \"artist\", \"track\", \"time\", \"date_entered\",\n1                paste(\"wk\", 1:76, sep = \"_\"))\n  ) \n\n2billboard_renamed |&gt; names() |&gt; head(10)\n\n\n1\n\npaste ‚Äúpastes‚Äù together the first argument to the second argument (separated by whatever is specified in the sep argument) as character strings. Since the first argument here is a singular value, it is repeated for the entire length of the vector in the second argument. The first several values of paste(\"wk\", 1:76, sep = \"_\") are: wk_1, wk_2, wk_3, wk_4, wk_5, wk_6\n\n2\n\nnames here returns the column names of our data frame.\n\n\n\n\n&gt;  [1] \"year\"         \"artist\"       \"track\"        \"time\"         \"date_entered\"\n&gt;  [6] \"wk_1\"         \"wk_2\"         \"wk_3\"         \"wk_4\"         \"wk_5\"\n\n\n\n\n\nIf you don‚Äôt have any variable names you can specify that instead.\n\nbillboard_2000_raw &lt;- read_csv(file = \"data/billboard_top100.csv\", \n                               col_names = FALSE)"
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture5.html#snake-case",
    "href": "Lectures/Lecture5/CSSS508_Lecture5.html#snake-case",
    "title": "",
    "section": "Snake Case",
    "text": "Snake Case\nIf you simply want to change your variables to snake case (all lower case; words separated by _), you can use the function clean_names() from the janitor package which replaces other punctuation separators with _.\n\n1billboard_renamed &lt;- billboard_2000_raw |&gt;\n2  janitor::clean_names(numerals = \"right\")\n\nbillboard_renamed |&gt;  names() |&gt; head(10)\n\n\n1\n\nCreate new object for renamed data\n\n2\n\nRun install.packages(\"janitor\") in the console first. You can then call a function from janitor without loading the entire package by specifying its package name followed by :: before the function name.;  The numerals argument specifies if you additionally want to put a separator before a number.\n\n\n\n\n\n\n&gt;  [1] \"artist\"       \"track\"        \"time\"         \"date_entered\" \"wk_1\"        \n&gt;  [6] \"wk_2\"         \"wk_3\"         \"wk_4\"         \"wk_5\"         \"wk_6\""
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture5.html#other-data-file-types-with-readr",
    "href": "Lectures/Lecture5/CSSS508_Lecture5.html#other-data-file-types-with-readr",
    "title": "",
    "section": "Other Data File Types with readr\n",
    "text": "Other Data File Types with readr\n\nThe other functions in readr employ a similar approach to read_csv so the trick is just knowing which to use for what data type.\n\n\n\nread_csv2 is separated by semicolons (instead of commas)\n\nread_tsv is separated by tabs\n\nread_delim guesses the delimiter\n\nread_fwf reads in fixed-width-files\n\nread_table is a variation of fwf where columns are separated by white space\n\nread_log reads in Apache-style log files"
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture5.html#other-packages-to-read-in-data",
    "href": "Lectures/Lecture5/CSSS508_Lecture5.html#other-packages-to-read-in-data",
    "title": "",
    "section": "Other Packages to Read in Data",
    "text": "Other Packages to Read in Data\nThere are a range of other ways, besides delimited files, that data are stored.\nThe following packages are part of the extended tidyverse and therefore operate with similar syntax and logic as readr."
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture5.html#other-packages-to-read-in-data-1",
    "href": "Lectures/Lecture5/CSSS508_Lecture5.html#other-packages-to-read-in-data-1",
    "title": "",
    "section": "Other Packages to Read in Data",
    "text": "Other Packages to Read in Data\nThere are a range of other ways, besides delimited files, that data are stored.\nThe following packages are part of the extended tidyverse and therefore operate with similar syntax and logic as readr.\n\n\n\n\n\nFor Excel files (.xls or .xlsx), use package readxl1\n\n\n\n\n\nNote: For Excel files and Googlesheets You won‚Äôt keep text formatting, color, comments, or merged cells. See the openxlsx package for those capabilities. Also, tidyxl can help import non-tabular data from Excel.\nFunctions have additional arguments to read in specific sheets or a range of cells."
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture5.html#other-packages-to-read-in-data-2",
    "href": "Lectures/Lecture5/CSSS508_Lecture5.html#other-packages-to-read-in-data-2",
    "title": "",
    "section": "Other Packages to Read in Data",
    "text": "Other Packages to Read in Data\nThere are a range of other ways, besides delimited files, that data are stored.\nThe following packages are part of the extended tidyverse and therefore operate with similar syntax and logic as readr.\n\n\n\n\n\nFor Excel files (.xls or .xlsx), use package readxl1\n\nFor Google Docs Spreadsheets, use package googlesheets42\n\n\n\n\n\nNote: For Excel files and Googlesheets You won‚Äôt keep text formatting, color, comments, or merged cells. See the openxlsx package for those capabilities. Also, tidyxl can help import non-tabular data from Excel.\nFunctions have additional arguments to read in specific sheets or a range of cells.Very similar to readxl with some slight variations you can read about here."
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture5.html#other-packages-to-read-in-data-3",
    "href": "Lectures/Lecture5/CSSS508_Lecture5.html#other-packages-to-read-in-data-3",
    "title": "",
    "section": "Other Packages to Read in Data",
    "text": "Other Packages to Read in Data\nThere are a range of other ways, besides delimited files, that data are stored.\nThe following packages are part of the extended tidyverse and therefore operate with similar syntax and logic as readr.\n\n\n\n\n\nFor Excel files (.xls or .xlsx), use package readxl1\n\nFor Google Docs Spreadsheets, use package googlesheets42\n\nFor Stata, SPSS, and SAS files, use package haven3\n\n\n\n\n\nNote: For Excel files and Googlesheets You won‚Äôt keep text formatting, color, comments, or merged cells. See the openxlsx package for those capabilities. Also, tidyxl can help import non-tabular data from Excel.\nFunctions have additional arguments to read in specific sheets or a range of cells.Very similar to readxl with some slight variations you can read about here.SAS, SPSS, and Stata have so-called ‚Äúlabelled‚Äù vectors for which haven provides a class to represent in R. Alternatively, you can get rid of them with these functions."
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture5.html#how-does-readr-parse-different-data-types",
    "href": "Lectures/Lecture5/CSSS508_Lecture5.html#how-does-readr-parse-different-data-types",
    "title": "",
    "section": "How does readr parse different data types?",
    "text": "How does readr parse different data types?\nFor each column in a data frame, readr functions pull the first 1000 rows and checks:\n\n\n\n\n\nflowchart LR\n    id1((Variable))==&gt;A([\"1. Does it contain only F, T, FALSE, TRUE, or NA (ignoring case)?\"])==&gt;id2{{Logical}}\n    id1((Variable))==&gt;B([\"2. Does it contain only numbers (e.g., 1, -4.5, 5e6, Inf?)\"])==&gt;id3{{Number}}\n    id1((Variable))==&gt;C([\"3. Does it match the ISO8601 standard?\"])==&gt;id4{{Date/Date-time}}\n    id1((Variable))==&gt;D([\"4. None of the above\"])==&gt;id5{{String}}\n    style id1 fill:#1e4655,color:#c7cdac,stroke:#c7cdac\n    style id2 fill:#c7cdac,color:#1e4655,stroke:#1e4655\n    style id3 fill:#c7cdac,color:#1e4655,stroke:#1e4655\n    style id4 fill:#c7cdac,color:#1e4655,stroke:#1e4655\n    style id5 fill:#c7cdac,color:#1e4655,stroke:#1e4655\n    style A fill:#FFFFFF,color:#000000,stroke:#000000\n    style B fill:#FFFFFF,color:#000000,stroke:#000000\n    style C fill:#FFFFFF,color:#000000,stroke:#000000\n    style D fill:#FFFFFF,color:#000000,stroke:#000000"
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture5.html#how-does-readr-parse-different-data-types-1",
    "href": "Lectures/Lecture5/CSSS508_Lecture5.html#how-does-readr-parse-different-data-types-1",
    "title": "",
    "section": "How does readr parse different data types?",
    "text": "How does readr parse different data types?\nFor each column in a data frame, readr functions pull the first 1000 rows and checks:\n\n\n\n\n\nflowchart LR\n    id1((Variable))==&gt;A([\"1. Does it contain only F, T, FALSE, TRUE, or NA (ignoring case)?\"])==&gt;id2{{Logical}}\n    id1((Variable))==&gt;B([\"2. Does it contain only numbers (e.g., 1, -4.5, 5e6, Inf?)\"])==&gt;id3{{Number}}\n    id1((Variable))==&gt;C([\"3. Does it match the ISO8601 standard?\"])==&gt;id4{{Date/Date-time}}\n    id1((Variable))==&gt;D([\"4. None of the above\"])==&gt;id5{{String}}\n    style id1 fill:#1e4655,color:#c7cdac,stroke:#c7cdac\n    style id2 fill:#1e4655,color:#c7cdac,stroke:#c7cdac\n    style id3 fill:#c7cdac,color:#1e4655,stroke:#1e4655\n    style id4 fill:#c7cdac,color:#1e4655,stroke:#1e4655\n    style id5 fill:#c7cdac,color:#1e4655,stroke:#1e4655\n    style A fill:#ffa07a,color:#000000,stroke:#000000\n    style B fill:#FFFFFF,color:#000000,stroke:#000000\n    style C fill:#FFFFFF,color:#000000,stroke:#000000\n    style D fill:#FFFFFF,color:#000000,stroke:#000000"
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture5.html#how-does-readr-parse-different-data-types-2",
    "href": "Lectures/Lecture5/CSSS508_Lecture5.html#how-does-readr-parse-different-data-types-2",
    "title": "",
    "section": "How does readr parse different data types?",
    "text": "How does readr parse different data types?\nFor each column in a data frame, readr functions pull the first 1000 rows and checks:\n\n\n\n\n\nflowchart LR\n    id1((Variable))==&gt;A([\"1. Does it contain only F, T, FALSE, TRUE, or NA (ignoring case)?\"])==&gt;id2{{Logical}}\n    id1((Variable))==&gt;B([\"2. Does it contain only numbers (e.g., 1, -4.5, 5e6, Inf?)\"])==&gt;id3{{Number}}\n    id1((Variable))==&gt;C([\"3. Does it match the ISO8601 standard?\"])==&gt;id4{{Date/Date-time}}\n    id1((Variable))==&gt;D([\"4. None of the above\"])==&gt;id5{{String}}\n    style id1 fill:#1e4655,color:#c7cdac,stroke:#c7cdac\n    style id2 fill:#c7cdac,color:#1e4655,stroke:#1e4655\n    style id3 fill:#1e4655,color:#c7cdac,stroke:#c7cdac\n    style id4 fill:#c7cdac,color:#1e4655,stroke:#1e4655\n    style id5 fill:#c7cdac,color:#1e4655,stroke:#1e4655\n    style A fill:#FFFFFF,color:#000000,stroke:#000000\n    style B fill:#ffa07a,color:#000000,stroke:#000000\n    style C fill:#FFFFFF,color:#000000,stroke:#000000\n    style D fill:#FFFFFF,color:#000000,stroke:#000000"
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture5.html#how-does-readr-parse-different-data-types-3",
    "href": "Lectures/Lecture5/CSSS508_Lecture5.html#how-does-readr-parse-different-data-types-3",
    "title": "",
    "section": "How does readr parse different data types?",
    "text": "How does readr parse different data types?\nFor each column in a data frame, readr functions pull the first 1000 rows and checks:\n\n\n\n\n\nflowchart LR\n    id1((Variable))==&gt;A([\"1. Does it contain only F, T, FALSE, TRUE, or NA (ignoring case)?\"])==&gt;id2{{Logical}}\n    id1((Variable))==&gt;B([\"2. Does it contain only numbers (e.g., 1, -4.5, 5e6, Inf?)\"])==&gt;id3{{Number}}\n    id1((Variable))==&gt;C([\"3. Does it match the ISO8601 standard?\"])==&gt;id4{{Date/Date-time}}\n    id1((Variable))==&gt;D([\"4. None of the above\"])==&gt;id5{{String}}\n    style id1 fill:#1e4655,color:#c7cdac,stroke:#c7cdac\n    style id2 fill:#c7cdac,color:#1e4655,stroke:#1e4655\n    style id3 fill:#c7cdac,color:#1e4655,stroke:#1e4655\n    style id4 fill:#1e4655,color:#c7cdac,stroke:#c7cdac\n    style id5 fill:#c7cdac,color:#1e4655,stroke:#1e4655\n    style A fill:#FFFFFF,color:#000000,stroke:#000000\n    style B fill:#FFFFFF,color:#000000,stroke:#000000\n    style C fill:#ffa07a,color:#000000,stroke:#000000\n    style D fill:#FFFFFF,color:#000000,stroke:#000000"
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture5.html#how-does-readr-parse-different-data-types-4",
    "href": "Lectures/Lecture5/CSSS508_Lecture5.html#how-does-readr-parse-different-data-types-4",
    "title": "",
    "section": "How does readr parse different data types?",
    "text": "How does readr parse different data types?\nFor each column in a data frame, readr functions pull the first 1000 rows and checks:\n\n\n\n\n\nflowchart LR\n    id1((Variable))==&gt;A([\"1. Does it contain only F, T, FALSE, TRUE, or NA (ignoring case)?\"])==&gt;id2{{Logical}}\n    id1((Variable))==&gt;B([\"2. Does it contain only numbers (e.g., 1, -4.5, 5e6, Inf?)\"])==&gt;id3{{Number}}\n    id1((Variable))==&gt;C([\"3. Does it match the ISO8601 standard?\"])==&gt;id4{{Date/Date-time}}\n    id1((Variable))==&gt;D([\"4. None of the above\"])==&gt;id5{{String}}\n    style id1 fill:#1e4655,color:#c7cdac,stroke:#c7cdac\n    style id2 fill:#c7cdac,color:#1e4655,stroke:#1e4655\n    style id3 fill:#c7cdac,color:#1e4655,stroke:#1e4655\n    style id4 fill:#c7cdac,color:#1e4655,stroke:#1e4655\n    style id5 fill:#1e4655,color:#c7cdac,stroke:#c7cdac\n    style A fill:#FFFFFF,color:#000000,stroke:#000000\n    style B fill:#FFFFFF,color:#000000,stroke:#000000\n    style C fill:#FFFFFF,color:#000000,stroke:#000000\n    style D fill:#ffa07a,color:#000000,stroke:#000000"
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture5.html#most-common-issue-with-reading-in-data",
    "href": "Lectures/Lecture5/CSSS508_Lecture5.html#most-common-issue-with-reading-in-data",
    "title": "",
    "section": "Most Common Issue with Reading in Data",
    "text": "Most Common Issue with Reading in Data\nThe most common problem that occurs when reading in data is having mixed data. Most often, given the heuristic provided in the last slide, readr will parse a variable as a character string to preserve whatever it contains.\n\nLet‚Äôs actually look at how the billboard data was read in:\n\nglimpse(billboard_2000_raw) \n\n\n\n&gt; Rows: 317\n&gt; Columns: 80\n&gt; $ artist       &lt;chr&gt; \"2 Pac\", \"2Ge+her\", \"3 Doors Down\", \"3 Doors Down\", \"504 ‚Ä¶\n&gt; $ track        &lt;chr&gt; \"Baby Don't Cry (Keep...\", \"The Hardest Part Of ...\", \"Kr‚Ä¶\n&gt; $ time         &lt;time&gt; 04:22:00, 03:15:00, 03:53:00, 04:24:00, 03:35:00, 03:24:‚Ä¶\n&gt; $ date.entered &lt;date&gt; 2000-02-26, 2000-09-02, 2000-04-08, 2000-10-21, 2000-04-‚Ä¶\n&gt; $ wk1          &lt;dbl&gt; 87, 91, 81, 76, 57, 51, 97, 84, 59, 76, 84, 57, 50, 71, 7‚Ä¶\n&gt; $ wk2          &lt;dbl&gt; 82, 87, 70, 76, 34, 39, 97, 62, 53, 76, 84, 47, 39, 51, 6‚Ä¶\n&gt; $ wk3          &lt;dbl&gt; 72, 92, 68, 72, 25, 34, 96, 51, 38, 74, 75, 45, 30, 28, 5‚Ä¶\n&gt; $ wk4          &lt;dbl&gt; 77, NA, 67, 69, 17, 26, 95, 41, 28, 69, 73, 29, 28, 18, 4‚Ä¶\n&gt; $ wk5          &lt;dbl&gt; 87, NA, 66, 67, 17, 26, 100, 38, 21, 68, 73, 23, 21, 13, ‚Ä¶\n&gt; $ wk6          &lt;dbl&gt; 94, NA, 57, 65, 31, 19, NA, 35, 18, 67, 69, 18, 19, 13, 3‚Ä¶\n&gt; $ wk7          &lt;dbl&gt; 99, NA, 54, 55, 36, 2, NA, 35, 16, 61, 68, 11, 20, 11, 34‚Ä¶\n&gt; $ wk8          &lt;dbl&gt; NA, NA, 53, 59, 49, 2, NA, 38, 14, 58, 65, 9, 17, 1, 29, ‚Ä¶\n&gt; $ wk9          &lt;dbl&gt; NA, NA, 51, 62, 53, 3, NA, 38, 12, 57, 73, 9, 17, 1, 27, ‚Ä¶\n&gt; $ wk10         &lt;dbl&gt; NA, NA, 51, 61, 57, 6, NA, 36, 10, 59, 83, 11, 17, 2, 30,‚Ä¶\n&gt; $ wk11         &lt;dbl&gt; NA, NA, 51, 61, 64, 7, NA, 37, 9, 66, 92, 1, 17, 2, 36, N‚Ä¶\n&gt; $ wk12         &lt;dbl&gt; NA, NA, 51, 59, 70, 22, NA, 37, 8, 68, NA, 1, 3, 3, 37, N‚Ä¶\n&gt; $ wk13         &lt;dbl&gt; NA, NA, 47, 61, 75, 29, NA, 38, 6, 61, NA, 1, 3, 3, 39, N‚Ä¶\n&gt; $ wk14         &lt;dbl&gt; NA, NA, 44, 66, 76, 36, NA, 49, 1, 67, NA, 1, 7, 4, 49, N‚Ä¶\n&gt; $ wk15         &lt;dbl&gt; NA, NA, 38, 72, 78, 47, NA, 61, 2, 59, NA, 4, 10, 12, 57,‚Ä¶\n&gt; $ wk16         &lt;dbl&gt; NA, NA, 28, 76, 85, 67, NA, 63, 2, 63, NA, 8, 17, 11, 63,‚Ä¶\n&gt; $ wk17         &lt;dbl&gt; NA, NA, 22, 75, 92, 66, NA, 62, 2, 67, NA, 12, 25, 13, 65‚Ä¶\n&gt; $ wk18         &lt;dbl&gt; NA, NA, 18, 67, 96, 84, NA, 67, 2, 71, NA, 22, 29, 15, 68‚Ä¶\n&gt; $ wk19         &lt;dbl&gt; NA, NA, 18, 73, NA, 93, NA, 83, 3, 79, NA, 23, 29, 18, 79‚Ä¶\n&gt; $ wk20         &lt;dbl&gt; NA, NA, 14, 70, NA, 94, NA, 86, 4, 89, NA, 43, 40, 20, 86‚Ä¶\n&gt; $ wk21         &lt;dbl&gt; NA, NA, 12, NA, NA, NA, NA, NA, 5, NA, NA, 44, 43, 30, NA‚Ä¶\n&gt; $ wk22         &lt;dbl&gt; NA, NA, 7, NA, NA, NA, NA, NA, 5, NA, NA, NA, 50, 40, NA,‚Ä¶\n&gt; $ wk23         &lt;dbl&gt; NA, NA, 6, NA, NA, NA, NA, NA, 6, NA, NA, NA, NA, 39, NA,‚Ä¶\n&gt; $ wk24         &lt;dbl&gt; NA, NA, 6, NA, NA, NA, NA, NA, 9, NA, NA, NA, NA, 44, NA,‚Ä¶\n&gt; $ wk25         &lt;dbl&gt; NA, NA, 6, NA, NA, NA, NA, NA, 13, NA, NA, NA, NA, NA, NA‚Ä¶\n&gt; $ wk26         &lt;dbl&gt; NA, NA, 5, NA, NA, NA, NA, NA, 14, NA, NA, NA, NA, NA, NA‚Ä¶\n&gt; $ wk27         &lt;dbl&gt; NA, NA, 5, NA, NA, NA, NA, NA, 16, NA, NA, NA, NA, NA, NA‚Ä¶\n&gt; $ wk28         &lt;dbl&gt; NA, NA, 4, NA, NA, NA, NA, NA, 23, NA, NA, NA, NA, NA, NA‚Ä¶\n&gt; $ wk29         &lt;dbl&gt; NA, NA, 4, NA, NA, NA, NA, NA, 22, NA, NA, NA, NA, NA, NA‚Ä¶\n&gt; $ wk30         &lt;dbl&gt; NA, NA, 4, NA, NA, NA, NA, NA, 33, NA, NA, NA, NA, NA, NA‚Ä¶\n&gt; $ wk31         &lt;dbl&gt; NA, NA, 4, NA, NA, NA, NA, NA, 36, NA, NA, NA, NA, NA, NA‚Ä¶\n&gt; $ wk32         &lt;dbl&gt; NA, NA, 3, NA, NA, NA, NA, NA, 43, NA, NA, NA, NA, NA, NA‚Ä¶\n&gt; $ wk33         &lt;dbl&gt; NA, NA, 3, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA‚Ä¶\n&gt; $ wk34         &lt;dbl&gt; NA, NA, 3, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA‚Ä¶\n&gt; $ wk35         &lt;dbl&gt; NA, NA, 4, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA‚Ä¶\n&gt; $ wk36         &lt;dbl&gt; NA, NA, 5, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA‚Ä¶\n&gt; $ wk37         &lt;dbl&gt; NA, NA, 5, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA‚Ä¶\n&gt; $ wk38         &lt;dbl&gt; NA, NA, 9, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA‚Ä¶\n&gt; $ wk39         &lt;dbl&gt; NA, NA, 9, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA‚Ä¶\n&gt; $ wk40         &lt;dbl&gt; NA, NA, 15, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N‚Ä¶\n&gt; $ wk41         &lt;dbl&gt; NA, NA, 14, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N‚Ä¶\n&gt; $ wk42         &lt;dbl&gt; NA, NA, 13, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N‚Ä¶\n&gt; $ wk43         &lt;dbl&gt; NA, NA, 14, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N‚Ä¶\n&gt; $ wk44         &lt;dbl&gt; NA, NA, 16, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N‚Ä¶\n&gt; $ wk45         &lt;dbl&gt; NA, NA, 17, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N‚Ä¶\n&gt; $ wk46         &lt;dbl&gt; NA, NA, 21, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N‚Ä¶\n&gt; $ wk47         &lt;dbl&gt; NA, NA, 22, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N‚Ä¶\n&gt; $ wk48         &lt;dbl&gt; NA, NA, 24, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N‚Ä¶\n&gt; $ wk49         &lt;dbl&gt; NA, NA, 28, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N‚Ä¶\n&gt; $ wk50         &lt;dbl&gt; NA, NA, 33, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N‚Ä¶\n&gt; $ wk51         &lt;dbl&gt; NA, NA, 42, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N‚Ä¶\n&gt; $ wk52         &lt;dbl&gt; NA, NA, 42, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N‚Ä¶\n&gt; $ wk53         &lt;dbl&gt; NA, NA, 49, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N‚Ä¶\n&gt; $ wk54         &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N‚Ä¶\n&gt; $ wk55         &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N‚Ä¶\n&gt; $ wk56         &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N‚Ä¶\n&gt; $ wk57         &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N‚Ä¶\n&gt; $ wk58         &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N‚Ä¶\n&gt; $ wk59         &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N‚Ä¶\n&gt; $ wk60         &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N‚Ä¶\n&gt; $ wk61         &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N‚Ä¶\n&gt; $ wk62         &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N‚Ä¶\n&gt; $ wk63         &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N‚Ä¶\n&gt; $ wk64         &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N‚Ä¶\n&gt; $ wk65         &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N‚Ä¶\n&gt; $ wk66         &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N‚Ä¶\n&gt; $ wk67         &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N‚Ä¶\n&gt; $ wk68         &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N‚Ä¶\n&gt; $ wk69         &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N‚Ä¶\n&gt; $ wk70         &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N‚Ä¶\n&gt; $ wk71         &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N‚Ä¶\n&gt; $ wk72         &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N‚Ä¶\n&gt; $ wk73         &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N‚Ä¶\n&gt; $ wk74         &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N‚Ä¶\n&gt; $ wk75         &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N‚Ä¶\n&gt; $ wk76         &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N‚Ä¶"
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture5.html#what-went-wrong",
    "href": "Lectures/Lecture5/CSSS508_Lecture5.html#what-went-wrong",
    "title": "",
    "section": "What Went Wrong?",
    "text": "What Went Wrong?\nSince readr uses the values in the first 1000 rows to guess the type of the column (logical, numeric, date/date-time, character), if the first 1000 rows don‚Äôt have any data, they will be coded as logical variables.\n\nThere are not many songs in the data that charted for 60+ weeks‚Äîand none in the first 1000 that charted for 66+ weeks!\n\n\n\n\n\n ¬†NA is logical?\n\n\n\n1class(c(T, F, NA, FALSE, TRUE))\n\n\n1\n\nclass returns the data type of its first argument.\n\n\n\n\n\n\n&gt; [1] \"logical\"\n\n\n\nclass(c(1, NA, 17.5, 5.3, NA)) \n\n\n\n&gt; [1] \"numeric\"\n\n\n\n2class(as.Date(c(NA, \"2023-10-31\", \"1986-06-21\", \"1997-01-15\"), tz = \"America/Los_Angeles\"))\n\n\n2\n\nas.Date turns a character string of dates into an official date class in Base R. If we had an accompanying time stamp we would need to use as.POSIXct which turns a character string of dates and times into an official date-time class in Base R.\n\n\n\n\n\n\n&gt; [1] \"Date\"\n\n\n\nclass(c(\"apple\", NA, \"mango\", \"blackberry\", \"plum\")) \n\n\n\n&gt; [1] \"character\"\n\n\n\nclass(c(NA, NA, NA, NA, NA))\n\n\n\n&gt; [1] \"logical\"\n\n\n\n\n\n\n\n\nTechnically, NAs can be any data type depending upon what they are grouped with. However, by themselves they are a logical indicator of missing data, so their class is logical."
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture5.html#column-types",
    "href": "Lectures/Lecture5/CSSS508_Lecture5.html#column-types",
    "title": "",
    "section": "Column types",
    "text": "Column types\nSince the wk* variables should all be read in as integers, we can specify this explicitly with the col_types argument.\n\n\n# Create character string of shortcode column types\n1bb_types &lt;- paste(c(\"cctD\", rep(\"i\", 76)), collapse=\"\")\nbb_types \n\n\n1\n\nYou can short-code column types with c = character, t = time, D = date, i = integer.  The collapse argument collapses the first two arguments into one complete character string.\n\n\n\n\n\n\n&gt; [1] \"cctDiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii\"\n\n\n\n\n\nbillboard_2000_raw &lt;- read_csv(file = \"data/billboard_top100.csv\", \n2                               col_types = bb_types)\n3billboard_2000_raw |&gt; select(wk66:wk76)\n\n\n2\n\nWhen we re-read in the data, this string now specifies the data type for each column of our data frame. Visit this reference page to see all available column types and their short codes.\n\n3\n\nChecking the previously incorrectly parsed variables\n\n\n\n\n&gt; # A tibble: 317 √ó 11\n&gt;     wk66  wk67  wk68  wk69  wk70  wk71  wk72  wk73  wk74  wk75  wk76\n&gt;    &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt;\n&gt;  1    NA    NA    NA    NA    NA    NA    NA    NA    NA    NA    NA\n&gt;  2    NA    NA    NA    NA    NA    NA    NA    NA    NA    NA    NA\n&gt;  3    NA    NA    NA    NA    NA    NA    NA    NA    NA    NA    NA\n&gt;  4    NA    NA    NA    NA    NA    NA    NA    NA    NA    NA    NA\n&gt;  5    NA    NA    NA    NA    NA    NA    NA    NA    NA    NA    NA\n&gt;  6    NA    NA    NA    NA    NA    NA    NA    NA    NA    NA    NA\n&gt;  7    NA    NA    NA    NA    NA    NA    NA    NA    NA    NA    NA\n&gt;  8    NA    NA    NA    NA    NA    NA    NA    NA    NA    NA    NA\n&gt;  9    NA    NA    NA    NA    NA    NA    NA    NA    NA    NA    NA\n&gt; 10    NA    NA    NA    NA    NA    NA    NA    NA    NA    NA    NA\n&gt; # ‚Ñπ 307 more rows"
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture5.html#column-types-1",
    "href": "Lectures/Lecture5/CSSS508_Lecture5.html#column-types-1",
    "title": "",
    "section": "Column types",
    "text": "Column types\nTo specify a default column type you can use .default like so:\n\nbillboard_2000_raw &lt;- read_csv(file = \"data/billboard_top100.csv\", \n                               col_types = cols(.default = col_character())) \n\n\n\nAnother useful helper is cols_only() for when you only want to read in a subset of all available variables.\n\nbillboard_2000_raw &lt;- read_csv(file = \"data/billboard_top100.csv\", \n                               col_types = cols_only(x = col_character)) \n\n\n\n\nIn summary, the col_types argument gives you greater control over how your data are read in and can save you recoding time down the road and/or point out where your data are behaving differently than you expect."
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture5.html#reading-in-multiple-files",
    "href": "Lectures/Lecture5/CSSS508_Lecture5.html#reading-in-multiple-files",
    "title": "",
    "section": "Reading in Multiple Files",
    "text": "Reading in Multiple Files\nIf your data are split across multiple files you can read them in all at once by specifying the id argument.\n\n# Create list of files manually\nsales_files &lt;- c(\"data/01_sales.csv\", \"data/02_sales.csv\", \"data/03_sales.csv\")\nread_csv(sales_files, id = \"file\")\n\n\n\n&gt; # A tibble: 19 √ó 6\n&gt;    file              month     year brand  item     n\n&gt;    &lt;chr&gt;             &lt;chr&gt;    &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n&gt;  1 data/01_sales.csv January   2019     1  1234     3\n&gt;  2 data/01_sales.csv January   2019     1  8721     9\n&gt;  3 data/01_sales.csv January   2019     1  1822     2\n&gt;  4 data/01_sales.csv January   2019     2  3333     1\n&gt;  5 data/01_sales.csv January   2019     2  2156     9\n&gt;  6 data/01_sales.csv January   2019     2  3987     6\n&gt;  7 data/01_sales.csv January   2019     2  3827     6\n&gt;  8 data/02_sales.csv February  2019     1  1234     8\n&gt;  9 data/02_sales.csv February  2019     1  8721     2\n&gt; 10 data/02_sales.csv February  2019     1  1822     3\n&gt; 11 data/02_sales.csv February  2019     2  3333     1\n&gt; 12 data/02_sales.csv February  2019     2  2156     3\n&gt; 13 data/02_sales.csv February  2019     2  3987     6\n&gt; 14 data/03_sales.csv March     2019     1  1234     3\n&gt; 15 data/03_sales.csv March     2019     1  3627     1\n&gt; 16 data/03_sales.csv March     2019     1  8820     3\n&gt; 17 data/03_sales.csv March     2019     2  7253     1\n&gt; 18 data/03_sales.csv March     2019     2  8766     3\n&gt; 19 data/03_sales.csv March     2019     2  8288     6"
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture5.html#reading-in-multiple-files-1",
    "href": "Lectures/Lecture5/CSSS508_Lecture5.html#reading-in-multiple-files-1",
    "title": "",
    "section": "Reading in Multiple Files",
    "text": "Reading in Multiple Files\nIf you have too many files to reasonably type out all their names you can also use the base r function list.files to list the files for you.\n\n# Create list of files with pattern-matching\nsales_files &lt;- list.files(\"data\", \n1                          pattern = \"sales\\\\.csv$\",\n                          full.names = TRUE) \nsales_files\n\n\n1\n\nWe will discuss pattern-matching more in a couple of weeks; if all your data was in one folder without anything else in it, you wouldn‚Äôt need to specify this argument. Sometimes, however, you may be searching through larger directories that you did not organize and that‚Äôs when pattern-matching is really powerful.\n\n\n\n\n\n\n&gt; [1] \"data/01_sales.csv\" \"data/02_sales.csv\" \"data/03_sales.csv\""
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture5.html#data-entry",
    "href": "Lectures/Lecture5/CSSS508_Lecture5.html#data-entry",
    "title": "",
    "section": "Data Entry",
    "text": "Data Entry\nSometimes you‚Äôll need to create a data set in your code. You can do this two ways:\n\n\ntibble()\ntribble()\n\n\n\nTibbles lay out the data by columns (i.e.¬†a dataframe transposed).\n\n# Creating data with tibble\ntibble( \n  x = c(1, 2, 5), \n  y = c(\"h\", \"m\", \"g\"),\n  z = c(0.08, 0.83, 0.60)\n)\n\n\n\n&gt; # A tibble: 3 √ó 3\n&gt;       x y         z\n&gt;   &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt;\n&gt; 1     1 h      0.08\n&gt; 2     2 m      0.83\n&gt; 3     5 g      0.6\n\n\n\n\nTibbles (transposed tibble) lay out the data by rows (i.e.¬†the way a dataframe looks) which is much more intuitive.\n\n# Creating data with tribble\ntribble( \n  ~x, ~y, ~z,\n  1, \"h\", 0.08,\n  2, \"m\", 0.83,\n  5, \"g\", 0.60\n)\n\n\n\n&gt; # A tibble: 3 √ó 3\n&gt;       x y         z\n&gt;   &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt;\n&gt; 1     1 h      0.08\n&gt; 2     2 m      0.83\n&gt; 3     5 g      0.6"
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture5.html#writing-delimited-files",
    "href": "Lectures/Lecture5/CSSS508_Lecture5.html#writing-delimited-files",
    "title": "",
    "section": "Writing Delimited Files",
    "text": "Writing Delimited Files\nGetting data out of R into a delimited file is very similar to getting it into R:\n\nwrite_csv(billboard_2000_raw, path = \"data/billboard_data.csv\")\n\nThis saved the data we pulled off the web in a file called billboard_data.csv in the data folder of my working directory.\n\nHowever, saving data in this way will not preserve R data types since delimited files code everything as a character string.\n\n\nTo save R objects and all associated metadata you have two options:\n\n\n.Rds format:\n.Rdata or .Rda format:\n\n\n\n\nUsed for single objects, doesn‚Äôt save original the object name\nSave: write_rds(old_object_name, \"path.Rds\")\n\nLoad: new_object_name &lt;- read_rds(\"path.Rds\")\n\n\n\n\n\nUsed for saving multiple files where the original object names are preserved\nSave: save(object1, object2, ... , file = \"path.Rdata\")\n\nLoad: load(\"path.Rdata\") without assignment operator"
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture5.html#writing-other-file-types",
    "href": "Lectures/Lecture5/CSSS508_Lecture5.html#writing-other-file-types",
    "title": "",
    "section": "Writing Other File-Types",
    "text": "Writing Other File-Types\n\n\nwritexl\ngooglesheets4\nhaven\n\n\n\n\n\n\n\nwrite_xlsx() writes to an xlsx file\n\n\n\n\n\n\n\n\n\n\nsheet_write() or write_sheet() (over)writes new data into a Sheet\n\ngs4_create() creates a new Sheet\n\nsheet_append() appends rows to a sheet\n\nrange_write() (over)writes new data into a range\n\nrange_flood() floods a range of cells\n`range_clear() clears a range of cells\n\n\n\n\n\n\n\n\n\n\nwrite_dta() writes Stata DTA files\n\nwrite_sav() writes SPSS files\n\nwrite_xpt() writes SAS transport files"
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture5.html#importing-tidying-data",
    "href": "Lectures/Lecture5/CSSS508_Lecture5.html#importing-tidying-data",
    "title": "",
    "section": "Importing & Tidying Data",
    "text": "Importing & Tidying Data\n\nGo to the Lecture 5 Homepage and click on the link Religion & Income under the Data section.\nClick File &gt; Save to download this data to the same folder where your source document1 will be saved for this lab.\nRead in your data using the appropriate function from readr.\nR Script or .qmd"
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture5.html#initial-spot-checks",
    "href": "Lectures/Lecture5/CSSS508_Lecture5.html#initial-spot-checks",
    "title": "",
    "section": "Initial Spot Checks",
    "text": "Initial Spot Checks\nFirst things to check after loading new data:\n\nDid all the rows/columns from the original file make it in?\n\nCheck using dim() or str()\n\n\n\nAre the column names in good shape?\n\nUse names() to check; re-read in using col_names() or fix with rename()\n\n\n\nAre there ‚Äúdecorative‚Äù blank rows or columns to remove?\n\n\nfilter() or select() out those rows/columns\n\n\nHow are missing values represented: NA, \" \" (blank), . (period), 999?\n\nRead in the data again specifying NAs with the na argument\n\n\nAre there character data (e.g.¬†ZIP codes with leading zeroes) being incorrectly represented as numeric or vice versa?\n\nRead in the data again specifying desired col_types"
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture5.html#what-is-tidy-data",
    "href": "Lectures/Lecture5/CSSS508_Lecture5.html#what-is-tidy-data",
    "title": "",
    "section": "What is Tidy Data?",
    "text": "What is Tidy Data?\n\n1\n\nIllustrations from the Openscapes blog Tidy Data for reproducibility, efficiency, and collaboration by Julia Lowndes and Allison Horst"
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture5.html#why-do-we-want-tidy-data",
    "href": "Lectures/Lecture5/CSSS508_Lecture5.html#why-do-we-want-tidy-data",
    "title": "",
    "section": "Why do we Want Tidy Data?",
    "text": "Why do we Want Tidy Data?\n\n\nEasier to understand many rows than many columns1\n\nRequired for plotting in ggplot22\n\nRequired for many types of statistical procedures (e.g.¬†hierarchical or mixed effects models)\nFewer issues with missing values and ‚Äúimbalanced‚Äù repeated measures data\nHaving a consistent method for storing data means it‚Äôs easier to learn the tools to work with it since there‚Äôs an underlying uniformity.\n\n\nMost real-world data is not tidy because data are often organized for goals other than analysis (i.e.¬†data entry) and most people aren‚Äôt familiar with the principles of tidy data.\n\nPlacing variables in columns also leverages R‚Äôs vectorized nature, i.e.¬†most built-in R functions work with values of vectors.In fact, all tidyverse functions are designed to work with tidy data."
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture5.html#why-do-we-want-tidy-data-1",
    "href": "Lectures/Lecture5/CSSS508_Lecture5.html#why-do-we-want-tidy-data-1",
    "title": "",
    "section": "Why do we Want Tidy Data?",
    "text": "Why do we Want Tidy Data?\n\n1\n\nIllustrations from the Openscapes blog Tidy Data for reproducibility, efficiency, and collaboration by Julia Lowndes and Allison Horst"
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture5.html#slightly-messy-data",
    "href": "Lectures/Lecture5/CSSS508_Lecture5.html#slightly-messy-data",
    "title": "",
    "section": "Slightly ‚ÄúMessy‚Äù Data",
    "text": "Slightly ‚ÄúMessy‚Äù Data\n\n\n\n\nProgram\nFirst Year\nSecond Year\n\n\n\nEvans School\n10\n6\n\n\nArts & Sciences\n5\n6\n\n\nPublic Health\n2\n3\n\n\nOther\n5\n1\n\n\n\n\n\nWhat is an observation?\n\nA group of students from a program of a given year\n\n\nWhat are the variables?\n\nProgram, Year\n\n\nWhat are the values?\n\nProgram: Evans School, Arts & Sciences, Public Health, Other\nYear: First, Second ‚Äì in column headings. Bad!\n\nCount: spread over two columns!"
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture5.html#tidy-version",
    "href": "Lectures/Lecture5/CSSS508_Lecture5.html#tidy-version",
    "title": "",
    "section": "Tidy Version",
    "text": "Tidy Version\n\n\n\n\nProgram\nYear\nCount\n\n\n\nEvans School\nFirst\n10\n\n\nEvans School\nSecond\n6\n\n\nArts & Sciences\nFirst\n5\n\n\nArts & Sciences\nSecond\n6\n\n\nPublic Health\nFirst\n2\n\n\nPublic Health\nSecond\n3\n\n\nOther\nFirst\n5\n\n\nOther\nSecond\n1\n\n\n\n\n\nEach variable is a column.\nEach observation is a row.\nEach cell has a single value."
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture5.html#billboard-is-just-ugly-messy",
    "href": "Lectures/Lecture5/CSSS508_Lecture5.html#billboard-is-just-ugly-messy",
    "title": "",
    "section": "Billboard is Just Ugly-Messy",
    "text": "Billboard is Just Ugly-Messy\n\n\n&gt; # A tibble: 10 √ó 80\n&gt;    artist     track time  date.entered   wk1   wk2   wk3   wk4   wk5   wk6   wk7\n&gt;    &lt;chr&gt;      &lt;chr&gt; &lt;tim&gt; &lt;date&gt;       &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt;\n&gt;  1 2 Pac      Baby‚Ä¶ 04:22 2000-02-26      87    82    72    77    87    94    99\n&gt;  2 2Ge+her    The ‚Ä¶ 03:15 2000-09-02      91    87    92    NA    NA    NA    NA\n&gt;  3 3 Doors D‚Ä¶ Kryp‚Ä¶ 03:53 2000-04-08      81    70    68    67    66    57    54\n&gt;  4 3 Doors D‚Ä¶ Loser 04:24 2000-10-21      76    76    72    69    67    65    55\n&gt;  5 504 Boyz   Wobb‚Ä¶ 03:35 2000-04-15      57    34    25    17    17    31    36\n&gt;  6 98^0       Give‚Ä¶ 03:24 2000-08-19      51    39    34    26    26    19     2\n&gt;  7 A*Teens    Danc‚Ä¶ 03:44 2000-07-08      97    97    96    95   100    NA    NA\n&gt;  8 Aaliyah    I Do‚Ä¶ 04:15 2000-01-29      84    62    51    41    38    35    35\n&gt;  9 Aaliyah    Try ‚Ä¶ 04:03 2000-03-18      59    53    38    28    21    18    16\n&gt; 10 Adams, Yo‚Ä¶ Open‚Ä¶ 05:30 2000-08-26      76    76    74    69    68    67    61\n&gt; # ‚Ñπ 69 more variables: wk8 &lt;int&gt;, wk9 &lt;int&gt;, wk10 &lt;int&gt;, wk11 &lt;int&gt;,\n&gt; #   wk12 &lt;int&gt;, wk13 &lt;int&gt;, wk14 &lt;int&gt;, wk15 &lt;int&gt;, wk16 &lt;int&gt;, wk17 &lt;int&gt;,\n&gt; #   wk18 &lt;int&gt;, wk19 &lt;int&gt;, wk20 &lt;int&gt;, wk21 &lt;int&gt;, wk22 &lt;int&gt;, wk23 &lt;int&gt;,\n&gt; #   wk24 &lt;int&gt;, wk25 &lt;int&gt;, wk26 &lt;int&gt;, wk27 &lt;int&gt;, wk28 &lt;int&gt;, wk29 &lt;int&gt;,\n&gt; #   wk30 &lt;int&gt;, wk31 &lt;int&gt;, wk32 &lt;int&gt;, wk33 &lt;int&gt;, wk34 &lt;int&gt;, wk35 &lt;int&gt;,\n&gt; #   wk36 &lt;int&gt;, wk37 &lt;int&gt;, wk38 &lt;int&gt;, wk39 &lt;int&gt;, wk40 &lt;int&gt;, wk41 &lt;int&gt;,\n&gt; #   wk42 &lt;int&gt;, wk43 &lt;int&gt;, wk44 &lt;int&gt;, wk45 &lt;int&gt;, wk46 &lt;int&gt;, wk47 &lt;int&gt;, ‚Ä¶\n\n\n\n\nWeek columns continue up to wk76!"
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture5.html#billboard",
    "href": "Lectures/Lecture5/CSSS508_Lecture5.html#billboard",
    "title": "",
    "section": "Billboard",
    "text": "Billboard\n\nWhat are the observations in the data?\n\nSong on the Billboard chart each week\n\n\nWhat are the variables in the data?\n\nYear, artist, track, song length, date entered Hot 100, week since first entered Hot 100 (spread over many columns), rank during week (spread over many columns)\n\n\nWhat are the values in the data?\n\ne.g.¬†2000; 3 Doors Down; Kryptonite; 3 minutes 53 seconds; April 8, 2000; Week 3 (stuck in column headings); rank 68 (spread over many columns)"
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture5.html#reminder-why-do-we-want-tidy-data",
    "href": "Lectures/Lecture5/CSSS508_Lecture5.html#reminder-why-do-we-want-tidy-data",
    "title": "",
    "section": "Reminder: Why do we Want Tidy Data?",
    "text": "Reminder: Why do we Want Tidy Data?\n\n1\n\nIllustrations from the Openscapes blog Tidy Data for reproducibility, efficiency, and collaboration by Julia Lowndes and Allison Horst"
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture5.html#tidyr",
    "href": "Lectures/Lecture5/CSSS508_Lecture5.html#tidyr",
    "title": "",
    "section": "tidyr",
    "text": "tidyr\nThe tidyr package provides functions to tidy up data.\n\nKey functions:\n\n\npivot_longer(): takes a set of columns and pivots them down (‚Äúlonger‚Äù) to make two new columns (which you can name yourself):\n\nA name column that stores the original column names\nA value with the values in those original columns\n\n\n\n\n\n\n\npivot_wider(): inverts pivot_longer() by taking two columns and pivoting them up and across (‚Äúwider‚Äù) into multiple columns"
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture5.html#pivot_longer",
    "href": "Lectures/Lecture5/CSSS508_Lecture5.html#pivot_longer",
    "title": "",
    "section": "pivot_longer()",
    "text": "pivot_longer()\nThis function usually takes three arguments:\n\n\ncols: The columns that need to be pivoted (are not variables)\n\nnames_to: Names the new variable that is stored in multiple columns\n\nvalues_to: Names the variable stored in the cell values"
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture5.html#pivot_longer-1",
    "href": "Lectures/Lecture5/CSSS508_Lecture5.html#pivot_longer-1",
    "title": "",
    "section": "pivot_longer()",
    "text": "pivot_longer()\nThis function usually takes three arguments:\n\n\ncols: The columns that need to be pivoted (are not variables)\nnames_to: Names the new variable that is stored in multiple columns\n\nvalues_to: Names the variable stored in the cell values"
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture5.html#pivot_longer-2",
    "href": "Lectures/Lecture5/CSSS508_Lecture5.html#pivot_longer-2",
    "title": "",
    "section": "pivot_longer()",
    "text": "pivot_longer()\nThis function usually takes three arguments:\n\n\ncols: The columns that need to be pivoted (are not variables)\n\nnames_to: Names the new variable that is stored in multiple columns\nvalues_to: Names the variable stored in the cell values"
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture5.html#pivot_longer-3",
    "href": "Lectures/Lecture5/CSSS508_Lecture5.html#pivot_longer-3",
    "title": "",
    "section": "pivot_longer()",
    "text": "pivot_longer()\nThis function usually takes three arguments:\n\n\ncols: The columns that need to be pivoted (are not variables)\n\nnames_to: Names the new variable that is stored in multiple columns\n\nvalues_to: Names the variable stored in the cell values"
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture5.html#pivot_longer-example",
    "href": "Lectures/Lecture5/CSSS508_Lecture5.html#pivot_longer-example",
    "title": "",
    "section": "\npivot_longer() Example",
    "text": "pivot_longer() Example\n\n1billboard_2000 &lt;- billboard_renamed |&gt;\n2  pivot_longer(cols = starts_with(\"wk_\"),\n3               names_to =\"week\",\n4               values_to = \"rank\")\n\nbillboard_2000 |&gt; head(10)\n\n\n1\n\nbillboard_renamed here has snake_case variable names and correctly specified column types\n\n2\n\nstarts_with() is one of the helper functions from tidyselect that helps select certain common patterns. We could have also used cols = wk_1:wk_76.\n\n3\n\nCreates a new variable week that will take values of the current column names we‚Äôre pivoting\n\n4\n\nCreates a new variable value that will take the values from the respective wk_ column and row\n\n\n\n\n\n\n&gt; # A tibble: 10 √ó 6\n&gt;    artist track                   time   date_entered week   rank\n&gt;    &lt;chr&gt;  &lt;chr&gt;                   &lt;time&gt; &lt;date&gt;       &lt;chr&gt; &lt;int&gt;\n&gt;  1 2 Pac  Baby Don't Cry (Keep... 04:22  2000-02-26   wk_1     87\n&gt;  2 2 Pac  Baby Don't Cry (Keep... 04:22  2000-02-26   wk_2     82\n&gt;  3 2 Pac  Baby Don't Cry (Keep... 04:22  2000-02-26   wk_3     72\n&gt;  4 2 Pac  Baby Don't Cry (Keep... 04:22  2000-02-26   wk_4     77\n&gt;  5 2 Pac  Baby Don't Cry (Keep... 04:22  2000-02-26   wk_5     87\n&gt;  6 2 Pac  Baby Don't Cry (Keep... 04:22  2000-02-26   wk_6     94\n&gt;  7 2 Pac  Baby Don't Cry (Keep... 04:22  2000-02-26   wk_7     99\n&gt;  8 2 Pac  Baby Don't Cry (Keep... 04:22  2000-02-26   wk_8     NA\n&gt;  9 2 Pac  Baby Don't Cry (Keep... 04:22  2000-02-26   wk_9     NA\n&gt; 10 2 Pac  Baby Don't Cry (Keep... 04:22  2000-02-26   wk_10    NA\n\n\n\nNow we have a single week column!"
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture5.html#lots-of-missing-values",
    "href": "Lectures/Lecture5/CSSS508_Lecture5.html#lots-of-missing-values",
    "title": "",
    "section": "Lots of Missing Values?!",
    "text": "Lots of Missing Values?!\n\nglimpse(billboard_2000)\n\n\n\n&gt; Rows: 24,092\n&gt; Columns: 6\n&gt; $ artist       &lt;chr&gt; \"2 Pac\", \"2 Pac\", \"2 Pac\", \"2 Pac\", \"2 Pac\", \"2 Pac\", \"2 ‚Ä¶\n&gt; $ track        &lt;chr&gt; \"Baby Don't Cry (Keep...\", \"Baby Don't Cry (Keep...\", \"Ba‚Ä¶\n&gt; $ time         &lt;time&gt; 04:22:00, 04:22:00, 04:22:00, 04:22:00, 04:22:00, 04:22:‚Ä¶\n&gt; $ date_entered &lt;date&gt; 2000-02-26, 2000-02-26, 2000-02-26, 2000-02-26, 2000-02-‚Ä¶\n&gt; $ week         &lt;chr&gt; \"wk_1\", \"wk_2\", \"wk_3\", \"wk_4\", \"wk_5\", \"wk_6\", \"wk_7\", \"‚Ä¶\n&gt; $ rank         &lt;int&gt; 87, 82, 72, 77, 87, 94, 99, NA, NA, NA, NA, NA, NA, NA, N‚Ä¶\n\n\n\nIt looks like 2 Pac‚Äôs song ‚ÄúBaby Don‚Äôt Cry‚Äù was only on the Billboard Hot 100 for 7 weeks and then dropped off the charts.\n\n\n\nsummary(billboard_2000$rank)\n\n\n\n&gt;    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n&gt;    1.00   26.00   51.00   51.05   76.00  100.00   18785\n\n\n\nWe don‚Äôt want to keep the 18785 rows with missing ranks."
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture5.html#pivoting-better-values_drop_na",
    "href": "Lectures/Lecture5/CSSS508_Lecture5.html#pivoting-better-values_drop_na",
    "title": "",
    "section": "Pivoting Better: values_drop_na\n",
    "text": "Pivoting Better: values_drop_na\n\nAdding the argument values_drop_na = TRUE to pivot_longer() will remove rows with missing ranks. Since these NAs don‚Äôt really represent unknown observations (i.e.¬†they were forced to exist by the structure of the dataset) this is an appropriate approach here.\n\nbillboard_2000 &lt;- billboard_renamed |&gt; \n  pivot_longer(cols = wk_1:wk_76, \n               names_to = \"week\", \n               values_to = \"rank\", \n               values_drop_na = TRUE)\nsummary(billboard_2000$rank)\n\n\n\n&gt;    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n&gt;    1.00   26.00   51.00   51.05   76.00  100.00\n\n\n\nNo more NA values!\n\ndim(billboard_2000)\n\n\n\n&gt; [1] 5307    6\n\n\n\n\nAnd way fewer rows!"
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture5.html#parse_number",
    "href": "Lectures/Lecture5/CSSS508_Lecture5.html#parse_number",
    "title": "",
    "section": "parse_number()",
    "text": "parse_number()\nThe week column is of the type character, but it should be numeric.\n\nhead(billboard_2000$week)\n\n\n\n&gt; [1] \"wk_1\" \"wk_2\" \"wk_3\" \"wk_4\" \"wk_5\" \"wk_6\"\n\n\n\nparse_number() grabs just the numeric information from a character string:\n\nbillboard_2000 &lt;- billboard_2000 |&gt; \n1    mutate(week = parse_number(week))\nsummary(billboard_2000$week)\n\n\n1\n\nYou can use mutate() to overwrite existing columns.\n\n\n\n\n\n\n&gt;    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n&gt;    1.00    5.00   10.00   11.47   16.00   65.00\n\n\n\n\nMore sophisticated tools for character strings will be covered later in this course!"
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture5.html#use-pivot_longer-arguments",
    "href": "Lectures/Lecture5/CSSS508_Lecture5.html#use-pivot_longer-arguments",
    "title": "",
    "section": "Use pivot_longer arguments",
    "text": "Use pivot_longer arguments\nAlternatively (and more efficiently), there are a number of optional arguments for pivot_longer that are meant to help deal with naming issues.\n\n\nbillboard_2000 &lt;- billboard_renamed |&gt; \n  pivot_longer(starts_with(\"wk_\"), \n               names_to        = \"week\", \n               values_to       = \"rank\",\n               values_drop_na  = TRUE,\n1               names_prefix    = \"wk_\",\n2               names_transform = list(week = as.integer))\n\nhead(billboard_2000, 5)\n\n\n1\n\nnames_prefix is used to remove ‚Äúwk_‚Äù from the values of week\n\n2\n\nnames_transform converts week into an integer number. We‚Äôll cover lists in more detail next week but this is the structure required for this argument and it flexibly allows for multiple naming transformations to be applied at once.\n\n\n\n\n\n\n&gt; # A tibble: 5 √ó 6\n&gt;   artist track                   time   date_entered  week  rank\n&gt;   &lt;chr&gt;  &lt;chr&gt;                   &lt;time&gt; &lt;date&gt;       &lt;int&gt; &lt;int&gt;\n&gt; 1 2 Pac  Baby Don't Cry (Keep... 04:22  2000-02-26       1    87\n&gt; 2 2 Pac  Baby Don't Cry (Keep... 04:22  2000-02-26       2    82\n&gt; 3 2 Pac  Baby Don't Cry (Keep... 04:22  2000-02-26       3    72\n&gt; 4 2 Pac  Baby Don't Cry (Keep... 04:22  2000-02-26       4    77\n&gt; 5 2 Pac  Baby Don't Cry (Keep... 04:22  2000-02-26       5    87"
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture5.html#multiple-variables-in-column-names",
    "href": "Lectures/Lecture5/CSSS508_Lecture5.html#multiple-variables-in-column-names",
    "title": "",
    "section": "Multiple Variables in Column Names",
    "text": "Multiple Variables in Column Names\nA more challenging situation occurs when you have multiple pieces of information crammed into the column names, and you would like to store these in separate new variables.\n\nThis dataset contains tuberculosis diagnoses collected by the World Health Organization.\n\nwho2\n\n\n\n&gt; # A tibble: 7,240 √ó 58\n&gt;    country      year sp_m_014 sp_m_1524 sp_m_2534 sp_m_3544 sp_m_4554 sp_m_5564\n&gt;    &lt;chr&gt;       &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;\n&gt;  1 Afghanistan  1980       NA        NA        NA        NA        NA        NA\n&gt;  2 Afghanistan  1981       NA        NA        NA        NA        NA        NA\n&gt;  3 Afghanistan  1982       NA        NA        NA        NA        NA        NA\n&gt;  4 Afghanistan  1983       NA        NA        NA        NA        NA        NA\n&gt;  5 Afghanistan  1984       NA        NA        NA        NA        NA        NA\n&gt;  6 Afghanistan  1985       NA        NA        NA        NA        NA        NA\n&gt;  7 Afghanistan  1986       NA        NA        NA        NA        NA        NA\n&gt;  8 Afghanistan  1987       NA        NA        NA        NA        NA        NA\n&gt;  9 Afghanistan  1988       NA        NA        NA        NA        NA        NA\n&gt; 10 Afghanistan  1989       NA        NA        NA        NA        NA        NA\n&gt; # ‚Ñπ 7,230 more rows\n&gt; # ‚Ñπ 50 more variables: sp_m_65 &lt;dbl&gt;, sp_f_014 &lt;dbl&gt;, sp_f_1524 &lt;dbl&gt;,\n&gt; #   sp_f_2534 &lt;dbl&gt;, sp_f_3544 &lt;dbl&gt;, sp_f_4554 &lt;dbl&gt;, sp_f_5564 &lt;dbl&gt;,\n&gt; #   sp_f_65 &lt;dbl&gt;, sn_m_014 &lt;dbl&gt;, sn_m_1524 &lt;dbl&gt;, sn_m_2534 &lt;dbl&gt;,\n&gt; #   sn_m_3544 &lt;dbl&gt;, sn_m_4554 &lt;dbl&gt;, sn_m_5564 &lt;dbl&gt;, sn_m_65 &lt;dbl&gt;,\n&gt; #   sn_f_014 &lt;dbl&gt;, sn_f_1524 &lt;dbl&gt;, sn_f_2534 &lt;dbl&gt;, sn_f_3544 &lt;dbl&gt;,\n&gt; #   sn_f_4554 &lt;dbl&gt;, sn_f_5564 &lt;dbl&gt;, sn_f_65 &lt;dbl&gt;, ep_m_014 &lt;dbl&gt;, ‚Ä¶\n\n\n\n\nThe first two columns are self explanatory but what‚Äôs going on with the rest?"
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture5.html#multiple-variables-in-column-names-1",
    "href": "Lectures/Lecture5/CSSS508_Lecture5.html#multiple-variables-in-column-names-1",
    "title": "",
    "section": "Multiple Variables in Column Names",
    "text": "Multiple Variables in Column Names\nData documentation and some minor investigation would lead you to figure out that the three elements in each of these column names are actually data!\n\n\n1who2 |&gt; select(-c(country, year)) |&gt; names()\n\n\n1\n\nRemove the first two columns to see the more mysteriously-named variables.\n\n\n\n\n&gt;  [1] \"sp_m_014\"   \"sp_m_1524\"  \"sp_m_2534\"  \"sp_m_3544\"  \"sp_m_4554\" \n&gt;  [6] \"sp_m_5564\"  \"sp_m_65\"    \"sp_f_014\"   \"sp_f_1524\"  \"sp_f_2534\" \n&gt; [11] \"sp_f_3544\"  \"sp_f_4554\"  \"sp_f_5564\"  \"sp_f_65\"    \"sn_m_014\"  \n&gt; [16] \"sn_m_1524\"  \"sn_m_2534\"  \"sn_m_3544\"  \"sn_m_4554\"  \"sn_m_5564\" \n&gt; [21] \"sn_m_65\"    \"sn_f_014\"   \"sn_f_1524\"  \"sn_f_2534\"  \"sn_f_3544\" \n&gt; [26] \"sn_f_4554\"  \"sn_f_5564\"  \"sn_f_65\"    \"ep_m_014\"   \"ep_m_1524\" \n&gt; [31] \"ep_m_2534\"  \"ep_m_3544\"  \"ep_m_4554\"  \"ep_m_5564\"  \"ep_m_65\"   \n&gt; [36] \"ep_f_014\"   \"ep_f_1524\"  \"ep_f_2534\"  \"ep_f_3544\"  \"ep_f_4554\" \n&gt; [41] \"ep_f_5564\"  \"ep_f_65\"    \"rel_m_014\"  \"rel_m_1524\" \"rel_m_2534\"\n&gt; [46] \"rel_m_3544\" \"rel_m_4554\" \"rel_m_5564\" \"rel_m_65\"   \"rel_f_014\" \n&gt; [51] \"rel_f_1524\" \"rel_f_2534\" \"rel_f_3544\" \"rel_f_4554\" \"rel_f_5564\"\n&gt; [56] \"rel_f_65\"\n\n\n\n\n\n\n\n\nThe first piece, sp/sn/rel/ep, describes the method used for the diagnosis\nThe second piece, m/f is the gender (coded as a binary variable in this dataset)\nThe third piece, 014/1524/2534/3544/4554/5564/65 is the age range (014 represents 0-14, for example)\n\n\n\nTo organize the six pieces of information in this dataset into six separate columns, we‚Äôll use pivot_longer() with a vector of column names for names_to and instructions for splitting the original variable names into pieces for names_sep as well as a column name for values_to!"
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture5.html#multiple-variables-in-column-names-2",
    "href": "Lectures/Lecture5/CSSS508_Lecture5.html#multiple-variables-in-column-names-2",
    "title": "",
    "section": "Multiple Variables in Column Names",
    "text": "Multiple Variables in Column Names\n\nwho2 |&gt; \n  pivot_longer(\n1    cols = !(country:year),\n2    names_to = c(\"diagnosis\", \"gender\", \"age\"),\n3    names_sep = \"_\",\n    values_to = \"count\"\n  )\n\n\n1\n\nYou can also exclude variables by negating a vector of them.\n\n2\n\nnames_to allows you to specify how to split up the current column names into new column names.\n\n3\n\nYou can use names_pattern instead of names_sep to extract variables from more complicated naming scenarios once you‚Äôve learned regular expressions. You‚Äôll get a basic introduction to them in a few weeks.\n\n\n\n\n\n\n&gt; # A tibble: 405,440 √ó 6\n&gt;    country      year diagnosis gender age   count\n&gt;    &lt;chr&gt;       &lt;dbl&gt; &lt;chr&gt;     &lt;chr&gt;  &lt;chr&gt; &lt;dbl&gt;\n&gt;  1 Afghanistan  1980 sp        m      014      NA\n&gt;  2 Afghanistan  1980 sp        m      1524     NA\n&gt;  3 Afghanistan  1980 sp        m      2534     NA\n&gt;  4 Afghanistan  1980 sp        m      3544     NA\n&gt;  5 Afghanistan  1980 sp        m      4554     NA\n&gt;  6 Afghanistan  1980 sp        m      5564     NA\n&gt;  7 Afghanistan  1980 sp        m      65       NA\n&gt;  8 Afghanistan  1980 sp        f      014      NA\n&gt;  9 Afghanistan  1980 sp        f      1524     NA\n&gt; 10 Afghanistan  1980 sp        f      2534     NA\n&gt; # ‚Ñπ 405,430 more rows"
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture5.html#variable-values-in-column-names",
    "href": "Lectures/Lecture5/CSSS508_Lecture5.html#variable-values-in-column-names",
    "title": "",
    "section": "Variable & Values in Column Names",
    "text": "Variable & Values in Column Names\nThis dataset contains data about five families, with the names and dates of birth of up to two children.\n\nhousehold\n\n\n\n&gt; # A tibble: 5 √ó 5\n&gt;   family dob_child1 dob_child2 name_child1 name_child2\n&gt;    &lt;int&gt; &lt;date&gt;     &lt;date&gt;     &lt;chr&gt;       &lt;chr&gt;      \n&gt; 1      1 1998-11-26 2000-01-29 Susan       Jose       \n&gt; 2      2 1996-06-22 NA         Mark        &lt;NA&gt;       \n&gt; 3      3 2002-07-11 2004-04-05 Sam         Seth       \n&gt; 4      4 2004-10-10 2009-08-27 Craig       Khai       \n&gt; 5      5 2000-12-05 2005-02-28 Parker      Gracie\n\n\n\nThe new challenge in this dataset is that the column names contain the names of two variables (dob, name) and the values of another (child, with values 1 or 2)."
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture5.html#variable-values-in-column-names-1",
    "href": "Lectures/Lecture5/CSSS508_Lecture5.html#variable-values-in-column-names-1",
    "title": "",
    "section": "Variable & Values in Column Names",
    "text": "Variable & Values in Column Names\n\n\nhousehold |&gt; \n  pivot_longer(\n    cols = !family, \n1    names_to = c(\".value\", \"child\"),\n    names_sep = \"_\", \n2    values_drop_na = TRUE\n  )\n\n\n\n1\n\n.value isn‚Äôt the name of a variable but a unique value that tells pivot_longer to use the first component of the pivoted column name as a variable name in the output.\n\n2\n\nUsing values_drop_na = TRUE again since not every family has 2 children.\n\n\n\n\n&gt; # A tibble: 9 √ó 4\n&gt;   family child  dob        name  \n&gt;    &lt;int&gt; &lt;chr&gt;  &lt;date&gt;     &lt;chr&gt; \n&gt; 1      1 child1 1998-11-26 Susan \n&gt; 2      1 child2 2000-01-29 Jose  \n&gt; 3      2 child1 1996-06-22 Mark  \n&gt; 4      3 child1 2002-07-11 Sam   \n&gt; 5      3 child2 2004-04-05 Seth  \n&gt; 6      4 child1 2004-10-10 Craig \n&gt; 7      4 child2 2009-08-27 Khai  \n&gt; 8      5 child1 2000-12-05 Parker\n&gt; 9      5 child2 2005-02-28 Gracie"
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture5.html#pivot_wider",
    "href": "Lectures/Lecture5/CSSS508_Lecture5.html#pivot_wider",
    "title": "",
    "section": "pivot_wider",
    "text": "pivot_wider\npivot_wider() is the opposite of pivot_longer(), which you use if you have data for the same observation taking up multiple rows.\n\nHere‚Äôs an example of data that we probably want to pivot wider (unless we want to plot each statistic in its own facet):\n\n\n&gt; # A tibble: 6 √ó 3\n&gt;   Group Statistic Value\n&gt;   &lt;chr&gt; &lt;chr&gt;     &lt;dbl&gt;\n&gt; 1 A     Mean       1.28\n&gt; 2 A     Median     1   \n&gt; 3 A     SD         0.72\n&gt; 4 B     Mean       2.81\n&gt; 5 B     Median     2   \n&gt; 6 B     SD         1.33\n\n\n\n\nA common cue to use pivot_wider() is having measurements of different quantities in the same column."
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture5.html#pivot_wider-example",
    "href": "Lectures/Lecture5/CSSS508_Lecture5.html#pivot_wider-example",
    "title": "",
    "section": "\npivot_wider Example",
    "text": "pivot_wider Example\n\nwide_stats &lt;- long_stats |&gt; \n1  pivot_wider(id_cols = Group,\n2              names_from = Statistic,\n3              values_from = Value)\nwide_stats\n\n\n1\n\nid_cols is the column that uniquely identifies each row in the new dataset. Default is everything not in names_from and values_from.\n\n2\n\nnames_from provides the names that will be used for the new columns\n\n3\n\nvalues_from provides the values that will be used to populate the cells of the new columns.\n\n\n\n\n\n\n&gt; # A tibble: 2 √ó 4\n&gt;   Group  Mean Median    SD\n&gt;   &lt;chr&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt;\n&gt; 1 A      1.28      1  0.72\n&gt; 2 B      2.81      2  1.33\n\n\n\npivot_wider() also has a number of optional names_* and values_* arguments for more complicated transformations.\n\n\n\n\n\n Nested Data\n\n\nIf there are multiple rows in the input that correspond to one cell in the output you‚Äôll get a list-column.\nThis means that you:\n¬†¬†¬†¬† 1) need to fix something in your code/data because it shouldn‚Äôt be nested in this way or\n¬†¬†¬†¬† 2) need to use unnest_wider() or unnest_longer() in order to access this column of data.\nMore on this here."
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture5.html#importing-tidying-data-1",
    "href": "Lectures/Lecture5/CSSS508_Lecture5.html#importing-tidying-data-1",
    "title": "",
    "section": "Importing & Tidying Data",
    "text": "Importing & Tidying Data\n\nGo to the Lecture 5 Homepage and click on the link Religion & Income under the Data section.\nClick File &gt; Save to download this data to the same folder where your source document1 will be saved for this lab.\nRead in your data using the appropriate function from readr.\nPivot your data to make it tidy2.\nR Script or .qmdThere should be 3 columns in your final dataset"
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture5.html#data-types-in-r",
    "href": "Lectures/Lecture5/CSSS508_Lecture5.html#data-types-in-r",
    "title": "",
    "section": "Data types in R\n",
    "text": "Data types in R\n\nGoing back to our list of data types in R:\n\n\nLogicals\nFactors\nDate/Date-time\nNumbers\nMissing Values\nStrings"
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture5.html#data-types-in-r-1",
    "href": "Lectures/Lecture5/CSSS508_Lecture5.html#data-types-in-r-1",
    "title": "",
    "section": "Data types in R\n",
    "text": "Data types in R\n\nGoing back to our list of data types in R:\n\nLogicals\nFactors\nDate/Date-time\nNumbers\nMissing Values\nStrings"
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture5.html#data-types-in-r-2",
    "href": "Lectures/Lecture5/CSSS508_Lecture5.html#data-types-in-r-2",
    "title": "",
    "section": "Data types in R\n",
    "text": "Data types in R\n\nGoing back to our list of data types in R:\n\nLogicals\nFactors\nDate/Date-time\nNumbers\nMissing Values\nStrings"
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture5.html#why-use-factors",
    "href": "Lectures/Lecture5/CSSS508_Lecture5.html#why-use-factors",
    "title": "",
    "section": "Why Use Factors?",
    "text": "Why Use Factors?\nFactors are a special class of data specifically for categorical variables1 which have a fixed, known, and mutually exclusive set of possible values2.\n\nImagine we have a variable that records the month that an event occurred.\n\nmonth &lt;- c(\"Dec\", \"Apr\", \"Jan\", \"Mar\")\n\n\n\nThe two main issues with coding this simply as a character string are that:\n\nIt doesn‚Äôt help catch spelling errors and that\n\n\nmonth &lt;- c(\"Dec\", \"Apr\", \"Jam\", \"Mar\")\n\n\n\n\nCharacters are sorted alphabetically, which is not necessarily intuitive or useful for your variable.\n\n\nsort(month)\n\n&gt; [1] \"Apr\" \"Dec\" \"Jan\" \"Mar\"\n\n\n\nFor categoricals; forcats is also an anagram of factors.Factors can also be created from character strings that you want to display in non-alphabetical order"
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture5.html#factors",
    "href": "Lectures/Lecture5/CSSS508_Lecture5.html#factors",
    "title": "",
    "section": "Factors",
    "text": "Factors\nFactors have an additional specification called levels. These are the categories of the categorical variable. We can create a vector of the levels first:\n\nmonth_levels &lt;- c(\n  \"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \n  \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"\n)\n\n\nAnd then we can create a factor like so:\n\nmonth_factor &lt;- factor(month, levels = month_levels)\nmonth_factor\n\n&gt; [1] Dec Apr Jan Mar\n&gt; Levels: Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec\n\n\n\n\nWe can see that the levels specify in which order the categories should be displayed:\n\nsort(month_factor)\n\n&gt; [1] Jan Mar Apr Dec\n&gt; Levels: Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec"
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture5.html#creating-factors",
    "href": "Lectures/Lecture5/CSSS508_Lecture5.html#creating-factors",
    "title": "",
    "section": "Creating Factors",
    "text": "Creating Factors\nfactor is Base R‚Äôs function for creating factors while fct is forcats function for making factors. A couple of things to note about their differences:\n\n\n\nfactor\n\nAny values not specified as a level will be silently converted to NA\n\nWithout specified levels, they‚Äôll be created from the data in alphabetical order1\n\n\n\nfct\n\nWill send a error message if a value exists outside the specified levels\nWithout specified levels, they‚Äôll be created from the data in order of first appearance\n\n\n\n\n\nYou can create a factor by specifying col_factor() when reading in data with readr:\n\ndf &lt;- read_csv(csv, col_types = cols(month = col_factor(month_levels)))\n\n\n\nIf you need to access the levels directly you can use the Base R function levels().\n\nlevels(month_factor)\n\n&gt;  [1] \"Jan\" \"Feb\" \"Mar\" \"Apr\" \"May\" \"Jun\" \"Jul\" \"Aug\" \"Sep\" \"Oct\" \"Nov\" \"Dec\"\n\n\n\nThis is risky to rely on since not every computer will sort strings the same way."
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture5.html#changing-the-order-of-levels",
    "href": "Lectures/Lecture5/CSSS508_Lecture5.html#changing-the-order-of-levels",
    "title": "",
    "section": "Changing the Order of Levels",
    "text": "Changing the Order of Levels\nOne of the more common data manipulations you‚Äôll want to do with factors is to change the ordering of the levels. This could be to put them in a more intuitive order but also to make a visualization clearer and more impactful.\n\nLet‚Äôs use a subset of the General Social Survey1 data to see what this might look like.\n\ngss_cat\n\n&gt; # A tibble: 21,483 √ó 9\n&gt;     year marital         age race  rincome        partyid    relig denom tvhours\n&gt;    &lt;int&gt; &lt;fct&gt;         &lt;int&gt; &lt;fct&gt; &lt;fct&gt;          &lt;fct&gt;      &lt;fct&gt; &lt;fct&gt;   &lt;int&gt;\n&gt;  1  2000 Never married    26 White $8000 to 9999  Ind,near ‚Ä¶ Prot‚Ä¶ Sout‚Ä¶      12\n&gt;  2  2000 Divorced         48 White $8000 to 9999  Not str r‚Ä¶ Prot‚Ä¶ Bapt‚Ä¶      NA\n&gt;  3  2000 Widowed          67 White Not applicable Independe‚Ä¶ Prot‚Ä¶ No d‚Ä¶       2\n&gt;  4  2000 Never married    39 White Not applicable Ind,near ‚Ä¶ Orth‚Ä¶ Not ‚Ä¶       4\n&gt;  5  2000 Divorced         25 White Not applicable Not str d‚Ä¶ None  Not ‚Ä¶       1\n&gt;  6  2000 Married          25 White $20000 - 24999 Strong de‚Ä¶ Prot‚Ä¶ Sout‚Ä¶      NA\n&gt;  7  2000 Never married    36 White $25000 or more Not str r‚Ä¶ Chri‚Ä¶ Not ‚Ä¶       3\n&gt;  8  2000 Divorced         44 White $7000 to 7999  Ind,near ‚Ä¶ Prot‚Ä¶ Luth‚Ä¶      NA\n&gt;  9  2000 Married          44 White $25000 or more Not str d‚Ä¶ Prot‚Ä¶ Other       0\n&gt; 10  2000 Married          47 White $25000 or more Strong re‚Ä¶ Prot‚Ä¶ Sout‚Ä¶       3\n&gt; # ‚Ñπ 21,473 more rows\n\n\n\nOnce you‚Äôve loaded forcats you can run ?gss_cat to learn more."
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture5.html#changing-the-order-of-levels-1",
    "href": "Lectures/Lecture5/CSSS508_Lecture5.html#changing-the-order-of-levels-1",
    "title": "",
    "section": "Changing the Order of Levels",
    "text": "Changing the Order of Levels\nThere are four related functions to change the level ordering in forcats.\n\nfct_reorder()\n\n1fct_reorder(.f = factor,\n2            .x = ordering_vector,\n3            .fun = optional_function)\n\n\n1\n\nfactor is the factor to reorder (or a character string to be turned into a factor)\n\n2\n\nordering_vector specifies how to reorder factor\n\n3\n\noptional_function is applied if there are multiple values of ordering_vector for each value of factor (the default is to take the median)\n\n\n\n\n\n\nfct_relevel()\n\nfct_relevel(.f = factor, \n4            ... = value,\n5            after = placement)\n\n\n4\n\nvalue is either a function (i.e.¬†sort) or a character level (default is to move it to the front of the vector)\n\n5\n\nplacement is an optional vector index where the level should be placed\n\n\n\n\n\n\nfct_reorder2()\n\nfct_reorder2(.f = factor, \n6            .x = vector1,\n            .y = vector2)\n\n\n6\n\nfct_reorder2 reorders factor by the values of vector2 associated with the largest values of vector1.\n\n\n\n\n\n\nfct_infreq()\n\n7fct_infreq(.f = factor)\n\n\n7\n\nfct_infreq reorders factor in decreasing frequency. See other variations here. Use with fct_rev() for increasing frequency."
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture5.html#changing-the-order-of-levels-2",
    "href": "Lectures/Lecture5/CSSS508_Lecture5.html#changing-the-order-of-levels-2",
    "title": "",
    "section": "Changing the Order of Levels \n",
    "text": "Changing the Order of Levels \n\nThere are four related functions to change the level ordering in forcats.\n\n\nfct_reorder1\nfct_relevel2\nfct_reorder2\nfct_infreq\n\n\n\nWithout fct_reorder()\n\nCoderelig_summary &lt;- gss_cat |&gt;\n  summarize(\n    tvhours = mean(tvhours, na.rm = TRUE),\n    .by = relig\n  )\n\nggplot(relig_summary, aes(x = tvhours, y = relig)) + \n  geom_point() + \n  theme_minimal(base_size = 16)\n\n\n\n\n\n\n\nWith fct_reorder()\n\nCoderelig_summary |&gt;\n  mutate(\n1    relig = fct_reorder(relig, tvhours)\n  ) |&gt;\n  ggplot(aes(x = tvhours, y = relig)) +\n  geom_point() + \n  theme_minimal(base_size = 16)\n\n\n1\n\nrelig ordered by tvhours\n\n\n\n\n\n\n\n\n\n\n\n\nWithout fct_relevel()\n\nCoderincome_summary &lt;- gss_cat |&gt;\n  summarize(\n    age = mean(age, na.rm = TRUE),\n    .by = rincome\n  )\n\nggplot(rincome_summary, aes(x = age, y = rincome)) + \n  geom_point() + \n  theme_minimal(base_size = 16)\n\n\n\n\n\n\n\nWith fct_relevel()\n\nCodeggplot(rincome_summary, \n1       aes(x = age, y = fct_relevel(rincome, \"Not applicable\"))) +\n  geom_point() + \n  theme_minimal(base_size = 16) \n\n\n1\n\nSets \"Not applicable\" as the first level of rincome\n\n\n\n\n\n\n\n\n\n\n\n\nWithout fct_reorder2()\n\nCodeby_age &lt;- gss_cat |&gt;\n  filter(!is.na(age)) |&gt; \n  count(age, marital) |&gt;\n  mutate(\n    prop = n / sum(n), \n    .by = age\n  )\n\nggplot(by_age, aes(x = age, y = prop, color = marital)) +\n  geom_line(linewidth = 1) + \n  scale_color_brewer(palette = \"Set1\") + \n  theme_minimal(base_size = 16)\n\n\n\n\n\n\n\nWith fct_reorder()\n\nCodeggplot(by_age, \n       aes(x = age, \n           y = prop, \n1           color = fct_reorder2(marital, age, prop))) +\n  geom_line(linewidth = 1) +\n  scale_color_brewer(palette = \"Set1\") + \n  labs(color = \"marital\") + \n  theme_minimal(base_size = 16)\n\n\n1\n\nmarital is being reordered by prop when age is at its maximum.\n\n\n\n\n\n\n\n\n\n\n\n\nWithout fct_infreq()\n\nCodegss_cat |&gt;\n  ggplot(aes(x = marital)) + \n  geom_bar() + \n  theme_minimal(base_size = 16)\n\n\n\n\n\n\n\nWith fct_infreq()\n\nCodegss_cat |&gt;\n1  mutate(marital = marital |&gt; fct_infreq() |&gt; fct_rev()) |&gt;\n  ggplot(aes(x = marital)) +\n  geom_bar() + \n  theme_minimal(base_size = 16)\n\n\n1\n\nOrders marital levels by frequency (decreasing) and then reverses that order (increasing).\n\n\n\n\n\n\n\n\n\n\n\n\n\nUse fct_reorder and fct_reorder2 for categorical variables where ordering is arbitary.Use fct_relevel for categorical variables that already have an inherent ordering."
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture5.html#changing-the-value-of-levels",
    "href": "Lectures/Lecture5/CSSS508_Lecture5.html#changing-the-value-of-levels",
    "title": "",
    "section": "Changing the Value of Levels",
    "text": "Changing the Value of Levels\nYou may also want to change the actual values of your factor levels. The main way to do this is fct_recode().\n\n\n8gss_cat |&gt; count(partyid)\n\n\n8\n\nYou can use count() to get the full list of levels for a variable and their respective counts.\n\n\n\n\n&gt; # A tibble: 10 √ó 2\n&gt;    partyid                n\n&gt;    &lt;fct&gt;              &lt;int&gt;\n&gt;  1 No answer            154\n&gt;  2 Don't know             1\n&gt;  3 Other party          393\n&gt;  4 Strong republican   2314\n&gt;  5 Not str republican  3032\n&gt;  6 Ind,near rep        1791\n&gt;  7 Independent         4119\n&gt;  8 Ind,near dem        2499\n&gt;  9 Not str democrat    3690\n&gt; 10 Strong democrat     3490"
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture5.html#fct_recode",
    "href": "Lectures/Lecture5/CSSS508_Lecture5.html#fct_recode",
    "title": "",
    "section": "fct_recode()",
    "text": "fct_recode()\n\n\n\ngss_cat |&gt;\n  mutate(\n    partyid = fct_recode(partyid,\n      \"Republican, strong\" = \"Strong republican\",\n      \"Republican, weak\" = \"Not str republican\",\n      \"Independent, near rep\" = \"Ind,near rep\",\n      \"Independent, near dem\" = \"Ind,near dem\",\n      \"Democrat, weak\" = \"Not str democrat\",\n      \"Democrat, strong\" = \"Strong democrat\"\n    )\n  ) |&gt;\n  count(partyid)\n\n\n\n\n&gt; # A tibble: 10 √ó 2\n&gt;    partyid                   n\n&gt;    &lt;fct&gt;                 &lt;int&gt;\n&gt;  1 No answer               154\n&gt;  2 Don't know                1\n&gt;  3 Other party             393\n&gt;  4 Republican, strong     2314\n&gt;  5 Republican, weak       3032\n&gt;  6 Independent, near rep  1791\n&gt;  7 Independent            4119\n&gt;  8 Independent, near dem  2499\n&gt;  9 Democrat, weak         3690\n&gt; 10 Democrat, strong       3490\n\n\n\n\nSome features of fct_recode():\n\nWill leave the levels that aren‚Äôt explicitly mentioned, as is.\nWill warn you if you accidentally refer to a level that doesn‚Äôt exist.\nYou can combine groups by assigning multiple old levels to the same new level."
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture5.html#fct_collapse",
    "href": "Lectures/Lecture5/CSSS508_Lecture5.html#fct_collapse",
    "title": "",
    "section": "fct_collapse()",
    "text": "fct_collapse()\nA useful variant of fct_recode() is fct_collapse() which will allow you to collapse a lot of levels at once.\n\n\ngss_cat |&gt;\n  mutate(\n    partyid = fct_collapse(partyid,\n      \"other\" = c(\"No answer\", \"Don't know\", \"Other party\"),\n      \"rep\" = c(\"Strong republican\", \"Not str republican\"),\n      \"ind\" = c(\"Ind,near rep\", \"Independent\", \"Ind,near dem\"),\n      \"dem\" = c(\"Not str democrat\", \"Strong democrat\")\n    )\n  ) |&gt;\n  count(partyid)\n\n&gt; # A tibble: 4 √ó 2\n&gt;   partyid     n\n&gt;   &lt;fct&gt;   &lt;int&gt;\n&gt; 1 other     548\n&gt; 2 rep      5346\n&gt; 3 ind      8409\n&gt; 4 dem      7180"
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture5.html#fct_lump_",
    "href": "Lectures/Lecture5/CSSS508_Lecture5.html#fct_lump_",
    "title": "",
    "section": "fct_lump_*",
    "text": "fct_lump_*\nSometimes you‚Äôll have several levels of a variable that have a small enough N to warrant grouping them together into an other category. The family of fct_lump_* functions are designed to help with this.\n\n\ngss_cat |&gt;\n1  mutate(relig = fct_lump_n(relig, n = 10)) |&gt;\n  count(relig, sort = TRUE)\n\n\n1\n\nOther functions include: fct_lump_min(), fct_lump_prop(), fct_lump_lowfreq(). Read more about them here.\n\n\n\n\n&gt; # A tibble: 10 √ó 2\n&gt;    relig                       n\n&gt;    &lt;fct&gt;                   &lt;int&gt;\n&gt;  1 Protestant              10846\n&gt;  2 Catholic                 5124\n&gt;  3 None                     3523\n&gt;  4 Christian                 689\n&gt;  5 Other                     458\n&gt;  6 Jewish                    388\n&gt;  7 Buddhism                  147\n&gt;  8 Inter-nondenominational   109\n&gt;  9 Moslem/islam              104\n&gt; 10 Orthodox-christian         95"
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture5.html#ordered-factors",
    "href": "Lectures/Lecture5/CSSS508_Lecture5.html#ordered-factors",
    "title": "",
    "section": "Ordered Factors",
    "text": "Ordered Factors\nSo far we‚Äôve mostly been discussing how to code nominal variables, or categorical variables that have no inherent ordering.\n\nIf you want to specify that your factor has a strict order you can classify it as a ordered factor.\n\n10ordered(c(\"a\", \"b\", \"c\"))\n\n\n10\n\nOrdered factors imply a strict ordering and equal distance between levels: the first level is ‚Äúless than‚Äù the second level by the same amount that the second level is ‚Äúless than‚Äù the third level, and so on.\n\n\n\n\n&gt; [1] a b c\n&gt; Levels: a &lt; b &lt; c\n\n\n\n\n\nIn practice there are only two ways in which ordered factors are different than factors:\n\n\nscale_color_viridis()/scale_fill_viridis() will be used automatically when mapping an ordered factor in ggplot2 because it implies an ordered ranking\nIf you use an ordered function in a linear model, it will use ‚Äúpolygonal contrasts‚Äù. You can learn more about what this means here."
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture5.html#importing-tidying-data-2",
    "href": "Lectures/Lecture5/CSSS508_Lecture5.html#importing-tidying-data-2",
    "title": "",
    "section": "Importing & Tidying Data",
    "text": "Importing & Tidying Data\n\nGo to the Lecture 5 Homepage and click on the link Religion & Income under the Data section.\nClick File &gt; Save to download this data to the same folder where your source document1 will be saved for this lab.\nRead in your data using the appropriate function from readr.\nPivot your data to make it tidy2.\nTurn two of the variables into factors3.\nR Script or .qmdThere should be 3 columns in your final datasetHint: Which two variables are categorical?"
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture5.html#date-and-date-time",
    "href": "Lectures/Lecture5/CSSS508_Lecture5.html#date-and-date-time",
    "title": "",
    "section": "Date and Date-Time",
    "text": "Date and Date-Time\nWhile they may look like character strings, Dates, Date-Times and Times1 are each separate classes of data.\n\n\n\nData Type\n\nDate\nDate\nDate-Time\nDate-Time\nTime\n\n\n\n\nPackage\n\nbase\nlubridate\nbase\nlubridate\nhms\n\n\n\n\nReference in R\n\nPOSIXct\ndate\nPOSIXlt\ndttm\ntime\n\n\n\n\nDates and times are challenging data types because there are physical properties but also additional geopolitical definitions that don‚Äôt always neatly align with physical reality.\n\nThe hms package can be used to deal with times but they‚Äôre not very common."
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture5.html#creating-datesdate-times",
    "href": "Lectures/Lecture5/CSSS508_Lecture5.html#creating-datesdate-times",
    "title": "",
    "section": "Creating Dates/Date-Times \n",
    "text": "Creating Dates/Date-Times \n\n\n\nOn Import\nString\nIndividual Components\nExisting Object\n\n\n\nIf your data is in ISO8601 date or date-time format1 readr will automatically recognize it and read it in as a date/date-time.\n\nIf you‚Äôre reading in a different date/date-time format you can use col_types plus col_date() or col_datetime() along with a date-time format.\n\n\n\n\n\nAll date formats understood by readr2\n\n\nType\nCode\nMeaning\nExample\n\n\n\nYear\n%Y\n4 digit year\n2021\n\n\n\n%y\n2 digit year\n21\n\n\nMonth\n%m\nNumber\n2\n\n\n\n%b\nAbbreviated name\nFeb\n\n\n\n\n%B3\n\nFull name\nFebruary\n\n\nDay\n%d\nTwo digits\n02\n\n\n\n%e\nOne or two digits\n2\n\n\nTime\n%H\n24-hour hour\n13\n\n\n\n%I\n12-hour hour\n1\n\n\n\n%p\nAM/PM\npm\n\n\n\n%M\nMinutes\n35\n\n\n\n%S\nSeconds\n45\n\n\n\n%OS\nSeconds with decimal component\n45.35\n\n\n\n%Z\nTime zone name\nAmerica/Chicago\n\n\n\n%z\nOffset from UTC\n+0800\n\n\nOther\n%.\nSkip one non-digit\n:\n\n\n\n%*\nSkip any number of non-digits\n\n\n\n\n\n\n\n\n\ncsv &lt;- \"\n  date\n  05/22/23\n\"\n\nread_csv(csv, col_types = cols(date = col_date(\"%m/%d/%y\")))\n\n&gt; # A tibble: 1 √ó 1\n&gt;   date      \n&gt;   &lt;date&gt;    \n&gt; 1 2023-05-22\n\n\n\n\n\n\nYou can also use lubridate‚Äôs helper functions to specify a date format automatically.\n\nymd(\"2017-01-31\")\n\n&gt; [1] \"2017-01-31\"\n\nmdy(\"January 31st, 2017\")\n\n&gt; [1] \"2017-01-31\"\n\ndmy(\"31-Jan-2017\")\n\n&gt; [1] \"2017-01-31\"\n\n\n\n\nIf you need to specify a date-time you can use these helper functions:\n\nymd_hms(\"2017-01-31 20:11:59\")\n\n&gt; [1] \"2017-01-31 20:11:59 UTC\"\n\nmdy_hm(\"01/31/2017 08:01\")\n\n&gt; [1] \"2017-01-31 08:01:00 UTC\"\n\n\n\n\n\nIf you provide a date object with a timezone it‚Äôll automatically be converted to a date-time object.\n\nymd(\"2017-01-31\", tz = \"UTC\")\n\n&gt; [1] \"2017-01-31 UTC\"\n\n\n\n\n\n\nIf you have time elements in separate variables, like in the flights dataset‚Ä¶\n\nlibrary(nycflights13)\nflights |&gt; \n  select(year, month, day, hour, minute)\n\n\n\n&gt; # A tibble: 336,776 √ó 5\n&gt;     year month   day  hour minute\n&gt;    &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt;  &lt;dbl&gt;\n&gt;  1  2013     1     1     5     15\n&gt;  2  2013     1     1     5     29\n&gt;  3  2013     1     1     5     40\n&gt;  4  2013     1     1     5     45\n&gt;  5  2013     1     1     6      0\n&gt;  6  2013     1     1     5     58\n&gt;  7  2013     1     1     6      0\n&gt;  8  2013     1     1     6      0\n&gt;  9  2013     1     1     6      0\n&gt; 10  2013     1     1     6      0\n&gt; # ‚Ñπ 336,766 more rows\n\n\n\n‚Ä¶you can use make_date or make_datetime to create your date/time object.\n\nflights2 &lt;- flights |&gt; \n  select(year, month, day, hour, minute) |&gt; \n  mutate(departure = make_datetime(year, month, day, hour, minute))\nflights2\n\n\n\n&gt; # A tibble: 336,776 √ó 6\n&gt;     year month   day  hour minute departure          \n&gt;    &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;dttm&gt;             \n&gt;  1  2013     1     1     5     15 2013-01-01 05:15:00\n&gt;  2  2013     1     1     5     29 2013-01-01 05:29:00\n&gt;  3  2013     1     1     5     40 2013-01-01 05:40:00\n&gt;  4  2013     1     1     5     45 2013-01-01 05:45:00\n&gt;  5  2013     1     1     6      0 2013-01-01 06:00:00\n&gt;  6  2013     1     1     5     58 2013-01-01 05:58:00\n&gt;  7  2013     1     1     6      0 2013-01-01 06:00:00\n&gt;  8  2013     1     1     6      0 2013-01-01 06:00:00\n&gt;  9  2013     1     1     6      0 2013-01-01 06:00:00\n&gt; 10  2013     1     1     6      0 2013-01-01 06:00:00\n&gt; # ‚Ñπ 336,766 more rows\n\n\n\n\n\nNote that when you use date-times in a numeric context (like in a histogram), 1 means 1 second, so a binwidth of 86400 means one day. For dates, 1 means 1 day.\n\nggplot(flights2, aes(x = departure)) + \n  geom_freqpoly(binwidth = 86400)\n\n\n\n\n\n\n\n\n\n\n\nas_datetime() and as_date() are used to coerce existing date/time objects into their counterpart.\n\nas_datetime(today())\n\n&gt; [1] \"2025-09-25 UTC\"\n\nas_date(now())\n\n&gt; [1] \"2025-09-25\"\n\n\n\n\nWhile ISO8601 format is read in as a string of human-readable date/times, another common date/time format, Unix time, is represented by the number of seconds that have elapsed since 1 January 1970 at 0:00:00 UTC.\n\n\nIf the offset is in seconds you‚Äôll want to use as_datetime() and if it‚Äôs in days use as_date() for the conversion.\n\nas_datetime(1)\n\n&gt; [1] \"1970-01-01 00:00:01 UTC\"\n\nas_datetime(5057)\n\n&gt; [1] \"1970-01-01 01:24:17 UTC\"\n\nas_date(1)\n\n&gt; [1] \"1970-01-02\"\n\nas_date(5057)\n\n&gt; [1] \"1983-11-06\"\n\n\n\n\n\n\n\nThe international standard for writing dates.Note that no matter how you specify the date format, it‚Äôs always displayed the same way once you get it into R: %Y-%m-%dIf you‚Äôre using either %b or %B and working with non-English dates, you‚Äôll also need to provide a locale(). See these functions for more information."
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture5.html#extracting-time-components",
    "href": "Lectures/Lecture5/CSSS508_Lecture5.html#extracting-time-components",
    "title": "",
    "section": "Extracting Time Components",
    "text": "Extracting Time Components\nWe‚Äôve discussed how to make a date/time object from individual components using make_date() and make_datetime() but what if you need to extract an element from a date/time?\n\nThere are a number of accessor functions that allow you to do just that.\n\ndatetime &lt;- ymd_hms(\"2020-01-30 12:30:45\")\n\nyear(datetime)\n1month(datetime)\n2mday(datetime)\n3yday(datetime)\n4wday(datetime)\nhour(datetime)\nminute(datetime)\nsecond(datetime)\n\n\n1\n\nYou can set label = TRUE to return the abbreviated name and abbr = FALSE to return the full name (i.e.¬†month(datetime, label = TRUE) returns Jan and month(datetime, label = TRUE, abbr = FALSE) returns January)\n\n2\n\nDay of the month.\n\n3\n\nDay of the year.\n\n4\n\nDay of the week. You can set label = TRUE to return the abbreviated name and abbr = FALSE to return the full name (i.e.¬†wday(datetime, label = TRUE) returns Thu and wday(datetime, label = TRUE, abbr = FALSE) returns Thursday)\n\n\n\n\n\n\n&gt; [1] 2020\n&gt; [1] 1\n&gt; [1] 30\n&gt; [1] 30\n&gt; [1] 5\n&gt; [1] 12\n&gt; [1] 30\n&gt; [1] 45"
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture5.html#changing-datetimes",
    "href": "Lectures/Lecture5/CSSS508_Lecture5.html#changing-datetimes",
    "title": "",
    "section": "Changing Date/Times",
    "text": "Changing Date/Times\nWhile less common, you may need to recode a date/time variable which you can also do with these accessor functions.\n\n\ndatetime &lt;- ymd_hms(\"2020-01-30 08:05:35\")\n\nyear(datetime) &lt;- 2030\nhour(datetime) &lt;- hour(datetime) + 1\n\ndatetime\n\n&gt; [1] \"2030-01-30 09:05:35 UTC\"\n\n\n\n\nAn alternative1 way to do this is by using update():\n\n\n\nupdate(datetime, year = 2030, month = 2, mday = 2, hour = 2)\n\n&gt; [1] \"2030-02-02 02:05:35 UTC\"\n\n\n\n\nA nice feature of this function is that if values are too big for the unit in question, they will automatically roll over:\n\n\n\nupdate(ymd(\"2023-02-01\"), mday = 30)\n\n&gt; [1] \"2023-03-02\"\n\n\n\nAnd more efficient when needing to specify multiple aspects of a date/time variable."
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture5.html#rounding-dates",
    "href": "Lectures/Lecture5/CSSS508_Lecture5.html#rounding-dates",
    "title": "",
    "section": "Rounding Dates",
    "text": "Rounding Dates\nAlternatively, you can round your date/time objects to a nearby unit with these three functions: floor_date(), round_date(), and ceiling_date().\n\n\ndatetime &lt;- ymd_hms(\"2020-01-30 08:05:35\")\n\n1floor_date(datetime, unit = \"week\")\nround_date(datetime, unit = \"week\", week_start = 1)\nceiling_date(datetime, unit = \"hour\")\n\n\n1\n\nThese functions take 3 arguments: a date/time vector, a unit of time to round by (valid base units include second, minute, hour, day, week, month, bimonth, quarter, season, halfyear and year), and the day of the week that the week starts (default is 7, or Sunday).\n\n\n\n\n\n\n&gt; [1] \"2020-01-26 UTC\"\n&gt; [1] \"2020-01-27 UTC\"\n&gt; [1] \"2020-01-30 09:00:00 UTC\""
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture5.html#spans-of-time",
    "href": "Lectures/Lecture5/CSSS508_Lecture5.html#spans-of-time",
    "title": "",
    "section": "Spans of time",
    "text": "Spans of time\nThere are three different timespan classes in lubridate, which reflect the complexity of date/time data."
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture5.html#durations",
    "href": "Lectures/Lecture5/CSSS508_Lecture5.html#durations",
    "title": "",
    "section": "Durations",
    "text": "Durations\nDurations represent precise physical time. When you subtract two dates, you‚Äôll get a difftime object.\n\n\ns_age &lt;- today() - ymd(\"2023-05-28\")\n1s_age\n2as.duration(s_age)\n\n\n1\n\ndifftime objects record time spans in seconds, minutes, hours, days, or weeks. This is fairly ambiguous so lubridate provides a more consistent alternative: the duration, which always uses seconds.\n\n2\n\nLarger units are created by converting minutes, hours, days, weeks, and years to seconds.\n\n\n\n\n&gt; Time difference of 851 days\n&gt; [1] \"73526400s (~2.33 years)\"\n\n\n\n\nThere are a variety of constructors to create durations:\n\ndseconds(15)\ndminutes(10)\ndhours(c(12, 24))\nddays(0:5)\ndweeks(3)\n1dyears(1)\n\n\n1\n\nAggregating to larger time units is more problematic. A year uses the ‚Äúaverage‚Äù number of days in a year, i.e.¬†365.25. There‚Äôs no way to convert a month to a duration, because there‚Äôs just too much variation.\n\n\n\n\n&gt; [1] \"15s\"\n&gt; [1] \"600s (~10 minutes)\"\n&gt; [1] \"43200s (~12 hours)\" \"86400s (~1 days)\"  \n&gt; [1] \"0s\"                \"86400s (~1 days)\"  \"172800s (~2 days)\"\n&gt; [4] \"259200s (~3 days)\" \"345600s (~4 days)\" \"432000s (~5 days)\"\n&gt; [1] \"1814400s (~3 weeks)\"\n&gt; [1] \"31557600s (~1 years)\""
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture5.html#math-with-durations",
    "href": "Lectures/Lecture5/CSSS508_Lecture5.html#math-with-durations",
    "title": "",
    "section": "Math with Durations",
    "text": "Math with Durations\nYou can add and multiply durations:\n\n2 * dyears(1)\n\n&gt; [1] \"63115200s (~2 years)\"\n\ndyears(1) + dweeks(12) + dhours(15)\n\n&gt; [1] \"38869200s (~1.23 years)\"\n\n\n\n\nSometimes you‚Äôll get an unexpected results though:\n\none_am &lt;- ymd_hms(\"2026-03-08 01:00:00\", tz = \"America/New_York\")\none_am\n1one_am + ddays(1)\n\n\n1\n\nDaylight Savings Time is a human construction so March 8th only has 23 hours because it‚Äôs when DST starts. If we add a full days worth of seconds we end up with a different time and a different time zone.\n\n\n\n\n&gt; [1] \"2026-03-08 01:00:00 EST\"\n&gt; [1] \"2026-03-09 02:00:00 EDT\"\n\n\n\n\n\nFor this reason, lubridate also has periods."
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture5.html#periods",
    "href": "Lectures/Lecture5/CSSS508_Lecture5.html#periods",
    "title": "",
    "section": "Periods",
    "text": "Periods\nPeriods represent ‚Äúhuman‚Äù times like days and months and therefore do not have a fixed length in seconds.\n\n\none_am\n\n&gt; [1] \"2026-03-08 01:00:00 EST\"\n\none_am + days(1)\n\n&gt; [1] \"2026-03-09 01:00:00 EDT\"\n\n\n\n\n\nPeriods also have their own constructor functions:\n\n\n\nhours(c(12, 24))\n\n&gt; [1] \"12H 0M 0S\" \"24H 0M 0S\"\n\ndays(7)\n\n&gt; [1] \"7d 0H 0M 0S\"\n\nmonths(1:6)\n\n&gt; [1] \"1m 0d 0H 0M 0S\" \"2m 0d 0H 0M 0S\" \"3m 0d 0H 0M 0S\" \"4m 0d 0H 0M 0S\"\n&gt; [5] \"5m 0d 0H 0M 0S\" \"6m 0d 0H 0M 0S\""
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture5.html#math-with-periods",
    "href": "Lectures/Lecture5/CSSS508_Lecture5.html#math-with-periods",
    "title": "",
    "section": "Math with Periods",
    "text": "Math with Periods\nWe can add and multiply periods:\n\n10 * (months(6) + days(1))\n\n&gt; [1] \"60m 10d 0H 0M 0S\"\n\ndays(50) + hours(25) + minutes(2)\n\n&gt; [1] \"50d 25H 2M 0S\"\n\n\n\n\nAnd also add them to dates.\n\n# A leap year\nymd(\"2024-01-01\") + dyears(1)\nymd(\"2024-01-01\") + years(1)\n\n# Daylight saving time\none_am + ddays(1)\n1one_am + days(1)\n\n\n1\n\nPeriods are more likely than durations to do what you expect.\n\n\n\n\n&gt; [1] \"2024-12-31 06:00:00 UTC\"\n&gt; [1] \"2025-01-01\"\n&gt; [1] \"2026-03-09 02:00:00 EDT\"\n&gt; [1] \"2026-03-09 01:00:00 EDT\""
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture5.html#intervals",
    "href": "Lectures/Lecture5/CSSS508_Lecture5.html#intervals",
    "title": "",
    "section": "Intervals",
    "text": "Intervals\nIntervals represent the length of a time span in human units. You can think of it as a duration with a starting point.\n\nImagine we wanted to know how many days are in a year?\n\n1years(1) / days(1)\n2dyears(1) / ddays(365)\n\n\n1\n\nSince this value changed depending on the year in question, lubridate gives an estimate (or the average) for the number of days in any given year.\n\n2\n\nA similar thing happens for durations.\n\n\n\n\n&gt; [1] 365.25\n&gt; [1] 1.000685\n\n\n\n\nTo be more accurate we need to give the specific range of time in questions.\n\n\n\n3y2023 &lt;- ymd(\"2023-01-01\") %--% ymd(\"2024-01-01\")\ny2024 &lt;- ymd(\"2024-01-01\") %--% ymd(\"2025-01-01\")\ny2023\ny2024\n4y2023 / days(1)\ny2024 / days(1)\n\n\n3\n\nYou can create an interval by writing start %--% end.\n\n4\n\nNow when we do this math we get the exact number of ‚Äúhuman‚Äù days within the span of dates we specified.\n\n\n\n\n&gt; [1] 2023-01-01 UTC--2024-01-01 UTC\n&gt; [1] 2024-01-01 UTC--2025-01-01 UTC\n&gt; [1] 365\n&gt; [1] 366"
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture5.html#time-zones",
    "href": "Lectures/Lecture5/CSSS508_Lecture5.html#time-zones",
    "title": "",
    "section": "Time zones",
    "text": "Time zones\nTime zones are a very complicated topic because different places have different rules which can, or already have, change(d) over time! To really clarify things R uses the international standard IANA time zones which use a consistent naming scheme: {area}/{location}.\n\n\n1Sys.timezone()\n\n\n1\n\nUse Sys.timezone() to find out which timezone R thinks you‚Äôre in.\n\n\n\n\n&gt; [1] \"America/Los_Angeles\"\n\n\n\n2OlsonNames()\n\n\n2\n\nSee the complete list of all time zone names with OlsonNames()\n\n\n\n\n&gt;   [1] \"Africa/Abidjan\"                   \"Africa/Accra\"                    \n&gt;   [3] \"Africa/Addis_Ababa\"               \"Africa/Algiers\"                  \n&gt;   [5] \"Africa/Asmara\"                    \"Africa/Asmera\"                   \n&gt;   [7] \"Africa/Bamako\"                    \"Africa/Bangui\"                   \n&gt;   [9] \"Africa/Banjul\"                    \"Africa/Bissau\"                   \n&gt;  [11] \"Africa/Blantyre\"                  \"Africa/Brazzaville\"              \n&gt;  [13] \"Africa/Bujumbura\"                 \"Africa/Cairo\"                    \n&gt;  [15] \"Africa/Casablanca\"                \"Africa/Ceuta\"                    \n&gt;  [17] \"Africa/Conakry\"                   \"Africa/Dakar\"                    \n&gt;  [19] \"Africa/Dar_es_Salaam\"             \"Africa/Djibouti\"                 \n&gt;  [21] \"Africa/Douala\"                    \"Africa/El_Aaiun\"                 \n&gt;  [23] \"Africa/Freetown\"                  \"Africa/Gaborone\"                 \n&gt;  [25] \"Africa/Harare\"                    \"Africa/Johannesburg\"             \n&gt;  [27] \"Africa/Juba\"                      \"Africa/Kampala\"                  \n&gt;  [29] \"Africa/Khartoum\"                  \"Africa/Kigali\"                   \n&gt;  [31] \"Africa/Kinshasa\"                  \"Africa/Lagos\"                    \n&gt;  [33] \"Africa/Libreville\"                \"Africa/Lome\"                     \n&gt;  [35] \"Africa/Luanda\"                    \"Africa/Lubumbashi\"               \n&gt;  [37] \"Africa/Lusaka\"                    \"Africa/Malabo\"                   \n&gt;  [39] \"Africa/Maputo\"                    \"Africa/Maseru\"                   \n&gt;  [41] \"Africa/Mbabane\"                   \"Africa/Mogadishu\"                \n&gt;  [43] \"Africa/Monrovia\"                  \"Africa/Nairobi\"                  \n&gt;  [45] \"Africa/Ndjamena\"                  \"Africa/Niamey\"                   \n&gt;  [47] \"Africa/Nouakchott\"                \"Africa/Ouagadougou\"              \n&gt;  [49] \"Africa/Porto-Novo\"                \"Africa/Sao_Tome\"                 \n&gt;  [51] \"Africa/Timbuktu\"                  \"Africa/Tripoli\"                  \n&gt;  [53] \"Africa/Tunis\"                     \"Africa/Windhoek\"                 \n&gt;  [55] \"America/Adak\"                     \"America/Anchorage\"               \n&gt;  [57] \"America/Anguilla\"                 \"America/Antigua\"                 \n&gt;  [59] \"America/Araguaina\"                \"America/Argentina/Buenos_Aires\"  \n&gt;  [61] \"America/Argentina/Catamarca\"      \"America/Argentina/ComodRivadavia\"\n&gt;  [63] \"America/Argentina/Cordoba\"        \"America/Argentina/Jujuy\"         \n&gt;  [65] \"America/Argentina/La_Rioja\"       \"America/Argentina/Mendoza\"       \n&gt;  [67] \"America/Argentina/Rio_Gallegos\"   \"America/Argentina/Salta\"         \n&gt;  [69] \"America/Argentina/San_Juan\"       \"America/Argentina/San_Luis\"      \n&gt;  [71] \"America/Argentina/Tucuman\"        \"America/Argentina/Ushuaia\"       \n&gt;  [73] \"America/Aruba\"                    \"America/Asuncion\"                \n&gt;  [75] \"America/Atikokan\"                 \"America/Atka\"                    \n&gt;  [77] \"America/Bahia\"                    \"America/Bahia_Banderas\"          \n&gt;  [79] \"America/Barbados\"                 \"America/Belem\"                   \n&gt;  [81] \"America/Belize\"                   \"America/Blanc-Sablon\"            \n&gt;  [83] \"America/Boa_Vista\"                \"America/Bogota\"                  \n&gt;  [85] \"America/Boise\"                    \"America/Buenos_Aires\"            \n&gt;  [87] \"America/Cambridge_Bay\"            \"America/Campo_Grande\"            \n&gt;  [89] \"America/Cancun\"                   \"America/Caracas\"                 \n&gt;  [91] \"America/Catamarca\"                \"America/Cayenne\"                 \n&gt;  [93] \"America/Cayman\"                   \"America/Chicago\"                 \n&gt;  [95] \"America/Chihuahua\"                \"America/Ciudad_Juarez\"           \n&gt;  [97] \"America/Coral_Harbour\"            \"America/Cordoba\"                 \n&gt;  [99] \"America/Costa_Rica\"               \"America/Coyhaique\"               \n&gt; [101] \"America/Creston\"                  \"America/Cuiaba\"                  \n&gt; [103] \"America/Curacao\"                  \"America/Danmarkshavn\"            \n&gt; [105] \"America/Dawson\"                   \"America/Dawson_Creek\"            \n&gt; [107] \"America/Denver\"                   \"America/Detroit\"                 \n&gt; [109] \"America/Dominica\"                 \"America/Edmonton\"                \n&gt; [111] \"America/Eirunepe\"                 \"America/El_Salvador\"             \n&gt; [113] \"America/Ensenada\"                 \"America/Fort_Nelson\"             \n&gt; [115] \"America/Fort_Wayne\"               \"America/Fortaleza\"               \n&gt; [117] \"America/Glace_Bay\"                \"America/Godthab\"                 \n&gt; [119] \"America/Goose_Bay\"                \"America/Grand_Turk\"              \n&gt; [121] \"America/Grenada\"                  \"America/Guadeloupe\"              \n&gt; [123] \"America/Guatemala\"                \"America/Guayaquil\"               \n&gt; [125] \"America/Guyana\"                   \"America/Halifax\"                 \n&gt; [127] \"America/Havana\"                   \"America/Hermosillo\"              \n&gt; [129] \"America/Indiana/Indianapolis\"     \"America/Indiana/Knox\"            \n&gt; [131] \"America/Indiana/Marengo\"          \"America/Indiana/Petersburg\"      \n&gt; [133] \"America/Indiana/Tell_City\"        \"America/Indiana/Vevay\"           \n&gt; [135] \"America/Indiana/Vincennes\"        \"America/Indiana/Winamac\"         \n&gt; [137] \"America/Indianapolis\"             \"America/Inuvik\"                  \n&gt; [139] \"America/Iqaluit\"                  \"America/Jamaica\"                 \n&gt; [141] \"America/Jujuy\"                    \"America/Juneau\"                  \n&gt; [143] \"America/Kentucky/Louisville\"      \"America/Kentucky/Monticello\"     \n&gt; [145] \"America/Knox_IN\"                  \"America/Kralendijk\"              \n&gt; [147] \"America/La_Paz\"                   \"America/Lima\"                    \n&gt; [149] \"America/Los_Angeles\"              \"America/Louisville\"              \n&gt; [151] \"America/Lower_Princes\"            \"America/Maceio\"                  \n&gt; [153] \"America/Managua\"                  \"America/Manaus\"                  \n&gt; [155] \"America/Marigot\"                  \"America/Martinique\"              \n&gt; [157] \"America/Matamoros\"                \"America/Mazatlan\"                \n&gt; [159] \"America/Mendoza\"                  \"America/Menominee\"               \n&gt; [161] \"America/Merida\"                   \"America/Metlakatla\"              \n&gt; [163] \"America/Mexico_City\"              \"America/Miquelon\"                \n&gt; [165] \"America/Moncton\"                  \"America/Monterrey\"               \n&gt; [167] \"America/Montevideo\"               \"America/Montreal\"                \n&gt; [169] \"America/Montserrat\"               \"America/Nassau\"                  \n&gt; [171] \"America/New_York\"                 \"America/Nipigon\"                 \n&gt; [173] \"America/Nome\"                     \"America/Noronha\"                 \n&gt; [175] \"America/North_Dakota/Beulah\"      \"America/North_Dakota/Center\"     \n&gt; [177] \"America/North_Dakota/New_Salem\"   \"America/Nuuk\"                    \n&gt; [179] \"America/Ojinaga\"                  \"America/Panama\"                  \n&gt; [181] \"America/Pangnirtung\"              \"America/Paramaribo\"              \n&gt; [183] \"America/Phoenix\"                  \"America/Port_of_Spain\"           \n&gt; [185] \"America/Port-au-Prince\"           \"America/Porto_Acre\"              \n&gt; [187] \"America/Porto_Velho\"              \"America/Puerto_Rico\"             \n&gt; [189] \"America/Punta_Arenas\"             \"America/Rainy_River\"             \n&gt; [191] \"America/Rankin_Inlet\"             \"America/Recife\"                  \n&gt; [193] \"America/Regina\"                   \"America/Resolute\"                \n&gt; [195] \"America/Rio_Branco\"               \"America/Rosario\"                 \n&gt; [197] \"America/Santa_Isabel\"             \"America/Santarem\"                \n&gt; [199] \"America/Santiago\"                 \"America/Santo_Domingo\"           \n&gt; [201] \"America/Sao_Paulo\"                \"America/Scoresbysund\"            \n&gt; [203] \"America/Shiprock\"                 \"America/Sitka\"                   \n&gt; [205] \"America/St_Barthelemy\"            \"America/St_Johns\"                \n&gt; [207] \"America/St_Kitts\"                 \"America/St_Lucia\"                \n&gt; [209] \"America/St_Thomas\"                \"America/St_Vincent\"              \n&gt; [211] \"America/Swift_Current\"            \"America/Tegucigalpa\"             \n&gt; [213] \"America/Thule\"                    \"America/Thunder_Bay\"             \n&gt; [215] \"America/Tijuana\"                  \"America/Toronto\"                 \n&gt; [217] \"America/Tortola\"                  \"America/Vancouver\"               \n&gt; [219] \"America/Virgin\"                   \"America/Whitehorse\"              \n&gt; [221] \"America/Winnipeg\"                 \"America/Yakutat\"                 \n&gt; [223] \"America/Yellowknife\"              \"Antarctica/Casey\"                \n&gt; [225] \"Antarctica/Davis\"                 \"Antarctica/DumontDUrville\"       \n&gt; [227] \"Antarctica/Macquarie\"             \"Antarctica/Mawson\"               \n&gt; [229] \"Antarctica/McMurdo\"               \"Antarctica/Palmer\"               \n&gt; [231] \"Antarctica/Rothera\"               \"Antarctica/South_Pole\"           \n&gt; [233] \"Antarctica/Syowa\"                 \"Antarctica/Troll\"                \n&gt; [235] \"Antarctica/Vostok\"                \"Arctic/Longyearbyen\"             \n&gt; [237] \"Asia/Aden\"                        \"Asia/Almaty\"                     \n&gt; [239] \"Asia/Amman\"                       \"Asia/Anadyr\"                     \n&gt; [241] \"Asia/Aqtau\"                       \"Asia/Aqtobe\"                     \n&gt; [243] \"Asia/Ashgabat\"                    \"Asia/Ashkhabad\"                  \n&gt; [245] \"Asia/Atyrau\"                      \"Asia/Baghdad\"                    \n&gt; [247] \"Asia/Bahrain\"                     \"Asia/Baku\"                       \n&gt; [249] \"Asia/Bangkok\"                     \"Asia/Barnaul\"                    \n&gt; [251] \"Asia/Beirut\"                      \"Asia/Bishkek\"                    \n&gt; [253] \"Asia/Brunei\"                      \"Asia/Calcutta\"                   \n&gt; [255] \"Asia/Chita\"                       \"Asia/Choibalsan\"                 \n&gt; [257] \"Asia/Chongqing\"                   \"Asia/Chungking\"                  \n&gt; [259] \"Asia/Colombo\"                     \"Asia/Dacca\"                      \n&gt; [261] \"Asia/Damascus\"                    \"Asia/Dhaka\"                      \n&gt; [263] \"Asia/Dili\"                        \"Asia/Dubai\"                      \n&gt; [265] \"Asia/Dushanbe\"                    \"Asia/Famagusta\"                  \n&gt; [267] \"Asia/Gaza\"                        \"Asia/Harbin\"                     \n&gt; [269] \"Asia/Hebron\"                      \"Asia/Ho_Chi_Minh\"                \n&gt; [271] \"Asia/Hong_Kong\"                   \"Asia/Hovd\"                       \n&gt; [273] \"Asia/Irkutsk\"                     \"Asia/Istanbul\"                   \n&gt; [275] \"Asia/Jakarta\"                     \"Asia/Jayapura\"                   \n&gt; [277] \"Asia/Jerusalem\"                   \"Asia/Kabul\"                      \n&gt; [279] \"Asia/Kamchatka\"                   \"Asia/Karachi\"                    \n&gt; [281] \"Asia/Kashgar\"                     \"Asia/Kathmandu\"                  \n&gt; [283] \"Asia/Katmandu\"                    \"Asia/Khandyga\"                   \n&gt; [285] \"Asia/Kolkata\"                     \"Asia/Krasnoyarsk\"                \n&gt; [287] \"Asia/Kuala_Lumpur\"                \"Asia/Kuching\"                    \n&gt; [289] \"Asia/Kuwait\"                      \"Asia/Macao\"                      \n&gt; [291] \"Asia/Macau\"                       \"Asia/Magadan\"                    \n&gt; [293] \"Asia/Makassar\"                    \"Asia/Manila\"                     \n&gt; [295] \"Asia/Muscat\"                      \"Asia/Nicosia\"                    \n&gt; [297] \"Asia/Novokuznetsk\"                \"Asia/Novosibirsk\"                \n&gt; [299] \"Asia/Omsk\"                        \"Asia/Oral\"                       \n&gt; [301] \"Asia/Phnom_Penh\"                  \"Asia/Pontianak\"                  \n&gt; [303] \"Asia/Pyongyang\"                   \"Asia/Qatar\"                      \n&gt; [305] \"Asia/Qostanay\"                    \"Asia/Qyzylorda\"                  \n&gt; [307] \"Asia/Rangoon\"                     \"Asia/Riyadh\"                     \n&gt; [309] \"Asia/Saigon\"                      \"Asia/Sakhalin\"                   \n&gt; [311] \"Asia/Samarkand\"                   \"Asia/Seoul\"                      \n&gt; [313] \"Asia/Shanghai\"                    \"Asia/Singapore\"                  \n&gt; [315] \"Asia/Srednekolymsk\"               \"Asia/Taipei\"                     \n&gt; [317] \"Asia/Tashkent\"                    \"Asia/Tbilisi\"                    \n&gt; [319] \"Asia/Tehran\"                      \"Asia/Tel_Aviv\"                   \n&gt; [321] \"Asia/Thimbu\"                      \"Asia/Thimphu\"                    \n&gt; [323] \"Asia/Tokyo\"                       \"Asia/Tomsk\"                      \n&gt; [325] \"Asia/Ujung_Pandang\"               \"Asia/Ulaanbaatar\"                \n&gt; [327] \"Asia/Ulan_Bator\"                  \"Asia/Urumqi\"                     \n&gt; [329] \"Asia/Ust-Nera\"                    \"Asia/Vientiane\"                  \n&gt; [331] \"Asia/Vladivostok\"                 \"Asia/Yakutsk\"                    \n&gt; [333] \"Asia/Yangon\"                      \"Asia/Yekaterinburg\"              \n&gt; [335] \"Asia/Yerevan\"                     \"Atlantic/Azores\"                 \n&gt; [337] \"Atlantic/Bermuda\"                 \"Atlantic/Canary\"                 \n&gt; [339] \"Atlantic/Cape_Verde\"              \"Atlantic/Faeroe\"                 \n&gt; [341] \"Atlantic/Faroe\"                   \"Atlantic/Jan_Mayen\"              \n&gt; [343] \"Atlantic/Madeira\"                 \"Atlantic/Reykjavik\"              \n&gt; [345] \"Atlantic/South_Georgia\"           \"Atlantic/St_Helena\"              \n&gt; [347] \"Atlantic/Stanley\"                 \"Australia/ACT\"                   \n&gt; [349] \"Australia/Adelaide\"               \"Australia/Brisbane\"              \n&gt; [351] \"Australia/Broken_Hill\"            \"Australia/Canberra\"              \n&gt; [353] \"Australia/Currie\"                 \"Australia/Darwin\"                \n&gt; [355] \"Australia/Eucla\"                  \"Australia/Hobart\"                \n&gt; [357] \"Australia/LHI\"                    \"Australia/Lindeman\"              \n&gt; [359] \"Australia/Lord_Howe\"              \"Australia/Melbourne\"             \n&gt; [361] \"Australia/North\"                  \"Australia/NSW\"                   \n&gt; [363] \"Australia/Perth\"                  \"Australia/Queensland\"            \n&gt; [365] \"Australia/South\"                  \"Australia/Sydney\"                \n&gt; [367] \"Australia/Tasmania\"               \"Australia/Victoria\"              \n&gt; [369] \"Australia/West\"                   \"Australia/Yancowinna\"            \n&gt; [371] \"Brazil/Acre\"                      \"Brazil/DeNoronha\"                \n&gt; [373] \"Brazil/East\"                      \"Brazil/West\"                     \n&gt; [375] \"Canada/Atlantic\"                  \"Canada/Central\"                  \n&gt; [377] \"Canada/Eastern\"                   \"Canada/Mountain\"                 \n&gt; [379] \"Canada/Newfoundland\"              \"Canada/Pacific\"                  \n&gt; [381] \"Canada/Saskatchewan\"              \"Canada/Yukon\"                    \n&gt; [383] \"CET\"                              \"Chile/Continental\"               \n&gt; [385] \"Chile/EasterIsland\"               \"CST6CDT\"                         \n&gt; [387] \"Cuba\"                             \"EET\"                             \n&gt; [389] \"Egypt\"                            \"Eire\"                            \n&gt; [391] \"EST\"                              \"EST5EDT\"                         \n&gt; [393] \"Etc/GMT\"                          \"Etc/GMT-0\"                       \n&gt; [395] \"Etc/GMT-1\"                        \"Etc/GMT-10\"                      \n&gt; [397] \"Etc/GMT-11\"                       \"Etc/GMT-12\"                      \n&gt; [399] \"Etc/GMT-13\"                       \"Etc/GMT-14\"                      \n&gt; [401] \"Etc/GMT-2\"                        \"Etc/GMT-3\"                       \n&gt; [403] \"Etc/GMT-4\"                        \"Etc/GMT-5\"                       \n&gt; [405] \"Etc/GMT-6\"                        \"Etc/GMT-7\"                       \n&gt; [407] \"Etc/GMT-8\"                        \"Etc/GMT-9\"                       \n&gt; [409] \"Etc/GMT+0\"                        \"Etc/GMT+1\"                       \n&gt; [411] \"Etc/GMT+10\"                       \"Etc/GMT+11\"                      \n&gt; [413] \"Etc/GMT+12\"                       \"Etc/GMT+2\"                       \n&gt; [415] \"Etc/GMT+3\"                        \"Etc/GMT+4\"                       \n&gt; [417] \"Etc/GMT+5\"                        \"Etc/GMT+6\"                       \n&gt; [419] \"Etc/GMT+7\"                        \"Etc/GMT+8\"                       \n&gt; [421] \"Etc/GMT+9\"                        \"Etc/GMT0\"                        \n&gt; [423] \"Etc/Greenwich\"                    \"Etc/UCT\"                         \n&gt; [425] \"Etc/Universal\"                    \"Etc/UTC\"                         \n&gt; [427] \"Etc/Zulu\"                         \"Europe/Amsterdam\"                \n&gt; [429] \"Europe/Andorra\"                   \"Europe/Astrakhan\"                \n&gt; [431] \"Europe/Athens\"                    \"Europe/Belfast\"                  \n&gt; [433] \"Europe/Belgrade\"                  \"Europe/Berlin\"                   \n&gt; [435] \"Europe/Bratislava\"                \"Europe/Brussels\"                 \n&gt; [437] \"Europe/Bucharest\"                 \"Europe/Budapest\"                 \n&gt; [439] \"Europe/Busingen\"                  \"Europe/Chisinau\"                 \n&gt; [441] \"Europe/Copenhagen\"                \"Europe/Dublin\"                   \n&gt; [443] \"Europe/Gibraltar\"                 \"Europe/Guernsey\"                 \n&gt; [445] \"Europe/Helsinki\"                  \"Europe/Isle_of_Man\"              \n&gt; [447] \"Europe/Istanbul\"                  \"Europe/Jersey\"                   \n&gt; [449] \"Europe/Kaliningrad\"               \"Europe/Kiev\"                     \n&gt; [451] \"Europe/Kirov\"                     \"Europe/Kyiv\"                     \n&gt; [453] \"Europe/Lisbon\"                    \"Europe/Ljubljana\"                \n&gt; [455] \"Europe/London\"                    \"Europe/Luxembourg\"               \n&gt; [457] \"Europe/Madrid\"                    \"Europe/Malta\"                    \n&gt; [459] \"Europe/Mariehamn\"                 \"Europe/Minsk\"                    \n&gt; [461] \"Europe/Monaco\"                    \"Europe/Moscow\"                   \n&gt; [463] \"Europe/Nicosia\"                   \"Europe/Oslo\"                     \n&gt; [465] \"Europe/Paris\"                     \"Europe/Podgorica\"                \n&gt; [467] \"Europe/Prague\"                    \"Europe/Riga\"                     \n&gt; [469] \"Europe/Rome\"                      \"Europe/Samara\"                   \n&gt; [471] \"Europe/San_Marino\"                \"Europe/Sarajevo\"                 \n&gt; [473] \"Europe/Saratov\"                   \"Europe/Simferopol\"               \n&gt; [475] \"Europe/Skopje\"                    \"Europe/Sofia\"                    \n&gt; [477] \"Europe/Stockholm\"                 \"Europe/Tallinn\"                  \n&gt; [479] \"Europe/Tirane\"                    \"Europe/Tiraspol\"                 \n&gt; [481] \"Europe/Ulyanovsk\"                 \"Europe/Uzhgorod\"                 \n&gt; [483] \"Europe/Vaduz\"                     \"Europe/Vatican\"                  \n&gt; [485] \"Europe/Vienna\"                    \"Europe/Vilnius\"                  \n&gt; [487] \"Europe/Volgograd\"                 \"Europe/Warsaw\"                   \n&gt; [489] \"Europe/Zagreb\"                    \"Europe/Zaporozhye\"               \n&gt; [491] \"Europe/Zurich\"                    \"Factory\"                         \n&gt; [493] \"GB\"                               \"GB-Eire\"                         \n&gt; [495] \"GMT\"                              \"GMT-0\"                           \n&gt; [497] \"GMT+0\"                            \"GMT0\"                            \n&gt; [499] \"Greenwich\"                        \"Hongkong\"                        \n&gt; [501] \"HST\"                              \"Iceland\"                         \n&gt; [503] \"Indian/Antananarivo\"              \"Indian/Chagos\"                   \n&gt; [505] \"Indian/Christmas\"                 \"Indian/Cocos\"                    \n&gt; [507] \"Indian/Comoro\"                    \"Indian/Kerguelen\"                \n&gt; [509] \"Indian/Mahe\"                      \"Indian/Maldives\"                 \n&gt; [511] \"Indian/Mauritius\"                 \"Indian/Mayotte\"                  \n&gt; [513] \"Indian/Reunion\"                   \"Iran\"                            \n&gt; [515] \"Israel\"                           \"Jamaica\"                         \n&gt; [517] \"Japan\"                            \"Kwajalein\"                       \n&gt; [519] \"Libya\"                            \"MET\"                             \n&gt; [521] \"Mexico/BajaNorte\"                 \"Mexico/BajaSur\"                  \n&gt; [523] \"Mexico/General\"                   \"MST\"                             \n&gt; [525] \"MST7MDT\"                          \"Navajo\"                          \n&gt; [527] \"NZ\"                               \"NZ-CHAT\"                         \n&gt; [529] \"Pacific/Apia\"                     \"Pacific/Auckland\"                \n&gt; [531] \"Pacific/Bougainville\"             \"Pacific/Chatham\"                 \n&gt; [533] \"Pacific/Chuuk\"                    \"Pacific/Easter\"                  \n&gt; [535] \"Pacific/Efate\"                    \"Pacific/Enderbury\"               \n&gt; [537] \"Pacific/Fakaofo\"                  \"Pacific/Fiji\"                    \n&gt; [539] \"Pacific/Funafuti\"                 \"Pacific/Galapagos\"               \n&gt; [541] \"Pacific/Gambier\"                  \"Pacific/Guadalcanal\"             \n&gt; [543] \"Pacific/Guam\"                     \"Pacific/Honolulu\"                \n&gt; [545] \"Pacific/Johnston\"                 \"Pacific/Kanton\"                  \n&gt; [547] \"Pacific/Kiritimati\"               \"Pacific/Kosrae\"                  \n&gt; [549] \"Pacific/Kwajalein\"                \"Pacific/Majuro\"                  \n&gt; [551] \"Pacific/Marquesas\"                \"Pacific/Midway\"                  \n&gt; [553] \"Pacific/Nauru\"                    \"Pacific/Niue\"                    \n&gt; [555] \"Pacific/Norfolk\"                  \"Pacific/Noumea\"                  \n&gt; [557] \"Pacific/Pago_Pago\"                \"Pacific/Palau\"                   \n&gt; [559] \"Pacific/Pitcairn\"                 \"Pacific/Pohnpei\"                 \n&gt; [561] \"Pacific/Ponape\"                   \"Pacific/Port_Moresby\"            \n&gt; [563] \"Pacific/Rarotonga\"                \"Pacific/Saipan\"                  \n&gt; [565] \"Pacific/Samoa\"                    \"Pacific/Tahiti\"                  \n&gt; [567] \"Pacific/Tarawa\"                   \"Pacific/Tongatapu\"               \n&gt; [569] \"Pacific/Truk\"                     \"Pacific/Wake\"                    \n&gt; [571] \"Pacific/Wallis\"                   \"Pacific/Yap\"                     \n&gt; [573] \"Poland\"                           \"Portugal\"                        \n&gt; [575] \"PRC\"                              \"PST8PDT\"                         \n&gt; [577] \"ROC\"                              \"ROK\"                             \n&gt; [579] \"Singapore\"                        \"Turkey\"                          \n&gt; [581] \"UCT\"                              \"Universal\"                       \n&gt; [583] \"US/Alaska\"                        \"US/Aleutian\"                     \n&gt; [585] \"US/Arizona\"                       \"US/Central\"                      \n&gt; [587] \"US/East-Indiana\"                  \"US/Eastern\"                      \n&gt; [589] \"US/Hawaii\"                        \"US/Indiana-Starke\"               \n&gt; [591] \"US/Michigan\"                      \"US/Mountain\"                     \n&gt; [593] \"US/Pacific\"                       \"US/Samoa\"                        \n&gt; [595] \"UTC\"                              \"W-SU\"                            \n&gt; [597] \"WET\"                              \"Zulu\"                            \n&gt; attr(,\"Version\")\n&gt; [1] \"2025b\""
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture5.html#changing-time-zones",
    "href": "Lectures/Lecture5/CSSS508_Lecture5.html#changing-time-zones",
    "title": "",
    "section": "Changing Time Zones",
    "text": "Changing Time Zones\nThere are two ways you may want to change the time zone:\n\nKeep instant in time, change display\n\nx &lt;- ymd_hms(\"2024-06-01 12:00:00\", tz = \"America/New_York\")\nx\n\n1with_tz(x, tzone = \"Australia/Lord_Howe\")\n\n\n1\n\nThe +1030 offset is the difference relative to UTC (functionally similar to Greenwich Mean Time) which is 2024-06-01 16:00:00 UTC in this example.\n\n\n\n\n&gt; [1] \"2024-06-01 12:00:00 EDT\"\n&gt; [1] \"2024-06-02 02:30:00 +1030\"\n\n\n\nChange underlying instant in time\n\ny &lt;- ymd_hms(\"2024-06-01 9:00:00\", tz = \"America/Los_Angeles\")\ny\n\n2force_tz(y, tzone = \"Australia/Lord_Howe\")\n\n\n2\n\nIn this case the time zone was labelled incorrectly so by forcing the correct time zone we changed the underlying instant in time.\n\n\n\n\n&gt; [1] \"2024-06-01 09:00:00 PDT\"\n&gt; [1] \"2024-06-01 09:00:00 +1030\""
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture5.html#default-time-zones",
    "href": "Lectures/Lecture5/CSSS508_Lecture5.html#default-time-zones",
    "title": "",
    "section": "Default Time Zones",
    "text": "Default Time Zones\nTime zones in R only control printing of date/time objects. Unless otherwise specified, lubridate always uses UTC1.\n\nOperations that combine date-times, like c(), will often drop the time zone. In that case, the date-times will display in the time zone of the first element:\n\n\n\na &lt;- ymd_hms(\"2024-06-01 14:00:00\", tz = \"Asia/Gaza\") \n1a\n\n\n1\n\nEEST = Eastern European Summer Time\n\n\n\n\n&gt; [1] \"2024-06-01 14:00:00 EEST\"\n\n\n\nb &lt;- ymd_hms(\"2024-06-01 14:00:00\", tz = \"Cuba\") \n2b\n\n\n2\n\nCDT = Central Daylight Time\n\n\n\n\n&gt; [1] \"2024-06-01 14:00:00 CDT\"\n\n\n\nc &lt;- ymd_hms(\"2024-06-01 14:00:00\", tz = \"Africa/Kinshasa\") \n3c\n\n\n3\n\nWAT = West Africa Time\n\n\n\n\n&gt; [1] \"2024-06-01 14:00:00 WAT\"\n\n\n\nc(a, b, c)\n\n&gt; [1] \"2024-06-01 14:00:00 EEST\" \"2024-06-01 21:00:00 EEST\"\n&gt; [3] \"2024-06-01 16:00:00 EEST\"\n\n\n\nUTC (Coordinated Universal Time) is the standard time zone used by the scientific community and is roughly equivalent to GMT (Greenwich Mean Time). It does not have DST, which makes a convenient representation for computation."
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture5.html#answers-1",
    "href": "Lectures/Lecture5/CSSS508_Lecture5.html#answers-1",
    "title": "",
    "section": "Answers",
    "text": "Answers\nPivot your data to make it tidy1.\n\nreligion_income_tidy &lt;- religion_income |&gt; \n  pivot_longer(cols = !religion, \n              names_to = \"income\", \n              values_to = \"frequency\")\nreligion_income_tidy\n\n\n\n&gt; # A tibble: 180 √ó 3\n&gt;    religion income             frequency\n&gt;    &lt;fct&gt;    &lt;chr&gt;                  &lt;dbl&gt;\n&gt;  1 Agnostic &lt;$10k                     27\n&gt;  2 Agnostic $10-20k                   34\n&gt;  3 Agnostic $20-30k                   60\n&gt;  4 Agnostic $30-40k                   81\n&gt;  5 Agnostic $40-50k                   76\n&gt;  6 Agnostic $50-75k                  137\n&gt;  7 Agnostic $75-100k                 122\n&gt;  8 Agnostic $100-150k                109\n&gt;  9 Agnostic &gt;150k                     84\n&gt; 10 Agnostic Don't know/refused        96\n&gt; # ‚Ñπ 170 more rows\n\n\nThere should be 3 columns in your final dataset"
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture5.html#answers-2",
    "href": "Lectures/Lecture5/CSSS508_Lecture5.html#answers-2",
    "title": "",
    "section": "Answers",
    "text": "Answers\nTurn two of the variables into factors1.\n\nreligion_income_tidy &lt;- religion_income |&gt; \n  pivot_longer(cols = !religion, \n              names_to = \"income\", \n              values_to = \"frequency\") |&gt; \n  mutate(income = fct(income, \n                      levels = c(\"Don't know/refused\", \"&lt;$10k\", \"$10-20k\", \n                                         \"$20-30k\", \"$30-40k\", \"$40-50k\", \"$50-75k\", \n                                         \"$75-100k\", \"$100-150k\", \"&gt;150k\")))\n\n\n\n\nHint: Which two variables are categorical?"
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture5.html#answers-3",
    "href": "Lectures/Lecture5/CSSS508_Lecture5.html#answers-3",
    "title": "",
    "section": "Answers",
    "text": "Answers\nTurn two of the variables into factors1.\n\nreligion_income_tidy &lt;- religion_income |&gt; \n  pivot_longer(cols = !religion, \n              names_to = \"income\", \n              values_to = \"frequency\") |&gt; \n  mutate(income = fct(income, \n                      levels = c(\"Don't know/refused\", \"&lt;$10k\", \"$10-20k\", \n                                         \"$20-30k\", \"$30-40k\", \"$40-50k\", \"$50-75k\", \n                                         \"$75-100k\", \"$100-150k\", \"&gt;150k\")), \n1         religion = fct(religion))\n\n\n1\n\nIf we hadn‚Äôt initially read in religion as a factor, we‚Äôd need to recode it as one during this step.\n\n\n\n\nHint: Which two variables are categorical?"
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture5.html#answers-4",
    "href": "Lectures/Lecture5/CSSS508_Lecture5.html#answers-4",
    "title": "",
    "section": "Answers",
    "text": "Answers\n\nreligion_income_tidy\n\n\n\n&gt; # A tibble: 180 √ó 3\n&gt;    religion income             frequency\n&gt;    &lt;fct&gt;    &lt;fct&gt;                  &lt;dbl&gt;\n&gt;  1 Agnostic &lt;$10k                     27\n&gt;  2 Agnostic $10-20k                   34\n&gt;  3 Agnostic $20-30k                   60\n&gt;  4 Agnostic $30-40k                   81\n&gt;  5 Agnostic $40-50k                   76\n&gt;  6 Agnostic $50-75k                  137\n&gt;  7 Agnostic $75-100k                 122\n&gt;  8 Agnostic $100-150k                109\n&gt;  9 Agnostic &gt;150k                     84\n&gt; 10 Agnostic Don't know/refused        96\n&gt; # ‚Ñπ 170 more rows"
  },
  {
    "objectID": "Lectures/Lecture10/CSSS508_Lecture10.html#title-slide",
    "href": "Lectures/Lecture10/CSSS508_Lecture10.html#title-slide",
    "title": "",
    "section": "",
    "text": "Next Steps\nCS&SS 508 ‚Ä¢ Lecture 10\n9 December 2025\nVictoria Sass"
  },
  {
    "objectID": "Lectures/Lecture10/CSSS508_Lecture10.html#modeling-in-r",
    "href": "Lectures/Lecture10/CSSS508_Lecture10.html#modeling-in-r",
    "title": "",
    "section": "Modeling in R",
    "text": "Modeling in R"
  },
  {
    "objectID": "Lectures/Lecture10/CSSS508_Lecture10.html#modeling-with-tidymodels",
    "href": "Lectures/Lecture10/CSSS508_Lecture10.html#modeling-with-tidymodels",
    "title": "",
    "section": "Modeling with tidymodels",
    "text": "Modeling with tidymodels\n\nlibrary(tidymodels)\n\n&gt; ‚îÄ‚îÄ Attaching packages ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ tidymodels 1.4.1 ‚îÄ‚îÄ\n\n\n&gt; ‚úî broom        1.0.10     ‚úî rsample      1.3.1 \n&gt; ‚úî dials        1.4.2      ‚úî tailor       0.1.0 \n&gt; ‚úî infer        1.0.9      ‚úî tune         2.0.0 \n&gt; ‚úî modeldata    1.5.1      ‚úî workflows    1.3.0 \n&gt; ‚úî parsnip      1.3.3      ‚úî workflowsets 1.1.1 \n&gt; ‚úî recipes      1.3.1      ‚úî yardstick    1.3.2\n\n\n&gt; ‚îÄ‚îÄ Conflicts ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ tidymodels_conflicts() ‚îÄ‚îÄ\n&gt; ‚úñ scales::discard() masks purrr::discard()\n&gt; ‚úñ dplyr::filter()   masks stats::filter()\n&gt; ‚úñ recipes::fixed()  masks stringr::fixed()\n&gt; ‚úñ dplyr::lag()      masks stats::lag()\n&gt; ‚úñ yardstick::spec() masks readr::spec()\n&gt; ‚úñ recipes::step()   masks stats::step()\n\n\n\n\nTidymodels is best suited for predictive modeling, which can be useful even if your main goal is causal inference (i.e.¬†anomaly/outlier detection via machine learning techniques to impute missing values of an important variable)"
  },
  {
    "objectID": "Lectures/Lecture10/CSSS508_Lecture10.html#tidymodels-packages",
    "href": "Lectures/Lecture10/CSSS508_Lecture10.html#tidymodels-packages",
    "title": "",
    "section": "tidymodels Packages",
    "text": "tidymodels Packages"
  },
  {
    "objectID": "Lectures/Lecture10/CSSS508_Lecture10.html#tidymodels-approach",
    "href": "Lectures/Lecture10/CSSS508_Lecture10.html#tidymodels-approach",
    "title": "",
    "section": "tidymodels Approach",
    "text": "tidymodels Approach"
  },
  {
    "objectID": "Lectures/Lecture10/CSSS508_Lecture10.html#packages-using-tidymodels-framework",
    "href": "Lectures/Lecture10/CSSS508_Lecture10.html#packages-using-tidymodels-framework",
    "title": "",
    "section": "Packages Using Tidymodels Framework ",
    "text": "Packages Using Tidymodels Framework \n\n\n\n\n\n\n\n\napplicable compares new data points with the training data to see how much the new data points appear to be an extrapolation of the training data\nbaguette is for speeding up bagging pipelines\nbutcher is for dealing with pipelines that create model objects that take up too much memory\ndiscrim has more model options for classification\nembed has extra preprocessing options for categorical predictors\nhardhat helps you to make new modeling packages\ncorrr has more options for looking at correlation matrices\nrules has more model options for prediction rule ensembles\ntext recipes has extra preprocessing options for using text data\ntidypredict is for running predictions inside SQL databases\nmodeldb is also for working within SQL databases and it allows for dplyr and tidyeval use within a database\ntidyposterior compares models using resampling statistics"
  },
  {
    "objectID": "Lectures/Lecture10/CSSS508_Lecture10.html#tidymodels-resources",
    "href": "Lectures/Lecture10/CSSS508_Lecture10.html#tidymodels-resources",
    "title": "",
    "section": "tidymodels Resources",
    "text": "tidymodels Resources\n\nThe website for tidymodels has extensive documentation on all core tidymodels packages as well as related ones.1\nThere is an excellent book online by Max Kuhn and Julia Silge called Tidy Modeling with R that provides a great overview of how to approach modeling within a tidy framework and well as showing how to use the various packages within tidymodels.\nAdditionally, there are also several related, online book resources:\n\nFeature Engineering & Selection: A Practical Approach for Predictive Models by Max Kuhn and Kjell Johnson\nStatistical Inference via Data Science: A Modern Dive into R and the Tidyverse by Chester Ismay and Albert Y. Kim\nSupervised Machine Learning for Text Analysis in R by Emil Hvitfeldt and Julia Silge\nText Mining with R: A Tidy Approach by Julia Silge & David Robinson\n\n\nThey also provide a great introductory tutorial to lay out the framework for why and how to use each core tidymodels package."
  },
  {
    "objectID": "Lectures/Lecture10/CSSS508_Lecture10.html#spatial-data-with-ggmap",
    "href": "Lectures/Lecture10/CSSS508_Lecture10.html#spatial-data-with-ggmap",
    "title": "",
    "section": "Spatial Data with ggmap",
    "text": "Spatial Data with ggmap\nThere are numerous ways to work with spatial data in R but you can use ggmap to visualize spatial data in a tidyverse framework.\n\n\n1source(\"stadia_api_key.R\")\nlibrary(ggmap)\n2`%notin%` &lt;- function(lhs, rhs) !(lhs %in% rhs)\n\n3violent_crimes &lt;- crime |&gt;\n  filter(offense %notin% c(\"auto theft\", \"theft\", \"burglary\"),\n         between(lon, -95.39681, -95.34188),\n         between(lat, 29.73631, 29.78400)) |&gt; \n  mutate(offense = fct_drop(offense),\n         offense = fct_relevel(offense, \n                               c(\"robbery\", \"aggravated assault\", \"rape\", \"murder\")))\n\n\n1\n\nYou need to register for Stadia Maps or Google Maps and get a respective API key in order to download their maps. This R script simply saves my API key and registers it in the current session so it‚Äôs not included in my code that‚Äôs accessible on GitHub.\n\n2\n\nCreating a helper function that negates the %in% function.\n\n3\n\ncrime is a built-in dataset in the ggmap package."
  },
  {
    "objectID": "Lectures/Lecture10/CSSS508_Lecture10.html#making-a-map",
    "href": "Lectures/Lecture10/CSSS508_Lecture10.html#making-a-map",
    "title": "",
    "section": "Making a Map",
    "text": "Making a Map\nOnce we have data we want to visualize we can call ggmap to visualize the spatial area and layer on any geoms/stats as you would with ggplot2.\n\n\n\n\n\n1bbox &lt;- make_bbox(lon, lat,\n                  data = violent_crimes)\n2map &lt;- get_stadiamap(bbox = bbox,\n                     maptype = \"stamen_toner_lite\",\n                      zoom = 14)\n\nggmap(map) + \n3  geom_point(data = violent_crimes,\n             color = \"red\")\n\n\n1\n\nCreating the bounding box for the longitude and latitude.\n\n2\n\nRetrieving the map with specifications.\n\n3\n\nThe only difference with layers using ggmap is that (1) you need to specify the data arguments in the layers and (2) the spatial aesthetics x and y are set to lon and lat, respectively. (If they‚Äôre named something different in your dataset, just put mapping = aes(x = longitude, y = latitude), for example.)"
  },
  {
    "objectID": "Lectures/Lecture10/CSSS508_Lecture10.html#using-different-geoms",
    "href": "Lectures/Lecture10/CSSS508_Lecture10.html#using-different-geoms",
    "title": "",
    "section": "Using Different Geoms",
    "text": "Using Different Geoms\nWith ggmap you‚Äôre working with ggplot2, so you can add in other kinds of layers, use patchwork, etc. All the ggplot2 geom‚Äôs are available.\n\n\nlibrary(patchwork)\nlibrary(ggdensity)\nlibrary(geomtextpath)\n\nrobberies &lt;- violent_crimes |&gt; filter(offense == \"robbery\")\n\npoints_map &lt;- ggmap(map) + geom_point(data = robberies, color = \"red\")\n\nhdr_map &lt;- ggmap(map) + \n  geom_hdr(aes(lon, lat, fill = after_stat(probs)), \n           data = robberies,\n           alpha = .5) +\n  geom_labeldensity2d(aes(lon, lat, level = after_stat(probs)),\n                      data = robberies, \n                      stat = \"hdr_lines\", \n                      size = 3, boxcolour = NA) +\n  scale_fill_brewer(palette = \"YlOrRd\") +\n  theme(legend.position = \"none\")\n\n(points_map + hdr_map) & \n  theme(axis.title = element_blank(), axis.text = element_blank(), axis.ticks = element_blank())"
  },
  {
    "objectID": "Lectures/Lecture10/CSSS508_Lecture10.html#using-different-geoms-output",
    "href": "Lectures/Lecture10/CSSS508_Lecture10.html#using-different-geoms-output",
    "title": "",
    "section": "Using Different Geoms",
    "text": "Using Different Geoms"
  },
  {
    "objectID": "Lectures/Lecture10/CSSS508_Lecture10.html#marginal-histogram",
    "href": "Lectures/Lecture10/CSSS508_Lecture10.html#marginal-histogram",
    "title": "",
    "section": "Marginal Histogram",
    "text": "Marginal Histogram\n\nlibrary(ggExtra)\ndata(mpg, package = \"ggplot2\")\n\nmpg_select &lt;- mpg |&gt; \n  filter(hwy &gt;= 35 & cty &gt; 27)\ng &lt;- ggplot(mpg, aes(cty, hwy)) + \n  geom_count() + \n  geom_smooth(method = \"lm\", se = F) + \n  theme_bw() \n1ggMarginal(g, type = \"histogram\", fill = \"transparent\")\n\n\n1\n\nCode that adds marginal plot."
  },
  {
    "objectID": "Lectures/Lecture10/CSSS508_Lecture10.html#marginal-boxplot",
    "href": "Lectures/Lecture10/CSSS508_Lecture10.html#marginal-boxplot",
    "title": "",
    "section": "Marginal Boxplot",
    "text": "Marginal Boxplot\n\nlibrary(ggExtra)\ndata(mpg, package = \"ggplot2\")\n\nmpg_select &lt;- mpg |&gt; \n  filter(hwy &gt;= 35 & cty &gt; 27)\ng &lt;- ggplot(mpg, aes(cty, hwy)) + \n  geom_count() + \n  geom_smooth(method = \"lm\", se = F) + \n  theme_bw()\n1ggMarginal(g, type = \"boxplot\", fill = \"transparent\")\n\n\n1\n\nCode that adds marginal plot."
  },
  {
    "objectID": "Lectures/Lecture10/CSSS508_Lecture10.html#marginal-density-curve",
    "href": "Lectures/Lecture10/CSSS508_Lecture10.html#marginal-density-curve",
    "title": "",
    "section": "Marginal Density Curve",
    "text": "Marginal Density Curve\n\nlibrary(ggExtra)\ndata(mpg, package = \"ggplot2\")\n\nmpg_select &lt;- mpg |&gt; \n  filter(hwy &gt;= 35 & cty &gt; 27)\ng &lt;- ggplot(mpg, aes(cty, hwy)) + \n  geom_count() + \n  geom_smooth(method = \"lm\", se = F) + \n  theme_bw()\n1ggMarginal(g, type = \"density\", fill = \"transparent\")\n\n\n1\n\nCode that adds marginal plot."
  },
  {
    "objectID": "Lectures/Lecture10/CSSS508_Lecture10.html#create-animations",
    "href": "Lectures/Lecture10/CSSS508_Lecture10.html#create-animations",
    "title": "",
    "section": "Create Animations",
    "text": "Create Animations\n\nlibrary(gapminder)\nlibrary(gganimate)\n1library(gifski)\n\nggplot(gapminder, aes(gdpPercap, lifeExp, size = pop, colour = country)) +\n  geom_point(alpha = 0.7, show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  scale_x_log10() +\n  facet_wrap(~continent) +\n2  labs(title = 'Year: {frame_time}', x = 'GDP per capita', y = 'life expectancy') +\n  transition_time(year) +\n  ease_aes('linear')\n\n\n1\n\nNeed this package to create a gif of the gganimate output.\n\n2\n\ngganimate-specific code."
  },
  {
    "objectID": "Lectures/Lecture10/CSSS508_Lecture10.html#create-animations-1",
    "href": "Lectures/Lecture10/CSSS508_Lecture10.html#create-animations-1",
    "title": "",
    "section": "Create Animations",
    "text": "Create Animations"
  },
  {
    "objectID": "Lectures/Lecture10/CSSS508_Lecture10.html#data-visualization-resources",
    "href": "Lectures/Lecture10/CSSS508_Lecture10.html#data-visualization-resources",
    "title": "",
    "section": "Data Visualization Resources",
    "text": "Data Visualization Resources\n\nHadley Wickham‚Äôs ggplot2: Elegant Graphics for Data Analysis (Second Edition) is available through the UW Library and the forthcoming Third Edition is being written as we speak and will be available online soon!\nSpatial Data Science with Applications in R by Edzer Pebesma and Roger Bivand\nThe sf package also works within the tidyverse framework and pairs very nicely with data from the census which can be easily accessed using tidycensus\nMore ideas for visualizations can be found on this master list and by looking at ggplot2 extension packages.\nThink about taking CSSS 569 with Chris Adolph (offered in Winter quarter) if you want to learn more about how to create visualizations in R and gain more understanding about best practices for conveying your data and findings effectively."
  },
  {
    "objectID": "Lectures/Lecture10/CSSS508_Lecture10.html#shiny",
    "href": "Lectures/Lecture10/CSSS508_Lecture10.html#shiny",
    "title": "",
    "section": "Shiny",
    "text": "Shiny\nShiny is an open source R package that provides an elegant and powerful web framework for building web applications using R. Shiny helps you turn your analyses into interactive web applications without requiring HTML, CSS, or JavaScript knowledge."
  },
  {
    "objectID": "Lectures/Lecture10/CSSS508_Lecture10.html#shiny-examples",
    "href": "Lectures/Lecture10/CSSS508_Lecture10.html#shiny-examples",
    "title": "",
    "section": "Shiny Examples",
    "text": "Shiny Examples"
  },
  {
    "objectID": "Lectures/Lecture10/CSSS508_Lecture10.html#what-is-version-control",
    "href": "Lectures/Lecture10/CSSS508_Lecture10.html#what-is-version-control",
    "title": "",
    "section": "What is Version Control?",
    "text": "What is Version Control?\nVersion control allows you to work work individually and/or collaboratively in a highly structured, documented way.\n\nIt‚Äôs basically like a robust save program for your project. You track and log changes you make over time and the version control system allows you to review or even restore earlier versions of your project.\n\n\n\n\n\nOriginally meant for software developers, git has been adopted by computational social scientists to source code but also to keep track of the whole collection of files that make up a research project."
  },
  {
    "objectID": "Lectures/Lecture10/CSSS508_Lecture10.html#why-use-version-control",
    "href": "Lectures/Lecture10/CSSS508_Lecture10.html#why-use-version-control",
    "title": "",
    "section": "Why Use Version Control?",
    "text": "Why Use Version Control?"
  },
  {
    "objectID": "Lectures/Lecture10/CSSS508_Lecture10.html#what-is-github",
    "href": "Lectures/Lecture10/CSSS508_Lecture10.html#what-is-github",
    "title": "",
    "section": "What is Github?",
    "text": "What is Github?"
  },
  {
    "objectID": "Lectures/Lecture10/CSSS508_Lecture10.html#why-use-github",
    "href": "Lectures/Lecture10/CSSS508_Lecture10.html#why-use-github",
    "title": "",
    "section": "Why Use Github?",
    "text": "Why Use Github?"
  },
  {
    "objectID": "Lectures/Lecture10/CSSS508_Lecture10.html#collaboration-made-easier",
    "href": "Lectures/Lecture10/CSSS508_Lecture10.html#collaboration-made-easier",
    "title": "",
    "section": "Collaboration Made ‚ÄúEasier‚Äù",
    "text": "Collaboration Made ‚ÄúEasier‚Äù"
  },
  {
    "objectID": "Lectures/Lecture10/CSSS508_Lecture10.html#git-integration-in-r-studio",
    "href": "Lectures/Lecture10/CSSS508_Lecture10.html#git-integration-in-r-studio",
    "title": "",
    "section": "Git Integration in R Studio",
    "text": "Git Integration in R Studio"
  },
  {
    "objectID": "Lectures/Lecture10/CSSS508_Lecture10.html#gitgithub-resources",
    "href": "Lectures/Lecture10/CSSS508_Lecture10.html#gitgithub-resources",
    "title": "",
    "section": "Git/GitHub Resources",
    "text": "Git/GitHub Resources\n\nHands down the best introduction to git and using git/GitHub with RStudio Projects is Jennifer Bryan‚Äôs online book Happy Git and GitHub for the useR\nSoftware carpentry has a nice beginner‚Äôs ‚Äúclass‚Äù that‚Äôll help you learn the git basics.\nHere‚Äôs a user-contributed cheat-sheet for Using git and GitHub with RStudio."
  },
  {
    "objectID": "Lectures/Lecture10/CSSS508_Lecture10.html#quarto",
    "href": "Lectures/Lecture10/CSSS508_Lecture10.html#quarto",
    "title": "",
    "section": "Quarto",
    "text": "Quarto"
  },
  {
    "objectID": "Lectures/Lecture10/CSSS508_Lecture10.html#plug-for-csscr",
    "href": "Lectures/Lecture10/CSSS508_Lecture10.html#plug-for-csscr",
    "title": "",
    "section": "Plug for CSSCR",
    "text": "Plug for CSSCR\nAlso, this lab is part of CSSCR (The Center for Social Science Computation and Research) where I‚Äôm also on staff as a consultant. CSSCR is a resource center for the social science departments1 at the University of Washington.\n\nAs you continue to learn R feel free to drop by2 with any/all of your R coding questions.\nConstituent member departments include The College of Education, The Department of Anthropology, The Department of Communication, The Department of Economics, The Department of Geography, The Department of Political Science, The Department of Psychology, The Department of Sociology, The Jackson School of International Studies, and The School of Social WorkWe offer drop-in consulting in Savery 119, 8am-6pm Monday-Friday."
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4_index.html",
    "href": "Lectures/Lecture4/CSSS508_Lecture4_index.html",
    "title": "Lecture 4",
    "section": "",
    "text": "Manipulating and Summarizing Data\n\nOctober 21, 2025\n\n\n\n\n\nSlides & Code\nHTML slides ‚Ä¢ Raw qmd file ‚Ä¢ R Code\n\n\n\nSuggested Reading (from R for Data Science (2e)1)\nChapter 4: Data transformation ‚Ä¢ Chapter 13: Logical vectors ‚Ä¢ Chapter 20: Joins\n\n\n1¬†Hadley Wickham, Mine √áetinkaya-Rundel & Garrett Grolemund\nUseful Resources\n\nCheatsheets\ndplyr\n\n\npackage Website\ndplyr\n\n\nCrowdsource Help\nCS&SS 508 Slack Workspace ‚Ä¢ Posit community ‚Ä¢ Stackoverflow",
    "crumbs": [
      "Lectures",
      "Lecture 4"
    ]
  },
  {
    "objectID": "Lectures/Lecture3/CSSS508_Lecture3_index.html",
    "href": "Lectures/Lecture3/CSSS508_Lecture3_index.html",
    "title": "Lecture 3",
    "section": "",
    "text": "Workflow and Best Practices\n\nOctober 14, 2025\n\n\n\n\n\nSlides & Code\nHTML slides ‚Ä¢ Raw qmd file ‚Ä¢ R Code\n\n\n\nSuggested Reading (from R for Data Science (2e)1)\nChapter 3: Workflow:basics\nChapter 4: Workflow:code style\nChapter 5: Workflow:scripts and projects\nChapter 6: Workflow:getting help\nChapter 28: A field guide to base R (Sections 28.1 - 28.2.2, 28.3.1 - 28.3.2)\n\n\n1¬†Hadley Wickham, Mine √áetinkaya-Rundel & Garrett Grolemund\nUseful Resources\n\nCheatsheets\nBase R\n\n\nPackage websites\nstyler ‚Ä¢ reprex ‚Ä¢ here\n\n\nCrowdsource Help\nCS&SS 508 Slack Workspace ‚Ä¢ Posit community ‚Ä¢ Stackoverflow",
    "crumbs": [
      "Lectures",
      "Lecture 3"
    ]
  },
  {
    "objectID": "Lectures/lectures.html",
    "href": "Lectures/lectures.html",
    "title": "Schedule",
    "section": "",
    "text": "Lecture\nDate\nTopic\n\n\n\n\n\n1\n30 September 2025\nIntroduction to R, R Studio, and Quarto\n\n\n\n2\n7 October 2025\nVisualizing Data\n\n\n\n3\n14 October 2025\nWorkflow and Reproducibility\n\n\n\n4\n21 October 2025\nManipulating and Summarizing Data\n\n\n\n5\n28 October 2025\nImporting, Exporting, and Cleaning Data\n\n\n\n6\n4 November 2025\nData Structures & Types\n\n\n\n‚Äî\n11 November 2025\nVeterans Day Holiday (No Class)\n\n\n\n7\n18 November 2025\nWorking with Text Data\n\n\n\n8\n25 November 2025\nWriting Functions\n\n\n\n9\n2 December 2025\nIteration\n\n\n\n10\n9 December 2025\nNext Steps\n\n\n\nThis course has no scheduled meeting during final exam week but if enough students are interested in attending a remote lecture about how to progress further with R, an optional final lecture will be offered.\n\n\n\n\n\n\n Lecture content\n\n\n\nGo to lecture tabs on the left for links to slides and topic-specific resources.",
    "crumbs": [
      "Lectures",
      "Schedule"
    ]
  },
  {
    "objectID": "Lectures/Lecture6/CSSS508_Lecture6.html#title-slide",
    "href": "Lectures/Lecture6/CSSS508_Lecture6.html#title-slide",
    "title": "",
    "section": "",
    "text": "Data Structures & Types\nCS&SS 508 ‚Ä¢ Lecture 6\n4 November 2025\nVictoria Sass"
  },
  {
    "objectID": "Lectures/Lecture6/CSSS508_Lecture6.html#data-types-in-r",
    "href": "Lectures/Lecture6/CSSS508_Lecture6.html#data-types-in-r",
    "title": "",
    "section": "Data types in R",
    "text": "Data types in R\nReturning, once again, to our list of data types in R:\n\n\nLogicals\nFactors\nDate/Date-time\nNumbers\nMissing Values\nStrings"
  },
  {
    "objectID": "Lectures/Lecture6/CSSS508_Lecture6.html#data-types-in-r-1",
    "href": "Lectures/Lecture6/CSSS508_Lecture6.html#data-types-in-r-1",
    "title": "",
    "section": "Data types in R",
    "text": "Data types in R\nReturning, once again, to our list of data types in R:\n\nLogicals\nFactors\nDate/Date-time\nNumbers\nMissing Values\nStrings"
  },
  {
    "objectID": "Lectures/Lecture6/CSSS508_Lecture6.html#data-types-in-r-2",
    "href": "Lectures/Lecture6/CSSS508_Lecture6.html#data-types-in-r-2",
    "title": "",
    "section": "Data types in R",
    "text": "Data types in R\nReturning, once again, to our list of data types in R:\n\nLogicals\nFactors\nDate/Date-time\nNumbers\nMissing Values\nStrings"
  },
  {
    "objectID": "Lectures/Lecture6/CSSS508_Lecture6.html#data-types-in-r-3",
    "href": "Lectures/Lecture6/CSSS508_Lecture6.html#data-types-in-r-3",
    "title": "",
    "section": "Data types in R",
    "text": "Data types in R\nReturning, once again, to our list of data types in R:\n\nLogicals\nFactors\nDate/Date-time\nNumbers\nMissing Values\nStrings"
  },
  {
    "objectID": "Lectures/Lecture6/CSSS508_Lecture6.html#numbers-two-ways",
    "href": "Lectures/Lecture6/CSSS508_Lecture6.html#numbers-two-ways",
    "title": "",
    "section": "Numbers, Two Ways",
    "text": "Numbers, Two Ways\nR has two types of numeric variables: double and integer."
  },
  {
    "objectID": "Lectures/Lecture6/CSSS508_Lecture6.html#numbers-coded-as-character-strings",
    "href": "Lectures/Lecture6/CSSS508_Lecture6.html#numbers-coded-as-character-strings",
    "title": "",
    "section": "Numbers Coded as Character Strings",
    "text": "Numbers Coded as Character Strings\nOftentimes numerical data is coded as a string so you‚Äôll need to use the appropriate parsing function to read it in in the correct form.\n\n\nparse_integer(c(\"1\", \"2\", \"3\"))\n\n&gt; [1] 1 2 3\n\nparse_double(c(\"1\", \"2\", \"3.123\"))\n\n&gt; [1] 1.000 2.000 3.123\n\n\n\n\n\nIf you have values with extraneous non-numerical text that you want to ignore there‚Äôs a separate function for that.\n\n\n\nparse_number(c(\"USD 3,513\", \"59%\", \"$1,123,456.00\"))\n\n&gt; [1]    3513      59 1123456"
  },
  {
    "objectID": "Lectures/Lecture6/CSSS508_Lecture6.html#count",
    "href": "Lectures/Lecture6/CSSS508_Lecture6.html#count",
    "title": "",
    "section": "count()",
    "text": "count()\nA very useful and common exploratory data analysis tool is to check the relative sums of different categories of a variable. That‚Äôs what count() is for!\n\n\nlibrary(nycflights13)\ndata(flights)\n\n1flights |&gt; count(origin)\n\n\n1\n\nAdd the argument sort = TRUE to see the most common values first (i.e.¬†arranged in descending order). Otherwise the values you‚Äôre counting will simply be arranged in alphabetical order (as shown here; by coincidence these also happen to also be in descending order in this example).\n\n\n\n\n&gt; # A tibble: 3 √ó 2\n&gt;   origin      n\n&gt;   &lt;chr&gt;   &lt;int&gt;\n&gt; 1 EWR    120835\n&gt; 2 JFK    111279\n&gt; 3 LGA    104662\n\n\n\n\nThis is functionally the same as grouping and summarizing with n().\n\n\n\nflights |&gt; \n2  summarise(n= n(),\n3            .by = origin)\n\n\n2\n\nn() is a special summary function that doesn‚Äôt take any arguments and instead accesses information about the ‚Äúcurrent‚Äù group. This means that it only works inside dplyr verbs.\n\n3\n\nYou can do this longer version if you also want to compute other summaries simultaneously.\n\n\n\n\n&gt; # A tibble: 3 √ó 2\n&gt;   origin      n\n&gt;   &lt;chr&gt;   &lt;int&gt;\n&gt; 1 EWR    120835\n&gt; 2 LGA    104662\n&gt; 3 JFK    111279"
  },
  {
    "objectID": "Lectures/Lecture6/CSSS508_Lecture6.html#n_distinct",
    "href": "Lectures/Lecture6/CSSS508_Lecture6.html#n_distinct",
    "title": "",
    "section": "n_distinct()",
    "text": "n_distinct()\nUse this function if you want the count the number of distinct (unique) values of one or more variables.\n\nSay we‚Äôre interested in which destinations are served by the most carriers:\n\nflights |&gt; \n  summarize(carriers = n_distinct(carrier), \n            .by = dest) |&gt; \n  arrange(desc(carriers))\n\n&gt; # A tibble: 105 √ó 2\n&gt;    dest  carriers\n&gt;    &lt;chr&gt;    &lt;int&gt;\n&gt;  1 ATL          7\n&gt;  2 ORD          7\n&gt;  3 TPA          7\n&gt;  4 BOS          7\n&gt;  5 CLT          7\n&gt;  6 IAD          6\n&gt;  7 MSP          6\n&gt;  8 DTW          6\n&gt;  9 MSY          6\n&gt; 10 PIT          6\n&gt; # ‚Ñπ 95 more rows"
  },
  {
    "objectID": "Lectures/Lecture6/CSSS508_Lecture6.html#weighted-counts",
    "href": "Lectures/Lecture6/CSSS508_Lecture6.html#weighted-counts",
    "title": "",
    "section": "Weighted Counts",
    "text": "Weighted Counts\nA weighted count is simply a grouped sum, therefore count has a wt argument to allow for the shorthand.\n\n\n\nHow many miles did each plane fly?\n\nflights |&gt; \n  summarize(miles = sum(distance), \n            .by = tailnum) |&gt; \n  arrange(desc(miles))\n\n&gt; # A tibble: 4,044 √ó 2\n&gt;    tailnum   miles\n&gt;    &lt;chr&gt;     &lt;dbl&gt;\n&gt;  1 &lt;NA&gt;    1784167\n&gt;  2 N328AA   939101\n&gt;  3 N338AA   931183\n&gt;  4 N327AA   915665\n&gt;  5 N335AA   909696\n&gt;  6 N323AA   844529\n&gt;  7 N319AA   840510\n&gt;  8 N336AA   838086\n&gt;  9 N329AA   830776\n&gt; 10 N324AA   794895\n&gt; # ‚Ñπ 4,034 more rows\n\n\n\n\nThis is equivalent to:\n\nflights |&gt; \n  count(tailnum,\n        wt = distance,\n        sort = TRUE) \n\n&gt; # A tibble: 4,044 √ó 2\n&gt;    tailnum       n\n&gt;    &lt;chr&gt;     &lt;dbl&gt;\n&gt;  1 &lt;NA&gt;    1784167\n&gt;  2 N328AA   939101\n&gt;  3 N338AA   931183\n&gt;  4 N327AA   915665\n&gt;  5 N335AA   909696\n&gt;  6 N323AA   844529\n&gt;  7 N319AA   840510\n&gt;  8 N336AA   838086\n&gt;  9 N329AA   830776\n&gt; 10 N324AA   794895\n&gt; # ‚Ñπ 4,034 more rows"
  },
  {
    "objectID": "Lectures/Lecture6/CSSS508_Lecture6.html#other-useful-arithmetic-functions",
    "href": "Lectures/Lecture6/CSSS508_Lecture6.html#other-useful-arithmetic-functions",
    "title": "",
    "section": "Other Useful Arithmetic Functions",
    "text": "Other Useful Arithmetic Functions\nIn addition to the standards (+, -, /, *, ^), R has many other useful arithmetic functions.\n\nPairwise min/max\n\ndf\n\n&gt; # A tibble: 3 √ó 2\n&gt;       x     y\n&gt;   &lt;dbl&gt; &lt;dbl&gt;\n&gt; 1     1     3\n&gt; 2     5     2\n&gt; 3     7    NA\n\n\n\ndf |&gt; \n  mutate(\n1    min = pmin(x, y, na.rm = TRUE),\n2    max = pmax(x, y, na.rm = TRUE)\n  )\n\n\n1\n\npmin() returns the smallest value in each row. min(), by contrast, finds the smallest observation given a number of rows.\n\n2\n\npmax() returns the largest value in each row. max(), by contrast, finds the largest observation given a number of rows.\n\n\n\n\n&gt; # A tibble: 3 √ó 4\n&gt;       x     y   min   max\n&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n&gt; 1     1     3     1     3\n&gt; 2     5     2     2     5\n&gt; 3     7    NA     7     7"
  },
  {
    "objectID": "Lectures/Lecture6/CSSS508_Lecture6.html#other-useful-arithmetic-functions-1",
    "href": "Lectures/Lecture6/CSSS508_Lecture6.html#other-useful-arithmetic-functions-1",
    "title": "",
    "section": "Other Useful Arithmetic Functions",
    "text": "Other Useful Arithmetic Functions\nModular arithmetic\n\n\n\n11:10 %/% 3\n\n\n1\n\nComputes integer division.\n\n\n\n\n&gt;  [1] 0 0 1 1 1 2 2 2 3 3\n\n\n\n21:10 %% 3\n\n\n2\n\nComputes the remainder.\n\n\n\n\n&gt;  [1] 1 2 0 1 2 0 1 2 0 1\n\n\n\n\n\n\nWe can see how this can be useful in our flights data which has curiously stored time\n\n\n\n\nflights |&gt; \n  mutate(hour = sched_dep_time %/% 100,\n         minute = sched_dep_time %% 100,\n         .keep = \"used\")\n\n&gt; # A tibble: 336,776 √ó 3\n&gt;    sched_dep_time  hour minute\n&gt;             &lt;int&gt; &lt;dbl&gt;  &lt;dbl&gt;\n&gt;  1            515     5     15\n&gt;  2            529     5     29\n&gt;  3            540     5     40\n&gt;  4            545     5     45\n&gt;  5            600     6      0\n&gt;  6            558     5     58\n&gt;  7            600     6      0\n&gt;  8            600     6      0\n&gt;  9            600     6      0\n&gt; 10            600     6      0\n&gt; # ‚Ñπ 336,766 more rows"
  },
  {
    "objectID": "Lectures/Lecture6/CSSS508_Lecture6.html#other-useful-arithmetic-functions-2",
    "href": "Lectures/Lecture6/CSSS508_Lecture6.html#other-useful-arithmetic-functions-2",
    "title": "",
    "section": "Other Useful Arithmetic Functions",
    "text": "Other Useful Arithmetic Functions\nLogarithms1\n\n1log(c(2.718282, 7.389056, 20.085537))\n\n\n1\n\nInverse is exp()\n\n\n\n\n&gt; [1] 1 2 3\n\n\n\n2log2(c(2, 4, 8))\n\n\n2\n\nEasy to interpret because a difference of 1 on the log scale corresponds to doubling on the original scale and a difference of -1 corresponds to halving. Inverse is 2^.\n\n\n\n\n&gt; [1] 1 2 3\n\n\n\n3log10(c(10, 100, 1000))\n\n\n3\n\nEasy to back-transform because everything is on the order of 10. Inverse is ^10.\n\n\n\n\n&gt; [1] 1 2 3\n\n\nAn incredibly useful transformation for dealing with data that ranges across multiple orders of magnitude and converting exponential growth to linear growth."
  },
  {
    "objectID": "Lectures/Lecture6/CSSS508_Lecture6.html#other-useful-arithmetic-functions-3",
    "href": "Lectures/Lecture6/CSSS508_Lecture6.html#other-useful-arithmetic-functions-3",
    "title": "",
    "section": "Other Useful Arithmetic Functions",
    "text": "Other Useful Arithmetic Functions\nCumulative and Rolling Aggregates\nBase R provides cumsum(), cumprod(), cummin(), cummax() for cumulative (i.e.¬†running) sums, products, mins and maxes. dplyr provides cummean() for cumulative means.\n\n\n1:15\n\n&gt;  [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15\n\n\n\n1cumsum(1:15)\n\n\n1\n\ncumsum() is the most common in practice.\n\n\n\n\n&gt;  [1]   1   3   6  10  15  21  28  36  45  55  66  78  91 105 120\n\n\n\n\n\nFor complex rolling/sliding aggregates, check out the slidr package."
  },
  {
    "objectID": "Lectures/Lecture6/CSSS508_Lecture6.html#other-useful-arithmetic-functions-4",
    "href": "Lectures/Lecture6/CSSS508_Lecture6.html#other-useful-arithmetic-functions-4",
    "title": "",
    "section": "Other Useful Arithmetic Functions",
    "text": "Other Useful Arithmetic Functions\nNumeric Ranges\n\nx &lt;- c(1, 2, 5, 10, 15, 20)\n1cut(x, breaks = c(0, 5, 10, 15, 20))\n\n\n1\n\ncut() breaks up (aka bins) a numeric vector into discrete buckets\n\n\n\n\n&gt; [1] (0,5]   (0,5]   (0,5]   (5,10]  (10,15] (15,20]\n&gt; Levels: (0,5] (5,10] (10,15] (15,20]\n\n\n. . .\n\n2cut(x, breaks = c(0, 5, 10, 100))\n\n\n2\n\nThe bins don‚Äôt have to be the same size.\n\n\n\n\n&gt; [1] (0,5]    (0,5]    (0,5]    (5,10]   (10,100] (10,100]\n&gt; Levels: (0,5] (5,10] (10,100]\n\n\n. . .\n\ncut(x, \n  breaks = c(0, 5, 10, 15, 20), \n3  labels = c(\"sm\", \"md\", \"lg\", \"xl\")\n)\n\n\n3\n\nYou can optionally supply your own labels. Note that there should be one less labels than breaks.\n\n\n\n\n&gt; [1] sm sm sm md lg xl\n&gt; Levels: sm md lg xl\n\n\n. . .\n\n4y &lt;- c(NA, -10, 5, 10, 30)\ncut(y, breaks = c(0, 5, 10, 15, 20))\n\n\n4\n\nAny values outside of the range of the breaks will become NA.\n\n\n\n\n&gt; [1] &lt;NA&gt;   &lt;NA&gt;   (0,5]  (5,10] &lt;NA&gt;  \n&gt; Levels: (0,5] (5,10] (10,15] (15,20]"
  },
  {
    "objectID": "Lectures/Lecture6/CSSS508_Lecture6.html#rounding",
    "href": "Lectures/Lecture6/CSSS508_Lecture6.html#rounding",
    "title": "",
    "section": "Rounding",
    "text": "Rounding\nround() allows us to round to a certain decimal place. Without specifying an argument for the digits argument it will round to the nearest integer.\n\n\nround(pi)\n\n&gt; [1] 3\n\nround(pi, digits = 2)\n\n&gt; [1] 3.14\n\n\n\n\nUsing negative integers in the digits argument allows you to round on the left-hand side of the decimal place.\n\nround(39472, digits = -1)\n\n&gt; [1] 39470\n\nround(39472, digits = -2)\n\n&gt; [1] 39500\n\nround(39472, digits = -3)\n\n&gt; [1] 39000"
  },
  {
    "objectID": "Lectures/Lecture6/CSSS508_Lecture6.html#rounding-1",
    "href": "Lectures/Lecture6/CSSS508_Lecture6.html#rounding-1",
    "title": "",
    "section": "Rounding",
    "text": "Rounding\nWhat‚Äôs going on here?\n\nround(c(1.5, 2.5)) \n\n&gt; [1] 2 2\n\n\n\nround() uses what‚Äôs known as ‚Äúround half to even‚Äù or Banker‚Äôs rounding: if a number is half way between two integers, it will be rounded to the even integer. This is a good strategy because it keeps the rounding unbiased: half of all 0.5s are rounded up, and half are rounded down.\n\n\n\nfloor() and ceiling() are also useful rounding shortcuts.\n\n1floor(123.456)\n\n\n1\n\nAlways rounds down.\n\n\n\n\n&gt; [1] 123\n\n\n\n2ceiling(123.456)\n\n\n2\n\nAlways rounds up.\n\n\n\n\n&gt; [1] 124"
  },
  {
    "objectID": "Lectures/Lecture6/CSSS508_Lecture6.html#summary-functions",
    "href": "Lectures/Lecture6/CSSS508_Lecture6.html#summary-functions",
    "title": "",
    "section": "Summary Functions",
    "text": "Summary Functions\n\nCentral Tendency\n\n1x &lt;- sample(1:500, size = 100, replace = TRUE)\nmean(x)\n\n\n1\n\nsample() takes a vector of data, and samples size elements from it, with replacement if replace equals TRUE.\n\n\n\n\n&gt; [1] 242.94\n\n\n\nmedian(x)\n\n&gt; [1] 230.5\n\n\n\n2quantile(x, .95)\n\n\n2\n\nA generalization of the median: quantile(x, 0.95) will find the value that‚Äôs greater than 95% of the values; quantile(x, 0.5) is equivalent to the median.\n\n\n\n\n&gt;    95% \n&gt; 477.35"
  },
  {
    "objectID": "Lectures/Lecture6/CSSS508_Lecture6.html#summary-functions-1",
    "href": "Lectures/Lecture6/CSSS508_Lecture6.html#summary-functions-1",
    "title": "",
    "section": "Summary Functions",
    "text": "Summary Functions\nMeasures of Spread/Variation\n\nmin(x)\n\n&gt; [1] 1\n\nmax(x)\n\n&gt; [1] 499\n\nrange(x)\n\n&gt; [1]   1 499\n\n\n\n1IQR(x)\n\n\n1\n\nEquivalent to quantile(x, 0.75) - quantile(x, 0.25) and gives you the range that contains the middle 50% of the data.\n\n\n\n\n&gt; [1] 263.5\n\n\n\n2var(x)\n\n\n2\n\ns^2 = \\frac{\\sum(x_i-\\overline{x})^2}{n-1}\n\n\n\n\n&gt; [1] 23715.01\n\n\n\n3sd(x)\n\n\n3\n\ns = \\sqrt{\\frac{\\sum(x_i-\\overline{x})^2}{n-1}}\n\n\n\n\n&gt; [1] 153.9968"
  },
  {
    "objectID": "Lectures/Lecture6/CSSS508_Lecture6.html#common-numerical-manipulations",
    "href": "Lectures/Lecture6/CSSS508_Lecture6.html#common-numerical-manipulations",
    "title": "",
    "section": "Common Numerical Manipulations",
    "text": "Common Numerical Manipulations\nThese formulas can be used in a summary call but are also useful with mutate(), particularly if being applied to grouped data.\n\n\n1x / sum(x)\n2(x - mean(x)) / sd(x)\n3(x - min(x)) / (max(x) - min(x))\n4x / first(x)\n\n\n1\n\nCalculates the proportion of a total.\n\n2\n\nComputes a Z-score (standardized to mean 0 and sd 1).\n\n3\n\nStandardizes to range [0, 1].\n\n4\n\nComputes an index based on the first observation."
  },
  {
    "objectID": "Lectures/Lecture6/CSSS508_Lecture6.html#summary-functions-2",
    "href": "Lectures/Lecture6/CSSS508_Lecture6.html#summary-functions-2",
    "title": "",
    "section": "Summary Functions",
    "text": "Summary Functions\nPositions\n\nfirst(x)\n\n&gt; [1] 316\n\nlast(x)\n\n&gt; [1] 342\n\nnth(x, n = 77)\n\n&gt; [1] 384\n\n\n. . .\n\nThese are all really helpful but is there a good summary descriptive statistics function?"
  },
  {
    "objectID": "Lectures/Lecture6/CSSS508_Lecture6.html#basic-summary-statistics",
    "href": "Lectures/Lecture6/CSSS508_Lecture6.html#basic-summary-statistics",
    "title": "",
    "section": "Basic summary statistics",
    "text": "Basic summary statistics\n\n\nsummary(iris)\n\n&gt;   Sepal.Length    Sepal.Width     Petal.Length    Petal.Width   \n&gt;  Min.   :4.300   Min.   :2.000   Min.   :1.000   Min.   :0.100  \n&gt;  1st Qu.:5.100   1st Qu.:2.800   1st Qu.:1.600   1st Qu.:0.300  \n&gt;  Median :5.800   Median :3.000   Median :4.350   Median :1.300  \n&gt;  Mean   :5.843   Mean   :3.057   Mean   :3.758   Mean   :1.199  \n&gt;  3rd Qu.:6.400   3rd Qu.:3.300   3rd Qu.:5.100   3rd Qu.:1.800  \n&gt;  Max.   :7.900   Max.   :4.400   Max.   :6.900   Max.   :2.500  \n&gt;        Species  \n&gt;  setosa    :50  \n&gt;  versicolor:50  \n&gt;  virginica :50  \n&gt;                 \n&gt;                 \n&gt;"
  },
  {
    "objectID": "Lectures/Lecture6/CSSS508_Lecture6.html#better-summary-statistics",
    "href": "Lectures/Lecture6/CSSS508_Lecture6.html#better-summary-statistics",
    "title": "",
    "section": "Better summary statistics ",
    "text": "Better summary statistics \nA basic example:\n\nlibrary(skimr)\nskim(iris)\n\n\n\n\n\nData summary\n\n\nName\niris\n\n\nNumber of rows\n150\n\n\nNumber of columns\n5\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\nfactor\n1\n\n\nnumeric\n4\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: factor\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nordered\nn_unique\ntop_counts\n\n\n\n\nSpecies\n0\n1\nFALSE\n3\nset: 50, ver: 50, vir: 50\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nSepal.Length\n0\n1\n5.84\n0.83\n4.3\n5.1\n5.80\n6.4\n7.9\n‚ñÜ‚ñá‚ñá‚ñÖ‚ñÇ\n\n\nSepal.Width\n0\n1\n3.06\n0.44\n2.0\n2.8\n3.00\n3.3\n4.4\n‚ñÅ‚ñÜ‚ñá‚ñÇ‚ñÅ\n\n\nPetal.Length\n0\n1\n3.76\n1.77\n1.0\n1.6\n4.35\n5.1\n6.9\n‚ñá‚ñÅ‚ñÜ‚ñá‚ñÇ\n\n\nPetal.Width\n0\n1\n1.20\n0.76\n0.1\n0.3\n1.30\n1.8\n2.5\n‚ñá‚ñÅ‚ñá‚ñÖ‚ñÉ"
  },
  {
    "objectID": "Lectures/Lecture6/CSSS508_Lecture6.html#better-summary-statistics-1",
    "href": "Lectures/Lecture6/CSSS508_Lecture6.html#better-summary-statistics-1",
    "title": "",
    "section": "Better summary statistics ",
    "text": "Better summary statistics \nA more complex example:\n\nskim(starwars)\n\n\n\n\n\nData summary\n\n\nName\nstarwars\n\n\nNumber of rows\n87\n\n\nNumber of columns\n14\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n8\n\n\nlist\n3\n\n\nnumeric\n3\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nname\n0\n1.00\n3\n21\n0\n87\n0\n\n\nhair_color\n5\n0.94\n4\n13\n0\n11\n0\n\n\nskin_color\n0\n1.00\n3\n19\n0\n31\n0\n\n\neye_color\n0\n1.00\n3\n13\n0\n15\n0\n\n\nsex\n4\n0.95\n4\n14\n0\n4\n0\n\n\ngender\n4\n0.95\n8\n9\n0\n2\n0\n\n\nhomeworld\n10\n0.89\n4\n14\n0\n48\n0\n\n\nspecies\n4\n0.95\n3\n14\n0\n37\n0\n\n\n\nVariable type: list\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nn_unique\nmin_length\nmax_length\n\n\n\n\nfilms\n0\n1\n24\n1\n7\n\n\nvehicles\n0\n1\n11\n0\n2\n\n\nstarships\n0\n1\n16\n0\n5\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nheight\n6\n0.93\n174.60\n34.77\n66\n167.0\n180\n191.0\n264\n‚ñÇ‚ñÅ‚ñá‚ñÖ‚ñÅ\n\n\nmass\n28\n0.68\n97.31\n169.46\n15\n55.6\n79\n84.5\n1358\n‚ñá‚ñÅ‚ñÅ‚ñÅ‚ñÅ\n\n\nbirth_year\n44\n0.49\n87.57\n154.69\n8\n35.0\n52\n72.0\n896\n‚ñá‚ñÅ‚ñÅ‚ñÅ‚ñÅ"
  },
  {
    "objectID": "Lectures/Lecture6/CSSS508_Lecture6.html#skim-function",
    "href": "Lectures/Lecture6/CSSS508_Lecture6.html#skim-function",
    "title": "",
    "section": "skim function",
    "text": "skim function\nHighlights of this summary statistics function:\n\nprovides a larger set of statistics than summary() including number missing, complete, n, sd, histogram for numeric data\npresentation is in a compact, organized format\nreports each data type separately\nhandles a wide range of data classes including dates, logicals, strings, lists and more\ncan be used with summary() for an overall summary of the data (w/o specifics about columns)\nindividual columns can be selected for a summary of only a subset of the data\nhandles grouped data\nbehaves nicely in pipelines\nproduces knitted results for documents\neasily and highly customizable (i.e.¬†specify your own statistics and classes)"
  },
  {
    "objectID": "Lectures/Lecture6/CSSS508_Lecture6.html#explicit-missing-values",
    "href": "Lectures/Lecture6/CSSS508_Lecture6.html#explicit-missing-values",
    "title": "",
    "section": "Explicit Missing Values",
    "text": "Explicit Missing Values\n\n\nAn explicit missing value is the presence of an absence.\n\n\n\nIn other words, an explicit missing value is one in which you see an NA.\n\n\nDepending on the reason for its missingness, there are different ways to deal with NAs.\n\n\nData Entry Shorthand\nIf your data were entered by hand and NAs merely represent a value being carried forward from the last entry then you can use fill() to help complete your data.\n\n\n\n\ntreatment &lt;- tribble(\n  ~person,           ~treatment, ~response,\n  \"Derrick Whitmore\", 1,         7,\n  NA,                 2,         10,\n  \"Katherine Burke\",  3,         NA,\n  NA,                 1,         4\n)\n\n\n\n\n\ntreatment |&gt;\n1  fill(everything())\n\n\n1\n\nfill() takes one or more variables (in this case everything(), which means all variables), and by default fills them in downwards. If you have a different issue you can change the .direction argument to \"up\",\"downup\", or \"updown\".\n\n\n\n\n&gt; # A tibble: 4 √ó 3\n&gt;   person           treatment response\n&gt;   &lt;chr&gt;                &lt;dbl&gt;    &lt;dbl&gt;\n&gt; 1 Derrick Whitmore         1        7\n&gt; 2 Derrick Whitmore         2       10\n&gt; 3 Katherine Burke          3       10\n&gt; 4 Katherine Burke          1        4"
  },
  {
    "objectID": "Lectures/Lecture6/CSSS508_Lecture6.html#explicit-missing-values-1",
    "href": "Lectures/Lecture6/CSSS508_Lecture6.html#explicit-missing-values-1",
    "title": "",
    "section": "Explicit Missing Values",
    "text": "Explicit Missing Values\nRepresent A Fixed Value\nOther times an NA represents some fixed value, usually 0.\n. . .\n\nx &lt;- c(1, 4, 5, 7, NA)\n1coalesce(x, 0)\n\n\n1\n\ncoalesce() in the dplyr package takes a vector as the first argument and will replace any missing values with the value provided in the second argument.\n\n\n\n\n&gt; [1] 1 4 5 7 0\n\n\n. . .\n\nRepresented By a Fixed Value\nIf the opposite issue occurs (i.e.¬†a value is actually an NA), try specifying that to the na argument of your readr data import function. Otherwise, use na_if() from dplyr.\n\nx &lt;- c(1, 4, 5, 7, -99)\nna_if(x, -99)\n\n&gt; [1]  1  4  5  7 NA"
  },
  {
    "objectID": "Lectures/Lecture6/CSSS508_Lecture6.html#explicit-missing-values-2",
    "href": "Lectures/Lecture6/CSSS508_Lecture6.html#explicit-missing-values-2",
    "title": "",
    "section": "Explicit Missing Values",
    "text": "Explicit Missing Values\nNaNs\nA special sub-type of missing value is an NaN, or Not a Number.\n. . .\nThese generally behave similar to NAs and are likely the result of a mathematical operation that has an indeterminate result:\n\n0 / 0 \n\n&gt; [1] NaN\n\n0 * Inf\n\n&gt; [1] NaN\n\nInf - Inf\n\n&gt; [1] NaN\n\nsqrt(-1)\n\n&gt; [1] NaN\n\n\n. . .\nIf you need to explicitly identify an NaN you can use is.nan()."
  },
  {
    "objectID": "Lectures/Lecture6/CSSS508_Lecture6.html#implicit-nas",
    "href": "Lectures/Lecture6/CSSS508_Lecture6.html#implicit-nas",
    "title": "",
    "section": "Implicit NAs",
    "text": "Implicit NAs\n\nAn implicit missing value is the absence of a presence.\n\n\nWe‚Äôve seen a couple of ways that implicit NAs can be made explicit in previous lectures: pivoting and joining.\n\n\nFor example, if we really look at the dataset below, we can see that there are missing values that don‚Äôt appear as NA merely due to the current structure of the data.\n\nstocks\n\n&gt; # A tibble: 7 √ó 3\n&gt;    year   qtr price\n&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n&gt; 1  2020     1  1.88\n&gt; 2  2020     2  0.59\n&gt; 3  2020     3  0.35\n&gt; 4  2020     4  0.89\n&gt; 5  2021     2  0.34\n&gt; 6  2021     3  0.17\n&gt; 7  2021     4  2.66"
  },
  {
    "objectID": "Lectures/Lecture6/CSSS508_Lecture6.html#implicit-nas-1",
    "href": "Lectures/Lecture6/CSSS508_Lecture6.html#implicit-nas-1",
    "title": "",
    "section": "Implicit NAs",
    "text": "Implicit NAs\ntidyr::complete() allows you to generate explicit missing values by providing a set of variables that define the combination of rows that should exist.\n\n\n\n\nstocks |&gt;\n  complete(year, qtr)\n\n&gt; # A tibble: 8 √ó 3\n&gt;    year   qtr price\n&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n&gt; 1  2020     1  1.88\n&gt; 2  2020     2  0.59\n&gt; 3  2020     3  0.35\n&gt; 4  2020     4  0.89\n&gt; 5  2021     1 NA   \n&gt; 6  2021     2  0.34\n&gt; 7  2021     3  0.17\n&gt; 8  2021     4  2.66\n\n\n\n\n\n\nstocks |&gt;\n  complete(year, qtr, fill = list(price = 0.93))\n\n&gt; # A tibble: 8 √ó 3\n&gt;    year   qtr price\n&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n&gt; 1  2020     1  1.88\n&gt; 2  2020     2  0.59\n&gt; 3  2020     3  0.35\n&gt; 4  2020     4  0.89\n&gt; 5  2021     1  0.93\n&gt; 6  2021     2  0.34\n&gt; 7  2021     3  0.17\n&gt; 8  2021     4  2.66\n\n\n\n\n\n\nThe fill argument of complete only allows you to supply 1 value per variable. If you have more than one value to fill, use complete to create the data structure you need, and case_when to replace NAs would be the most straightforward approach."
  },
  {
    "objectID": "Lectures/Lecture6/CSSS508_Lecture6.html#missing-factor-levels",
    "href": "Lectures/Lecture6/CSSS508_Lecture6.html#missing-factor-levels",
    "title": "",
    "section": "Missing Factor Levels",
    "text": "Missing Factor Levels\n\nThe last type of missingness is a theoretical level of a factor that doesn‚Äôt have any observations.\n\n\nFor instance, we have this health dataset and we‚Äôre interested in smokers:\n\n\n\n\nhealth\n\n&gt; # A tibble: 5 √ó 3\n&gt;   name    smoker   age\n&gt;   &lt;chr&gt;   &lt;fct&gt;  &lt;dbl&gt;\n&gt; 1 Ikaia   no        34\n&gt; 2 Oletta  no        88\n&gt; 3 Leriah  no        75\n&gt; 4 Dashay  no        47\n&gt; 5 Tresaun no        56\n\n\n\n\n\nhealth |&gt; count(smoker)\n\n&gt; # A tibble: 1 √ó 2\n&gt;   smoker     n\n&gt;   &lt;fct&gt;  &lt;int&gt;\n&gt; 1 no         5\n\n\n\n\n\n\n1levels(health$smoker)\n\n\n1\n\nThis dataset only contains non-smokers, but we know that smokers exist; the group of smokers is simply empty.\n\n\n\n\n&gt; [1] \"yes\" \"no\"\n\n\n\n\n   \n\n2health |&gt; count(smoker, .drop = FALSE)\n\n\n2\n\nWe can request count() to keep all the groups, even those not seen in the data by using .drop = FALSE.\n\n\n\n\n&gt; # A tibble: 2 √ó 2\n&gt;   smoker     n\n&gt;   &lt;fct&gt;  &lt;int&gt;\n&gt; 1 yes        0\n&gt; 2 no         5"
  },
  {
    "objectID": "Lectures/Lecture6/CSSS508_Lecture6.html#missing-factors-in-plots",
    "href": "Lectures/Lecture6/CSSS508_Lecture6.html#missing-factors-in-plots",
    "title": "",
    "section": "Missing Factors in Plots",
    "text": "Missing Factors in Plots\nThis sample principle applies when visualizing a factor variable, which will automatically drop levels that don‚Äôt have any values. Use drop_values = FALSE in the appropriate scale to display implicit NAs.\n\n\n\n\nggplot(health, aes(x = smoker)) +\n  geom_bar() +\n  scale_x_discrete() + \n  theme_classic(base_size = 22)\n\n\n\n\n\n\n\n\n\n\n\nggplot(health, aes(x = smoker)) +\n  geom_bar() +\n  scale_x_discrete(drop = FALSE) + \n  theme_classic(base_size = 22)"
  },
  {
    "objectID": "Lectures/Lecture6/CSSS508_Lecture6.html#testing-data-types",
    "href": "Lectures/Lecture6/CSSS508_Lecture6.html#testing-data-types",
    "title": "",
    "section": "Testing Data Types",
    "text": "Testing Data Types\nThere are also functions to test for certain data types:\n\n\nis.numeric(5)\n\n&gt; [1] TRUE\n\nis.character(\"A\")\n\n&gt; [1] TRUE\n\nis.logical(TRUE)\n\n&gt; [1] TRUE\n\nis.infinite(-Inf)\n\n&gt; [1] TRUE\n\nis.na(NA)\n\n&gt; [1] TRUE\n\nis.nan(NaN)\n\n&gt; [1] TRUE"
  },
  {
    "objectID": "Lectures/Lecture6/CSSS508_Lecture6.html#going-deeper-into-the-abyss-aka-nas",
    "href": "Lectures/Lecture6/CSSS508_Lecture6.html#going-deeper-into-the-abyss-aka-nas",
    "title": "",
    "section": "Going deeper into the abyss (aka NAs)",
    "text": "Going deeper into the abyss (aka NAs)\n\n\n\n\n\n\n\nArtwork by @allison_horst"
  },
  {
    "objectID": "Lectures/Lecture6/CSSS508_Lecture6.html#going-deeper-into-the-abyss-aka-nas-1",
    "href": "Lectures/Lecture6/CSSS508_Lecture6.html#going-deeper-into-the-abyss-aka-nas-1",
    "title": "",
    "section": "Going deeper into the abyss (aka NAs)",
    "text": "Going deeper into the abyss (aka NAs)\nA lot has been written about NAs and if they are a feature of your data you‚Äôre likely going to have to spend a great deal of time thinking about how they arose1 and if/how they bias your data.\n\n\n\nThe best package for really exploring your NAs is naniar, which provides tidyverse-style syntax for summarizing, visualizing, and manipulating missing data.\n\nIt provides the following for missing data:\n\na special data structure\nshorthand and numerical summaries (in variables and cases)\nvisualizations\n\n\n\n\n\n\n\n\n\nMissing Completely at Random? Missing at Random? Missing Not at Random? Read more about the differences here."
  },
  {
    "objectID": "Lectures/Lecture6/CSSS508_Lecture6.html#naniar-examples",
    "href": "Lectures/Lecture6/CSSS508_Lecture6.html#naniar-examples",
    "title": "",
    "section": "naniar examples",
    "text": "naniar examples\n\n\n\n\n\n\n\n\n\nSee more here."
  },
  {
    "objectID": "Lectures/Lecture6/CSSS508_Lecture6.html#visdat-example",
    "href": "Lectures/Lecture6/CSSS508_Lecture6.html#visdat-example",
    "title": "",
    "section": "visdat example",
    "text": "visdat example\n\nlibrary(visdat)\nvis_dat(airquality)\n\n\n\n\n\n\n\n\n\n\n\n\nYou can read more about this package and its functionality here. For an tidy-style approach for imputing missing values check out the simputation package."
  },
  {
    "objectID": "Lectures/Lecture6/CSSS508_Lecture6.html#making-vectors",
    "href": "Lectures/Lecture6/CSSS508_Lecture6.html#making-vectors",
    "title": "",
    "section": "Making Vectors",
    "text": "Making Vectors\nIn R, we call a set of values of the same type a vector. We can create vectors using the c() function (‚Äúc‚Äù for combine or concatenate).\n\nc(1, 3, 7, -0.5)\n\n&gt; [1]  1.0  3.0  7.0 -0.5\n\n\n\nVectors have one dimension: length\n\nlength(c(1, 3, 7, -0.5))\n\n&gt; [1] 4\n\n\n\n\nAll elements of a vector are the same type (e.g.¬†numeric or character)!\n\n\nCharacter data is the lowest denomination so anything mixed with it will be converted to a character."
  },
  {
    "objectID": "Lectures/Lecture6/CSSS508_Lecture6.html#generating-numeric-vectors",
    "href": "Lectures/Lecture6/CSSS508_Lecture6.html#generating-numeric-vectors",
    "title": "",
    "section": "Generating Numeric Vectors",
    "text": "Generating Numeric Vectors\nThere are shortcuts for generating numeric vectors:\n\n1:10\n\n&gt;  [1]  1  2  3  4  5  6  7  8  9 10\n\n\n\n\n1seq(-3, 6, by = 1.75)\n\n\n1\n\nSequence from -3 to 6, increments of 1.75\n\n\n\n\n&gt; [1] -3.00 -1.25  0.50  2.25  4.00  5.75\n\n\n\n\n\n2rep(c(0, 1), times = 3)\n3rep(c(0, 1), each = 3)\n4rep(c(0, 1), length.out = 3)\n\n\n2\n\nRepeat c(0, 1) 3 times.\n\n3\n\nRepeat each element 3 times.\n\n4\n\nRepeat c(0, 1) until the length of the final vector is 3.\n\n\n\n\n&gt; [1] 0 1 0 1 0 1\n&gt; [1] 0 0 0 1 1 1\n&gt; [1] 0 1 0\n\n\n\n\nYou can also assign values to a vector using Base R indexing rules.\n\n\n\nx &lt;- c(3, 6, 2, 9, 5)\nx[6] &lt;- 8\nx\n\n&gt; [1] 3 6 2 9 5 8\n\nx[c(7, 8)] &lt;- c(9, 9)\nx\n\n&gt; [1] 3 6 2 9 5 8 9 9"
  },
  {
    "objectID": "Lectures/Lecture6/CSSS508_Lecture6.html#element-wise-vector-math",
    "href": "Lectures/Lecture6/CSSS508_Lecture6.html#element-wise-vector-math",
    "title": "",
    "section": "Element-wise Vector Math",
    "text": "Element-wise Vector Math\nWhen doing arithmetic operations on vectors, R handles these element-wise:\n\nc(1, 2, 3) + c(4, 5, 6)\n\n&gt; [1] 5 7 9\n\n\n\n1c(1, 2, 3, 4)^3\n\n\n1\n\nExponentiation is carried out using the ^ operator.\n\n\n\n\n&gt; [1]  1  8 27 64\n\n\n\nOther common operations: *, /, exp() = e^x, log() = \\log_e(x)"
  },
  {
    "objectID": "Lectures/Lecture6/CSSS508_Lecture6.html#recycling-rules",
    "href": "Lectures/Lecture6/CSSS508_Lecture6.html#recycling-rules",
    "title": "",
    "section": "Recycling Rules",
    "text": "Recycling Rules\nR handles mismatched lengths of vectors by recycling, or repeating, the short vector.\n\n\nx &lt;- c(1, 2, 10, 20)\n1x / 5\n\n\n1\n\nThis is shorthand for: x / c(5, 5, 5, 5)\n\n\n\n\n&gt; [1] 0.2 0.4 2.0 4.0\n\n\n\n\nYou generally only want to recycle scalars, or vectors the length 1. Technically, however, R will recycle any vector that‚Äôs shorter in length (and it won‚Äôt always give you a warning that that‚Äôs what it‚Äôs doing, i.e.¬†if the longer vector is not a multiple of the shorter vector).\n\n\n\nx * c(1, 2)\n\n&gt; [1]  1  4 10 40\n\nx * c(1, 2, 3)\n\n&gt; Warning in x * c(1, 2, 3): longer object length is not a multiple of shorter\n&gt; object length\n\n\n&gt; [1]  1  4 30 20"
  },
  {
    "objectID": "Lectures/Lecture6/CSSS508_Lecture6.html#recycling-with-logicals",
    "href": "Lectures/Lecture6/CSSS508_Lecture6.html#recycling-with-logicals",
    "title": "",
    "section": "Recycling with Logicals",
    "text": "Recycling with Logicals\nThe same rules apply to logical operations which can lead to unexpected results without warning.\n\nFor example, take this code which attempts to find all flights in January and February:\n\nflights |&gt; \n1  filter(month == c(1, 2)) |&gt;\n  head(5)\n\n\n1\n\nA common mistake is to mix up == with %in%. This code will actually find flights in odd numbered rows that departed in January and flights in even numbered rows that departed in February. Unfortunately there‚Äôs no warning because flights has an even number of rows.\n\n\n\n\n&gt; # A tibble: 5 √ó 19\n&gt;    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n&gt;   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n&gt; 1  2013     1     1      517            515         2      830            819\n&gt; 2  2013     1     1      542            540         2      923            850\n&gt; 3  2013     1     1      554            600        -6      812            837\n&gt; 4  2013     1     1      555            600        -5      913            854\n&gt; 5  2013     1     1      557            600        -3      838            846\n&gt; # ‚Ñπ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n&gt; #   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n&gt; #   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\n\n\nTo protect you from this type of silent failure, most tidyverse functions use a stricter form of recycling that only recycles single values. However, when using base R functions like ==, this protection is not built in."
  },
  {
    "objectID": "Lectures/Lecture6/CSSS508_Lecture6.html#example-standardizing-data",
    "href": "Lectures/Lecture6/CSSS508_Lecture6.html#example-standardizing-data",
    "title": "",
    "section": "Example: Standardizing Data",
    "text": "Example: Standardizing Data\nLet‚Äôs say we had some test scores and we wanted to put these on a standardized scale:\nz_i = \\frac{x_i - \\text{mean}(x)}{\\text{SD}(x)}\n\n\nx &lt;- c(97, 68, 75, 77, 69, 81)\n1z &lt;- (x - mean(x)) / sd(x)\nround(z, 2)\n\n\n1\n\nBoth mean(x) and sd(x) are scalars that will be recycled for every value in x to produce the standardization we want.\n\n\n\n\n&gt; [1]  1.81 -0.93 -0.27 -0.08 -0.83  0.30"
  },
  {
    "objectID": "Lectures/Lecture6/CSSS508_Lecture6.html#math-with-missing-values",
    "href": "Lectures/Lecture6/CSSS508_Lecture6.html#math-with-missing-values",
    "title": "",
    "section": "Math with Missing Values",
    "text": "Math with Missing Values\n\n\n\nEven one NA ‚Äúpoisons the well‚Äù\n\n\n\n\nYou‚Äôll get NA out of your calculations unless you add the extra argument na.rm = TRUE (available in some functions):\n\n\n\nvector_w_missing &lt;- c(1, 2, NA, 4, 5, 6, NA)\nmean(vector_w_missing)\n\n&gt; [1] NA\n\nmean(vector_w_missing, na.rm = TRUE)\n\n&gt; [1] 3.6"
  },
  {
    "objectID": "Lectures/Lecture6/CSSS508_Lecture6.html#subsetting-vectors",
    "href": "Lectures/Lecture6/CSSS508_Lecture6.html#subsetting-vectors",
    "title": "",
    "section": "Subsetting Vectors",
    "text": "Subsetting Vectors\nRecall, we can subset a vector in a number of ways:\n\nPassing a single index or vector of entries to keep:\n\n\nfirst_names &lt;- c(\"Andre\", \"Brady\", \"Cecilia\", \"Danni\", \"Edgar\", \"Francie\")\nfirst_names[c(1, 2)]\n\n&gt; [1] \"Andre\" \"Brady\"\n\n\n\n\nPassing a single index or vector of entries to drop:\n\n\nfirst_names[-3]\n\n&gt; [1] \"Andre\"   \"Brady\"   \"Danni\"   \"Edgar\"   \"Francie\"\n\n\n\n\n\nPassing a logical condition:\n\n\n1first_names[nchar(first_names) == 7]\n\n\n1\n\nnchar() counts the number of characters in a character string.\n\n\n\n\n&gt; [1] \"Cecilia\" \"Francie\"\n\n\n\n\n\nPassing a named vector:\n\n\npet_names &lt;- c(dog = \"Lemon\", cat = \"Seamus\")\npet_names[\"cat\"]\n\n&gt;      cat \n&gt; \"Seamus\""
  },
  {
    "objectID": "Lectures/Lecture6/CSSS508_Lecture6.html#matrices-two-dimensions",
    "href": "Lectures/Lecture6/CSSS508_Lecture6.html#matrices-two-dimensions",
    "title": "",
    "section": "Matrices: Two Dimensions",
    "text": "Matrices: Two Dimensions\nMatrices extend vectors to two dimensions: rows and columns. Use matrix() to construct them directly.\n\nR fills in a matrix column-by-column (not row-by-row!)\n\na_matrix &lt;- matrix(first_names, nrow = 2, ncol = 3)\na_matrix\n\n&gt;      [,1]    [,2]      [,3]     \n&gt; [1,] \"Andre\" \"Cecilia\" \"Edgar\"  \n&gt; [2,] \"Brady\" \"Danni\"   \"Francie\"\n\n\n\n\nSimilar to vectors, you can make assignments using Base R indexing methods.\n\n\n\na_matrix[1, c(1:3)] &lt;- c(\"Hakim\", \"Tony\", \"Eduardo\")\na_matrix\n\n&gt;      [,1]    [,2]    [,3]     \n&gt; [1,] \"Hakim\" \"Tony\"  \"Eduardo\"\n&gt; [2,] \"Brady\" \"Danni\" \"Francie\"\n\n\n\n\nHowever, you can‚Äôt add rows or columns to a matrix in this way. You can only reassign already-existing cell values.\n\na_matrix[3, c(1:3)] &lt;- c(\"Lucille\", \"Hanif\", \"June\")\n\n&gt; Error in `[&lt;-`(`*tmp*`, 3, c(1:3), value = c(\"Lucille\", \"Hanif\", \"June\": subscript out of bounds"
  },
  {
    "objectID": "Lectures/Lecture6/CSSS508_Lecture6.html#binding-vectors",
    "href": "Lectures/Lecture6/CSSS508_Lecture6.html#binding-vectors",
    "title": "",
    "section": "Binding Vectors",
    "text": "Binding Vectors\nWe can also make matrices by binding vectors together with rbind() (row bind) and cbind() (column bind).\n\n\nb_matrix &lt;- rbind(c(1, 2, 3), c(4, 5, 6))\nb_matrix\n\n&gt;      [,1] [,2] [,3]\n&gt; [1,]    1    2    3\n&gt; [2,]    4    5    6\n\nc_matrix &lt;- cbind(c(1, 2), c(3, 4), c(5, 6))\nc_matrix\n\n&gt;      [,1] [,2] [,3]\n&gt; [1,]    1    3    5\n&gt; [2,]    2    4    6"
  },
  {
    "objectID": "Lectures/Lecture6/CSSS508_Lecture6.html#subsetting-matrices",
    "href": "Lectures/Lecture6/CSSS508_Lecture6.html#subsetting-matrices",
    "title": "",
    "section": "Subsetting Matrices",
    "text": "Subsetting Matrices\nWe subset matrices using the same methods as with vectors, except we index them with [rows, columns]1:\n\na_matrix\n\n&gt;      [,1]    [,2]    [,3]     \n&gt; [1,] \"Hakim\" \"Tony\"  \"Eduardo\"\n&gt; [2,] \"Brady\" \"Danni\" \"Francie\"\n\n\n\n\n1a_matrix[1, 2]\n\n\n1\n\nRow 1, Column 2.\n\n\n\n\n&gt; [1] \"Tony\"\n\n\n\n2a_matrix[1, c(2,3)]\n\n\n2\n\nRow 1, Columns 2 and 3.\n\n\n\n\n&gt; [1] \"Tony\"    \"Eduardo\"\n\n\n\n\nWe can obtain the dimensions of a matrix using dim().\n\ndim(a_matrix)\n\n&gt; [1] 2 3\n\n\n\nLike we learned how to do with dataframes in week 3."
  },
  {
    "objectID": "Lectures/Lecture6/CSSS508_Lecture6.html#matrices-becoming-vectors",
    "href": "Lectures/Lecture6/CSSS508_Lecture6.html#matrices-becoming-vectors",
    "title": "",
    "section": "Matrices Becoming Vectors",
    "text": "Matrices Becoming Vectors\nIf a matrix ends up having just one row or column after subsetting, by default R will make it into a vector.\n\n\na_matrix[, 1] \n\n&gt; [1] \"Hakim\" \"Brady\"\n\n\n\n\nYou can prevent this behavior using drop = FALSE.\n\na_matrix[, 1, drop = FALSE] \n\n&gt;      [,1]   \n&gt; [1,] \"Hakim\"\n&gt; [2,] \"Brady\""
  },
  {
    "objectID": "Lectures/Lecture6/CSSS508_Lecture6.html#matrix-data-type-warning",
    "href": "Lectures/Lecture6/CSSS508_Lecture6.html#matrix-data-type-warning",
    "title": "",
    "section": "Matrix Data Type Warning",
    "text": "Matrix Data Type Warning\nMatrices can contain numeric, integer, factor, character, or logical. But just like vectors, all elements must be the same data type.\n\n\nbad_matrix &lt;- cbind(1:2, c(\"Victoria\", \"Sass\"))\nbad_matrix\n\n&gt;      [,1] [,2]      \n&gt; [1,] \"1\"  \"Victoria\"\n&gt; [2,] \"2\"  \"Sass\"\n\n\n\n\nIn this case, everything was converted to characters!"
  },
  {
    "objectID": "Lectures/Lecture6/CSSS508_Lecture6.html#matrix-dimension-names",
    "href": "Lectures/Lecture6/CSSS508_Lecture6.html#matrix-dimension-names",
    "title": "",
    "section": "Matrix Dimension Names",
    "text": "Matrix Dimension Names\nWe can access dimension names or name them ourselves:\n\n\nrownames(bad_matrix) &lt;- c(\"First\", \"Last\")\ncolnames(bad_matrix) &lt;- c(\"Number\", \"Name\")\nbad_matrix\n\n&gt;       Number Name      \n&gt; First \"1\"    \"Victoria\"\n&gt; Last  \"2\"    \"Sass\"\n\n\n\n1bad_matrix[ ,\"Name\", drop = FALSE]\n\n\n1\n\ndrop = FALSE maintains the matrix structure; when drop = TRUE (the default) it will be converted to a vector.\n\n\n\n\n&gt;       Name      \n&gt; First \"Victoria\"\n&gt; Last  \"Sass\""
  },
  {
    "objectID": "Lectures/Lecture6/CSSS508_Lecture6.html#matrix-arithmetic",
    "href": "Lectures/Lecture6/CSSS508_Lecture6.html#matrix-arithmetic",
    "title": "",
    "section": "Matrix Arithmetic",
    "text": "Matrix Arithmetic\nMatrices of the same dimensions can have math performed element-wise with the usual arithmetic operators:\n\n\nmatrix(c(2, 4, 6, 8),nrow = 2, ncol = 2) / matrix(c(2, 1, 3, 1),nrow = 2, ncol = 2)\n\n&gt;      [,1] [,2]\n&gt; [1,]    1    2\n&gt; [2,]    4    8"
  },
  {
    "objectID": "Lectures/Lecture6/CSSS508_Lecture6.html#proper-matrix-math",
    "href": "Lectures/Lecture6/CSSS508_Lecture6.html#proper-matrix-math",
    "title": "",
    "section": "‚ÄúProper‚Äù Matrix Math",
    "text": "‚ÄúProper‚Äù Matrix Math\nTo do matrix transpositions, use t().\n\n\nc_matrix\n\n&gt;      [,1] [,2] [,3]\n&gt; [1,]    1    3    5\n&gt; [2,]    2    4    6\n\ne_matrix &lt;- t(c_matrix)\ne_matrix\n\n&gt;      [,1] [,2]\n&gt; [1,]    1    2\n&gt; [2,]    3    4\n&gt; [3,]    5    6\n\n\n\n\nTo do actual matrix multiplication1 (not element-wise), use %*%.\n\n\n\nf_matrix &lt;- c_matrix %*% e_matrix \nf_matrix\n\n&gt;      [,1] [,2]\n&gt; [1,]   35   44\n&gt; [2,]   44   56\n\n\n\n\n\n\n1. A reminder of how to do matrix multiplication :)"
  },
  {
    "objectID": "Lectures/Lecture6/CSSS508_Lecture6.html#proper-matrix-math-1",
    "href": "Lectures/Lecture6/CSSS508_Lecture6.html#proper-matrix-math-1",
    "title": "",
    "section": "‚ÄúProper‚Äù Matrix Math",
    "text": "‚ÄúProper‚Äù Matrix Math\nTo invert an invertible square matrix1, use solve().\n\n\ng_matrix &lt;- solve(f_matrix)\ng_matrix\n\n&gt;           [,1]      [,2]\n&gt; [1,]  2.333333 -1.833333\n&gt; [2,] -1.833333  1.458333\n\n\n\n\n\n\n\n\n\nA reminder of how to invert a 2x2 square matrix."
  },
  {
    "objectID": "Lectures/Lecture6/CSSS508_Lecture6.html#matrices-vs.-data.frames-and-tibbles",
    "href": "Lectures/Lecture6/CSSS508_Lecture6.html#matrices-vs.-data.frames-and-tibbles",
    "title": "",
    "section": "Matrices vs.¬†Data.frames and Tibbles",
    "text": "Matrices vs.¬†Data.frames and Tibbles\nAll of these structures display data in two dimensions\n\n\n\n\nmatrix\n\nBase R\nSingle data type allowed\n\n\n\n\ndata.frame\n\nBase R\nStores multiple data types\nDefault for data storage\n\n\n\n\ntibbles\n\ntidyverse\nStores multiple data types\nDisplays nicely\n\n\n\n\n\nIn practice, data.frames and tibbles are very similar!"
  },
  {
    "objectID": "Lectures/Lecture6/CSSS508_Lecture6.html#creating-data.frames-or-tibbles",
    "href": "Lectures/Lecture6/CSSS508_Lecture6.html#creating-data.frames-or-tibbles",
    "title": "",
    "section": "Creating data.frames or tibbles",
    "text": "Creating data.frames or tibbles\nWe can create a data.frame or tibble by specifying the columns separately, as individual vectors:\n\n\n\n\ndata.frame(Column1 = c(1, 2, 3),\n           Column2 = c(\"A\", \"B\", \"C\"))\n\n&gt;   Column1 Column2\n&gt; 1       1       A\n&gt; 2       2       B\n&gt; 3       3       C\n\n\n\n\ntibble(Column1 = c(1, 2, 3),\n       Column2 = c(\"A\", \"B\", \"C\"))\n\n&gt; # A tibble: 3 √ó 2\n&gt;   Column1 Column2\n&gt;     &lt;dbl&gt; &lt;chr&gt;  \n&gt; 1       1 A      \n&gt; 2       2 B      \n&gt; 3       3 C\n\n\n\n\n\nNote: data.frames and tibbles allow for mixed data types!\n\n\nThis distinction leads us to the final data type, of which data.frames and tibbles are a particular subset.\n\n\n\ntibble‚Äôs additional advantages are only displaying the first 10 rows and only the columns that will comfortably fit within the parameters of your console space when called (data.frame will display all columns and a certain number of rows depending upon your default max setting - usually this is an overwhelming amount of output, aesthetically confusing, and not very helpful)."
  },
  {
    "objectID": "Lectures/Lecture6/CSSS508_Lecture6.html#what-are-lists",
    "href": "Lectures/Lecture6/CSSS508_Lecture6.html#what-are-lists",
    "title": "",
    "section": "What are Lists?",
    "text": "What are Lists?\n\nLists are objects that can store multiple types of data.\n\n\n\nmy_list &lt;- list(first_thing = 1:5,\n                second_thing = matrix(8:11, nrow = 2), \n                third_thing = fct(c(\"apple\", \"pear\", \"banana\", \"apple\", \"apple\")))\nmy_list\n\n&gt; $first_thing\n&gt; [1] 1 2 3 4 5\n&gt; \n&gt; $second_thing\n&gt;      [,1] [,2]\n&gt; [1,]    8   10\n&gt; [2,]    9   11\n&gt; \n&gt; $third_thing\n&gt; [1] apple  pear   banana apple  apple \n&gt; Levels: apple pear banana"
  },
  {
    "objectID": "Lectures/Lecture6/CSSS508_Lecture6.html#accessing-list-elements",
    "href": "Lectures/Lecture6/CSSS508_Lecture6.html#accessing-list-elements",
    "title": "",
    "section": "Accessing List Elements",
    "text": "Accessing List Elements\nYou can access a list element by its name or number in [[ ]], or a $ followed by its name:\n\n\nmy_list[[\"first_thing\"]]\n\n&gt; [1] 1 2 3 4 5\n\nmy_list[[1]]\n\n&gt; [1] 1 2 3 4 5\n\nmy_list$first_thing\n\n&gt; [1] 1 2 3 4 5"
  },
  {
    "objectID": "Lectures/Lecture6/CSSS508_Lecture6.html#why-two-brackets",
    "href": "Lectures/Lecture6/CSSS508_Lecture6.html#why-two-brackets",
    "title": "",
    "section": "Why Two Brackets [[ ]]?",
    "text": "Why Two Brackets [[ ]]?\nDouble brackets get the actual element ‚Äî as whatever data type it is stored as, in that location in the list.\n\n\nstr(my_list[[1]])\n\n&gt;  int [1:5] 1 2 3 4 5\n\n\n\n\nIf you use single brackets to access list elements, you get a list back.\n\nstr(my_list[1])\n\n&gt; List of 1\n&gt;  $ first_thing: int [1:5] 1 2 3 4 5"
  },
  {
    "objectID": "Lectures/Lecture6/CSSS508_Lecture6.html#names-and-list-elements",
    "href": "Lectures/Lecture6/CSSS508_Lecture6.html#names-and-list-elements",
    "title": "",
    "section": "names() and List Elements",
    "text": "names() and List Elements\nYou can use names() to get a vector of list element names:\n\n\nnames(my_list)\n\n&gt; [1] \"first_thing\"  \"second_thing\" \"third_thing\""
  },
  {
    "objectID": "Lectures/Lecture6/CSSS508_Lecture6.html#pluck",
    "href": "Lectures/Lecture6/CSSS508_Lecture6.html#pluck",
    "title": "",
    "section": "pluck()",
    "text": "pluck()\nAn alternative to using Base R‚Äôs [[ ]] is using pluck() from the tidyverse‚Äôs purrr package.\n\n\n\n\nobj1 &lt;- list(\"a\", list(1, elt = \"foo\"))\nobj2 &lt;- list(\"b\", list(2, elt = \"bar\"))\nx &lt;- list(obj1, obj2)\nx\n\n&gt; [[1]]\n&gt; [[1]][[1]]\n&gt; [1] \"a\"\n&gt; \n&gt; [[1]][[2]]\n&gt; [[1]][[2]][[1]]\n&gt; [1] 1\n&gt; \n&gt; [[1]][[2]]$elt\n&gt; [1] \"foo\"\n&gt; \n&gt; \n&gt; \n&gt; [[2]]\n&gt; [[2]][[1]]\n&gt; [1] \"b\"\n&gt; \n&gt; [[2]][[2]]\n&gt; [[2]][[2]][[1]]\n&gt; [1] 2\n&gt; \n&gt; [[2]][[2]]$elt\n&gt; [1] \"bar\"\n\n\n\n\n\npluck(x, 1) \n\n&gt; [[1]]\n&gt; [1] \"a\"\n&gt; \n&gt; [[2]]\n&gt; [[2]][[1]]\n&gt; [1] 1\n&gt; \n&gt; [[2]]$elt\n&gt; [1] \"foo\"\n\n\n\nThis is the same as same as x[[1]]."
  },
  {
    "objectID": "Lectures/Lecture6/CSSS508_Lecture6.html#pluck-1",
    "href": "Lectures/Lecture6/CSSS508_Lecture6.html#pluck-1",
    "title": "",
    "section": "pluck()",
    "text": "pluck()\nAn alternative to using Base R‚Äôs [[ ]] is using pluck() from the tidyverse‚Äôs purrr package.\n\n\n\nobj1 &lt;- list(\"a\", list(1, elt = \"foo\"))\nobj2 &lt;- list(\"b\", list(2, elt = \"bar\"))\nx &lt;- list(obj1, obj2)\nx\n\n&gt; [[1]]\n&gt; [[1]][[1]]\n&gt; [1] \"a\"\n&gt; \n&gt; [[1]][[2]]\n&gt; [[1]][[2]][[1]]\n&gt; [1] 1\n&gt; \n&gt; [[1]][[2]]$elt\n&gt; [1] \"foo\"\n&gt; \n&gt; \n&gt; \n&gt; [[2]]\n&gt; [[2]][[1]]\n&gt; [1] \"b\"\n&gt; \n&gt; [[2]][[2]]\n&gt; [[2]][[2]][[1]]\n&gt; [1] 2\n&gt; \n&gt; [[2]][[2]]$elt\n&gt; [1] \"bar\"\n\n\n\n\npluck(x, 1, 2) \n\n&gt; [[1]]\n&gt; [1] 1\n&gt; \n&gt; $elt\n&gt; [1] \"foo\"\n\n\n\nThis is the same as x[[1]][[2]]."
  },
  {
    "objectID": "Lectures/Lecture6/CSSS508_Lecture6.html#pluck-2",
    "href": "Lectures/Lecture6/CSSS508_Lecture6.html#pluck-2",
    "title": "",
    "section": "pluck()",
    "text": "pluck()\nAn alternative to using Base R‚Äôs [[ ]] is using pluck() from the tidyverse‚Äôs purrr package.\n\n\n\nobj1 &lt;- list(\"a\", list(1, elt = \"foo\"))\nobj2 &lt;- list(\"b\", list(2, elt = \"bar\"))\nx &lt;- list(obj1, obj2)\nx\n\n&gt; [[1]]\n&gt; [[1]][[1]]\n&gt; [1] \"a\"\n&gt; \n&gt; [[1]][[2]]\n&gt; [[1]][[2]][[1]]\n&gt; [1] 1\n&gt; \n&gt; [[1]][[2]]$elt\n&gt; [1] \"foo\"\n&gt; \n&gt; \n&gt; \n&gt; [[2]]\n&gt; [[2]][[1]]\n&gt; [1] \"b\"\n&gt; \n&gt; [[2]][[2]]\n&gt; [[2]][[2]][[1]]\n&gt; [1] 2\n&gt; \n&gt; [[2]][[2]]$elt\n&gt; [1] \"bar\"\n\n\n\n\npluck(x, 1, 2, \"elt\") \n\n&gt; [1] \"foo\"\n\n\n\nYou can supply names to index into named vectors as well. This is the same as calling x[[1]][[2]][[\"elt\"]]."
  },
  {
    "objectID": "Lectures/Lecture6/CSSS508_Lecture6.html#example-regression-output",
    "href": "Lectures/Lecture6/CSSS508_Lecture6.html#example-regression-output",
    "title": "",
    "section": "Example: Regression Output",
    "text": "Example: Regression Output\nWhen you perform linear regression in R, the output is a list!\n\n\nlm_output &lt;- lm(speed ~ dist, data = cars)\nis.list(lm_output)\n\n&gt; [1] TRUE\n\nnames(lm_output)\n\n&gt;  [1] \"coefficients\"  \"residuals\"     \"effects\"       \"rank\"         \n&gt;  [5] \"fitted.values\" \"assign\"        \"qr\"            \"df.residual\"  \n&gt;  [9] \"xlevels\"       \"call\"          \"terms\"         \"model\"\n\nlm_output$coefficients\n\n&gt; (Intercept)        dist \n&gt;   8.2839056   0.1655676"
  },
  {
    "objectID": "Lectures/Lecture6/CSSS508_Lecture6.html#data-structures-in-r-overview",
    "href": "Lectures/Lecture6/CSSS508_Lecture6.html#data-structures-in-r-overview",
    "title": "",
    "section": "Data Structures in R Overview",
    "text": "Data Structures in R Overview"
  },
  {
    "objectID": "Lectures/Lecture6/CSSS508_Lecture6.html#data-structures-in-r-overview-1",
    "href": "Lectures/Lecture6/CSSS508_Lecture6.html#data-structures-in-r-overview-1",
    "title": "",
    "section": "Data Structures in R Overview",
    "text": "Data Structures in R Overview"
  },
  {
    "objectID": "Lectures/Lecture6/CSSS508_Lecture6.html#matrices-and-lists",
    "href": "Lectures/Lecture6/CSSS508_Lecture6.html#matrices-and-lists",
    "title": "",
    "section": "Matrices and Lists",
    "text": "Matrices and Lists\n\nWrite code to create the following matrix:\n\n\n\n&gt;      [,1] [,2] [,3]\n&gt; [1,] \"A\"  \"B\"  \"C\" \n&gt; [2,] \"D\"  \"E\"  \"F\"\n\n\n\nWrite a line of code to extract the second column. Ensure the output is still a matrix.\n\n\n\n&gt;      [,1]\n&gt; [1,] \"B\" \n&gt; [2,] \"E\"\n\n\n\nComplete the following sentence: ‚ÄúLists are to vectors, what data frames are to‚Ä¶‚Äù\nCreate a list that contains 3 elements:\n\nten_numbers (integers between 1 and 10)\nmy_name (your name as a character)\nbooleans (vector of TRUE and FALSE alternating three times)"
  },
  {
    "objectID": "Lectures/Lecture6/CSSS508_Lecture6.html#answers",
    "href": "Lectures/Lecture6/CSSS508_Lecture6.html#answers",
    "title": "",
    "section": "Answers",
    "text": "Answers\n1. Write code to create the following matrix:\n\nmatrix_test &lt;- matrix(c(\"A\", \"B\", \"C\", \"D\", \"E\", \"F\"), nrow = 2, byrow = TRUE)\nmatrix_test\n\n&gt;      [,1] [,2] [,3]\n&gt; [1,] \"A\"  \"B\"  \"C\" \n&gt; [2,] \"D\"  \"E\"  \"F\"\n\n\n\n2. Write a line of code to extract the second column. Ensure the output is still a matrix.\n\nmatrix_test[ ,2, drop = FALSE]\n\n&gt;      [,1]\n&gt; [1,] \"B\" \n&gt; [2,] \"E\""
  },
  {
    "objectID": "Lectures/Lecture6/CSSS508_Lecture6.html#answers-1",
    "href": "Lectures/Lecture6/CSSS508_Lecture6.html#answers-1",
    "title": "",
    "section": "Answers",
    "text": "Answers\n3. Complete the following sentence: ‚ÄúLists are to vectors, what data frames are to‚Ä¶Matrices!1‚Äù\n\n4. Create a list that contains 3 elements:\n\nmy_new_list &lt;- list(ten_numbers = 1:10,\n                    my_name = \"Victoria Sass\",\n                    booleans = rep(c(TRUE, FALSE), times = 3))\nmy_new_list\n\n&gt; $ten_numbers\n&gt;  [1]  1  2  3  4  5  6  7  8  9 10\n&gt; \n&gt; $my_name\n&gt; [1] \"Victoria Sass\"\n&gt; \n&gt; $booleans\n&gt; [1]  TRUE FALSE  TRUE FALSE  TRUE FALSE\n\n\n\nLists and data frames can contain mixed data types, while vectors and matrices can only contain one data type. Additionally, lists and vectors are technically one dimension while matrices and dataframes are two dimensions."
  },
  {
    "objectID": "Lectures/Lecture1/quarto_anatomy.html",
    "href": "Lectures/Lecture1/quarto_anatomy.html",
    "title": "ggplot2 demo",
    "section": "",
    "text": "Figure¬†1 further explores the impact of temperature on ozone level.\n\n\nCode\nlibrary(ggplot2)\nggplot(airquality, aes(Temp, Ozone)) + \n  geom_point() + \n  geom_smooth(method = \"loess\")\n\n\n\n\n\n\n\n\nFigure¬†1: Temperature and ozone level."
  },
  {
    "objectID": "Lectures/Lecture1/quarto_anatomy.html#air-quality",
    "href": "Lectures/Lecture1/quarto_anatomy.html#air-quality",
    "title": "ggplot2 demo",
    "section": "",
    "text": "Figure¬†1 further explores the impact of temperature on ozone level.\n\n\nCode\nlibrary(ggplot2)\nggplot(airquality, aes(Temp, Ozone)) + \n  geom_point() + \n  geom_smooth(method = \"loess\")\n\n\n\n\n\n\n\n\nFigure¬†1: Temperature and ozone level."
  },
  {
    "objectID": "Lectures/Lecture8/scratch.html",
    "href": "Lectures/Lecture8/scratch.html",
    "title": "Using functions with apply()",
    "section": "",
    "text": "double_x &lt;- function(x){\n  double_x &lt;- x * 2\n  return(double_x)\n}\n\n. . .\nLet‚Äôs run it!\n\ndouble_x(5)\n\n[1] 10\n\ndouble_x(NA)\n\n[1] NA\n\ndouble_x(1:2)\n\n[1] 2 4"
  },
  {
    "objectID": "Lectures/Lecture8/scratch.html#example-1-doubling-a-number",
    "href": "Lectures/Lecture8/scratch.html#example-1-doubling-a-number",
    "title": "Using functions with apply()",
    "section": "",
    "text": "double_x &lt;- function(x){\n  double_x &lt;- x * 2\n  return(double_x)\n}\n\n. . .\nLet‚Äôs run it!\n\ndouble_x(5)\n\n[1] 10\n\ndouble_x(NA)\n\n[1] NA\n\ndouble_x(1:2)\n\n[1] 2 4"
  },
  {
    "objectID": "Lectures/Lecture8/scratch.html#example-2-extract-firstlast",
    "href": "Lectures/Lecture8/scratch.html#example-2-extract-firstlast",
    "title": "Using functions with apply()",
    "section": "Example 2: Extract First/Last",
    "text": "Example 2: Extract First/Last\n\nfirst_and_last &lt;- function(x) {\n    first &lt;- x[1]\n    last  &lt;- x[length(x)]\n    return(c(\"first\" = first, \"last\" = last))\n}\n\n. . .\nTest it out:\n\nfirst_and_last(c(4, 3, 1, 8))\n\nfirst  last \n    4     8"
  },
  {
    "objectID": "Lectures/Lecture8/scratch.html#example-2-testing-first_and_last",
    "href": "Lectures/Lecture8/scratch.html#example-2-testing-first_and_last",
    "title": "Using functions with apply()",
    "section": "Example 2: Testing first_and_last",
    "text": "Example 2: Testing first_and_last\nWhat if I give first_and_last() a vector of length 1?\n\nfirst_and_last(7)\n\nfirst  last \n    7     7 \n\n\n. . .\nOf length 0?\n\nfirst_and_last(numeric(0))\n\nfirst \n   NA \n\n\n. . .\nMaybe we want it to be a little smarter."
  },
  {
    "objectID": "Lectures/Lecture8/scratch.html#example-3-checking-inputs",
    "href": "Lectures/Lecture8/scratch.html#example-3-checking-inputs",
    "title": "Using functions with apply()",
    "section": "Example 3: Checking Inputs",
    "text": "Example 3: Checking Inputs\nLet‚Äôs make sure we get an error message when the vector is too small:\n\nsmarter_first_and_last &lt;- function(x) {\n    if(length(x) &lt; 2){\n      stop(\"Input is not long enough!\")\n    } else{\n      first &lt;- x[1]\n      last  &lt;- x[length(x)]\n      return(c(\"first\" = first, \"last\" = last))    \n    }\n}\n\n\n\nstop() ceases running the function and prints the text inside as an error message."
  },
  {
    "objectID": "Lectures/Lecture8/scratch.html#example-3-testing-smarter-function",
    "href": "Lectures/Lecture8/scratch.html#example-3-testing-smarter-function",
    "title": "Using functions with apply()",
    "section": "Example 3: Testing Smarter Function",
    "text": "Example 3: Testing Smarter Function\n\nsmarter_first_and_last(NA)\n\nError in smarter_first_and_last(NA): Input is not long enough!\n\nsmarter_first_and_last(c(4, 3, 1, 8))\n\nfirst  last \n    4     8 \n\n\n. . ."
  },
  {
    "objectID": "Lectures/Lecture8/scratch.html#cracking-open-functions",
    "href": "Lectures/Lecture8/scratch.html#cracking-open-functions",
    "title": "Using functions with apply()",
    "section": "Cracking Open Functions",
    "text": "Cracking Open Functions\nIf you type a function name without any parentheses or arguments, you can see its contents:\n\nsmarter_first_and_last\n\nfunction (x) \n{\n    if (length(x) &lt; 2) {\n        stop(\"Input is not long enough!\")\n    }\n    else {\n        first &lt;- x[1]\n        last &lt;- x[length(x)]\n        return(c(first = first, last = last))\n    }\n}\n&lt;bytecode: 0x14703f4f8&gt;"
  },
  {
    "objectID": "Lectures/Lecture8/scratch.html#applying-functions-multiple-times",
    "href": "Lectures/Lecture8/scratch.html#applying-functions-multiple-times",
    "title": "Using functions with apply()",
    "section": "Applying Functions Multiple Times?",
    "text": "Applying Functions Multiple Times?\nLast week, we saw an example where we wanted to take the mean of each column in the swiss data:\n\nfor(col_index in 1:ncol(swiss)){\n  mean_swiss_col &lt;- mean(swiss[,col_index])\n  names_swiss_col &lt;- names(swiss)[col_index]\n  print(c(names_swiss_col,round(mean_swiss_col,3)))\n}\n\n[1] \"Fertility\" \"70.143\"   \n[1] \"Agriculture\" \"50.66\"      \n[1] \"Examination\" \"16.489\"     \n[1] \"Education\" \"10.979\"   \n[1] \"Catholic\" \"41.144\"  \n[1] \"Infant.Mortality\" \"19.943\"          \n\n\nIsn‚Äôt this kind of complex?!"
  },
  {
    "objectID": "Lectures/Lecture8/scratch.html#apply-dont-loop",
    "href": "Lectures/Lecture8/scratch.html#apply-dont-loop",
    "title": "Using functions with apply()",
    "section": "apply(), don‚Äôt loop!",
    "text": "apply(), don‚Äôt loop!\nWriting loops can be challenging and prone to bugs!!\n. . .\nThe apply() can solve this issue:\n\napply a function to values in each row or column of a matrix\nDoesn‚Äôt require preallocation\nCan take built-in functions or user-created functions."
  },
  {
    "objectID": "Lectures/Lecture8/scratch.html#structure-of-apply",
    "href": "Lectures/Lecture8/scratch.html#structure-of-apply",
    "title": "Using functions with apply()",
    "section": "Structure of apply()",
    "text": "Structure of apply()\napply() takes 3 arguments:\n\nData (a matrix or data frame)\nMargin (1 applies function to each row, 2 applies to each column)\nFunction\n\n\napply(DATA, MARGIN, FUNCTION)\n\n. . .\nFor example,\n\napply(swiss, 2, mean)\n\n       Fertility      Agriculture      Examination        Education \n        70.14255         50.65957         16.48936         10.97872 \n        Catholic Infant.Mortality \n        41.14383         19.94255"
  },
  {
    "objectID": "Lectures/Lecture8/scratch.html#example-1",
    "href": "Lectures/Lecture8/scratch.html#example-1",
    "title": "Using functions with apply()",
    "section": "Example 1",
    "text": "Example 1\n\nrow_max &lt;- apply(swiss,1,max) # maximum in each row\nhead(row_max, 20)\n\n  Courtelary     Delemont Franches-Mnt      Moutier   Neuveville   Porrentruy \n       80.20        84.84        93.40        85.80        76.90        90.57 \n       Broye        Glane      Gruyere       Sarine      Veveyse        Aigle \n       92.85        97.16        97.67        91.38        98.61        64.10 \n     Aubonne     Avenches     Cossonay    Echallens     Grandson     Lausanne \n       67.50        68.90        69.30        72.60        71.70        55.70 \n   La Vallee       Lavaux \n       54.30        73.00"
  },
  {
    "objectID": "Lectures/Lecture8/scratch.html#example-2",
    "href": "Lectures/Lecture8/scratch.html#example-2",
    "title": "Using functions with apply()",
    "section": "Example 2",
    "text": "Example 2\n\napply(swiss, 2, summary) # summary of each column\n\n        Fertility Agriculture Examination Education  Catholic Infant.Mortality\nMin.     35.00000     1.20000     3.00000   1.00000   2.15000         10.80000\n1st Qu.  64.70000    35.90000    12.00000   6.00000   5.19500         18.15000\nMedian   70.40000    54.10000    16.00000   8.00000  15.14000         20.00000\nMean     70.14255    50.65957    16.48936  10.97872  41.14383         19.94255\n3rd Qu.  78.45000    67.65000    22.00000  12.00000  93.12500         21.70000\nMax.     92.50000    89.70000    37.00000  53.00000 100.00000         26.60000\n\n\n**Note:* Matrix output!"
  },
  {
    "objectID": "Lectures/Lecture8/scratch.html#example-3-user-created-function",
    "href": "Lectures/Lecture8/scratch.html#example-3-user-created-function",
    "title": "Using functions with apply()",
    "section": "Example 3: User-Created Function",
    "text": "Example 3: User-Created Function\n\nscores &lt;- matrix(1:21, nrow=3)\nprint(scores)\n\n     [,1] [,2] [,3] [,4] [,5] [,6] [,7]\n[1,]    1    4    7   10   13   16   19\n[2,]    2    5    8   11   14   17   20\n[3,]    3    6    9   12   15   18   21\n\nmy_function &lt;- function(x){ mean(x+10, na.rm = T) }\napply(scores, 1, my_function)\n\n[1] 20 21 22"
  },
  {
    "objectID": "Lectures/Lecture8/scratch.html#activity-writing-a-function",
    "href": "Lectures/Lecture8/scratch.html#activity-writing-a-function",
    "title": "Using functions with apply()",
    "section": "Activity: Writing A Function",
    "text": "Activity: Writing A Function\nIn Olympic diving, a panel of 7 judges provide scores. After removing the worst and best scores, the mean of the remaining scores is given to the diver. We‚Äôll write code to calculate this score!\n\nSuppose I get you a vector, x, of length 7. Write code that will sort the vector from least to greatest, then keep the 2nd-6th elements1.\nWrite a function to calculate a diver‚Äôs score:\n\nInput: Vector of length 7\nChecks: Check that the vector has length 7 (if not, stop!)\nOutput: Mean score after removing the lowest and greatest scores.\n\nCalculate the diver‚Äôs score given x &lt;- c(2, 1:5, 3)"
  },
  {
    "objectID": "Lectures/Lecture8/scratch.html#activity-solution",
    "href": "Lectures/Lecture8/scratch.html#activity-solution",
    "title": "Using functions with apply()",
    "section": "Activity: Solution",
    "text": "Activity: Solution\n\nSort and extract elements 2 through 6:\n\nAnswer: Given vector x, use sort(x)[2:6]\n\nFunction\n\n\ndivers_score &lt;- function(x){\n  if(length(x) != 7){\n    stop(\"x is not of length 7!\")\n  } else{\n    x_nofirst_nolast &lt;- sort(x)[2:6]\n    return(mean(x_nofirst_nolast))\n  }\n}\n\n. . .\n\nCalculate the diver‚Äôs score given x &lt;- c(2, 1:5, 3)\n\n\ndivers_score(x = c(2,1:5,3) )\n\n[1] 2.8"
  },
  {
    "objectID": "Lectures/Lecture8/scratch.html#activity",
    "href": "Lectures/Lecture8/scratch.html#activity",
    "title": "Using functions with apply()",
    "section": "Activity",
    "text": "Activity\nThese are homework questions!!\n\nPreallocate a matrix of NAs with 3 rows and 8 columns, called double_matrix. Manually specify the first column equal to the values 1, 2, and 3. Using a nested loop, fill in the matrix, row by row, such that each value is double that to its left.\nWrite an apply() function to take the median value of each column in the cars dataset\nUsing ggplot, make a scatterplot of the speed and dist variables in cars. Then, add an appropriate horizontal and vertical line symbolizing the median value of each variable2."
  },
  {
    "objectID": "Lectures/Lecture8/scratch.html#answers",
    "href": "Lectures/Lecture8/scratch.html#answers",
    "title": "Using functions with apply()",
    "section": "Answers",
    "text": "Answers\n\nPreallocate a matrix of NAs with 3 rows and 8 columns, called double_matrix. Manually specify the first column equal to the values 1, 2, and 3. Using a nested loop, fill in the matrix, row by row, such that each value is double that to its left.\n\n\ndouble_matrix &lt;- matrix(NA, nrow = 3,ncol = 8)\ndouble_matrix[ , 1] &lt;- 1:3\nfor(row in 1:3){\n  for(col in 2:8){\n    double_matrix[row, col] &lt;- double_matrix[row, col-1] * 2\n  }\n}\ndouble_matrix\n\n     [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8]\n[1,]    1    2    4    8   16   32   64  128\n[2,]    2    4    8   16   32   64  128  256\n[3,]    3    6   12   24   48   96  192  384"
  },
  {
    "objectID": "Lectures/Lecture8/scratch.html#answers-1",
    "href": "Lectures/Lecture8/scratch.html#answers-1",
    "title": "Using functions with apply()",
    "section": "Answers",
    "text": "Answers\n2. Write an apply() function to take the median value of each column in the cars dataset\n\nmedian_cars &lt;- apply(cars, 2, median)\nmedian_cars\n\nspeed  dist \n   15    36"
  },
  {
    "objectID": "Lectures/Lecture8/scratch.html#answers-2",
    "href": "Lectures/Lecture8/scratch.html#answers-2",
    "title": "Using functions with apply()",
    "section": "Answers",
    "text": "Answers\n3. Make a ggplot\n\nCodePlot\n\n\n\nlibrary(ggplot2)\nggplot(cars, aes(speed, dist)) + \n  geom_point() +\n  geom_vline(xintercept = median_cars[1]) +\n  geom_hline(yintercept = median_cars[2])"
  },
  {
    "objectID": "Lectures/Lecture8/scratch.html#homework-8",
    "href": "Lectures/Lecture8/scratch.html#homework-8",
    "title": "Using functions with apply()",
    "section": "Homework 8",
    "text": "Homework 8\nTime to work on Homework 8!"
  },
  {
    "objectID": "Lectures/Lecture8/scratch.html#due-dates",
    "href": "Lectures/Lecture8/scratch.html#due-dates",
    "title": "Using functions with apply()",
    "section": "Due dates",
    "text": "Due dates\n\n\n\n\n\n\n\n\n\n\n\n\n\n#\nHomework Due\nPeer Review Due\n\n\n\n\n1\n7 October\n12 October\n\n\n2\n14 October\n19 October\n\n\n3\n21 October\n26 October\n\n\n4\n28 October\n2 November\n\n\n5\n11 November\n16 November\n\n\n6\n18 November\n21 November\n\n\n7\n25 November\n30 November\n\n\n8\n2 December\n7 December\n\n\n9\n9 December\n14 December"
  },
  {
    "objectID": "Lectures/Lecture8/scratch.html#footnotes",
    "href": "Lectures/Lecture8/scratch.html#footnotes",
    "title": "Using functions with apply()",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nHINT: Use the sort() function and square brackets [ ] for subsetting‚Ü©Ô∏é\nHint: Using the layers geom_vline(xintercept = ) and geom_hline(yintercept = )‚Ü©Ô∏é"
  },
  {
    "objectID": "Lectures/Lecture8/CSSS508_Lecture8_index.html",
    "href": "Lectures/Lecture8/CSSS508_Lecture8_index.html",
    "title": "Lecture 8",
    "section": "",
    "text": "Writing Functions\n\nNovember 25, 2025\n\n\n\n\n\nSlides & Code\nHTML slides ‚Ä¢ Raw qmd file ‚Ä¢ R Code\n\n\n\nSuggested Reading (from R for Data Science (2e)1)\nChapter 26: Functions\n\n\n1¬†Hadley Wickham, Mine √áetinkaya-Rundel & Garrett Grolemund\nUseful Resources\n\nOther Readings\nProgramming with tidyr\nProgramming with dplyr\nProgramming with ggplot\nWhat is data-masking and why do I need {{\nHands on Programming with R 2\nAdvanced R3: Chapter 6 - Functions\nAdvanced R: Functional Programming\n2¬†Garrett Grolemund3¬†Hadley Wickham\n\nCrowdsource Help\nCS&SS 508 Slack Workspace ‚Ä¢ Posit community ‚Ä¢ Stackoverflow",
    "crumbs": [
      "Lectures",
      "Lecture 8"
    ]
  },
  {
    "objectID": "Lectures/Lecture9/scratch.html",
    "href": "Lectures/Lecture9/scratch.html",
    "title": "scratch",
    "section": "",
    "text": "Last time, we learned about,\n\nImporting and exporting data\nCleaning and reshaping data\nDates and times\n\n. . .\nToday, we will cover,\n\nWhy Loops?\nfor() loops\nwhile() loops"
  },
  {
    "objectID": "Lectures/Lecture9/scratch.html#bad-repetition",
    "href": "Lectures/Lecture9/scratch.html#bad-repetition",
    "title": "scratch",
    "section": "Bad Repetition",
    "text": "Bad Repetition\nIf someone doesn‚Äôt know better, they might find the means of variables in the swiss data by typing in a line of code for each column:\n\nmean1 &lt;- mean(swiss$Fertility)\nmean2 &lt;- mean(swiss$Agriculture)\nmean3 &lt;- mean(swissExamination)\nmean4 &lt;- mean(swiss$Fertility)\nmean5 &lt;- mean(swiss$Catholic)\nmean5 &lt;- mean(swiss$Infant.Mortality)\nc(mean1, mean2 mean3, mean4, mean5, man6)\n\nCan you spot the problems?\n. . .\nHow upset would they be if the swiss data had 200 columns instead of 6?"
  },
  {
    "objectID": "Lectures/Lecture9/scratch.html#good-repetition",
    "href": "Lectures/Lecture9/scratch.html#good-repetition",
    "title": "scratch",
    "section": "Good Repetition",
    "text": "Good Repetition\nYou will learn a better way to calculate column means today using loops!\n\nmeans &lt;- rep(NA, ncol(swiss))\nfor(i in 1:ncol(swiss)){\n  means[i] &lt;- mean(swiss[,i])\n}\ndata.frame(Variable=names(swiss),Mean=means)\n\n          Variable Mean\n1        Fertility 70.1\n2      Agriculture 50.7\n3      Examination 16.5\n4        Education 11.0\n5         Catholic 41.1\n6 Infant.Mortality 19.9\n\n\nDon‚Äôt worry about the details yet!\n. . ."
  },
  {
    "objectID": "Lectures/Lecture9/scratch.html#dont-repeat-yourself-dry",
    "href": "Lectures/Lecture9/scratch.html#dont-repeat-yourself-dry",
    "title": "scratch",
    "section": "Don‚Äôt Repeat Yourself (DRY)!",
    "text": "Don‚Äôt Repeat Yourself (DRY)!\nThe DRY idea: Computers are much better at doing the same thing over and over again than we are.\n\n\nWriting code to repeat tasks for us reduces the most common human coding mistakes.\nIt also substantially reduces the time and effort involved in processing large volumes of data.\nLastly, compact code is more readable and easier to troubleshoot."
  },
  {
    "objectID": "Lectures/Lecture9/scratch.html#the-for-loop",
    "href": "Lectures/Lecture9/scratch.html#the-for-loop",
    "title": "scratch",
    "section": "The for() Loop",
    "text": "The for() Loop\nfor() loops are the most general kind of loop, found in pretty much every programming language.\n‚ÄúFor each of these values ‚Äì in order ‚Äì do this‚Äù\n. . .\nConceptually:\nGiven a set of values‚Ä¶\n\nSet an index variable (often i) equal to the first value\nDo something (perhaps depending on i)\nIs there a next value?\n\nYES: Update to next value, go back to 2.\nNO: Exit loop\n\n\nWe are looping through values and repeating some actions."
  },
  {
    "objectID": "Lectures/Lecture9/scratch.html#for-loop-diagram",
    "href": "Lectures/Lecture9/scratch.html#for-loop-diagram",
    "title": "scratch",
    "section": "for() Loop: Diagram",
    "text": "for() Loop: Diagram\nGiven a set of values‚Ä¶"
  },
  {
    "objectID": "Lectures/Lecture9/scratch.html#for-loop-example",
    "href": "Lectures/Lecture9/scratch.html#for-loop-example",
    "title": "scratch",
    "section": "for() Loop: Example",
    "text": "for() Loop: Example\n\nfor(i in 1:5) {\n    # inside for, output won't show up without print()\n    print(i^2) \n}\n\n[1] 1\n[1] 4\n[1] 9\n[1] 16\n[1] 25\n\n\nNote this runs 5 separate print commands, which is why each line starts with [1]."
  },
  {
    "objectID": "Lectures/Lecture9/scratch.html#these-do-the-same-thing",
    "href": "Lectures/Lecture9/scratch.html#these-do-the-same-thing",
    "title": "scratch",
    "section": "These Do the Same Thing",
    "text": "These Do the Same Thing\n\n\n\nfor(i in 1:3) {\n    print(i^2) \n}\n\n[1] 1\n[1] 4\n[1] 9\n\n\n\n\ni &lt;- 1\nprint(i^2) \ni &lt;- 2\nprint(i^2)\ni &lt;- 3\nprint(i^2)\n\n[1] 1\n[1] 4\n[1] 9"
  },
  {
    "objectID": "Lectures/Lecture9/scratch.html#iteration-conventions",
    "href": "Lectures/Lecture9/scratch.html#iteration-conventions",
    "title": "scratch",
    "section": "Iteration Conventions",
    "text": "Iteration Conventions\n\n\nWe call what happens in the loop for a particular value one iteration.\nIterating over indices 1:n is very common. n might be the length of a vector, the number of rows or columns in a matrix or data frame, or the length of a list.\nCommon notation: i is the object that holds the current value inside the loop.\n\nIf loops are nested, you will often see j and k used for the inner loops.\nThis notation is similar to indexing in mathematical symbols (e.g \\(\\sum\\limits_{i=1}^n\\))\n\nNote i (and j,k, etc) are just normal objects. You can use any other names you want.\n\nEx: When iterating over rows and/or columns, I often use row and/or col!"
  },
  {
    "objectID": "Lectures/Lecture9/scratch.html#iterate-over-characters",
    "href": "Lectures/Lecture9/scratch.html#iterate-over-characters",
    "title": "scratch",
    "section": "Iterate Over Characters",
    "text": "Iterate Over Characters\nWhat we iterate over doesn‚Äôt have to be numbers 1:n or numbers at all! You can also iterate over a character vector in R:\n\nfor(i in letters[1:3]) {\n    print(i)\n}\n\n[1] \"a\"\n[1] \"b\"\n[1] \"c\"\n\ni # in R, this will exist outside of the loop!\n\n[1] \"c\""
  },
  {
    "objectID": "Lectures/Lecture9/scratch.html#pre-allocation",
    "href": "Lectures/Lecture9/scratch.html#pre-allocation",
    "title": "scratch",
    "section": "Pre-Allocation",
    "text": "Pre-Allocation\nUsually in a for() loop, you aren‚Äôt just printing output, but want to store results from calculations in each iteration somewhere.\n. . .\nTo do that, figure out what you want to store, and pre-allocate an object of the right size as a placeholder (typically with missing values as placeholders).\n. . .\nExamples of what to pre-allocate based on what you store:\n\n\nSingle numeric value per iteration:\n\nrep(NA, num_iter_iters)\n\nNumeric vector per iteration:\n\nmatrix(NA, nrow = num_of_iters, ncol = length_of_vector)"
  },
  {
    "objectID": "Lectures/Lecture9/scratch.html#pre-allocation-numeric",
    "href": "Lectures/Lecture9/scratch.html#pre-allocation-numeric",
    "title": "scratch",
    "section": "Pre-Allocation: Numeric",
    "text": "Pre-Allocation: Numeric\n\niters &lt;- 10 # Set number of interations\noutput &lt;- rep(NA,iters) # Pre-allocate numeric vector \noutput\n\n [1] NA NA NA NA NA NA NA NA NA NA\n\nfor(i in 1:iters) { # Run code below iters times\n    output[i] &lt;- (i-1)^2 + (i-2)^2\n}\noutput # Display output\n\n [1]   1   1   5  13  25  41  61  85 113 145\n\n\nSteps:\n\nSet a number of iterations\nPre-allocate a numeric vector of that length\nRun ten iterations where the output is a mathematical function of each iteration number."
  },
  {
    "objectID": "Lectures/Lecture9/scratch.html#pre-allocation-numeric-vector-per-iteration-matrix",
    "href": "Lectures/Lecture9/scratch.html#pre-allocation-numeric-vector-per-iteration-matrix",
    "title": "scratch",
    "section": "Pre-Allocation: Numeric Vector per Iteration Matrix",
    "text": "Pre-Allocation: Numeric Vector per Iteration Matrix\n\nrownums &lt;- 3\ncolnums &lt;- 6\noutput &lt;- matrix(NA,nrow=rownums,ncol=colnums)\n\nfor(i in 1:rownums){\n  for(j in 1:colnums){\n    output[i,j] &lt;- i + j\n  }\n}\noutput\n\n     [,1] [,2] [,3] [,4] [,5] [,6]\n[1,]    2    3    4    5    6    7\n[2,]    3    4    5    6    7    8\n[3,]    4    5    6    7    8    9"
  },
  {
    "objectID": "Lectures/Lecture9/scratch.html#aside-ifelse-statements",
    "href": "Lectures/Lecture9/scratch.html#aside-ifelse-statements",
    "title": "scratch",
    "section": "Aside: If/Else Statements",
    "text": "Aside: If/Else Statements\nTo test a logical statement and then conditionally execute a set of actions, use if() and else. The structure is:\n\nif(CONDITION){\n  SOME CALCULATION\n} else{\n  A DIFFERENT CALCULATION\n}\n\nWarning! else needs to be on same line as the closing brace } of previous if()."
  },
  {
    "objectID": "Lectures/Lecture9/scratch.html#ifelse-simple-example",
    "href": "Lectures/Lecture9/scratch.html#ifelse-simple-example",
    "title": "scratch",
    "section": "If/Else Simple Example",
    "text": "If/Else Simple Example\n\nif(8  &lt; 10){\n  print(\"Less than 10!\")\n}else{\n  print(\"Not less than 10!\")\n}\n\n[1] \"Less than 10!\""
  },
  {
    "objectID": "Lectures/Lecture9/scratch.html#more-complex-ifelse",
    "href": "Lectures/Lecture9/scratch.html#more-complex-ifelse",
    "title": "scratch",
    "section": "More Complex If/Else",
    "text": "More Complex If/Else\nWe can nest together multiple if/elses! if we wish:\n\ni &lt;- 13\nif(i &lt;= 10) { \n  print(\"i is less than or equal to 10!\")\n} else if(i &lt;= 14) {\n  print(\"i is greater than 10, less than or equal to 14\")\n} else {\n  print(\"i is greater than or equal to 15\")\n}\n\n[1] \"i is greater than 10, less than or equal to 14\""
  },
  {
    "objectID": "Lectures/Lecture9/scratch.html#loops-with-ifelse-statements",
    "href": "Lectures/Lecture9/scratch.html#loops-with-ifelse-statements",
    "title": "scratch",
    "section": "Loops with If/Else Statements",
    "text": "Loops with If/Else Statements\nSuppose we want to take the numbers between 1 and 5, and divide the evens by 2 and multiply the odds by 2. We could do that using a loop with if/else statements!\n\nfor(i in 1:5){\n  if(i %% 2 == 0){ #check for even numbers\n    print(i / 2)\n  }else{\n    print(i * 2)\n  }\n}\n\n[1] 2\n[1] 1\n[1] 6\n[1] 2\n[1] 10"
  },
  {
    "objectID": "Lectures/Lecture9/scratch.html#handling-special-cases",
    "href": "Lectures/Lecture9/scratch.html#handling-special-cases",
    "title": "scratch",
    "section": "Handling Special Cases",
    "text": "Handling Special Cases\nAside from the previous toy example, if() statements are useful when you have to handle special cases.\nif() statements can be used to make a loop ignore or fix problematic cases.\nThey are also useful for producing error messages, by generating a message if an input value is not what is expected."
  },
  {
    "objectID": "Lectures/Lecture9/scratch.html#while",
    "href": "Lectures/Lecture9/scratch.html#while",
    "title": "scratch",
    "section": "while()",
    "text": "while()\nA lesser-used looping structure is the while() loop.\nRather than iterating over a predefined vector, the loop keeps going until some condition is no longer true.\n. . .\nHere is the structure:\n\nwhile(COND IS MET){\n  RUN CODE\n}\n\nIf you‚Äôre not careful, the while loop will run forever!!"
  },
  {
    "objectID": "Lectures/Lecture9/scratch.html#simple-while-loop-example",
    "href": "Lectures/Lecture9/scratch.html#simple-while-loop-example",
    "title": "scratch",
    "section": "Simple while() loop example:",
    "text": "Simple while() loop example:\n\nx &lt;- 0 \nwhile(x &lt; 3){\n  x &lt;- x + 1\n  print(x)\n}\n\n[1] 1\n[1] 2\n[1] 3\n\n\nWhat happened in each iteration?"
  },
  {
    "objectID": "Lectures/Lecture9/scratch.html#these-do-the-same-thing-1",
    "href": "Lectures/Lecture9/scratch.html#these-do-the-same-thing-1",
    "title": "scratch",
    "section": "These Do the Same Thing",
    "text": "These Do the Same Thing\n\n\n\nx &lt;- 0 \nwhile(x &lt; 3){\n  x &lt;- x + 1\n  print(x)\n}\n\n[1] 1\n[1] 2\n[1] 3\n\n\n\n\nx &lt;- 0\nx &lt;- x+1\nprint(x)\nx &lt;- x+1\nprint(x)\nx &lt;- x+1\nprint(x)\n\n[1] 1\n[1] 2\n[1] 3"
  },
  {
    "objectID": "Lectures/Lecture9/scratch.html#more-complex-example",
    "href": "Lectures/Lecture9/scratch.html#more-complex-example",
    "title": "scratch",
    "section": "More Complex Example",
    "text": "More Complex Example\nLet‚Äôs see how many times we need to flip a coin to get 4 heads:\n\nnum_heads &lt;- 0\nnum_flips &lt;- 0\n\nwhile(num_heads &lt; 4) {\n  # simulating a coin flip\n  coin_flip &lt;- rbinom(n = 1, size = 1, prob = 0.5) \n\n  # keep track of heads\n  if (coin_flip == 1) { \n    num_heads &lt;- num_heads + 1 \n  }\n  \n  # update number of coin flips\n  num_flips &lt;- num_flips + 1 \n}\n\nnum_flips # follows negative binomial distribution\n\n[1] 10"
  },
  {
    "objectID": "Lectures/Lecture9/scratch.html#summary",
    "href": "Lectures/Lecture9/scratch.html#summary",
    "title": "scratch",
    "section": "Summary",
    "text": "Summary\n\nWhy Loops?\n\n\nTo make our lives easier!\n\n\nfor() loops:\n\n\nFor iterating over a fixed number of items\n\n\nwhile() loops:\n\n\nFor iterating until some condition is met\n\nLet‚Äôs take a 10 minute break, then return for some activities!"
  },
  {
    "objectID": "Lectures/Lecture9/scratch.html#activity-1",
    "href": "Lectures/Lecture9/scratch.html#activity-1",
    "title": "scratch",
    "section": "Activity 1",
    "text": "Activity 1\n\nCreate a for loop to calculate the maximum value of each variable in the swiss data. What are the maximum values of each variable?\nUsing your previous answer as a starting point, create a nested for loop to calculate the maximum value for each variable in the swiss data (outer loop), and then divide that maximum by 1, 2, and 4 (inner loop). Print the output after each step.\nUsing your previous answer as a starting point, write a loop that does the same calculations as before but stores the values in a matrix with ncol(swiss) columns and 3 rows. How will you ‚Äúpre-allocate‚Äù space for the results?"
  },
  {
    "objectID": "Lectures/Lecture9/scratch.html#activity-1-answers",
    "href": "Lectures/Lecture9/scratch.html#activity-1-answers",
    "title": "scratch",
    "section": "Activity 1: Answers",
    "text": "Activity 1: Answers\nQuestion 1:\n\nfor(i in 1:ncol(swiss)) {\n  curr_max &lt;- max(swiss[,i])\n  print(curr_max)\n}\n\n[1] 92.5\n[1] 89.7\n[1] 37\n[1] 53\n[1] 100\n[1] 26.6"
  },
  {
    "objectID": "Lectures/Lecture9/scratch.html#activity-1-answers-1",
    "href": "Lectures/Lecture9/scratch.html#activity-1-answers-1",
    "title": "scratch",
    "section": "Activity 1: Answers",
    "text": "Activity 1: Answers\nQuestion 2:\n\nfor(i in 1:ncol(swiss)) {\n  curr_max &lt;- max(swiss[,i])\n  for(j in c(1,2,4)){\n    print(curr_max/j)\n  }\n}\n\n[1] 92.5\n[1] 46.2\n[1] 23.1\n[1] 89.7\n[1] 44.9\n[1] 22.4\n[1] 37\n[1] 18.5\n[1] 9.25\n[1] 53\n[1] 26.5\n[1] 13.2\n[1] 100\n[1] 50\n[1] 25\n[1] 26.6\n[1] 13.3\n[1] 6.65"
  },
  {
    "objectID": "Lectures/Lecture9/scratch.html#activity-1-answers-2",
    "href": "Lectures/Lecture9/scratch.html#activity-1-answers-2",
    "title": "scratch",
    "section": "Activity 1: Answers",
    "text": "Activity 1: Answers\nQuestion 3:\n\nresults &lt;- matrix(NA, ncol=ncol(swiss),nrow=3)\nfor(i in 1:ncol(swiss)) {\n  curr_max &lt;- max(swiss[,i])\n  for(j in 1:3){\n    curr_divisor &lt;- c(1,2,4)[j]\n    results[j,i] &lt;- curr_max/curr_divisor\n  }\n}\nresults\n\n     [,1] [,2]  [,3] [,4] [,5]  [,6]\n[1,] 92.5 89.7 37.00 53.0  100 26.60\n[2,] 46.2 44.9 18.50 26.5   50 13.30\n[3,] 23.1 22.4  9.25 13.2   25  6.65"
  },
  {
    "objectID": "Lectures/Lecture9/scratch.html#activity-2",
    "href": "Lectures/Lecture9/scratch.html#activity-2",
    "title": "scratch",
    "section": "Activity 2",
    "text": "Activity 2\n1. Consider the vector vec &lt;- c(1,2,NA,3,NA). Write a for loop that includes an if/else function so that for each value x in vec, we print ‚ÄúMissing!‚Äù if x is NA, and x^3 otherwise.\n2. What will happen if I run the following loop:\n\nx &lt;- 1\nwhile(x &lt; 10){\n  print(x + 1)\n}\n\n3. Write a while() loop that starts with x &lt;- 1 and doubles x each iteration, while x &lt; 100. Print x after each iteration."
  },
  {
    "objectID": "Lectures/Lecture9/scratch.html#activity-2-answers",
    "href": "Lectures/Lecture9/scratch.html#activity-2-answers",
    "title": "scratch",
    "section": "Activity 2: Answers",
    "text": "Activity 2: Answers\n1.\n\nfor(x in c(1,2,NA,3,NA)){\n  if(is.na(x)){\n    print(\"Missing!\")\n  } else{\n    print(x^3)\n  }\n}\n\n[1] 1\n[1] 8\n[1] \"Missing!\"\n[1] 27\n[1] \"Missing!\""
  },
  {
    "objectID": "Lectures/Lecture9/scratch.html#activity-2-answers-1",
    "href": "Lectures/Lecture9/scratch.html#activity-2-answers-1",
    "title": "scratch",
    "section": "Activity 2: Answers",
    "text": "Activity 2: Answers\n2. What will happen if I run the following loop:\n\nx &lt;- 1\nwhile(x &lt; 10){\n  print(x + 1)\n}\n\n\nAnswer: The while loop will run forever printing 1, since we are not updating x!!"
  },
  {
    "objectID": "Lectures/Lecture9/scratch.html#activity-2-answers-2",
    "href": "Lectures/Lecture9/scratch.html#activity-2-answers-2",
    "title": "scratch",
    "section": "Activity 2: Answers",
    "text": "Activity 2: Answers\n3. Write a while() loop that starts with x &lt;- 1 and doubles x each iteration, while x &lt; 100. Print x after each iteration.\n\nx &lt;- 1\nwhile(x &lt;100){\n  x &lt;- x * 2\n  print(x)\n}\n\n[1] 2\n[1] 4\n[1] 8\n[1] 16\n[1] 32\n[1] 64\n[1] 128\n\n\nWhy does x reach 128?!"
  },
  {
    "objectID": "Lectures/Lecture9/scratch.html#homework-6",
    "href": "Lectures/Lecture9/scratch.html#homework-6",
    "title": "scratch",
    "section": "Homework 6",
    "text": "Homework 6\nHW 6 will be posted on the website shortly! Remember that it is a continuation of HW 5!"
  },
  {
    "objectID": "Lectures/Lecture9/scratch.html#due-dates",
    "href": "Lectures/Lecture9/scratch.html#due-dates",
    "title": "scratch",
    "section": "Due dates",
    "text": "Due dates"
  },
  {
    "objectID": "Lectures/Lecture7/CSSS508_Lecture7_index.html",
    "href": "Lectures/Lecture7/CSSS508_Lecture7_index.html",
    "title": "Lecture 7",
    "section": "",
    "text": "Working with Text Data\n\nNovember 18, 2025\n\n\n\n\n\nSlides & Code\nHTML slides ‚Ä¢ Raw qmd file ‚Ä¢ R Code\n\n\n\nSuggested Reading (from R for Data Science (2e)1)\nChapter 15: Strings ‚Ä¢ Chapter 16: Regular expressions ‚Ä¢\n\n\n1¬†Hadley Wickham, Mine √áetinkaya-Rundel & Garrett Grolemund\nUseful Resources\n\nCheatsheets\nstringr ‚Ä¢ Regular expressions ‚Ä¢ tidyr\n\n\nPackage Websites\nstringr ‚Ä¢ tidyr\n\n\nCrowdsource Help\nCS&SS 508 Slack Workspace ‚Ä¢ Posit community ‚Ä¢ Stackoverflow",
    "crumbs": [
      "Lectures",
      "Lecture 7"
    ]
  },
  {
    "objectID": "Lectures/Lecture4/CSSS508_Lecture4.html#newer-alternative-for-grouping-.by",
    "href": "Lectures/Lecture4/CSSS508_Lecture4.html#newer-alternative-for-grouping-.by",
    "title": "",
    "section": "Newer Alternative for Grouping: .by",
    "text": "Newer Alternative for Grouping: .by\n\nflights |&gt; \n  summarize(\n    delay = mean(dep_delay, na.rm = TRUE), \n    n = n(),\n1    .by = month\n  )\n\n\n1\n\n.by works with all verbs and has the advantage that you don‚Äôt need to use the .groups argument to suppress the grouping message or ungroup() when you‚Äôre done.\n\n\n\n\n# A tibble: 12 √ó 3\n   month delay     n\n   &lt;int&gt; &lt;dbl&gt; &lt;int&gt;\n 1     1 10.0  27004\n 2    10  6.24 28889\n 3    11  5.44 27268\n 4    12 16.6  28135\n 5     2 10.8  24951\n 6     3 13.2  28834\n 7     4 13.9  28330\n 8     5 13.0  28796\n 9     6 20.8  28243\n10     7 21.7  29425\n11     8 12.6  29327\n12     9  6.72 27574"
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture5.html#answers",
    "href": "Lectures/Lecture5/CSSS508_Lecture5.html#answers",
    "title": "",
    "section": "Answers",
    "text": "Answers\nClick File &gt; Save to download this data to the same folder where your source document1 will be saved for this lab.\n\nRead in your data using the appropriate function from readr.\n\nreligion_income &lt;- read_csv(file = \"data/religion-income.csv\", \n1                            col_types = c(\"f\", rep(\"i\", 10)))\n\n\n1\n\nIf you already know the data type for your variables you can explicitly read them in as such (i.e.¬†in this case we‚Äôd want religion to be a factor since it is a categorical variable.)\n\n\n\n\n\nR Script or .qmd"
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture5.html#answers-5",
    "href": "Lectures/Lecture5/CSSS508_Lecture5.html#answers-5",
    "title": "",
    "section": "Answers",
    "text": "Answers\nExcluding the income category Don't know/refused, which religion-income combination has the largest frequency?1\n\nSummarizing the data\n\nreligion_income_tidy |&gt; \n  filter(income != \"Don't know/refused\") |&gt; \n  slice_max(frequency)\n\n&gt; # A tibble: 1 √ó 3\n&gt;   religion         income  frequency\n&gt;   &lt;fct&gt;            &lt;fct&gt;       &lt;dbl&gt;\n&gt; 1 Evangelical Prot $50-75k      1486\n\n\n\nYou can determine this by summarizing the data or creating a visualization of the data."
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture5.html#answers-6",
    "href": "Lectures/Lecture5/CSSS508_Lecture5.html#answers-6",
    "title": "",
    "section": "Answers \n",
    "text": "Answers \n\nExcluding the income category Don't know/refused, which religion-income combination has the largest frequency?1\n\nData visualization\n\nCodelibrary(ggthemes)\nlibrary(geomtextpath)\n\nheatmap &lt;- religion_income_tidy |&gt; \n  filter(income != \"Don't know/refused\") |&gt; \nggplot(aes(x = income, y = religion, fill = frequency)) + \n  geom_raster() + \n  scale_fill_distiller(\"Frequency\", palette = \"Greens\", direction = 1) +\n  labs(title = \"Heatmap of Religion & Income\", \n       x = \"Income Level\", \n       y = \"Religious Affiliation\") +\n  theme_tufte(base_size = 18)\n\n\n\n\n\n\n\nYou can determine this by summarizing the data or creating a visualization of the data."
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture5.html#importing-tidying-data-3",
    "href": "Lectures/Lecture5/CSSS508_Lecture5.html#importing-tidying-data-3",
    "title": "",
    "section": "Importing & Tidying Data",
    "text": "Importing & Tidying Data\n\nGo to the Lecture 5 Homepage and click on the link Religion & Income under the Data section.\nClick File &gt; Save to download this data to the same folder where your source document1 will be saved for this lab.\nRead in your data using the appropriate function from readr.\nPivot your data to make it tidy2.\nTurn two of the variables into factors3.\nExcluding the income category Don't know/refused, which religion-income combination has the largest frequency?4\n\nR Script or .qmdThere should be 3 columns in your final datasetHint: Which two variables are categorical?You can determine this by summarizing the data or creating a visualization of the data."
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture5.html#answers-visibilityhidden",
    "href": "Lectures/Lecture5/CSSS508_Lecture5.html#answers-visibilityhidden",
    "title": "",
    "section": "Answers {visibility=‚Äúhidden‚Äù}",
    "text": "Answers {visibility=‚Äúhidden‚Äù}\nPivot your data to make it tidy1.\n\nreligion_income_tidy &lt;- religion_income |&gt; \n  pivot_longer(cols = !religion, \n              names_to = \"income\", \n              values_to = \"frequency\")\nreligion_income_tidy\n\n\n\n&gt; # A tibble: 180 √ó 3\n&gt;    religion income             frequency\n&gt;    &lt;fct&gt;    &lt;chr&gt;                  &lt;dbl&gt;\n&gt;  1 Agnostic &lt;$10k                     27\n&gt;  2 Agnostic $10-20k                   34\n&gt;  3 Agnostic $20-30k                   60\n&gt;  4 Agnostic $30-40k                   81\n&gt;  5 Agnostic $40-50k                   76\n&gt;  6 Agnostic $50-75k                  137\n&gt;  7 Agnostic $75-100k                 122\n&gt;  8 Agnostic $100-150k                109\n&gt;  9 Agnostic &gt;150k                     84\n&gt; 10 Agnostic Don't know/refused        96\n&gt; # ‚Ñπ 170 more rows\n\n\nThere should be 3 columns in your final dataset"
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture5.html#answers-visibilityhidden-1",
    "href": "Lectures/Lecture5/CSSS508_Lecture5.html#answers-visibilityhidden-1",
    "title": "",
    "section": "Answers {visibility=‚Äúhidden‚Äù}",
    "text": "Answers {visibility=‚Äúhidden‚Äù}\nTurn two of the variables into factors1.\n\nreligion_income_tidy &lt;- religion_income |&gt; \n  pivot_longer(cols = !religion, \n              names_to = \"income\", \n              values_to = \"frequency\") |&gt; \n  mutate(income = fct(income, \n                      levels = c(\"Don't know/refused\", \"&lt;$10k\", \"$10-20k\", \n                                         \"$20-30k\", \"$30-40k\", \"$40-50k\", \"$50-75k\", \n                                         \"$75-100k\", \"$100-150k\", \"&gt;150k\")))\n\n\n\n\nHint: Which two variables are categorical?"
  },
  {
    "objectID": "Lectures/Lecture5/CSSS508_Lecture5.html#answers-visibilityhidden-2",
    "href": "Lectures/Lecture5/CSSS508_Lecture5.html#answers-visibilityhidden-2",
    "title": "",
    "section": "Answers {visibility=‚Äúhidden‚Äù}",
    "text": "Answers {visibility=‚Äúhidden‚Äù}\nTurn two of the variables into factors1.\n\nreligion_income_tidy &lt;- religion_income |&gt; \n  pivot_longer(cols = !religion, \n              names_to = \"income\", \n              values_to = \"frequency\") |&gt; \n  mutate(income = fct(income, \n                      levels = c(\"Don't know/refused\", \"&lt;$10k\", \"$10-20k\", \n                                         \"$20-30k\", \"$30-40k\", \"$40-50k\", \"$50-75k\", \n                                         \"$75-100k\", \"$100-150k\", \"&gt;150k\")), \n1         religion = fct(religion))\n\n\n1\n\nIf we hadn‚Äôt initially read in religion as a factor, we‚Äôd need to recode it as one during this step.\n\n\n\n\nHint: Which two variables are categorical?"
  },
  {
    "objectID": "Lectures/Lecture6/CSSS508_Lecture6.html#example-regression-output-1",
    "href": "Lectures/Lecture6/CSSS508_Lecture6.html#example-regression-output-1",
    "title": "",
    "section": "Example: Regression Output",
    "text": "Example: Regression Output\nWhat does a list object look like?\n\nstr(lm_output)\n\n\n\n&gt; List of 12\n&gt;  $ coefficients : Named num [1:2] 8.284 0.166\n&gt;   ..- attr(*, \"names\")= chr [1:2] \"(Intercept)\" \"dist\"\n&gt;  $ residuals    : Named num [1:50] -4.62 -5.94 -1.95 -4.93 -2.93 ...\n&gt;   ..- attr(*, \"names\")= chr [1:50] \"1\" \"2\" \"3\" \"4\" ...\n&gt;  $ effects      : Named num [1:50] -108.894 29.866 -0.501 -3.945 -1.797 ...\n&gt;   ..- attr(*, \"names\")= chr [1:50] \"(Intercept)\" \"dist\" \"\" \"\" ...\n&gt;  $ rank         : int 2\n&gt;  $ fitted.values: Named num [1:50] 8.62 9.94 8.95 11.93 10.93 ...\n&gt;   ..- attr(*, \"names\")= chr [1:50] \"1\" \"2\" \"3\" \"4\" ...\n&gt;  $ assign       : int [1:2] 0 1\n&gt;  $ qr           :List of 5\n&gt;   ..$ qr   : num [1:50, 1:2] -7.071 0.141 0.141 0.141 0.141 ...\n&gt;   .. ..- attr(*, \"dimnames\")=List of 2\n&gt;   .. .. ..$ : chr [1:50] \"1\" \"2\" \"3\" \"4\" ...\n&gt;   .. .. ..$ : chr [1:2] \"(Intercept)\" \"dist\"\n&gt;   .. ..- attr(*, \"assign\")= int [1:2] 0 1\n&gt;   ..$ qraux: num [1:2] 1.14 1.15\n&gt;   ..$ pivot: int [1:2] 1 2\n&gt;   ..$ tol  : num 1e-07\n&gt;   ..$ rank : int 2\n&gt;   ..- attr(*, \"class\")= chr \"qr\"\n&gt;  $ df.residual  : int 48\n&gt;  $ xlevels      : Named list()\n&gt;  $ call         : language lm(formula = speed ~ dist, data = cars)\n&gt;  $ terms        :Classes 'terms', 'formula'  language speed ~ dist\n&gt;   .. ..- attr(*, \"variables\")= language list(speed, dist)\n&gt;   .. ..- attr(*, \"factors\")= int [1:2, 1] 0 1\n&gt;   .. .. ..- attr(*, \"dimnames\")=List of 2\n&gt;   .. .. .. ..$ : chr [1:2] \"speed\" \"dist\"\n&gt;   .. .. .. ..$ : chr \"dist\"\n&gt;   .. ..- attr(*, \"term.labels\")= chr \"dist\"\n&gt;   .. ..- attr(*, \"order\")= int 1\n&gt;   .. ..- attr(*, \"intercept\")= int 1\n&gt;   .. ..- attr(*, \"response\")= int 1\n&gt;   .. ..- attr(*, \".Environment\")=&lt;environment: R_GlobalEnv&gt; \n&gt;   .. ..- attr(*, \"predvars\")= language list(speed, dist)\n&gt;   .. ..- attr(*, \"dataClasses\")= Named chr [1:2] \"numeric\" \"numeric\"\n&gt;   .. .. ..- attr(*, \"names\")= chr [1:2] \"speed\" \"dist\"\n&gt;  $ model        :'data.frame':    50 obs. of  2 variables:\n&gt;   ..$ speed: num [1:50] 4 4 7 7 8 9 10 10 10 11 ...\n&gt;   ..$ dist : num [1:50] 2 10 4 22 16 10 18 26 34 17 ...\n&gt;   ..- attr(*, \"terms\")=Classes 'terms', 'formula'  language speed ~ dist\n&gt;   .. .. ..- attr(*, \"variables\")= language list(speed, dist)\n&gt;   .. .. ..- attr(*, \"factors\")= int [1:2, 1] 0 1\n&gt;   .. .. .. ..- attr(*, \"dimnames\")=List of 2\n&gt;   .. .. .. .. ..$ : chr [1:2] \"speed\" \"dist\"\n&gt;   .. .. .. .. ..$ : chr \"dist\"\n&gt;   .. .. ..- attr(*, \"term.labels\")= chr \"dist\"\n&gt;   .. .. ..- attr(*, \"order\")= int 1\n&gt;   .. .. ..- attr(*, \"intercept\")= int 1\n&gt;   .. .. ..- attr(*, \"response\")= int 1\n&gt;   .. .. ..- attr(*, \".Environment\")=&lt;environment: R_GlobalEnv&gt; \n&gt;   .. .. ..- attr(*, \"predvars\")= language list(speed, dist)\n&gt;   .. .. ..- attr(*, \"dataClasses\")= Named chr [1:2] \"numeric\" \"numeric\"\n&gt;   .. .. .. ..- attr(*, \"names\")= chr [1:2] \"speed\" \"dist\"\n&gt;  - attr(*, \"class\")= chr \"lm\""
  },
  {
    "objectID": "Lectures/Lecture7/CSSS508_Lecture7.html#data-menu-titlevictoriavic-plots-background-imagevictoria_vic_plots.png-background-sizecontain-visibilityhidden",
    "href": "Lectures/Lecture7/CSSS508_Lecture7.html#data-menu-titlevictoriavic-plots-background-imagevictoria_vic_plots.png-background-sizecontain-visibilityhidden",
    "title": "",
    "section": "{data-menu-title=‚ÄúVictoria/Vic Plots‚Äù background-image=‚Äúvictoria_vic_plots.png‚Äù background-size=‚Äúcontain‚Äù, visibility=‚Äúhidden‚Äù}",
    "text": "{data-menu-title=‚ÄúVictoria/Vic Plots‚Äù background-image=‚Äúvictoria_vic_plots.png‚Äù background-size=‚Äúcontain‚Äù, visibility=‚Äúhidden‚Äù}"
  }
]