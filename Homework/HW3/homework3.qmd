---
title: "Homework 3"
highlight-style: a11y-dark
reference-location: margin
---

```{r}
#| echo: false
#| message: false
library(tidyverse)

knitr::opts_chunk$set(
  comment = ">")
```

### Instructions
For this assignment, **include all code and relevant output in your rendered html document**[^longnote1]. 

[^longnote1]: You can set the `echo: true` (and other) code chunk option(s) globally (will set it as the document default) by specifying it in your YAML header like so: 

    ```{YAML}
    ---
    title: "My Document"
    execute:
      echo: true
    ---
    ```


### Exercises

1. Organize your files for this class in a way that facilitates reproducible research. 
    i) You can do this any number of ways, such as: 
        a) Creating a project for this class. If you already have a folder for this class you can retroactively turn it into a project by selecting *File* > *New Project...* > *Existing Directory* and browsing to that folder^[Note: this approach will complicate your file path specification since markdown documents internally set the working directory to the folder they are in when they knit. That will be at odds with the working directory of your project, (one folder-level up from each of your homework assignment .qmds). If you'd like to use this method for organizing your folders/files, you should familiarize yourself with the [`here`](https://here.r-lib.org/index.html) package to limit file path frustration and enable you to set up more complex projects in the future.]. 
        b) Creating a folder for this class and make weekly sub-folders which are each, themselves, projects.^[I highly recommend this approach if the concept of relative versus absolute paths is new(er) to you. If each homework is its own project, your working directory will be set directly to that homework folder which will make relative file paths work whether you're running code interactively or knitting your .qmd since they will be the same.] You would need to retroactively make week 1 and 2 folders projects by using this method. For any new weekly folders you can directly create that directory by selecting *File* > *New Project...* > *New Directory*
    ii) Create your .qmd for this homework within your new project^[You'll notice that the upper-right hand corner of your RStudio IDE now displays the name of that new project. This is your current working directory. Whatever files you create will have a working directory of the folder/subfolder of the project they're saved within.].
    iii) When you're done organizing the folder for this class, write out its current organizational structure (i.e. something similar to the solution to lab question 5[^longnote2] with the specific names for files and folders that *you* used). Write a one-sentence description of how you've organized your project/projects for this class. 

[^longnote2]: You can embed output-looking text like this example by using a code chunk without the `{r}` like so:

    ```` 
    ```
    CSSS 508
      Homework1/
      ...etc...
    ```
    ````
    
---

```{r}
x <- rnorm(20, 10, 5)
```

2. Create the vector above:
    i) Look at the help file for `rnorm` and in your own words describe what arguments it takes and what it produces.
    ii) Which arguments are required and which are optional (if any)?
    iii) What does the `r` in `rnorm` stand for? 
    iv) Using `[`, select every value except the last one
    v) Using `[`, select only values that are greater than 10. 

---

```{r}
#| eval: false
ggplot(mpg, aes(x = class)) +
  geom_bar()
ggplot(mpg, aes(x = cty, y = hwy)) +
  geom_point()
ggsave("mpg-plot.png")
```



3. Run the code above. 
   i) Which of the two plots is saved as mpg-plot.png? Why?^[Hint: Check out the help page!]
   ii) In the files tab of the lower-right pane of your RStudio, look at the project folder for this homework^[This will depend on which organizational method you chose for question 1.i.] and re-write the current organizational structure for this class with any changes that have occurred (i.e. update your answer to question 1.iii.). 

---

4. Go to [A Quarto tip a day](https://mine-cetinkaya-rundel.github.io/quarto-tip-a-day/) and find one tip that makes sense to you and looks interesting. Describe it and **link** to it^[See how to link to websites in markdown syntax [here](https://quarto.org/docs/authoring/markdown-basics.html#links-images)] in your qmd. Maybe practice using it!^[No need to demonstrate this in your qmd.]

---

```{r}
y <- tibble(a = seq(1, 10, 2), 
            b = c("apple", "banana", "strawberry", "peach", "mango"), 
            c = c(rep(TRUE, 3), rep(FALSE, 2)))
```

```{r}
#| echo: false
# seq takes arguments `from`, `to`, and `by` in that order. It creates a vector of numeric values starting with the value input `from`, ending with the value input `by`, in increments of the value input `by`. 

# rep takes a value as its first argument and a integer value, `times` as its default second argument. It repeats the first argument by the specified number of times in the second argument. 
```


5. Create the tibble above. 
   i) What does `seq` do in this example and what arguments does it take? 
   ii) What does `rep` do in this example and what arguments does it take?
   iii) Index `y` using `[` to arrive at the results: 
   
```{r}
#| echo: false
y[c(2, 5), 2]
```
    
<span>&emsp;&emsp;</span> iv) Index `y` using `$` to arrive at the results: 
   
```{r}
#| echo: false
y$c
```
   
<span>&emsp;&emsp;</span> v) What does `y[3:5, ]` produce? What does `:` do?

```{r}
#| echo: false
#| eval: false 
y[3:5, ] # Prints out the 3rd, 4th, and 5th rows
# : is a shortcut for giving a sequence from the first number (on the left) to the second number (on the right) in increments of 1 or -1
```

::: {.callout-warning icon=false}
## <span style="color:orange">{{< fa exclamation-triangle >}}</span> Before you submit:
Have you remembered to add `embed-resources: true` to your YAML?
:::

### Due Dates

```{r}
#| echo: false
#| message: false
#| warning: false

# reading in base due date schedule
source("../due_dates_schedule.R")

make_due_date_table_fall(3) |> 
  tab_options(table.background.color = "#f6f7f9")
```