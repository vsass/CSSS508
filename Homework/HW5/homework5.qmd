---
title: "Homework 5"
output: 
  html_document:
    highlight-style: a11y-dark
    preserve_yaml: true
    toc: true
    toc_float: true
---

### Data
[billboard.csv](../../Lectures/Lecture5/data/billboard.csv)

```{r}
#| echo: false
knitr::opts_chunk$set(
  comment = ">")
library(tidyverse)
library(geomtextpath)
library(ggrepel)
library(ggthemes)
library(socviz)

# Read in data
billboard <- read_csv("billboard.csv") 

billboard_tidy <- billboard |> 
  pivot_longer(starts_with("wk"), 
               names_to = "week", 
               values_to = "rank", 
               values_drop_na = TRUE, 
               names_prefix = "wk", 
               names_transform = list(week = as.integer)) |> 
  janitor::clean_names() 


billboard_tidy3 <- billboard_tidy2 |> 
  mutate(date = if_else(week == 1, 
                       date_entered, 
                       date_entered + weeks(x = week)))


# top 3 artist w/ most songs in top 100 in 2003 - ranks of their songs plotted over time
billboard_tidy4 <- billboard_tidy3 |> 
  distinct(artist, track) |> 
  summarize(n = n(), 
            .by = artist) |> 
  filter(n > 2) |> 
  slice_max(n = 3, order_by = n)

billboard_tidy5 <- billboard_tidy3 |> 
  filter(artist %in% c("Jay-Z", "Dixie Chicks, The", "Houston, Whitney")) |> 
  mutate(artist = case_when(artist == "Dixie Chicks, The" ~ "The Dixie Chicks", 
                            artist == "Houston, Whitney" ~ "Whitney Houston", 
                            artist == "Jay-Z" ~ "Jay-Z"))
ggplot(billboard_tidy5, aes(date, rank, color = artist, group = track)) + 
  geom_textpath(aes(label = track)) + 
  geom_hline(yintercept = 1, color = "yellow")

# overall charting #1 songs in context of all songs
billboard_tidy6 <- billboard_tidy3 %>%
    mutate(`weeks_at_1` = sum(rank == 1),
           `peak_rank`   = ifelse(any(rank == 1), # <1> 
                                  "Hit #1",
                                  "Didn't hit #1"), 
           .by = c(artist, track)) 
ggplot(billboard_tidy6, aes(date, rank, group = track, color = peak_rank)) + 
  geom_line(aes(size = peak_rank), alpha = 0.4) +
  geom_label_repel(data = billboard_tidy6 |>  filter(peak_rank == "Hit #1") |>  slice_min(date, by = artist), aes(label = artist)) +
  #geom_label_repel(data = billboard_tidy6 |>  filter(peak_rank == "Hit #1") |>  slice_min(date, by = artist), aes(label = artist), nudge_y = 4, nudge_x = 2) +
  theme_tufte() +
  xlab("Date") + ylab("Rank") +
  scale_color_manual("Peak Rank", values = c("black", "red")) +
  scale_size_manual("Peak Rank", values = c(0.25, 1)) +
  theme(legend.position = c(0.1, 0.15),
        legend.background = element_rect(fill = "transparent"))
```
1. `any(rank==1)` checks to see if any value of `rank` is equal to one for the given artist and track

1. Download the `billboard` data set introduced in lecture to the same folder where you're saving your qmd for this homework^[If your project directory is different from the directory where you'll be saving these two files, you should run `setwd()` in the **console** and give it a string of the file path to the folder where these two files are saved. This will allow you to run code interactively without error.].
2. Read in the data, clean up the names, and pivot it in a way so the first few rows look like this: 

```{r}
#| echo: false
billboard_tidy <- billboard |> 
  pivot_longer(starts_with("wk"), 
               names_to = "week", 
               values_to = "rank", 
               values_drop_na = TRUE, 
               names_prefix = "wk", 
               names_transform = list(week = as.integer)) |> 
  janitor::clean_names() 
billboard_tidy
```

3. Create a variable named `date` that corresponds to the `week` based on the `date_entered`^[For instance, if the `date_entered` is 1-13-2000 and `week` is 1, then when `week` is 2 `date` will have a value of `1-20-2000`. Hint: Try using `if_else()` here.].

```{r}
#| echo: false
billboard_tidy_date <- billboard_tidy |> 
  mutate(date = if_else(week == 1, 
                       date_entered, 
                       date_entered + weeks(x = week)))
```

4. Create a dataset of the song(s) with the most weeks in the top 3 by month of 2000. The final dataset should look like this:

```{r}
billboard_top3_month <- billboard_tidy_date |> 
  mutate(month = month(date),
         year = year(date),
         top3 = if_else(rank <= 3 & year == 2000, 1, 0)) |> 
  mutate(peak_weeks = sum(top3), 
         .by = c(month, artist, track)) |> 
  slice_max(peak_weeks, 
            by = month) |> 
  distinct(month, artist, track) |> 
  arrange(month)
```

```{r}
  
  
  filter(any(top3 == 1), 
         .by = c(track, artist)) |> 
  mutate(max_peak = max(peak_weeks), 
         .by = month) |> 
  filter(any(peak_weeks == max_peak), 
         .by = c(track, artist)) |> 
  mutate(max_month = if_else(peak_weeks == max_peak, month, NA)) |> 
  group_by(artist, track) |> 
  fill(max_month, .direction = "updown") |> 
  ungroup()
```

Pick one month of 2000 and visualize the **entire charting trajectory** of the songs that spent **at least 1 week** in the top 3 during that month. An example for April is provided below.

```{r}
billboard_top3_month_viz <- billboard_tidy_date |> 
  mutate(month = month(date),
         year = year(date),
         top3 = if_else(rank <= 3 & year == 2000, 1, 0)) |> 
  mutate(peak_weeks = sum(top3), 
         month_peak = ifelse(peak_weeks > 0, month, NA),
         .by = c(month, artist, track)) |> 
  filter(any(month_peak == 4), 
         .by = c(track, artist)) 

ggplot(billboard_top3_month_viz, aes(date, rank, group = track, color = artist)) + 
  annotate(geom = "rect", xmin = ymd("2000-04-01"), xmax = ymd("2000-05-01"), ymin = 0, ymax = 85, 
           fill = "#59a14f", alpha = 0.5) + 
  geom_line(show.legend = TRUE) + 
  geom_label_repel(data = billboard_top3_month_viz |> slice_max(date, by = track), aes(label = track), 
                   show.legend = FALSE) + 
  scale_color_manual("Artist", values = c("#4e79a7","#f28e2c","#e15759","#76b7b2")) + 
  labs(title = "Billboard Top 100 Trajectory for Songs that Hit Top 3 During April 2000", 
       x = "Date", 
       y = "Rank", 
       caption = "Note: April shaded in green") + 
  theme_tufte(base_size = 14) + 
  theme(legend.position = c(0.85, 0.85),
        legend.title.align = 0.5,
        legend.background = element_blank(),
        legend.box.background = element_rect(colour = "black"))
  
  





  



```


```{r}
Default  Deuteronopia Protanopia Tritanopia
"#66C2A5" "#AEAEA7"   "#BABAA5"  '#82BDBD'   
"#FC8D62" "#B6B661"   "#9E9E63"  '#F29494'   
"#8DA0CB" "#9C9CCB"   "#9E9ECB"  '#92ABAB'   
"#E78AC3" "#ACACC1"   "#9898C3"  '#DA9C9C'   
"#A6D854" "#CACA5E"   "#D3D355"  '#B6C8C8'   
```



5. Come up a question you want to explore visually and create a plot to answer it. Be sure to include your question as well as the plot. 

```{r}
# Do songs that hit #1 have a different trajectory than those that donâ€™t?
ggplot(billboard_tidy6, aes(week, rank, group = track, color = peak_rank)) + 
  geom_line(aes(size = peak_rank), alpha = 0.4) +
  theme_tufte() +
  xlab("Date") + ylab("Rank") +
  scale_color_manual("Peak Rank", values = c("black", "red")) +
  scale_size_manual("Peak Rank", values = c(0.25, 1)) +
  theme(legend.position = c(0.7, 0.7),
        legend.background = element_rect(fill = "transparent"))
# 
```




### Due Dates

```{r}
#| echo: false
#| message: false
#| warning: false

# reading in base due date schedule
source("../../Lectures/due_dates_schedule.R")

make_due_date_table(5) |> 
  tab_options(table.background.color = "#f6f7f9")
```



```{r}
library(tidyverse)
inspections <- read_csv("Food_Establishment_Inspection_Data_20231028.csv")
# problems(inspections)

# read in only the variables that correspond to restaurant name, inspection date, inspection type, inspection result, and grade
inspections <- read_csv("Food_Establishment_Inspection_Data_20231028.csv", 
                        col_select = c("Name", "Inspection Date", "Inspection Type", "Inspection Result", "Grade"))

inspections_clean <- inspections |> 
  janitor::clean_names() |> 
  mutate(inspection_date = mdy(inspection_date), 
         inspection_type = fct(inspection_type), 
         inspection_result = fct(inspection_result)) |> 
  filter(year(inspection_date) == "2020")
  


ggplot(inspections_clean, aes(x = inspection_date, y = grade, color = grade, group = name)) +
  geom_jitter() + 
  geom_line()
```

