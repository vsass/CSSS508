---
title: "CSSS 508 â€¢ Lecture 2"
subtitle: "Visualizing Data"
author: "Victoria Sass"
date: "October 10, 2023"
date-format: long
highlight-style:  vim-dark #, oblivion, radical, vim-dark, espresso, zenburn, kate, monochrome, breezedark, haddock
footnotes-hover: true
reference-location: margin
execute: 
  echo: true
  message: false
  warning: false
  fig-format: "svg"
format: 
  revealjs:
    theme: lecture_styles.scss
    slide-number: true
    code-link: true
    chalkboard: true
    incremental: false 
    smaller: true
    preview-links: true
    code-line-numbers: false
    #logo: "../../images/csss-white.png" # need to add css for size <https://stackoverflow.com/questions/74083521/how-to-increase-size-logo-in-quarto-reveal-js-presentation>
---

```{r}
#| echo = FALSE
require(downlit, xml2)
```

# Roadmap 

---

Last time, we learned about:

1. R and RStudio
1. Quarto headers, syntax, and chunks
1. Basics of functions, objects, and vectors
1. Dataframes and basic plots

. . . 

Today, we will cover:

1. Useful coding tips: packages, directories, and saving data
1. Basics of ggplot: layers and aesthetics
1. Advanced ggplot tools

# Useful Coding Tips

## Packages

Packages are **collections of functions and tools** that make your life easier! The best part of R is the huge number of user-created packages. The `Packages` tab in the bottom-right pane of RStudio lists your installed packages.

. . . 

To install a new package in R, run the line of code:

```{r}
#| eval: false
install.packages("gapminder") 
```

We always install packages in the **console**, because we only want to do it **once**

## Loading Packages

Installing a packages *does not* mean it's loaded in our R session. To do so, we call the package:

```{r}
#| eval: false
library(gapminder)
```

**NOTE:** Use quotes when installing packages, but not when loading packages!

. . . 

We need to run this code every time we open a new R session: **Where should we put this code?**

. . . 

**Answer:** In qmd files, and not the console!

## Comments

You may have noticed that sometimes I have written code that looks like this:
```{r}
new.object <- 1:10 # Making vector of 1 to 10 
```

`#` is known as the *commenting symbol* in R!

Anything written on the same line *after* `#` will not be run by R.

This is useful for annotating your code to remind you (or others) what you are doing in a section.^[In Quarto documents, comments only work in chunks. Outside of a chunk, `#` creates **headers** like "comments" at the top of this slide.]

## Saving Files

You can save an R object on your computer as a file to open later:

```{r}
save(new.object, file = "new_object.RData")
```

. . . 

You can open saved files in R as well:
```{r}
load("new_object.RData")
```

. . . 

But where are these files being saved and loaded from?

## Working Directories

R saves files and looks for files to open in your current **working directory**. You
can ask R what this is:

```{r}
getwd()
```

. . . 

Similarly, we can set a working directory like so:

```{r, eval=FALSE}
setwd("C:/Users/vsass/CSSS508/HW2")
```

. . . 

*Don't set a working directory in R Markdown documents!* They automatically set the directory they are in as the working directory.

## Managing Files

When managing R projects, it is normally best to give each project (such as a homework
assignment) its own folder. I use the following system:

. . . 

* Every class or project has its own folder
. . . 

* Each assignment or task has a folder inside that, which is the working directory for that item.

. . . 

* `.qmd` and `.R` files are named clearly and completely

. . . 

For example, this presentation is located and named this:
`GitHub/CSSS508/Lectures/Lecture1/CSSS508_Lecture1.qmd`

. . . 

You can use whatever system you want, but be consistent so your projects are organized! 
You don't want to lose work by losing or overwriting files!

. . . 

For large projects containing many files, I recommend using RStudio's built in project management system found in the top right of the RStudio window.

. . . 

For journal articles I recommend Ben Marwick's [`rrtools`](https://github.com/benmarwick/rrtools) and [`huskydown`](https://github.com/benmarwick/huskydown) for UW dissertations and theses. 

## File Types

We mainly work with three types of file in this class:

. . . 

* `.qmd`: These are **markdown** *syntax* files, where you write code to *make documents*.

. . . 

* `.R`: These are **R** *syntax* files, where you write code to process and analyze data *without making an output document*^[While beyond the scope of this class, you can use the `source()` function to run a `.R` script file inside a `.Rmd` or `.R` file. Using this you can break a large project up into multiple files but still run it all at once!].

. . . 

* `.html` or `.pdf`: These are the output documents created when you *Render* a quarto markdown document.

. . . 

Make sure you understand the difference between the uses of these file types! Please
ask for clarification if needed!

## Gapminder Data

We'll be working with data from Hans Rosling's [Gapminder](http://www.gapminder.org) project.
An excerpt of these data can be accessed through an R package called `gapminder`, cleaned and assembled by Jenny Bryan at UBC.

. . . 

In the console: `install.packages("gapminder")`

Load the package and data:
```{r}
library(gapminder)
```

## Check Out Gapminder

The data frame we will work with is called `gapminder`, available once you have loaded the package. Let's see its structure:

::: custom-small
```{r}
str(gapminder)
```
:::

## What's Interesting Here?

* **Factor** variables `country` and `continent`

   + Factors are categorical data with an underlying numeric representation
   + We'll spend a lot of time on factors later!

. . . 

* Many observations: $n=`r nrow(gapminder)`$ rows

. . . 

* For each observation, a few variables: $p=`r ncol(gapminder)`$ columns

. . . 

* A nested/hierarchical structure: `year` in `country` in `continent`

   + These are panel data!

## Basics of `ggplot2`

:::: {.columns}
::: {.column width="50%"}
```{r}
#| eval=FALSE
China <- subset(gapminder,
          gapminder$country == "China")
plot(lifeExp ~ year, 
     data = China, 
     xlab = "Year", 
     ylab = "Life expectancy",
     main = "Life expectancy in China", 
     col = "red", 
     pch = 16)
```

This plot is made with *one function* and *many arguments.*

:::
::: {.column width="50%"}
```{r}
#| echo: false
#| fig-width: 6
#| fig-height: 6
China <- subset(gapminder,gapminder$country == "China")
plot(lifeExp ~ year, data = China, xlab = "Year", ylab = "Life expectancy",
     main = "Life expectancy in China", col = "red", pch = 16)
```
:::
::::

::: aside
Note: Don't worry about the code used to create the object `China`. We'll explore data manipulation next week!
:::

## Fancier: `ggplot`

:::: {.columns}
::: {.column width="50%"}
```{r}
#| eval: false
ggplot(data = China, 
       aes(x = year, y = lifeExp)) +
  geom_point(color = "red", size = 3) +
  xlab("Year") + 
  ylab("Life expectancy") +
  ggtitle("Life expectancy in China") +
  theme_bw(base_size=18)
```

  This `ggplot` is made with *many functions* and *fewer arguments* in each.
:::
::: {.column width="50%"}
```{r}
#| warning: false
#| message: false 
#| echo: false
#| fig-width: 6
#| fig-height: 6
library(ggplot2)
ggplot(data = China, 
       aes(x = year, y = lifeExp)) +
  geom_point(color = "red", size = 3) +
  xlab("Year") + 
  ylab("Life expectancy") +
  ggtitle("Life expectancy in China") +
  theme_bw(base_size=18)
detach("package:ggplot2")
```
:::
::::

## `ggplot2`

The `ggplot2` package provides an alternative toolbox for plotting.


```{r}
# install.packages("ggplot2")
library(ggplot2)
```

The core idea underlying this package is the [**layered grammar of graphics**](https://vita.had.co.nz/papers/layered-grammar.pdf): we can break up elements of a plot into pieces and combine them.

. . . 

`ggplot`s are a bit harder to create, but are usually: 

* prettier, 
* more professional, and
* more customizable!

## Layered grammar of graphics 


![](images/gglayers.png){fig-align="center"}


## Structure of a ggplot

`ggplot` graphics objects consist of two primary components:

. . . 

1. **Layers**, the components of a graph.

   * We *add* layers to a `ggplot` object using `+`.
   * This includes adding lines, shapes, and text to a plot.

. . . 

2. **Aesthetics**, which determine how the layers appear.

   * We *set* aesthetics using *arguments* (e.g. `color="red"`) inside layer functions.
   * This includes modifying locations, colors, and sizes of the layers.

## Layers

**Layers** are the components of the graph, such as:

* `ggplot()`: initializes basic plotting object, specifies input data
* `geom_point()`: layer of scatterplot points
* `geom_line()`: layer of lines
* `geom_histogram()`: layer of a histogram
* `ggtitle()`, `xlab()`, `ylab()`: layers of labels
* `facet_wrap()`: layer creating multiple plot panels
* `theme_bw()`: layer replacing default gray background with black-and-white

Layers are separated by a `+` sign. For clarity, I usually put each layer on a new line.

::: aside
Be sure to **end** each line with the `+`. The code will not run if a new line *begins* with a `+`. 
:::

## Aesthetics

**Aesthetics** control the appearance of the layers:

* `x`, `y`: $x$ and $y$ coordinate values to use
* `color`: set color of elements based on some data value
* `group`: describe which points are conceptually grouped together for the plot (often used with lines)
* `size`: set size of points/lines based on some data value (greater than 0)
* `alpha`: set transparency based on some data value (between 0 and 1)

## Examples: Basic Jargon in Action!

We'll now build up two `ggplot`s together that demonstrate common layers and aesthetics.

## Axis Labels, Points, No Background

### 1: Base Plot

:::: {.columns}
:::{.column width="50%"}
```{r}
#| eval: FALSE
#| code-line-numbers: "1-2"
ggplot(data = China,  
       aes(x = year, y = lifeExp)) 
```
:::

:::{.column width="50%"}
```{r}
#| echo: false
#| fig-height: 6
#| fig-width: 6
ggplot(data = China,  
       aes(x = year, y = lifeExp)) 
```
:::
::::

::: aside
Initialize the plot with `ggplot()` and `x` and `y` aesthetics **mapped** to variables. These aesthetics will be accessible to any future layers since they're in the primary layer.
:::

## Axis Labels, Points, No Background

### 2: Scatterplot

:::: {.columns}
:::{.column width="50%"}
```{r}
#| eval: false
#| code-line-numbers: "3"
ggplot(data = China, 
       aes(x = year, y = lifeExp)) +
  geom_point()
```
:::
:::{.column width="50%"}
```{r}
#| echo: false
#| fig-height: 6
#| fig-width: 6
ggplot(data = China, 
       aes(x = year, y = lifeExp)) +
  geom_point() 
```
:::
::::

::: aside
Add a scatterplot **layer**.
:::

## Axis Labels, Points, No Background

### 3: Point Color and Size

:::: {.columns}
:::{.column width="50%"}
```{r}
#| eval: false
#| code-line-numbers: "3"
ggplot(data = China, 
       aes(x = year, y = lifeExp)) +
  geom_point(color = "red", size = 3)
```
:::
:::{.column width="50%"}
```{r}
#| echo: false
#| fig-height: 6
#| fig-width: 6
ggplot(data = China, 
       aes(x = year, y = lifeExp)) +
  geom_point(color = "red", size = 3) 
```
:::
::::

::: aside 
**Set** aesthetics to make the points larger and red.
:::

## Axis Labels, Points, No Background

### 4: X-Axis Label

:::: {.columns}
:::{.column width="50%"}
```{r}
#| eval: false
#| code-line-numbers: "4"
ggplot(data = China, 
       aes(x = year, y = lifeExp)) +
  geom_point(color = "red", size = 3) +
  xlab("Year")
```
:::
:::{.column width="50%"}
```{r}
#| echo: false
#| fig-height: 6
#| fig-width: 6
ggplot(data = China, 
       aes(x = year, y = lifeExp)) +
  geom_point(color = "red", size = 3) +
  xlab("Year") 
```
:::
::::
  
::: aside
Add a layer to capitalize the x-axis label.
:::


## Axis Labels, Points, No Background

### 5: Y-Axis Label

:::: {.columns}
:::{.column width="50%"}
```{r}
#| eval: false
#| code-line-numbers: "5"
ggplot(data = China, 
       aes(x = year, y = lifeExp)) +
  geom_point(color = "red", size = 3) +
  xlab("Year") + 
  ylab("Life expectancy")
```
:::
:::{.column width="50%"}
```{r}
#| echo: false
#| fig-height: 6
#| fig-width: 6
ggplot(data = China, 
       aes(x = year, y = lifeExp)) +
  geom_point(color = "red", size = 3) +
  xlab("Year") + 
  ylab("Life expectancy")
```
:::
::::
  
::: aside
Add a layer to clean up the y-axis label.
:::

## Axis Labels, Points, No Background

### 6: Title

:::: {.columns}
:::{.column width="50%"}
```{r}
#| eval: false
#| code-line-numbers: "6" 
ggplot(data = China, 
       aes(x = year, y = lifeExp)) +
  geom_point(color = "red", size = 3) +
  xlab("Year") + 
  ylab("Life expectancy") +
  ggtitle("Life expectancy in China")
```
:::
:::{.column width="50%"}
```{r}
#| echo: false
#| fig-height: 6
#| fig-width: 6
ggplot(data = China, 
       aes(x = year, y = lifeExp)) +
  geom_point(color = "red", size = 3) +
  xlab("Year") + 
  ylab("Life expectancy") +
  ggtitle("Life expectancy in China")
```
:::
::::
  
::: aside
Add a title layer.
:::

## Axis Labels, Points, No Background

### 7: Theme

:::: {.columns}
:::{.column width="50%"}
```{r}
#| eval: false
#| code-line-numbers: "7" 
ggplot(data = China, 
       aes(x = year, y = lifeExp)) +
  geom_point(color = "red", size = 3) +
  xlab("Year") + 
  ylab("Life expectancy") +
  ggtitle("Life expectancy in China") +
  theme_minimal()
```
:::
:::{.column width="50%"}
```{r}
#| echo: false
#| fig-height: 6
#| fig-width: 6
ggplot(data = China, 
       aes(x = year, y = lifeExp)) +
  geom_point(color = "red", size = 3) +
  xlab("Year") + 
  ylab("Life expectancy") +
  ggtitle("Life expectancy in China") +
  theme_minimal()
```
:::
::::
  
::: aside
Pick a nicer theme with a new layer.
:::

## Axis Labels, Points, No Background

### 8: Text Size

:::: {.columns}
:::{.column width="50%"}
```{r}
#| eval: false
#| code-line-numbers: "7"
ggplot(data = China, 
       aes(x = year, y = lifeExp)) +
  geom_point(color = "red", size = 3) +
  xlab("Year") + 
  ylab("Life expectancy") +
  ggtitle("Life expectancy in China") +
  theme_minimal(base_size=18) 
```
:::
:::{.column width="50%"}
```{r}
#| echo: false
#| fig-height: 6
#| fig-width: 6
ggplot(data = China, 
       aes(x = year, y = lifeExp)) +
  geom_point(color = "red", size = 3) +
  xlab("Year") + 
  ylab("Life expectancy") +
  ggtitle("Life expectancy in China") +
  theme_minimal(base_size=18) #<<
```
:::
::::

::: aside
Increase the base text size.
:::

## Plotting All Countries

We have a plot we like for China... 

... but what if we want *all the countries*?

## Plotting All Countries

### 1: A Mess!

:::: {.columns}
:::{.column width="50%"}
```{r}
#| eval: false
#| code-line-numbers: "1" 
ggplot(data = gapminder,
       aes(x = year, y = lifeExp)) +
  geom_point(color = "red", size = 3) +
  xlab("Year") + 
  ylab("Life expectancy") +
  ggtitle("Life expectancy over time") +
  theme_minimal(base_size=18)
```
:::
:::{.column width="50%"}
```{r}
#| echo: false
#| fig-height: 6
#| fig-width: 6
ggplot(data = gapminder, 
       aes(x = year, y = lifeExp)) +
  geom_point(color = "red", size = 3) +
  xlab("Year") + 
  ylab("Life expectancy") +
  ggtitle("Life expectancy over time") +
  theme_minimal(base_size=18)
```
:::
::::

::: aside
We can't tell countries apart! Maybe we could follow *lines*?
:::

## Plotting All Countries

### 2: Lines

:::: {.columns}
:::{.column width="50%"}
```{r}
#| eval: false
#| code-line-numbers: "3"
ggplot(data = gapminder, 
       aes(x = year, y = lifeExp)) +
  geom_line(color = "red", size = 3) + 
  xlab("Year") + 
  ylab("Life expectancy") +
  ggtitle("Life expectancy over time") +
  theme_minimal(base_size=18)
```
:::
:::{.column width="50%"}
```{r}
#| echo: false
#| fig-height: 6
#| fig-width: 6
ggplot(data = gapminder, 
       aes(x = year, y = lifeExp)) +
  geom_line(color = "red", size = 3) + 
  xlab("Year") + 
  ylab("Life expectancy") +
  ggtitle("Life expectancy over time") +
  theme_minimal(base_size=18)
```
:::
::::

::: aside
`ggplot2` doesn't know how to connect the lines!
:::

## Plotting All Countries

### 3: Grouping

:::: {.columns}
:::{.column width="50%"}
```{r}
#| eval: false
#| code-line-numbers: "3" 
ggplot(data = gapminder, 
       aes(x = year, y = lifeExp, 
           group = country)) +
  geom_line(color = "red", size = 3) +
  xlab("Year") + 
  ylab("Life expectancy") +
  ggtitle("Life expectancy over time") +
  theme_minimal(base_size=18)
```
:::
:::{.column width="50%"}
```{r}
#| echo: false
#| fig-height: 6
#| fig-width: 6
ggplot(data = gapminder, 
       aes(x = year, y = lifeExp, 
           group = country)) +
  geom_line(color = "red", size = 3) +
  xlab("Year") + 
  ylab("Life expectancy") +
  ggtitle("Life expectancy over time") +
  theme_minimal(base_size=18)
```
:::
::::
  
::: aside
That looks more reasonable... but the lines are too thick!
:::

## Plotting All Countries

### 4: Size

:::: {.columns}
:::{.column width="50%"}
```{r}
#| eval: false
#| code-line-numbers: "4" 
ggplot(data = gapminder, 
       aes(x = year, y = lifeExp, 
           group = country)) +
  geom_line(color = "red") +
  xlab("Year") + 
  ylab("Life expectancy") +
  ggtitle("Life expectancy over time") +
  theme_bw(base_size=18)
```
:::
:::{.column width="50%"}
```{r}
#| echo: false
#| fig-height: 6
#| fig-width: 6
ggplot(data = gapminder, 
       aes(x = year, y = lifeExp, 
           group = country)) +
  geom_line(color = "red") +
  xlab("Year") + 
  ylab("Life expectancy") +
  ggtitle("Life expectancy over time") +
  theme_bw(base_size=18)
```
:::
::::

::: aside
Much better... but maybe we can do highlight regional differences?
:::

## Plotting All Countries

### 5: Color

:::: {.columns}
:::{.column width="50%"}
```{r}
#| eval: false
#| code-line-numbers: "4-5" 
ggplot(data = gapminder, 
       aes(x = year, y = lifeExp, 
           group = country, 
           color = continent)) +
  geom_line() +
  xlab("Year") + 
  ylab("Life expectancy") +
  ggtitle("Life expectancy over time") +
  theme_bw(base_size=18)
```
:::
:::{.column width="50%"}
```{r}
#| echo: false
#| fig-height: 6
#| fig-width: 6
ggplot(data = gapminder, 
       aes(x = year, y = lifeExp, 
           group = country, 
           color = continent)) +
  geom_line() +
  xlab("Year") + 
  ylab("Life expectancy") +
  ggtitle("Life expectancy over time") +
  theme_bw(base_size=18)
```
:::
::::

::: aside
Patterns are obvious... but it might be even more impactful if we separate continents completely.
:::

## Plotting All Countries

### 6: Facets

:::: {.columns}
:::{.column width="50%"}
```{r}
#| eval: false
#| code-line-numbers: "10" 
ggplot(data = gapminder, 
       aes(x = year, y = lifeExp, 
           group = country, 
           color = continent)) +
  geom_line() +
  xlab("Year") + 
  ylab("Life expectancy") +
  ggtitle("Life expectancy over time") +
  theme_bw(base_size=18) +
  facet_wrap(vars(continent))
```
:::
:::{.column width="50%"}
```{r}
#| echo: false
#| fig-height: 6
#| fig-width: 6
ggplot(data = gapminder, 
       aes(x = year, y = lifeExp, 
           group = country, 
           color = continent)) +
  geom_line() +
  xlab("Year") + 
  ylab("Life expectancy") +
  ggtitle("Life expectancy over time") +
  theme_bw(base_size=18) +
  facet_wrap(vars(continent))
```
:::
::::

::: aside
Now the text is too big!
:::

## Plotting All Countries

### 7: Text Size

:::: {.columns}
:::{.column width="50%"}
```{r}
#| eval: false
#| code-line-numbers: "9" 
ggplot(data = gapminder, 
       aes(x = year, y = lifeExp, 
           group = country, 
           color = continent)) +
  geom_line() +
  xlab("Year") + 
  ylab("Life expectancy") +
  ggtitle("Life expectancy over time") +
  theme_bw() +
  facet_wrap(vars(continent))
```
:::
:::{.column width="50%"}
```{r}
#| echo: false
#| fig-height: 6
#| fig-width: 6
ggplot(data = gapminder, 
       aes(x = year, y = lifeExp, 
           group = country, 
           color = continent)) +
  geom_line() +
  xlab("Year") + 
  ylab("Life expectancy") +
  ggtitle("Life expectancy over time") +
  theme_bw() +
  facet_wrap(vars(continent))
```
:::
::::

::: aside
Better. Do we even need the legend anymore?
:::

## Plotting All Countries

### 8: No Legend

:::: {.columns}
:::{.column width="50%"}
```{r}
#| eval: false
#| code-line-numbers: "11" 
ggplot(data = gapminder, 
       aes(x = year, y = lifeExp, 
           group = country, 
           color = continent)) +
  geom_line() +
  xlab("Year") + 
  ylab("Life expectancy") +
  ggtitle("Life expectancy over time") +
  theme_bw() +
  facet_wrap(vars(continent)) + 
  theme(legend.position = "none")
```
:::
:::{.column width="50%"}
```{r}
#| echo: false
#| fig-height: 6
#| fig-width: 6
ggplot(data = gapminder, 
       aes(x = year, y = lifeExp, 
           group = country, 
           color = continent)) +
  geom_line() +
  xlab("Year") + 
  ylab("Life expectancy") +
  ggtitle("Life expectancy over time") +
  theme_bw() +
  facet_wrap(vars(continent)) + 
  theme(legend.position = "none")
```
:::
::::

::: aside
Looking good! But the x-axis still looks a little smooshed :(
:::

## Advanced ggplot tools

*(10 minute break!)*

Next, we'll discuss:

* Storing, modifying, and saving ggplots

* Advanced axis changes (scales, text, ticks)

* Legend changes (scales, colors, locations)

## Storing Plots

We can assign a `ggplot` object to a name:

```{r}
lifeExp_by_year <- 
  ggplot(data = gapminder, 
       aes(x = year, y = lifeExp, 
           group = country, 
           color = continent)) +
  geom_line() +
  xlab("Year") + 
  ylab("Life expectancy") +
  ggtitle("Life expectancy over time") +
  theme_bw() + 
  facet_wrap(vars(continent)) +
  theme(legend.position = "none")
```

Afterwards, you can display or modify `ggplot`s...

## Showing a Stored Graph

```{r}
#| fig-width: 10
#| fig-height: 6
lifeExp_by_year
```

## Overriding previous specifications
```{r}
#| fig-width: 12
#| fig-height: 3
#| code-line-numbers: "2"
lifeExp_by_year + 
  facet_wrap(vars(continent), nrow = 1)
```

## Adding More Layers

```{r}
#| fig-height: 3.5
#| fig-width: 12
#| code-line-numbers: "3"
lifeExp_by_year +
  facet_wrap(vars(continent), nrow = 1) + 
    theme(legend.position = "bottom")
```

## Saving `ggplot` Plots

If you want to save a ggplot, use `ggsave()`:

```{r}
#| eval: false
ggsave("I_saved_a_file.pdf", plot = lifeExp_by_year,
       height = 3, width = 5, units = "in")
```

If you didn't manually set font sizes, these will usually come out at a reasonable size given the dimensions of your output file.

## Changing the Axes

We can modify the axes in a variety of ways, such as:

* Change the $x$ or $y$ range using `xlim()` or `ylim()` layers

* Change to a logarithmic or square-root scale on either axis: `scale_x_log10()`, `scale_y_sqrt()`

* Change where the major/minor breaks are: `scale_x_continuous(breaks =, minor_breaks = )`

## Axis Changes

```{r}
#| fig-height: 6
#| fig-width: 10
#| fig-align: center
#| code-line-numbers: "3"
ggplot(data = China, aes(x = year, y = gdpPercap)) +
    geom_line() +
    scale_y_log10(breaks = c(1000, 2000, 3000, 4000, 5000)) + 
    xlim(1940, 2010) + ggtitle("Chinese GDP per capita")
```

## Precise Legend Position
```{r}
#| fig-height: 6
#| fig-width: 10
#| fig-align: center 
lifeExp_by_year +
  theme(legend.position = c(0.8, 0.2)) 
```

Instead of coordinates, you could also use "top", "bottom", "left", or "right".

## Scales for Color, Shape, etc.

**Scales** are layers that control how the mapped aesthetics appear. 

You can modify these with a `scale_[aesthetic]_[option]()` layer:

. . . 

* `[aesthetic]` is `color`, `shape`, `linetype`, `alpha`, `size`, `fill`, etc.

. . . 

* `[option]` is something like `manual`, `continuous` or `discrete` (depending on nature of the variable).

. . . 

**Examples:**

* `scale_linetype_manual()`: manually specify the linetype for each different value
* `scale_color_manual()`: manually specify colors

## Legend Name and Manual Colors

```{r}
#| fig-height: 6
#| fig-width: 10
#| fig-align: center
#| code-line-numbers: "4"
lifeExp_by_year +
  theme(legend.position = c(0.8, 0.2)) +
  scale_color_manual(
    name = "Which continent are\nwe looking at?", # \n adds a line break 
    values = c("Africa" = "seagreen", "Americas" = "turquoise1", 
               "Asia" = "royalblue", "Europe" = "violetred1", "Oceania" = "yellow"))
```

# Bonus: Advanced Example!

## End Result

We're going to *slowly* build up a *really detailed plot* now!

```{r}
#| echo: false
#| fig-height: 6
#| fig-width: 10
#| code-line-numbers: "10"
ggplot(data = gapminder, aes(x = year, y = lifeExp, group = country)) +
  geom_line(alpha = 0.5, aes(color = "Country", size = "Country")) +
  geom_line(stat = "smooth", method = "loess", 
            aes(group = continent, color = "Continent", size = "Continent"), alpha = 0.5) +
  facet_wrap(~ continent, nrow = 2) +
  scale_color_manual(name = "Life Exp. for:", values = c("Country" = "black", "Continent" = "blue")) +
  scale_size_manual(name = "Life Exp. for:", values = c("Country" = 0.25, "Continent" = 3)) +
  theme_minimal(base_size = 14) + ylab("Years") + xlab("") + 
  ggtitle("Life Expectancy, 1952-2007", subtitle = "By continent and country") +
  theme(legend.position=c(0.82, 0.15), axis.text.x = element_text(angle = 45)) #<<
```

## 1. Base Plot

::: {.panel-tabset}

### Code

```{r}
#| eval: false
#| code-line-numbers: "1"
ggplot(data = gapminder, aes(x = year, y = lifeExp, group = country)) 
```

### Plot

```{r}
#| echo: false
#| eval: true
#| fig-height: 6
#| fig-width: 10
#| fig-align: center
ggplot(data = gapminder, aes(x = year, y = lifeExp, group = country)) 
```
:::

::: aside
What might be a good `geom` layer for this data?
:::

## 2. Lines

::: {.panel-tabset}

### Code

```{r}
#| eval: false
#| code-line-numbers: "2"
ggplot(data = gapminder, aes(x = year, y = lifeExp, group = country)) +
  geom_line() 
```

### Plot

```{r}
#| echo: false
#| eval: true
#| fig-height: 6
#| fig-width: 10
#| fig-align: center
ggplot(data = gapminder, aes(x = year, y = lifeExp, group = country)) +
  geom_line() 
```
:::

::: aside
Let's add a continent-specific average so we can visualize country-deviations from the regional average. 
:::

## 3. Continent Average

::: {.panel-tabset}

### Code

```{r}
#| eval: false
#| code-line-numbers: "3-4"
ggplot(data = gapminder, aes(x = year, y = lifeExp, group = country)) +
  geom_line() +
  geom_line(stat = "smooth", method = "loess", 
            aes(group = continent)) 
```

### Plot

```{r}
#| echo: false
#| eval: true
#| fig-height: 6
#| fig-width: 10
#| fig-align: center
ggplot(data = gapminder, aes(x = year, y = lifeExp, group = country)) +
  geom_line() +
  geom_line(stat = "smooth", method = "loess", 
            aes(group = continent)) 
```
:::

::: aside
Note: A [*loess* curve](https://en.wikipedia.org/wiki/Local_regression) is something like a moving average.

. . . 

Let's use the facets to gain a clearer understanding of the regional patterns. 
:::

## 4. Facets

::: {.panel-tabset}

### Code

```{r}
#| eval: false
#| code-line-numbers: "5"
ggplot(data = gapminder, aes(x = year, y = lifeExp, group = country)) +
  geom_line() +
  geom_line(stat = "smooth", method = "loess", 
            aes(group = continent)) +
  facet_wrap(~ continent, nrow = 2)
```

### Plot

```{r}
#| echo: false
#| eval: true
#| fig-height: 6
#| fig-width: 10
#| fig-align: center
ggplot(data = gapminder, aes(x = year, y = lifeExp, group = country)) +
  geom_line() +
  geom_line(stat = "smooth", method = "loess", 
            aes(group = continent)) +
  facet_wrap(~ continent, nrow = 2)
```
:::

::: aside
We want to differentiate the continent-average line from the country-specific lines so let's change it's color. 
:::

## 5. Color Scale

::: {.panel-tabset}

### Code

```{r}
#| eval: false
#| code-line-numbers: "6"
ggplot(data = gapminder, aes(x = year, y = lifeExp, group = country)) +
  geom_line() +
  geom_line(stat = "smooth", method = "loess", 
            aes(group = continent)) +
  facet_wrap(~ continent, nrow = 2) +
  scale_color_manual(name = "Life Exp. for:", values = c("Country" = "black", "Continent" = "blue"))
```

### Plot

```{r}
#| echo: false
#| eval: true
#| fig-height: 6
#| fig-width: 10
#| fig-align: center
ggplot(data = gapminder, aes(x = year, y = lifeExp, group = country)) +
  geom_line() +
  geom_line(stat = "smooth", method = "loess", 
            aes(group = continent)) +
  facet_wrap(~ continent, nrow = 2) +
  scale_color_manual(name = "Life Exp. for:", values = c("Country" = "black", "Continent" = "blue"))
```
:::

::: aside
It's hard to see when it's thickness is not also differentiated. Let's change that. 
:::

## 6. Size Scale

::: {.panel-tabset}

### Code

```{r}
#| eval: false
#| code-line-numbers: "7"
ggplot(data = gapminder, aes(x = year, y = lifeExp, group = country)) +
  geom_line() +
  geom_line(stat = "smooth", method = "loess", 
            aes(group = continent)) +
  facet_wrap(~ continent, nrow = 2) +
  scale_color_manual(name = "Life Exp. for:", values = c("Country" = "black", "Continent" = "blue")) +
  scale_size_manual(name = "Life Exp. for:", values = c("Country" = 0.25, "Continent" = 3))
```

### Plot

```{r}
#| echo: false
#| eval: true
#| fig-height: 6
#| fig-width: 10
#| fig-align: center
ggplot(data = gapminder, aes(x = year, y = lifeExp, group = country)) +
  geom_line() +
  geom_line(stat = "smooth", method = "loess", 
            aes(group = continent)) +
  facet_wrap(~ continent, nrow = 2) +
  scale_color_manual(name = "Life Exp. for:", values = c("Country" = "black", "Continent" = "blue")) +
  scale_size_manual(name = "Life Exp. for:", values = c("Country" = 0.25, "Continent" = 3))
```
:::

## 7. Alpha (Transparency)

::: {.panel-tabset}

### Code

```{r}
#| eval: false
#| code-line-numbers: "2,4"
ggplot(data = gapminder, aes(x = year, y = lifeExp, group = country)) +
  geom_line(alpha = 0.5, aes(color = "Country", size = "Country")) +
  geom_line(stat = "smooth", method = "loess", 
            aes(group = continent, color = "Continent", size = "Continent"), alpha = 0.5) +
  facet_wrap(~ continent, nrow = 2) +
  scale_color_manual(name = "Life Exp. for:", values = c("Country" = "black", "Continent" = "blue")) +
  scale_size_manual(name = "Life Exp. for:", values = c("Country" = 0.25, "Continent" = 3))
```

### Plot

```{r}
#| echo: false
#| eval: true
#| fig-height: 6
#| fig-width: 10
#| fig-align: center
ggplot(data = gapminder, aes(x = year, y = lifeExp, group = country)) +
  geom_line(alpha = 0.5, aes(color = "Country", size = "Country")) +
  geom_line(stat = "smooth", method = "loess", 
            aes(group = continent, color = "Continent", size = "Continent"), alpha = 0.5) +
  facet_wrap(~ continent, nrow = 2) +
  scale_color_manual(name = "Life Exp. for:", values = c("Country" = "black", "Continent" = "blue")) +
  scale_size_manual(name = "Life Exp. for:", values = c("Country" = 0.25, "Continent" = 3))
```
:::

::: aside
Now we're getting somewhere! We can also add useful labels and clean up the theme. 
:::

## 8. Theme and Labels

::: {.panel-tabset}

### Code

```{r}
#| eval: false
#| code-line-numbers: "8"
ggplot(data = gapminder, aes(x = year, y = lifeExp, group = country)) +
  geom_line() +
  geom_line(stat = "smooth", method = "loess", 
            aes(group = continent)) +
  facet_wrap(~ continent, nrow = 2) +
  scale_color_manual(name = "Life Exp. for:", values = c("Country" = "black", "Continent" = "blue")) +
  scale_size_manual(name = "Life Exp. for:", values = c("Country" = 0.25, "Continent" = 3)) +
  theme_minimal(base_size = 14) + ylab("Years") + xlab("")
```

### Plot

```{r}
#| echo: false
#| eval: true
#| fig-height: 6
#| fig-width: 10
#| fig-align: center
ggplot(data = gapminder, aes(x = year, y = lifeExp, group = country)) +
  geom_line(alpha = 0.5, aes(color = "Country", size = "Country")) +
  geom_line(stat = "smooth", method = "loess", 
            aes(group = continent, color = "Continent", size = "Continent"), alpha = 0.5) +
  facet_wrap(~ continent, nrow = 2) +
  scale_color_manual(name = "Life Exp. for:", values = c("Country" = "black", "Continent" = "blue")) +
  scale_size_manual(name = "Life Exp. for:", values = c("Country" = 0.25, "Continent" = 3)) +
  theme_minimal(base_size = 14) + ylab("Years") + xlab("")
```
:::

::: aside
What's our plot showing? We should be explicit about that. 
:::

## 9. Title and Subtitle

::: {.panel-tabset}

### Code

```{r}
#| eval: false
#| code-line-numbers: "9"
ggplot(data = gapminder, aes(x = year, y = lifeExp, group = country)) +
  geom_line() +
  geom_line(stat = "smooth", method = "loess", 
            aes(group = continent)) +
  facet_wrap(~ continent, nrow = 2) +
  scale_color_manual(name = "Life Exp. for:", values = c("Country" = "black", "Continent" = "blue")) +
  scale_size_manual(name = "Life Exp. for:", values = c("Country" = 0.25, "Continent" = 3)) +
  theme_minimal(base_size = 14) + ylab("Years") + xlab("") + 
  ggtitle("Life Expectancy, 1952-2007", subtitle = "By continent and country")
```

### Plot

```{r}
#| echo: false
#| eval: true
#| fig-height: 6
#| fig-width: 10
#| fig-align: center
ggplot(data = gapminder, aes(x = year, y = lifeExp, group = country)) +
  geom_line(alpha = 0.5, aes(color = "Country", size = "Country")) +
  geom_line(stat = "smooth", method = "loess", 
            aes(group = continent, color = "Continent", size = "Continent"), alpha = 0.5) +
  facet_wrap(~ continent, nrow = 2) +
  scale_color_manual(name = "Life Exp. for:", values = c("Country" = "black", "Continent" = "blue")) +
  scale_size_manual(name = "Life Exp. for:", values = c("Country" = 0.25, "Continent" = 3)) +
  theme_minimal(base_size = 14) + ylab("Years") + xlab("") + 
  ggtitle("Life Expectancy, 1952-2007", subtitle = "By continent and country")
```
:::

::: aside
The x-axis feels a little busy right now...
:::

## 10. Angled Tick Values

::: {.panel-tabset}

### Code

```{r}
#| eval: false
#| code-line-numbers: "10"
ggplot(data = gapminder, aes(x = year, y = lifeExp, group = country)) +
  geom_line() +
  geom_line(stat = "smooth", method = "loess", 
            aes(group = continent)) +
  facet_wrap(~ continent, nrow = 2) +
  scale_color_manual(name = "Life Exp. for:", values = c("Country" = "black", "Continent" = "blue")) +
  scale_size_manual(name = "Life Exp. for:", values = c("Country" = 0.25, "Continent" = 3)) +
  theme_minimal(base_size = 14) + ylab("Years") + xlab("") + 
  ggtitle("Life Expectancy, 1952-2007", subtitle = "By continent and country") +
  theme(axis.text.x = element_text(angle = 45)) 
```

### Plot

```{r}
#| echo: false
#| eval: true
#| fig-height: 6
#| fig-width: 10
#| fig-align: center
ggplot(data = gapminder, aes(x = year, y = lifeExp, group = country)) +
  geom_line(alpha = 0.5, aes(color = "Country", size = "Country")) +
  geom_line(stat = "smooth", method = "loess", 
            aes(group = continent, color = "Continent", size = "Continent"), alpha = 0.5) +
  facet_wrap(~ continent, nrow = 2) +
  scale_color_manual(name = "Life Exp. for:", values = c("Country" = "black", "Continent" = "blue")) +
  scale_size_manual(name = "Life Exp. for:", values = c("Country" = 0.25, "Continent" = 3)) +
  theme_minimal(base_size = 14) + ylab("Years") + xlab("") + 
  ggtitle("Life Expectancy, 1952-2007", subtitle = "By continent and country") +
  theme(axis.text.x = element_text(angle = 45)) 
```
:::

. . . 

:::aside
Note: Fewer values might be better than angled labels!
:::

## 11. Legend Position

::: {.panel-tabset}

### Code

```{r}
#| eval: false
#| code-line-numbers: "10"
ggplot(data = gapminder, aes(x = year, y = lifeExp, group = country)) +
  geom_line() +
  geom_line(stat = "smooth", method = "loess", 
            aes(group = continent)) +
  facet_wrap(~ continent, nrow = 2) +
  scale_color_manual(name = "Life Exp. for:", values = c("Country" = "black", "Continent" = "blue")) +
  scale_size_manual(name = "Life Exp. for:", values = c("Country" = 0.25, "Continent" = 3)) +
  theme_minimal(base_size = 14) + ylab("Years") + xlab("") + 
  ggtitle("Life Expectancy, 1952-2007", subtitle = "By continent and country") +
  theme(legend.position=c(0.82, 0.15), axis.text.x = element_text(angle = 45))
```

### Plot

```{r}
#| echo: false
#| eval: true
#| fig-height: 6
#| fig-width: 10
#| fig-align: center
ggplot(data = gapminder, aes(x = year, y = lifeExp, group = country)) +
  geom_line(alpha = 0.5, aes(color = "Country", size = "Country")) +
  geom_line(stat = "smooth", method = "loess", 
            aes(group = continent, color = "Continent", size = "Continent"), alpha = 0.5) +
  facet_wrap(~ continent, nrow = 2) +
  scale_color_manual(name = "Life Exp. for:", values = c("Country" = "black", "Continent" = "blue")) +
  scale_size_manual(name = "Life Exp. for:", values = c("Country" = 0.25, "Continent" = 3)) +
  theme_minimal(base_size = 14) + ylab("Years") + xlab("") + 
  ggtitle("Life Expectancy, 1952-2007", subtitle = "By continent and country") +
  theme(legend.position=c(0.82, 0.15), axis.text.x = element_text(angle = 45))
```
:::

::: aside
VoilÃ !
:::

# Summary

## Summary

`ggplot2` can do a LOT! I won't expect you to memorize all these tools, and neither should you! 

::::{.columns}
:::{.column width="50%"}
* With time and practice, you'll start to remember the key tools

* When in doubt, Google it! (i.e. "*R ggplot 'whatever issue you need help with'*")

* There are lots of great resources out there:

  + The [Cookbook for R website](http://www.cookbook-r.com/Graphs/Legends_%28ggplot2%29)
  
  + The [RStudio ggplot Cheatsheets](https://www.rstudio.com/wp-content/uploads/2016/11/ggplot2-cheatsheet-2.1.pdf).
  
  + Kieran Healy's book [Data Visualization: A Practical Introduction](https://socviz.co/) (right) which is targeted at social scientists without technical backgrounds and uses the same tools we'll be learning in this class.
:::
:::{.column width="50%"}
![](images/dataviz_kieranhealy.jpeg)
:::
::::

## Exercise: Histograms

In pairs, you will create a histogram of life expectancy observations in the complete Gapminder dataset.

1. Set the base layer by specifying the data as `gapminder` and the x variable as `lifeExp`

2. Add a second layer to create a histogram using the function `geom_histogram()`

3. Customize your plot with nice axis labels and a title. 

## Solution

### 1: Set Base Layer

```{r}
#| eval: true
#| fig-align: center
#| fig-width: 10
#| fig-height: 5
ggplot(gapminder,aes(x=lifeExp))
```

## Solution

### 2: Add Histogram Layer

```{r}
#| eval: true
#| fig-align: center
#| fig-width: 10
#| fig-height: 5
ggplot(gapminder,aes(x=lifeExp))+
  geom_histogram(bins=30)
```

::: aside
Setting the `bins` aesthetic removes a pesky message!]
:::

## Solution

### 3: Add Label Layers

```{r}
#| eval: true
#| fig-align: center
#| fig-width: 10
#| fig-height: 5
ggplot(gapminder,aes(x=lifeExp))+
  geom_histogram(bins=30)+
  xlab("Life Expectancy")+
  ylab("Count")+
  ggtitle("Histogram of Life Expectancy in Gapminder Data")
```

## Homework #2

In this homework, you'll pose a question regarding the Gapminder dataset and investigate it graphically. 

* At the beginning of your document, write down a research question that is based on the Gapminder dataset (e.g., "How does population change over time in different countries?")
* Create 3-6 plots to answer/investigate your research question. Consider histograms (`geom_histogram()`), scatterplots (`geom_point()`), or lineplots (`geom_line()`).
* Be sure all titles, axes, and legends are clearly labelled (no raw variable names).
* Include at least one plot with `facet_wrap()` or `facet_grid()`.
* You can use other `geoms` like histograms, bar charts, adding meaningful vertical or horizontal lines, etc. [You may find this data visualization cheat sheet helpful](https://rstudio.github.io/cheatsheets/data-visualization.pdf).

Your document should be pleasant for a peer to look at, with some organization. You must write up your observations in words as well as showing the graphs. Upload both the `.qmd` file and the `.html` file to Canvas. 

## Due dates

* Section AA: 
  + Homework #1 due Tuesday, October 17th (before lecture)
  + Peer grading due Sunday, October 22nd (4:30pm)

<br>

* Section AB: 
  + Homework #1 due Thursday, October 19th (before lab)
  + Peer grading due Tuesday, October 24th (before lecture)


