---
highlight-style:  a11y-dark
footnotes-hover: true
reference-location: margin
execute: 
  echo: true
  message: false
  warning: false
  fig-format: "svg"
format: 
  revealjs:
    theme: lecture_styles.scss
    controls: true
    slide-number: true
    code-link: true
    chalkboard: true
    incremental: false 
    smaller: true
    preview-links: true
    code-line-numbers: true
    history: false
    progress: true
    link-external-icon: true
---

```{r}
#| echo = FALSE
require(downlit)
require(xml2)
```

## {#title-slide data-menu-title="Visualizing Data" background="#1e4655" background-image="../../images/csss-logo.png" background-position="center top 5%" background-size="50%"}

[Visualizing Data]{.custom-title}

[CS&SS 508 â€¢ Lecture 2]{.custom-subtitle}

[10 October 2023]{.custom-subtitle2}

[Victoria Sass]{.custom-subtitle3}


# Roadmap{.section-title background-color="#99a486"}

---

Last time, we learned about:

1. R and RStudio
2. Quarto headers, syntax, and chunks
3. Basics of functions, objects, and vectors
4. Base `R` and packages

. . . 

<br>

Today, we will cover:

1. Introducing the `tidyverse`!
2. Basics of `ggplot2`
3. Advanced features of `ggplot2`

## File Types

We mainly work with three types of files in this class:

:::{.incremental}
* `.qmd`^[Quarto builds on a decade of developments with R Markdown documents. .Rmd files operate **very** similarly to Quarto documents but there are minor differences that you can read more about [here](https://quarto.org/docs/computations/r.html#:~:text=Another%20difference%20between%20R%20Markdown,than%20relying%20on%20external%20packages).]: These are **markdown** *syntax* files, where you write code and prose to *make documents*.
* `.R`: These are **R** *syntax* files, where you write code to process and analyze data *without making an output document*^[While beyond the scope of this class, you can use the `source()` function to run a `.R` script file inside a `.qmd` or `.R` file. Using this you can break a large project up into multiple files but still run it all at once!].
* `.html` (or `.pdf`): These are the output documents created when you *Render* a quarto markdown document.
:::

. . . 

Make sure you understand the difference between the uses of these file types! Please ask for clarification if needed!

# Introducing the `tidyverse` {.section-title background-color="#99a486"}

## Packages

Last week we discussed Base `R` and the fact that what makes `R` extremely powerful and flexible is the large number of diverse user-created packages. 

. . . 

::: {.callout-note icon=false}
## <span style="color:blue">{{< fa hand >}}</span>  What are packages again?
Recall that packages are simply **collections of functions and tools** others have already created, that will make your life easier!
:::

. . . 

::: {.callout-caution icon=false}
## <span style="color:tomato">{{< fa triangle-exclamation >}}</span> The package 2-step
Remember that to **install** a new package you use `install.packages("package_name")` in the **console**. You only need to do this once per machine (unless you want to update to a newer version of a package). 

To **load** a package into your current session of `R` you use `library(package_name)`, preferably at the beginning of your `R` script or Quarto document. Every time you open RStudio it's a new session and you'll have to call `library()` on the packages you want to use.
:::

## Packages


The `Packages` tab in the bottom-right pane of RStudio lists your installed packages.

![](images/package_tab.png){fig-align="center"}

## The `tidyverse`

The `tidyverse` refers to two things: 

:::{.incremental}
1. a specific package in `R` that loads several core packages within the `tidyverse`.  
2. a specific design philosophy, grammar, and focus on "tidy" data structures developed by Hadley Wickham^[You can read the official manifesto [here](https://tidyverse.tidyverse.org/articles/manifesto.html).] and his team at RStudio (now named Posit). 
:::

## The `tidyverse` package

:::: {.columns}
::: {.column width="50%"}
The core packages within the `tidyverse` include:

:::{.incremental}
* `ggplot2` (visualizations)
* `dplyr` (data manipulation)
* `tidyr` (data reshaping)
* `readr` (data import/export)
* `purrr` (iteration)
* `tibble` (modern dataframe)
* `stringr` (text data)
* `forcats` (factors)
:::

:::
::: {.column width="50%"}

<br>

![](images/tidyverse.png)
:::
::::

## The `tidyverse` philosophy

:::: {.columns}
::: {.column width="50%"}
The principles underlying the tidyverse are: 

:::{.incremental}
1. Reuse existing data structures.
2. Compose simple functions with the pipe.
3. Embrace functional programming.
4. Design for humans.
:::

:::
::: {.column width="50%"}
![](images/extended_tidyverse.jpeg)
:::
::::

## {data-menu-title="Research process" background-image="images/research_process.png" background-position="center" background-size="90%"}

## {data-menu-title="Research process - visualization" background-image="images/research_process_visualize.png" background-position="center" background-size="90%"}

## {data-menu-title="Research process - communication" background-image="images/research_process_communicate.png" background-position="center" background-size="90%"}


## Gapminder Data 

We'll be working with data from Hans Rosling's [Gapminder](http://www.gapminder.org) project. An excerpt of these data can be accessed through an R package called `gapminder`^[Cleaned and assembled by Jenny Bryan at UBC.]. 

. . . 

In the console: `install.packages("gapminder")`

. . . 

Then load the `gapminder` package as well as the `tidyverse` package:
```{r}
#| message: true
#| warning: true
library(gapminder)
library(tidyverse)
```

## Check Out Gapminder <span style="color:#99a486">{{< fa scroll >}}</span> {.scrollable} 

The data frame we will work with is called `gapminder`, available once you have loaded the package. Let's see its structure:

```{r}
str(gapminder)
```

. . . 

<br>

#### What's Notable Here?

::: {.incremental}
* **Factor** variables `country` and `continent`
  * Factors are categorical data with an underlying numeric representation
  * We'll spend a lot of time on factors later!
* Many observations: $n=`r nrow(gapminder)`$ rows
* For each observation, a few variables: $p=`r ncol(gapminder)`$ columns
* A nested/hierarchical structure: `year` in `country` in `continent`
  * These are panel data!
:::

## Base `R` plot

:::: {.columns}
::: {.column width="50%"}
```{r}
#| eval=FALSE
China <- gapminder |> 
  filter(country == "China")
plot(lifeExp ~ year, 
     data = China, 
     xlab = "Year", 
     ylab = "Life expectancy",
     main = "Life expectancy in China", 
     col = "red", 
     pch = 16)
```

<br>

This plot is made with *one function* and *many arguments.*

:::
::: {.column width="50%"}
```{r}
#| echo: false
#| fig-width: 6
#| fig-height: 6
China <- subset(gapminder,gapminder$country == "China")
plot(lifeExp ~ year, data = China, xlab = "Year", ylab = "Life expectancy",
     main = "Life expectancy in China", col = "red", pch = 16)
```
:::
::::

::: aside
Note: Don't worry about the code used to create the object `China`. We'll explore data manipulation in a couple weeks!
:::

## Fancier: `ggplot`

:::: {.columns}
::: {.column width="50%"}
```{r}
#| eval: false
ggplot(data = China, 
       mapping = aes(x = year, y = lifeExp)) +
  geom_point(color = "red", size = 3) +
  labs(title = "Life expectancy in China", 
       x = "Year", 
       y = "Life expectancy") +
  theme_bw(base_size = 18)
```

<br>

This `ggplot` is made with *many functions* and *fewer arguments* in each.
:::
::: {.column width="50%"}
```{r}
#| warning: false
#| message: false 
#| echo: false
#| fig-width: 6
#| fig-height: 6
library(ggplot2)
ggplot(data = China, 
       mapping = aes(x = year, y = lifeExp)) +
  geom_point(color = "red", size = 3) +
  labs(title = "Life expectancy in China", 
       x = "Year", 
       y = "Life expectancy") +
  theme_bw(base_size = 18)
```
:::
::::

## `ggplot2`

The `ggplot2` package provides an alternative toolbox for plotting.

. . . 

The core idea underlying this package is the [**layered grammar of graphics**](https://vita.had.co.nz/papers/layered-grammar.pdf): i.e. that we can break up elements of a plot into pieces and combine them.

. . . 

`ggplot`s take a *bit* more work to create than Base `R` plots, but are usually: 

* prettier
* more professional
* **much** more customizable

## Layered grammar of graphics 


![](images/gglayers.png){fig-align="center"}


## Structure of a ggplot

`ggplot` graphics objects consist of two primary components:

. . . 

1. **Layers**, the components of a graph.

   * We *add* layers to a `ggplot` object using `+`.
   * This includes adding lines, shapes, and text to a plot.

. . . 

2. **Aesthetics**, which determine how the layers appear.

   * We *set* aesthetics using *arguments* (e.g. `color = "red"`) inside layer functions.
   * This includes modifying locations, colors, and sizes of the layers.

::: {.callout-tip icon=false}
## <span style="color:green">{{< fa hand-point-up >}}</span> Aesthetic Vignette
Learn more about all possible aesthetic mappings [here](https://ggplot2.tidyverse.org/articles/ggplot2-specs.html). 
:::

## Layers

**Layers** are the components of the graph, such as:

::: {.incremental}
* `ggplot()`: initializes basic plotting object, specifies input data
* `geom_point()`: layer of scatterplot points
* `geom_line()`: layer of lines
* `geom_histogram()`: layer of a histogram
* `labs` (or to specify individually: `ggtitle()`, `xlab()`, `ylab()`): layers of labels
* `facet_wrap()`: layer creating multiple plot panels
* `theme_bw()`: layer replacing default gray background with black-and-white
:::

. . . 

Layers are separated by a `+` sign. For clarity, I usually put each layer on a new line.

::: {.callout-important icon=false}
## <span style="color:red">{{< fa circle-exclamation >}}</span> Syntax Warning
Be sure to **end** each line with the `+`. The code will not run if a new line *begins* with a `+`. 
:::

## Aesthetics

**Aesthetics** control the appearance of the layers:

* `x`, `y`: $x$ and $y$ coordinate values to use
* `color`: set color of elements based on some data value
* `group`: describe which points are conceptually grouped together for the plot (often used with lines)
* `size`: set size of points/lines based on some data value (greater than 0)
* `alpha`: set transparency based on some data value (between 0 and 1)

::: {.callout-warning icon=false}
## <span style="color:orange">{{< fa triangle-exclamation >}}</span> Mapping data inside `aes()` vs. creating plot-wise settings outside `aes()`
When aesthetic arguments are called within `aes()` they specify a variable of the data and therefore map said value of the data by that aesthetic. Called outside `aes()`, these are only settings that can be given a specific value but will not display a dimension of the data. 
:::

## `ggplot` Templates

<br>

. . . 

#### All layers have:
::: {.panel-tabset}

### same data & aesthetics

```{r}
#| eval: false
ggplot(data = [dataset], 
       mapping = aes(x = [x-variable], y = [y-variable])) +
   geom_xxx() +
   other options
```

### same data, diff aesthetics 

```{r}
#| eval: false
ggplot(data = [dataset]) +
   geom_xxx(mapping = aes(x = [x-variable], y = [y-variable])) +
   other options
```

### diff data & aesthetics

```{r}
#| eval: false
ggplot() +
   geom_xxx(data = [dataset], 
            mapping = aes(x = [x-variable], y = [y-variable])) +
   other options
```

:::

## Examples: Basic Jargon in Action!

We'll now build up two `ggplot`s together that demonstrate common layers and aesthetics.

## Axis Labels, Points, No Background{auto-animate="true"}

### Base `ggplot`

:::: {.columns}
:::{.column width="50%"}
```{r}
#| eval: FALSE
#| code-line-numbers: "1-2"
ggplot(data = China,  
       aes(x = year, y = lifeExp)) 
```
:::

:::{.column width="50%"}
```{r}
#| echo: false
#| fig-height: 6
#| fig-width: 6
ggplot(data = China,  
       aes(x = year, y = lifeExp)) 
```
:::
::::

::: aside
Initialize the plot with `ggplot()` and `x` and `y` aesthetics **mapped** to variables. These aesthetics will be accessible to any future layers since they're in the primary layer.
:::

## Axis Labels, Points, No Background{auto-animate="true"}

### Scatterplot

:::: {.columns}
:::{.column width="50%"}
```{r}
#| eval: false
#| code-line-numbers: "3"
ggplot(data = China, 
       aes(x = year, y = lifeExp)) +
  geom_point()
```
:::
:::{.column width="50%"}
```{r}
#| echo: false
#| fig-height: 6
#| fig-width: 6
ggplot(data = China, 
       aes(x = year, y = lifeExp)) +
  geom_point() 
```
:::
::::

::: aside
Add a scatterplot **layer**.
:::

## Axis Labels, Points, No Background{auto-animate="true"}

### Point Color and Size

:::: {.columns}
:::{.column width="50%"}
```{r}
#| eval: false
#| code-line-numbers: "3"
ggplot(data = China, 
       aes(x = year, y = lifeExp)) +
  geom_point(color = "red", size = 3)
```
:::
:::{.column width="50%"}
```{r}
#| echo: false
#| fig-height: 6
#| fig-width: 6
ggplot(data = China, 
       aes(x = year, y = lifeExp)) +
  geom_point(color = "red", size = 3) 
```
:::
::::

::: aside 
**Set** aesthetics to make the points larger and red.
:::

## Axis Labels, Points, No Background{auto-animate="true"}

### X-Axis Label

:::: {.columns}
:::{.column width="50%"}
```{r}
#| eval: false
#| code-line-numbers: "4"
ggplot(data = China, 
       aes(x = year, y = lifeExp)) +
  geom_point(color = "red", size = 3) +
  labs(x = "Year")
```
:::
:::{.column width="50%"}
```{r}
#| echo: false
#| fig-height: 6
#| fig-width: 6
ggplot(data = China, 
       aes(x = year, y = lifeExp)) +
  geom_point(color = "red", size = 3) +
  labs(x = "Year")
```
:::
::::
  
::: aside
Add a layer to capitalize the x-axis label.
:::


## Axis Labels, Points, No Background{auto-animate="true"}

### Y-Axis Label

:::: {.columns}
:::{.column width="50%"}
```{r}
#| eval: false
#| code-line-numbers: "5"
ggplot(data = China, 
       aes(x = year, y = lifeExp)) +
  geom_point(color = "red", size = 3) +
  labs(x = "Year", 
       y = "Life expectancy")
```
:::
:::{.column width="50%"}
```{r}
#| echo: false
#| fig-height: 6
#| fig-width: 6
ggplot(data = China, 
       aes(x = year, y = lifeExp)) +
  geom_point(color = "red", size = 3) +
  labs(x = "Year", 
       y = "Life expectancy")
```
:::
::::
  
::: aside
Add a layer to clean up the y-axis label.
:::

## Axis Labels, Points, No Background{auto-animate="true"}

### Title

:::: {.columns}
:::{.column width="50%"}
```{r}
#| eval: false
#| code-line-numbers: "6" 
ggplot(data = China, 
       aes(x = year, y = lifeExp)) +
  geom_point(color = "red", size = 3) +
  labs(x = "Year",
       y = "Life expectancy",
       title = "Life expectancy in China")
```
:::
:::{.column width="50%"}
```{r}
#| echo: false
#| fig-height: 6
#| fig-width: 6
ggplot(data = China, 
       aes(x = year, y = lifeExp)) +
  geom_point(color = "red", size = 3) +
  labs(x = "Year",
       y = "Life expectancy",
       title = "Life expectancy in China")
```
:::
::::
  
::: aside
Add a title layer.
:::

## Axis Labels, Points, No Background{auto-animate="true"}

### Theme

:::: {.columns}
:::{.column width="50%"}
```{r}
#| eval: false
#| code-line-numbers: "7" 
ggplot(data = China, 
       aes(x = year, y = lifeExp)) +
  geom_point(color = "red", size = 3) +
  labs(x = "Year",
       y = "Life expectancy",
       title = "Life expectancy in China") +
  theme_minimal()
```
:::
:::{.column width="50%"}
```{r}
#| echo: false
#| fig-height: 6
#| fig-width: 6
ggplot(data = China, 
       aes(x = year, y = lifeExp)) +
  geom_point(color = "red", size = 3) +
  labs(x = "Year",
       y = "Life expectancy",
       title = "Life expectancy in China") +
  theme_minimal()
```
:::
::::
  
::: aside
Pick a nicer theme with a new layer.
:::

## Axis Labels, Points, No Background{auto-animate="true"}

### Text Size

:::: {.columns}
:::{.column width="50%"}
```{r}
#| eval: false
#| code-line-numbers: "7"
ggplot(data = China, 
       aes(x = year, y = lifeExp)) +
  geom_point(color = "red", size = 3) +
  labs(x = "Year",
       y = "Life expectancy",
       title = "Life expectancy in China") +
  theme_bw(base_size = 18) 
```
:::
:::{.column width="50%"}
```{r}
#| echo: false
#| fig-height: 6
#| fig-width: 6
ggplot(data = China, 
       aes(x = year, y = lifeExp)) +
  geom_point(color = "red", size = 3) +
  labs(x = "Year",
       y = "Life expectancy",
       title = "Life expectancy in China") +
  theme_bw(base_size = 18) 
```
:::
::::

::: aside
Increase the base text size.
:::

## Plotting All Countries

We have a plot we like for China... 

... but what if we want *all the countries*?

## Plotting All Countries{auto-animate="true"}

### A Mess!

:::: {.columns}
:::{.column width="50%"}
```{r}
#| eval: false
#| code-line-numbers: "1" 
ggplot(data = gapminder,
       aes(x = year, y = lifeExp)) +
  geom_point(color = "red", size = 3) +
  labs(x = "Year",
       y = "Life expectancy",
       title = "Life expectancy over time") + 
  theme_bw(base_size = 18) 
```
:::
:::{.column width="50%"}
```{r}
#| echo: false
#| fig-height: 6
#| fig-width: 6
ggplot(data = gapminder, 
       aes(x = year, y = lifeExp)) +
  geom_point(color = "red", size = 3) +
  labs(x = "Year",
       y = "Life expectancy",
       title = "Life expectancy over time") + 
  theme_bw(base_size = 18) 
```
:::
::::

::: aside
We can't tell countries apart! Maybe we could follow *lines*?
:::

## Plotting All Countries{auto-animate="true"}

### Lines

:::: {.columns}
:::{.column width="50%"}
```{r}
#| eval: false
#| code-line-numbers: "3"
ggplot(data = gapminder, 
       aes(x = year, y = lifeExp)) +
  geom_line(color = "red", size = 3) + 
  labs(x = "Year",
       y = "Life expectancy",
       title = "Life expectancy over time") + 
  theme_bw(base_size = 18) 
```
:::
:::{.column width="50%"}
```{r}
#| echo: false
#| fig-height: 6
#| fig-width: 6
ggplot(data = gapminder, 
       aes(x = year, y = lifeExp)) +
  geom_line(color = "red", size = 3) + 
  labs(x = "Year",
       y = "Life expectancy",
       title = "Life expectancy over time") + 
  theme_bw(base_size = 18) 
```
:::
::::

::: aside
`ggplot2` doesn't know how to connect the lines!
:::

## Plotting All Countries{auto-animate="true"}

### Grouping

:::: {.columns}
:::{.column width="50%"}
```{r}
#| eval: false
#| code-line-numbers: "3" 
ggplot(data = gapminder, 
       aes(x = year, y = lifeExp, 
           group = country)) +
  geom_line(color = "red", size = 3) +
  labs(x = "Year",
       y = "Life expectancy",
       title = "Life expectancy over time") + 
  theme_bw(base_size = 18) 
```
:::
:::{.column width="50%"}
```{r}
#| echo: false
#| fig-height: 6
#| fig-width: 6
ggplot(data = gapminder, 
       aes(x = year, y = lifeExp, 
           group = country)) +
  geom_line(color = "red", size = 3) +
  labs(x = "Year",
       y = "Life expectancy",
       title = "Life expectancy over time") + 
  theme_bw(base_size = 18) 
```
:::
::::
  
::: aside
That looks more reasonable... but the lines are too thick!
:::

## Plotting All Countries{auto-animate="true"}

### Size

:::: {.columns}
:::{.column width="50%"}
```{r}
#| eval: false
#| code-line-numbers: "4" 
ggplot(data = gapminder, 
       aes(x = year, y = lifeExp, 
           group = country)) +
  geom_line(color = "red") +
  labs(x = "Year",
       y = "Life expectancy",
       title = "Life expectancy over time") + 
  theme_bw(base_size = 18) 
```
:::
:::{.column width="50%"}
```{r}
#| echo: false
#| fig-height: 6
#| fig-width: 6
ggplot(data = gapminder, 
       aes(x = year, y = lifeExp, 
           group = country)) +
  geom_line(color = "red") +
  labs(x = "Year",
       y = "Life expectancy",
       title = "Life expectancy over time") + 
  theme_bw(base_size = 18) 
```
:::
::::

::: aside
Much better... but maybe we can do highlight regional differences?
:::

## Plotting All Countries{auto-animate="true"}

### Color

:::: {.columns}
:::{.column width="50%"}
```{r}
#| eval: false
#| code-line-numbers: "4-5" 
ggplot(data = gapminder, 
       aes(x = year, y = lifeExp, 
           group = country, 
           color = continent)) +
  geom_line() +
  labs(x = "Year",
       y = "Life expectancy",
       title = "Life expectancy over time") + 
  theme_bw(base_size = 18) 
```
:::
:::{.column width="50%"}
```{r}
#| echo: false
#| fig-height: 6
#| fig-width: 6
ggplot(data = gapminder, 
       aes(x = year, y = lifeExp, 
           group = country, 
           color = continent)) +
  geom_line() +
  labs(x = "Year",
       y = "Life expectancy",
       title = "Life expectancy over time") + 
  theme_bw(base_size = 18) 
```
:::
::::

::: aside
Patterns are obvious... but it might be even more impactful if we separate continents completely.
:::

## Plotting All Countries{auto-animate="true"}

### Facets

:::: {.columns}
:::{.column width="50%"}
```{r}
#| eval: false
#| code-line-numbers: "10" 
ggplot(data = gapminder, 
       aes(x = year, y = lifeExp, 
           group = country, 
           color = continent)) +
  geom_line() +
  labs(x = "Year",
       y = "Life expectancy",
       title = "Life expectancy over time") + 
  theme_bw(base_size = 18) +
  facet_wrap(vars(continent))
```
:::
:::{.column width="50%"}
```{r}
#| echo: false
#| fig-height: 6
#| fig-width: 6
ggplot(data = gapminder, 
       aes(x = year, y = lifeExp, 
           group = country, 
           color = continent)) +
  geom_line() +
  labs(x = "Year",
       y = "Life expectancy",
       title = "Life expectancy over time") + 
  theme_bw(base_size = 18) +
  facet_wrap(vars(continent))
```
:::
::::

::: aside
Now the text is too big!
:::

## Plotting All Countries{auto-animate="true"}

### Text Size

:::: {.columns}
:::{.column width="50%"}
```{r}
#| eval: false
#| code-line-numbers: "9" 
ggplot(data = gapminder, 
       aes(x = year, y = lifeExp, 
           group = country, 
           color = continent)) +
  geom_line() +
  labs(x = "Year",
       y = "Life expectancy",
       title = "Life expectancy over time") + 
  theme_bw() +
  facet_wrap(vars(continent))
```
:::
:::{.column width="50%"}
```{r}
#| echo: false
#| fig-height: 6
#| fig-width: 6
ggplot(data = gapminder, 
       aes(x = year, y = lifeExp, 
           group = country, 
           color = continent)) +
  geom_line() +
  labs(x = "Year",
       y = "Life expectancy",
       title = "Life expectancy over time") + 
  theme_bw() +
  facet_wrap(vars(continent))
```
:::
::::

::: aside
Better. Do we even need the legend anymore?
:::

## Plotting All Countries{auto-animate="true"}

### No Legend

:::: {.columns}
:::{.column width="50%"}
```{r}
#| eval: false
#| code-line-numbers: "11" 
ggplot(data = gapminder, 
       aes(x = year, y = lifeExp, 
           group = country, 
           color = continent)) +
  geom_line() +
  labs(x = "Year",
       y = "Life expectancy",
       title = "Life expectancy over time") + 
  theme_bw() +
  facet_wrap(vars(continent)) + 
  theme(legend.position = "none")
```
:::
:::{.column width="50%"}
```{r}
#| echo: false
#| fig-height: 6
#| fig-width: 6
ggplot(data = gapminder, 
       aes(x = year, y = lifeExp, 
           group = country, 
           color = continent)) +
  geom_line() +
  labs(x = "Year",
       y = "Life expectancy",
       title = "Life expectancy over time") + 
  theme_bw() +
  facet_wrap(vars(continent)) + 
  theme(legend.position = "none")
```
:::
::::

::: aside
Looking pretty good!
:::

# Advanced ggplot tools

---

Next, we'll discuss:

* Storing, modifying, and saving ggplots

* Advanced axis changes (scales, text, ticks)

* Legend changes (scales, colors, locations)

* Using multiple `geoms`

* Adding annotation for emphasis


## Storing Plots

We can assign a `ggplot` object to a name:

```{r}
lifeExp_by_year <- 
  ggplot(data = gapminder, 
       aes(x = year, y = lifeExp, 
           group = country, 
           color = continent)) +
  geom_line() +
  labs(x = "Year",
       y = "Life expectancy",
       title = "Life expectancy over time") + 
  theme_bw() + 
  facet_wrap(vars(continent)) +
  theme(legend.position = "none")
```

Afterwards, you can display or modify `ggplot`s...

## Showing a Stored Graph

```{r}
#| fig-width: 10
#| fig-height: 6
lifeExp_by_year
```

## Overriding previous specifications
```{r}
#| fig-width: 12
#| fig-height: 3
#| code-line-numbers: "2"
lifeExp_by_year + 
  facet_grid(cols = vars(continent)) 
```

## Adding More Layers

```{r}
#| fig-height: 3.5
#| fig-width: 12
#| code-line-numbers: "3"
lifeExp_by_year +
  facet_grid(cols = vars(continent)) + 
    theme(legend.position = "bottom")
```

## Saving `ggplot` Plots

If you want to save a ggplot, use `ggsave()`:

```{r}
#| eval: false
ggsave("I_saved_a_file.pdf", plot = lifeExp_by_year,
       height = 3, width = 5, units = "in")
```

If you didn't manually set font sizes, these will usually come out at a reasonable size given the dimensions of your output file.

## Changing the Axes

We can modify the axes in a variety of ways, such as:

* Change the $x$ or $y$ range using `xlim()` or `ylim()` layers

* Change to a logarithmic or square-root scale on either axis: `scale_x_log10()`, `scale_y_sqrt()`

* Change where the major/minor breaks are: `scale_x_continuous(breaks =, minor_breaks = )`

## Axis Changes

```{r}
#| fig-height: 6
#| fig-width: 10
#| fig-align: center
#| code-line-numbers: "3"
ggplot(data = China, aes(x = year, y = gdpPercap)) +
    geom_line() +
    scale_y_log10(breaks = c(1000, 2000, 3000, 4000, 5000)) + 
    xlim(1940, 2010) + ggtitle("Chinese GDP per capita")
```

## Precise Legend Position
```{r}
#| fig-height: 6
#| fig-width: 10
#| fig-align: center 
lifeExp_by_year +
  theme(legend.position = c(0.8, 0.2)) 
```

Instead of coordinates, you could also use "top", "bottom", "left", or "right".

## Scales for Color, Shape, etc.

**Scales** are layers that control how the mapped aesthetics appear. 

You can modify these with a `scale_[aesthetic]_[option]()` layer:

:::{.incremental}
* `[aesthetic]` is `x`, `y`, `color`, `shape`, `linetype`, `alpha`, `size`, `fill`, etc.
* `[option]` is something like `manual`, `continuous`, `binned` or `discrete` (depending on nature of the variable).
:::

. . . 

**Examples:**

* `scale_alpha_ordinal()`: scales alpha transparency for ordinal categorical variable 
* `scale_x_log10()`: maps a log10 transformation of the x-axis variable
* `scale_color_manual()`: allows manual specification of color aesthetic

## Legend Name and Manual Colors

```{r}
#| fig-height: 6
#| fig-width: 10
#| fig-align: center
#| code-line-numbers: "4, 5-6"
#| eval: false
lifeExp_by_year +
  theme(legend.position = c(0.8, 0.2)) +
  scale_color_manual(
    name = "Which continent are\nwe looking at?", # \n adds a line break 
    values = c("Africa" = "#4e79a7", "Americas" = "#f28e2c", 
               "Asia" = "#e15759", "Europe" = "#76b7b2", "Oceania" = "#59a14f"))
```

:::: {.columns}

::: {.column width="70%"}
```{r}
#| fig-height: 6
#| fig-width: 10
#| fig-align: center
#| eval: true
#| echo: false
lifeExp_by_year +
  theme(legend.position = c(0.8, 0.2)) +
  scale_color_manual(
    name = "Which continent are\nwe looking at?", # \n adds a line break 
    values = c("Africa" = "#4e79a7", "Americas" = "#f28e2c", 
               "Asia" = "#e15759", "Europe" = "#76b7b2", "Oceania" = "#59a14f"))
```
:::

::: {.column width="30%"}

<br>

<br>

::: {.callout-note icon=false}
## <span style="color:blue">{{< fa circle-info >}}</span> Note
This scale argument knows to "map" onto `continent` because it is specified as the aesthetic for color in our original ggplot object.
:::
:::

::::

## Using multiple `geoms` {auto-animate="true"}

```{r}
#| fig-align: center
#| code-line-numbers: "|2"
ggplot(gapminder, aes(x = continent, y = lifeExp)) +
  geom_boxplot(outlier.colour = "hotpink")
```

## Using multiple `geoms` {auto-animate="true"}

```{r}
#| fig-align: center
#| code-line-numbers: "3"
ggplot(gapminder, aes(x = continent, y = lifeExp)) +
  geom_boxplot(outlier.colour = "hotpink") +
  geom_jitter(alpha = 0.25)
```

## Using multiple `geoms` {auto-animate="true"}

```{r}
#| fig-align: center
#| code-line-numbers: "3"
ggplot(gapminder, aes(x = continent, y = lifeExp)) +
  geom_boxplot(outlier.colour = "hotpink") +
  geom_jitter(position = position_jitter(width = 0.1, height = 0), alpha = 0.25)
```

## Annotating specific datapoints for emphasis

```{r}
#| echo: false
outliers <- gapminder |> 
  group_by(continent) |> 
  mutate(label = case_when(continent == "Africa" & min(lifeExp) == lifeExp ~ country, 
                           continent == "Africa" & max(lifeExp) == lifeExp ~ country,
                           continent == "Americas" & min(lifeExp) == lifeExp ~ country,
                           continent == "Europe" & min(lifeExp) == lifeExp ~ country,
                           .default = NA)) |> 
  filter(!is.na(label))
```

::: {.panel-tabset}

### Basic annotation

```{r}
#| warning: false
#| fig-align: center
#| code-line-numbers: "|4"
ggplot(gapminder, aes(x = continent, y = lifeExp)) +
  geom_boxplot(outlier.colour = "hotpink") +
  geom_jitter(position = position_jitter(width = 0.1, height = 0), alpha = 0.25) + 
   geom_text(data = outliers, aes(label = label))
```

### Offset annotation

```{r}
#| warning: false
#| fig-align: center
#| code-line-numbers: "|1,5"
library(ggrepel)
ggplot(gapminder, aes(x = continent, y = lifeExp)) +
  geom_boxplot(outlier.colour = "hotpink") +
  geom_jitter(position = position_jitter(width = 0.1, height = 0), alpha = 0.25) + 
   geom_label_repel(data = outliers, aes(label = label), color = "hotpink")
```

### Code to create outliers data

```{r}
outliers <- gapminder |> 
  group_by(continent) |> 
  mutate(label = case_when(continent == "Africa" & min(lifeExp) == lifeExp ~ country, 
                           continent == "Africa" & max(lifeExp) == lifeExp ~ country,
                           continent == "Americas" & min(lifeExp) == lifeExp ~ country,
                           continent == "Europe" & min(lifeExp) == lifeExp ~ country,
                           .default = NA)) |> 
  filter(!is.na(label))

outliers
```

:::



# Bonus: Advanced Example!{.section-title background-color="#99a486"}

## End Result

We're going to *slowly* build up a *really detailed plot* now!

```{r}
#| echo: false
#| fig-height: 6
#| fig-width: 10
ggplot(data = gapminder, aes(x = year, y = lifeExp, group = country)) +
  geom_line(alpha = 0.5, aes(color = "Country", size = "Country")) +
  geom_line(stat = "smooth", method = "loess", 
            aes(group = continent, color = "Continent", size = "Continent"), alpha = 0.5) +
  facet_wrap(~ continent, nrow = 2) +
  scale_color_manual(name = "Life Exp. for:", values = c("Country" = "black", "Continent" = "blue")) +
  scale_size_manual(name = "Life Exp. for:", values = c("Country" = 0.25, "Continent" = 3)) +
  theme_minimal(base_size = 14) + ylab("Years") + xlab("") + 
  ggtitle("Life Expectancy, 1952-2007", subtitle = "By continent and country") +
  theme(legend.position=c(0.82, 0.15), axis.text.x = element_text(angle = 45))
```

## Base `ggplot` {auto-animate="true"}

::: {.panel-tabset}

### Code

```{r}
#| eval: false
ggplot(data = gapminder, 
       aes(x = year, y = lifeExp, group = country)) 
```

### Plot

```{r}
#| echo: false
#| eval: true
#| fig-height: 6
#| fig-width: 10
#| fig-align: center
ggplot(data = gapminder, 
       aes(x = year, y = lifeExp, group = country)) 
```
:::

::: aside
What might be a good `geom` layer for this data?
:::

## Lines {auto-animate="true"}

::: {.panel-tabset}

### Code

```{r}
#| eval: false
#| code-line-numbers: "3"
ggplot(data = gapminder, 
       aes(x = year, y = lifeExp, group = country)) +
  geom_line() 
```

### Plot

```{r}
#| echo: false
#| eval: true
#| fig-height: 6
#| fig-width: 10
#| fig-align: center
ggplot(data = gapminder, 
       aes(x = year, y = lifeExp, group = country)) +
  geom_line() 
```

::: aside
Let's also add a continent-specific average so we can visualize country-deviations from the regional average. 
:::

:::

## Continent Average {auto-animate="true"}

::: {.panel-tabset}

### Code

```{r}
#| eval: false
#| code-line-numbers: "4-6"
ggplot(data = gapminder, 
       aes(x = year, y = lifeExp, group = country)) +
  geom_line() +
  geom_line(stat = "smooth", 
            method = "loess", 
            aes(group = continent)) 
```

### Plot

```{r}
#| echo: false
#| eval: true
#| fig-height: 6
#| fig-width: 10
#| fig-align: center
ggplot(data = gapminder, 
       aes(x = year, y = lifeExp, group = country)) +
  geom_line() +
  geom_line(stat = "smooth", 
            method = "loess", 
            aes(group = continent)) 
```
:::

::: aside
A [*loess* curve](https://en.wikipedia.org/wiki/Local_regression) is something like a moving average.
:::

## Facets {auto-animate="true"}

::: {.panel-tabset}

### Code

```{r}
#| eval: false
#| code-line-numbers: "7-8"
ggplot(data = gapminder, 
       aes(x = year, y = lifeExp, group = country)) +
  geom_line() +
  geom_line(stat = "smooth", 
            method = "loess", 
            aes(group = continent)) +
  facet_wrap(~ continent, 
             nrow = 2)
```

### Plot

```{r}
#| echo: false
#| eval: true
#| fig-height: 6
#| fig-width: 10
#| fig-align: center
ggplot(data = gapminder, 
       aes(x = year, y = lifeExp, group = country)) +
  geom_line() +
  geom_line(stat = "smooth", 
            method = "loess", 
            aes(group = continent)) +
  facet_wrap(~ continent, nrow = 2)
```
:::

::: aside
Facets allow us to gain a clearer understanding of the regional patterns. We want to differentiate the continent-average line from the country-specific lines though so let's change it's color. 
:::

## Color Scale {auto-animate="true"}

::: {.panel-tabset}

### Code

```{r}
#| eval: false
#| code-line-numbers: "9-10"
ggplot(data = gapminder, 
       aes(x = year, y = lifeExp, group = country)) +
  geom_line() +
  geom_line(stat = "smooth", 
            method = "loess", 
            aes(group = continent)) +
  facet_wrap(~ continent, 
             nrow = 2) +
  scale_color_manual(name = "Life Exp. for:", 
                     values = c("Country" = "black", "Continent" = "blue"))
```

### Plot

```{r}
#| echo: false
#| eval: true
#| fig-height: 6
#| fig-width: 10
#| fig-align: center
ggplot(data = gapminder, 
       aes(x = year, y = lifeExp, group = country)) +
  geom_line() +
  geom_line(stat = "smooth", 
            method = "loess", 
            aes(group = continent)) +
  facet_wrap(~ continent, nrow = 2) +
  scale_color_manual(name = "Life Exp. for:", 
                     values = c("Country" = "black", "Continent" = "blue"))
```

::: aside
Hmm, can't quite see the blue line yet. Let's make it bigger?
:::

:::

## Size Scale {auto-animate="true"}

::: {.panel-tabset}

### Code

```{r}
#| eval: false
#| code-line-numbers: "11-12"
ggplot(data = gapminder, 
       aes(x = year, y = lifeExp, group = country)) +
  geom_line() +
  geom_line(stat = "smooth", 
            method = "loess", 
            aes(group = continent)) +
  facet_wrap(~ continent, 
             nrow = 2) +
  scale_color_manual(name = "Life Exp. for:", 
                     values = c("Country" = "black", "Continent" = "blue")) +
  scale_size_manual(name = "Life Exp. for:", 
                    values = c("Country" = 0.25, "Continent" = 3))
```

### Plot

```{r}
#| echo: false
#| eval: true
#| fig-height: 6
#| fig-width: 10
#| fig-align: center
ggplot(data = gapminder, 
       aes(x = year, y = lifeExp, group = country)) +
  geom_line() +
  geom_line(stat = "smooth", 
            method = "loess", 
            aes(group = continent)) +
  facet_wrap(~ continent, 
             nrow = 2) +
  scale_color_manual(name = "Life Exp. for:", 
                     values = c("Country" = "black", "Continent" = "blue")) +
  scale_size_manual(name = "Life Exp. for:", 
                    values = c("Country" = 0.25, "Continent" = 3))
```
:::

::: aside
It doesn't look like our color and size scales are actually mapping onto our variables. Why is that?
:::

## Mapping Color & Size {auto-animate="true"}

::: {.panel-tabset}

### Code

```{r}
#| eval: false
#| code-line-numbers: "3,5"
ggplot(data = gapminder, 
       aes(x = year, y = lifeExp, group = country)) +
  geom_line(aes(color = "Country", size = "Country")) +
  geom_line(stat = "smooth", method = "loess", 
            aes(group = continent, color = "Continent", size = "Continent")) +
  facet_wrap(~ continent, 
             nrow = 2) +
  scale_color_manual(name = "Life Exp. for:", 
                     values = c("Country" = "black", "Continent" = "blue")) +
  scale_size_manual(name = "Life Exp. for:", 
                    values = c("Country" = 0.25, "Continent" = 3))
```

### Plot

```{r}
#| echo: false
#| eval: true
#| fig-height: 6
#| fig-width: 10
#| fig-align: center
ggplot(data = gapminder, 
       aes(x = year, y = lifeExp, group = country)) +
  geom_line(aes(color = "Country", size = "Country")) +
  geom_line(stat = "smooth", method = "loess", 
            aes(group = continent, color = "Continent", size = "Continent")) +
  facet_wrap(~ continent, 
             nrow = 2) +
  scale_color_manual(name = "Life Exp. for:", 
                     values = c("Country" = "black", "Continent" = "blue")) +
  scale_size_manual(name = "Life Exp. for:", 
                    values = c("Country" = 0.25, "Continent" = 3))
```
:::

::: aside
Huzzah! Let's change the transparency on these lines a touch so we can see all our data more easily. 
:::

## Alpha (Transparency) {auto-animate="true"}

::: {.panel-tabset}

### Code

```{r}
#| eval: false
#| code-line-numbers: "3,7"
ggplot(data = gapminder, 
       aes(x = year, y = lifeExp, group = country)) +
  geom_line(alpha = 0.5, 
            aes(color = "Country", size = "Country")) +
  geom_line(stat = "smooth", method = "loess", 
            aes(group = continent, color = "Continent", size = "Continent"), 
            alpha = 0.5) +
  facet_wrap(~ continent, 
             nrow = 2) +
  scale_color_manual(name = "Life Exp. for:", 
                     values = c("Country" = "black", "Continent" = "blue")) +
  scale_size_manual(name = "Life Exp. for:", 
                    values = c("Country" = 0.25, "Continent" = 3))
```

### Plot

```{r}
#| echo: false
#| eval: true
#| fig-height: 6
#| fig-width: 10
#| fig-align: center
ggplot(data = gapminder, 
       aes(x = year, y = lifeExp, group = country)) +
  geom_line(alpha = 0.5, 
            aes(color = "Country", size = "Country")) +
  geom_line(stat = "smooth", 
            method = "loess", 
            aes(group = continent, color = "Continent", size = "Continent"), 
            alpha = 0.5) +
  facet_wrap(~ continent, 
             nrow = 2) +
  scale_color_manual(name = "Life Exp. for:", 
                     values = c("Country" = "black", "Continent" = "blue")) +
  scale_size_manual(name = "Life Exp. for:", 
                    values = c("Country" = 0.25, "Continent" = 3))
```
:::

::: aside
Now we're getting somewhere! We can also add useful labels and clean up the theme. 
:::

## Theme and Labels {auto-animate="true"}

::: {.panel-tabset}

### Code

```{r}
#| eval: false
#| code-line-numbers: "13-15"
ggplot(data = gapminder, 
       aes(x = year, y = lifeExp, group = country)) +
  geom_line() +
  geom_line(stat = "smooth", 
            method = "loess", 
            aes(group = continent)) +
  facet_wrap(~ continent, 
             nrow = 2) +
  scale_color_manual(name = "Life Exp. for:", 
                     values = c("Country" = "black", "Continent" = "blue")) +
  scale_size_manual(name = "Life Exp. for:", 
                    values = c("Country" = 0.25, "Continent" = 3)) +
  theme_minimal(base_size = 14) + 
  labs(y = "Years", 
       x = "")
```

### Plot

```{r}
#| echo: false
#| eval: true
#| fig-height: 6
#| fig-width: 10
#| fig-align: center
ggplot(data = gapminder, 
       aes(x = year, y = lifeExp, group = country)) +
  geom_line(alpha = 0.5, 
            aes(color = "Country", size = "Country")) +
  geom_line(stat = "smooth", 
            method = "loess", 
            aes(group = continent, color = "Continent", size = "Continent"), 
            alpha = 0.5) +
  facet_wrap(~ continent, 
             nrow = 2) +
  scale_color_manual(name = "Life Exp. for:", 
                     values = c("Country" = "black", "Continent" = "blue")) +
  scale_size_manual(name = "Life Exp. for:", 
                    values = c("Country" = 0.25, "Continent" = 3)) +
  theme_minimal(base_size = 14) + 
  labs(y = "Years", 
       x = "")
```
:::

::: aside
What's our plot showing? We should be explicit about that. 
:::

## Title and Subtitle {auto-animate="true"}

::: {.panel-tabset}

### Code

```{r}
#| eval: false
#| code-line-numbers: "16-17"
ggplot(data = gapminder, 
       aes(x = year, y = lifeExp, group = country)) +
  geom_line() +
  geom_line(stat = "smooth", 
            method = "loess", 
            aes(group = continent)) +
  facet_wrap(~ continent, 
             nrow = 2) +
  scale_color_manual(name = "Life Exp. for:", 
                     values = c("Country" = "black", "Continent" = "blue")) +
  scale_size_manual(name = "Life Exp. for:", 
                    values = c("Country" = 0.25, "Continent" = 3)) +
  theme_minimal(base_size = 14) + 
  labs(y = "Years", 
       x = "", 
       title = "Life Expectancy, 1952-2007", 
       subtitle = "By continent and country")
```

### Plot

```{r}
#| echo: false
#| eval: true
#| fig-height: 6
#| fig-width: 10
#| fig-align: center
ggplot(data = gapminder, 
       aes(x = year, y = lifeExp, group = country)) +
  geom_line(alpha = 0.5, 
            aes(color = "Country", size = "Country")) +
  geom_line(stat = "smooth", 
            method = "loess", 
            aes(group = continent, color = "Continent", size = "Continent"), 
            alpha = 0.5) +
  facet_wrap(~ continent, 
             nrow = 2) +
  scale_color_manual(name = "Life Exp. for:", 
                     values = c("Country" = "black", "Continent" = "blue")) +
  scale_size_manual(name = "Life Exp. for:", 
                    values = c("Country" = 0.25, "Continent" = 3)) +
  theme_minimal(base_size = 14) + 
  labs(y = "Years", 
       x = "", 
       title = "Life Expectancy, 1952-2007", 
       subtitle = "By continent and country")
```
:::

::: aside
The x-axis feels a little busy right now...
:::

## Angled Tick Values {auto-animate="true"}

::: {.panel-tabset}

### Code

```{r}
#| eval: false
#| code-line-numbers: "18"
ggplot(data = gapminder, 
       aes(x = year, y = lifeExp, group = country)) +
  geom_line() +
  geom_line(stat = "smooth", 
            method = "loess", 
            aes(group = continent)) +
  facet_wrap(~ continent, 
             nrow = 2) +
  scale_color_manual(name = "Life Exp. for:", 
                     values = c("Country" = "black", "Continent" = "blue")) +
  scale_size_manual(name = "Life Exp. for:", 
                    values = c("Country" = 0.25, "Continent" = 3)) +
  theme_minimal(base_size = 14) + 
  labs(y = "Years", 
       x = "", 
       title = "Life Expectancy, 1952-2007", 
       subtitle = "By continent and country") +
  theme(axis.text.x = element_text(angle = 45)) 
```

### Plot

```{r}
#| echo: false
#| eval: true
#| fig-height: 6
#| fig-width: 10
#| fig-align: center
ggplot(data = gapminder, 
       aes(x = year, y = lifeExp, group = country)) +
  geom_line(alpha = 0.5, 
            aes(color = "Country", size = "Country")) +
  geom_line(stat = "smooth", 
            method = "loess", 
            aes(group = continent, color = "Continent", size = "Continent"), 
            alpha = 0.5) +
  facet_wrap(~ continent, 
             nrow = 2) +
  scale_color_manual(name = "Life Exp. for:", 
                     values = c("Country" = "black", "Continent" = "blue")) +
  scale_size_manual(name = "Life Exp. for:", 
                    values = c("Country" = 0.25, "Continent" = 3)) +
  theme_minimal(base_size = 14) + 
  labs(y = "Years", 
       x = "", 
       title = "Life Expectancy, 1952-2007", 
       subtitle = "By continent and country") +
  theme(axis.text.x = element_text(angle = 45)) 
```
:::

. . . 

:::aside
Note: Fewer values might be better than angled labels! Finally, let's move our legend so it isn't wasting space. 
:::

## Legend Position {auto-animate="true"}

::: {.panel-tabset}

### Code

```{r}
#| eval: false
#| code-line-numbers: "18"
ggplot(data = gapminder, 
       aes(x = year, y = lifeExp, group = country)) +
  geom_line() +
  geom_line(stat = "smooth", 
            method = "loess", 
            aes(group = continent)) +
  facet_wrap(~ continent, 
             nrow = 2) +
  scale_color_manual(name = "Life Exp. for:", 
                     values = c("Country" = "black", "Continent" = "blue")) +
  scale_size_manual(name = "Life Exp. for:", 
                    values = c("Country" = 0.25, "Continent" = 3)) +
  theme_minimal(base_size = 14) + 
  labs(y = "Years", 
       x = "", 
       title = "Life Expectancy, 1952-2007", 
       subtitle = "By continent and country") +
  theme(legend.position = c(0.82, 0.15), 
        axis.text.x = element_text(angle = 45))
```

### Plot

```{r}
#| echo: false
#| eval: true
#| fig-height: 6
#| fig-width: 10
#| fig-align: center
ggplot(data = gapminder, 
       aes(x = year, y = lifeExp, group = country)) +
  geom_line(alpha = 0.5, 
            aes(color = "Country", size = "Country")) +
  geom_line(stat = "smooth", 
            method = "loess", 
            aes(group = continent, color = "Continent", size = "Continent"), 
            alpha = 0.5) +
  facet_wrap(~ continent, 
             nrow = 2) +
  scale_color_manual(name = "Life Exp. for:", 
                     values = c("Country" = "black", "Continent" = "blue")) +
  scale_size_manual(name = "Life Exp. for:", 
                    values = c("Country" = 0.25, "Continent" = 3)) +
  theme_minimal(base_size = 14) + 
  labs(y = "Years", 
       x = "", 
       title = "Life Expectancy, 1952-2007", 
       subtitle = "By continent and country") +
  theme(legend.position=c(0.82, 0.15), 
        axis.text.x = element_text(angle = 45))
```
:::

::: aside
VoilÃ !
:::

# `ggplot` Extensions!{.section-title background-color="#99a486"}

--- 

`ggplo2` can obviously do a lot on its own. But because `R` allows for anyone and everyone to expand the functionality of what already exists, numerous extensions^[The full list can be found [here](https://exts.ggplot2.tidyverse.org/gallery/).]. to `ggplot2` have been created. 

. . . 

We've already seen one example with `ggrepel`. But let's look at a few others...

## `geomtextpath`

```{r}
# install.packages("geomtextpath") <- run in console first
library(geomtextpath)
gapminder |> 
  filter(country %in% c("United States", "Afghanistan", "Iraq")) |> 
  ggplot(aes(x = year, y = lifeExp, color = country, label = country)) +
  geom_textpath() +
  theme(legend.position = "none")
```

## `ggridges`

```{r}
library(ggridges)
ggplot(gapminder, aes(x = lifeExp, y = continent, fill = continent, color = continent)) +
  geom_density_ridges(alpha = 0.5, show.legend = FALSE)
```

## ggthemes


# Summary{.section-title background-color="#99a486"}

## Summary

`ggplot2` can do a LOT! I won't expect you to memorize all these tools, and neither should you! 

::::{.columns}
:::{.column width="50%"}
* With time and practice, you'll start to remember the key tools

* When in doubt, Google it! (i.e. "*R ggplot 'whatever issue you need help with'*")

* There are lots of great resources out there:

  + The [Cookbook for R website](http://www.cookbook-r.com/Graphs/Legends_%28ggplot2%29)
  
  + The [RStudio ggplot Cheatsheets](https://www.rstudio.com/wp-content/uploads/2016/11/ggplot2-cheatsheet-2.1.pdf).
  
  + Kieran Healy's book [Data Visualization: A Practical Introduction](https://socviz.co/) (right) is targeted at social scientists without technical backgrounds and uses the same tools we'll be learning in this class.
:::
:::{.column width="50%"}
![](images/dataviz_kieranhealy.jpeg)
:::
::::

## Exercise: Histograms

In pairs, you will create a histogram of life expectancy observations in the complete Gapminder dataset.

1. Set the base layer by specifying the data as `gapminder` and the x variable as `lifeExp`

2. Add a second layer to create a histogram using the function `geom_histogram()`

3. Customize your plot with nice axis labels and a title. 

## Solution

### 1: Set Base Layer

```{r}
#| eval: true
#| fig-align: center
#| fig-width: 10
#| fig-height: 5
ggplot(gapminder,aes(x=lifeExp))
```

## Solution

### 2: Add Histogram Layer

```{r}
#| eval: true
#| fig-align: center
#| fig-width: 10
#| fig-height: 5
ggplot(gapminder,aes(x=lifeExp))+
  geom_histogram(bins=30)
```

::: aside
Setting the `bins` aesthetic removes a pesky message!]
:::

## Solution

### 3: Add Label Layers

```{r}
#| eval: true
#| fig-align: center
#| fig-width: 10
#| fig-height: 5
ggplot(gapminder,aes(x=lifeExp))+
  geom_histogram(bins=30)+
  xlab("Life Expectancy")+
  ylab("Count")+
  ggtitle("Histogram of Life Expectancy in Gapminder Data")
```

# Homework{.section-title background-color="#99a486"}

## Homework #2

In this homework, you'll pose a question regarding the Gapminder dataset and investigate it graphically. 

* At the beginning of your document, write down a research question that is based on the Gapminder dataset (e.g., "How does population change over time in different countries?")
* Create 3-6 plots to answer/investigate your research question. Consider histograms (`geom_histogram()`), scatterplots (`geom_point()`), or lineplots (`geom_line()`).
* Be sure all titles, axes, and legends are clearly labelled (no raw variable names).
* Include at least one plot with `facet_wrap()` or `facet_grid()`.
* You can use other `geoms` like histograms, bar charts, adding meaningful vertical or horizontal lines, etc. [You may find this data visualization cheat sheet helpful](https://rstudio.github.io/cheatsheets/data-visualization.pdf).

Your document should be pleasant for a peer to look at, with some organization. You must write up your observations in words as well as showing the graphs. Upload both the `.qmd` file and the `.html` file to Canvas. 

## Due dates

```{r}
#| echo: false
#| message: false
#| warning: false

# reading in base due date schedule
source("../due_dates_schedule.R")

make_due_date_table(2)
```

