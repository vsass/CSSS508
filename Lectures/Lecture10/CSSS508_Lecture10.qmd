---
title: "CSSS 508 â€¢ Lecture 10"
subtitle: "Workflow & Best Practices"
author: "Victoria Sass"
date: "November 14, 2023"
date-format: long
highlight-style:  vim-dark #, oblivion, radical, vim-dark, espresso, zenburn, kate, monochrome, breezedark, haddock
footnotes-hover: true
reference-location: margin
execute: 
  echo: true
  message: false
  warning: false
  fig-format: "svg"
format: 
  revealjs:
    theme: lecture_styles.scss
    slide-number: true
    code-link: true
    chalkboard: true
    incremental: false 
    smaller: true
    preview-links: true
    code-line-numbers: false
    #logo: "../../images/csss-white.png" # need to add css for size <https://stackoverflow.com/questions/74083521/how-to-increase-size-logo-in-quarto-reveal-js-presentation>
---

```{r}
#| echo: false
#| cache: false
require(downlit)
require(xml2)
require(tidyverse)
```

# Roadmap

---

<br>

Last time, we learned about,

*

. . . 

Today, we will cover,

* 

# Code Style

## Naming Variables 

It's good practice to name variables using only lowercase letters, numbers, and `_` (to separate words). 

. . . 

Remember to give them descriptive names, even if that means they're longer. 

. . . 

If you have many related variables, try and be consistent with your naming convention. 
* A common prefix is preferable to a common suffix due to RStudio's autocomplete feature. 

```{r}
#| eval: false
# Code goal: 
short_flights <- flights |> 
  filter(air_time < 60)

# Code foul: 
SHORTFLIGHTS <- flights |> 
  filter(air_time < 60)
```

## Spacing 

For readability you'll want to put spaces around all mathematical operators^[except for ^] (i.e. `+`, `-`, `==`, `<`, etc.) as well as the assignment operator (`<-`). 

```{r}
#| eval: false
# Code goals: 
z <- (a + b)^2 / d
mean(x, na.rm = TRUE)

# Code foul: 
z<-( a + b ) ^ 2/d
mean (x ,na.rm=TRUE)
```

. . . 

To make code easier to skim quickly it's alright to add extra space for better alignment. 

```{r}
#| eval: false
flights |> 
  mutate(
    speed      = distance / air_time,
    dep_hour   = dep_time %/% 100,
    dep_minute = dep_time %%  100
  )
```

## Pipes

As you begin to use more functions, sequentially, it can start to get unclear what's happening when, and to what. 

```{r}
#| eval: false
median(sqrt(log(mean(gapminder$pop))))
```

. . . 

With nested functions, like those above, you need to read the order of operations from inside to outside which is a bit awkward. Furthermore, it's plain confusing if you need to perform many function calls on your data for plotting or data manipulation purposes. Even more so if your functions take more than one argument!

. . . 

**Enter the pipe:** `|>`

Pipes read "left to right" which is much more intuitive! 

```{r}
#| eval: false
gapminder$pop |> mean() |> log() |> sqrt() |> median()
```

::: {.incremental}
* The above code takes what's on the left-hand side of `|>` and gives it as the first **unnamed** argument to the first function (`mean()`). 
* The result of that function call is then "piped" to the first **unnamed** argument of the second function (`log()`). 
:::

. . . 

As you can see, this allows us to "chain" many function calls together easily. 

## Pipes 

The so-called "native pipe" (i.e. built into base `R`) is relatively new. Before this, the pipe was a function from the `magrittr` package that looks like this: `%>%`. 

. . . 

This latter version continues to work and has a different functionality than the new, native pipe. 

. . . 

Most importantly, while both the `magrittr` pipe and the native pipe take the RHS (right-hand side) and "pipe" it to the LHS (left-hand side), they operate differently when it comes to explicitly specifying which argument of the LHS to pipe the RHS into. 

. . . 

```{r}
#| eval: false
# magrittr pipe
a %>% gsub('A', '-', x = .)

# native pipe
a |> gsub('A','-', x = _) # _ is the placeholder for |> 
a |> gsub(pattern = 'A', replacement = '-') # leaving the "piped" argument as the only unnamed argument also works 
a |> (\(.) gsub('A', '-', x = .))() # using an anonymous function call allow you to be explicit while specifying your own placeholder

```
^[https://stackoverflow.com/questions/70598384/piping-second-or-higher-argument-in-native-pipe] 


::: aside
You can read more about the differences between `|>` and `%>%` [here](https://www.tidyverse.org/blog/2023/04/base-vs-magrittr-pipe/#-vs) and anonymous functions [here](http://adv-r.had.co.nz/Functional-programming.html#anonymous-functions). 
:::