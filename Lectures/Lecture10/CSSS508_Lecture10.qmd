---
title: "Workflow & Best Practices"
subtitle: "CSSS 508 • Lecture 10"
author: "Victoria Sass"
date: "November 14, 2023"
date-format: long
highlight-style:  nord #, oblivion, radical, vim-dark, espresso, zenburn, breezedark, haddock; atom-one-dark-reasonable, # nord
footnotes-hover: true
reference-location: margin
execute: 
  echo: true
  message: false
  warning: false
  fig-format: "svg"
format: 
  revealjs:
    theme: lecture_styles.scss
    slide-number: true
    code-link: true
    chalkboard: true
    incremental: false 
    smaller: true
    preview-links: true
    code-line-numbers: false
    scrollable: true
    #logo: "../../images/csss-white.png" # need to add css for size <https://stackoverflow.com/questions/74083521/how-to-increase-size-logo-in-quarto-reveal-js-presentation>
---

```{r}
#| echo: false
#| cache: false
require(downlit)
require(xml2)
require(tidyverse)
```

# Roadmap

---

<br>

Last time, we learned about,

*

. . . 

Today, we will cover,

* 

# Code Style

## Naming Variables 

It's good practice to name variables using only lowercase letters, numbers, and `_` (to separate words). 

. . . 

Remember to give them descriptive names, even if that means they're longer. 

. . . 

If you have many related variables, try and be consistent with your naming convention. 
* A common prefix is preferable to a common suffix due to RStudio's autocomplete feature. 

```{r}
#| eval: false
# Code goal: 
short_flights <- flights |> 
  filter(air_time < 60)

# Code foul: 
SHORTFLIGHTS <- flights |> 
  filter(air_time < 60)
```

## Spacing 

For readability you'll want to put spaces around all mathematical operators^[except for `^`] (i.e. `+`, `-`, `==`, `<`, etc.) as well as the assignment operator (`<-`). 

```{r}
#| eval: false
# Code goals: 
z <- (a + b)^2 / d
mean(x, na.rm = TRUE)

# Code foul: 
z<-( a + b ) ^ 2/d
mean (x ,na.rm=TRUE)
```

. . . 

To make code easier to skim quickly it's alright to add extra space for better alignment. 

```{r}
#| eval: false
flights |> 
  mutate(
    speed      = distance / air_time,
    dep_hour   = dep_time %/% 100,
    dep_minute = dep_time %%  100
  )
```

## Pipes

As you begin to use more functions, sequentially, it can start to get unclear what's happening when, and to what. 

```{r}
#| eval: false
median(sqrt(log(mean(gapminder$pop))))
```

. . . 

With nested functions, like those above, you need to read the order of operations from inside to outside which is a bit awkward. Furthermore, it's plain confusing if you need to perform many function calls on your data for plotting or data manipulation purposes. Even more so if your functions take more than one argument!

. . . 

**Enter the pipe:** `|>`

Pipes read "left to right" which is much more intuitive! 

```{r}
#| eval: false
gapminder$pop |> mean() |> log() |> sqrt() |> median()
```

::: {.incremental}
* The above code takes what's on the left-hand side of `|>` and gives it as the first **unnamed** argument to the first function (`mean()`). 
* The result of that function call is then "piped" to the first **unnamed** argument of the second function (`log()`). 
:::

. . . 

As you can see, this allows us to "chain" many function calls together easily. 

## Pipes 

The so-called "native pipe" (i.e. built into base `R`) is relatively new. Before this, the pipe was a function from the `magrittr` package that looks like this: `%>%`. 

. . . 

This latter version continues to work and has a different functionality than the new, native pipe. 

. . . 

Most importantly, while both the `magrittr` pipe and the native pipe take the RHS (right-hand side) and "pipe" it to the LHS (left-hand side), they operate differently when it comes to explicitly specifying which argument of the LHS to pipe the RHS into. 

. . . 

```{r}
#| eval: false
# magrittr pipe
a %>% gsub('A', '-', x = .)

# native pipe
a |> gsub('A','-', x = _) # _ is the placeholder for |> 
a |> gsub(pattern = 'A', replacement = '-') # leaving the "piped" argument as the only unnamed argument also works 
a |> (\(.) gsub('A', '-', x = .))() # using an anonymous function call allow you to be explicit while specifying your own placeholder
```

. . . 

::: aside
You can read more about the differences between `|>` and `%>%` [here](https://www.tidyverse.org/blog/2023/04/base-vs-magrittr-pipe/#-vs) and anonymous functions [here](http://adv-r.had.co.nz/Functional-programming.html#anonymous-functions). Code above comes from responses to [this stackoverflow post](https://stackoverflow.com/questions/70598384/piping-second-or-higher-argument-in-native-pipe).
:::

## Pipes

Some good syntax practices: 

* You should always put a space before `|>` and it should usually be the last thing on a line.  
* New functions should be on a new line, indented 2 spaces (RStudio will automatically do this for you)
* Named arguments within a function should also get their own line

```{r}
#| eval: false
# code goals
flights |>  
  group_by(tailnum) |> 
  summarize(
    delay = mean(arr_delay, na.rm = TRUE),
    n = n()
  )

# code fouls
flights |>
  group_by(
    tailnum
  ) |> 
  summarize(delay = mean(arr_delay, na.rm = TRUE), n = n())


```

## .R scripts

We've been working with Quarto documents but you'll sometimes simply want to use an R script, which is basically an entire file that is just a code chunk. 

::: {.panel-tabset}
### Why would you prefer an .R file over a .qmd file? 

* You just need to run code, without the need for accompanying text output and plots in the same document. Examples include: 
  * Reading in and cleaning/manipulating your data before analysis
  * Writing functions you'll use throughout your project 
  * Getting descriptive statistics/making descriptive plots of data
  * Running models and generating tables/plots of their results
  
### When might you use a .qmd file? 

* Homework assignments (like for this class) that require you to show code, describe your process for arriving at your solution, and include any results (i.e. tables, statistics, visualizations) 
* Academic articles
* Presentations for class, conferences, talks, etc. 
* Theses/dissertations 
* Interactive visualizations (i.e. widgets)
* Building your own website
:::

## File naming

File names should:

* be machine readable: avoid spaces, symbols, and special characters. Don’t rely on case sensitivity to distinguish files.
* be human readable: use file names to describe what’s in the file.
* play well with default ordering: start file names with numbers so that alphabetical sorting puts them in the order they get used.

## File naming

::: {.panel-tabset}

### Good Example directory
```
01-load-data.R
02-exploratory-analysis.R
03-model-approach-1.R
04-model-approach-2.R
fig-01.png
fig-02.png
report-2022-03-20.qmd
report-2022-04-02.qmd
report-draft-notes.txt
```

<br>

::: {.incremental}
* Numbering scripts makes it clear in which order they should be run. 
* Consistent naming scheme makes it easy to see what things are grouped together and what varies. 
* With many files in one directory you should go a step further and create subfolders for different types of files (i.e. scripts, figures, tables, etc.)
:::

### Bad Example directory
```
alternative model.R
code for exploratory analysis.r
finalreport.qmd
FinalReport.qmd
fig 1.png
Figure_02.png
model_first_try.R
run-first.r
temp.txt
```

<br>

::: {.incremental}
* Ordering of the files is unclear
* Inconsistent naming is confusing (which final report is THE final report?)
* Non-descriptive naming means more work for you in trying to decipher its contents
:::

:::

## Working directory

Your **working directory** is where R will look for any files that you ask it to load and where it'll put anything you ask it to save. It is literally just a folder somewhere on your computer or the remote server/cloud you're working within. 

. . . 

You can ask R what your current working directory is by running `getwd()` (`get` `w`orking `d`irectory).

. . . 

```{r}
getwd()
```

You can see above that this lecture was created in a lecture-specific folder within a lectures folder, in a directory for this class, which is in a folder called `GitHub` on the Desktop of my laptop. 

. . . 

While you can technically set your working directory using `setwd()` and giving R a filepath, in the name of reproducible research I strongly advise an alternative: **RStudio projects**. 

## Projects

:::: {.columns}

::: {.column width="65%"}
![](images/new-project.png){fig-align="center"}
:::

::: {.column width="35%"}
You can create a project by clicking

* *File* > *New Project...*
* ![](images/rproject_icon.png) in the upper-left corner of RStudio
* the dropdown menu in the upper-right corner of RStudio and selecting *New Project...*

:::
::::


## Projects

A "project" is RStudio's built-in organizational support system which keeps all the files associated with a given project (i.e. data, R scripts, figures, results) together in one directory. 

. . . 

Creating a new project quite basically creates a new folder in a place that you specify. But it also does a couple of other useful things: 

. . . 

::: {.incremental}
* Creates a `.Rproj` file which tracks your command history and all the files in your project folder. 
* Contains all the files needed to reproduce your work 
  * i.e. you can send a project folder to someone and they will be able to run it on their local machine
* Facilitates version control with built-in git/GitHub connection *(more on this later in the course)*
:::
