---
title: "scratch"
execute: 
  eval: false
---





## `nchar()`

The `nchar()` function calculates the *number of characters* in a given string. 

* `length()` doesn't work with strings!!
  * Why not?

. . . 

```{r}
nchar("Victoria Sass")
length("Victoria Sass")
```

. . . 

In our `restaurants` data, let's see how many characters are in each zip code:

```{r nchar_zip}
length_zip <- nchar(restaurants$`Zip Code`) # notice when a variable name has spaces we need to contain it within backticks so R knows it is a singular entity
table(length_zip)
```

. . . 

## `substr()`

The `substr()` function allows us to extract characters from a string.

. . . 

For example, we can extract the third through fifth elements of a string as follows:

```{r}
substr("98126", 3, 5)
```

## `substr()`

Let's extract the first five characters from each zip code in the restaurants data, and add it to our dataset.

```{r}
library(dplyr)
restaurants$ZIP_5 <- substr(restaurants$`Zip Code`, 1, 5) 
restaurants %>% 
  distinct(ZIP_5) %>% 
  head()
```

## `paste()`

We combine strings together using `paste()`. By default, it puts a space between different strings.

. . . 

For example, we can combine `"Victoria"` and `"Sass"` as follows:

```{r}
paste("Victoria", "Sass")
```

## More complex `paste()` commands

There are two additional common arguments to use with `paste()`:

1. `sep =` controls what separates vectors, entry-wise
1. `collapse =` controls if/how multiple outputs are collapsed into a single string.

. . . 

Examples:

```{r}
paste("CSSS", "508", sep = "_")
paste(c("CSSS", "STAT"), "508", sep = "_")
paste(c("CSSS", "STAT"), "508", sep = "_", collapse = " , ")
```

*When do we get one string as output vs. two?*

## `paste()` Example

Let's use `paste()` to create complete mailing addresses for each restaurant:

. . . 

```{r mailing_address}
restaurants$mailing_address <- paste(restaurants$Address, ", ", restaurants$City, 
                                     ", WA ", restaurants$ZIP_5, sep = "")
restaurants %>% 
  distinct(mailing_address) %>% 
  head()
```


## Replacement: `str_replace()`

In the `Date` variable, let's replace each dash ("-") with an underscore ("_")

```{r}
dates <- restaurants$`Inspection Date`
dates %>% 
  tail(3)
str_replace(dates, "/", "_") %>% 
  tail(3)
```

Wait, what?

## Replacement: `str_replace_all()`

`str_replace()` only changes the **first** instance of a pattern in each string! 

. . . 

If we want to replace **all** patterns, use `str_replace_all()`

```{r}
dates <- restaurants$`Inspection Date`
dates %>% tail(3)
str_replace_all(dates, "/", "_") %>% 
  tail(3)
```

## Quick Summary

We've seen lots of functions today! 

*Don't try to memorize them!* Instead, use this page as a reference.

* Character Length: `nchar` and `str_length`
* Subsetting: `substr` and `str_sub`
* Combining: `paste` and `str_c`
* Case Changes: `str_to_upper()`, `str_to_lower()`, and `str_to_title()`
* Removing Whitespace: `str_trim`
* Pattern Detection/Replacement: `str_detect()` and `str_replace()`

## Activity 1: Base R Functions

The variable `Inspection Date` is in the format "MM/DD/YYYY". In this question, we'll change the format using functions for strings.

1. How long is each character string in this variable?
2. Use `substr()` to extract the month of each entry and save it to an object called "months"
3. Use `substr()` to extract the year of each entry and save it to an object called "years"
4. Use `paste()` to combine each month and year, separated by an underscore (`_`). Save this as a new variable in the data called "Inspection_Date_Formatted"

## Activity: Answers

The variable `Inspection_Date` is in the format "MM/DD/YYYY". In this question, we'll change the format using functions for strings.

1. How long is each character string in this variable?

```{r}
table(nchar(restaurants$`Inspection Date`))
```

. . . 

2. Use `substr()` to extract the month of each entry and save it to an object called "months"

```{r}
months <- substr(restaurants$`Inspection Date`, 1, 2)
months |> 
  head(5)
```

## Activity: Answers

3. Use `substr()` to extract the year of each entry and save it to an object called "years"

```{r}
years <- substr(restaurants$`Inspection Date`, 7, 10)
years |> 
  head(5)
```

. . . 

4. Use `paste()` to combine each month and year, separated by an underscore (`_`). Save this as a new variable in the data called "Inspection_Date_Formatted"

```{r}
restaurants$Inspection_Date_Formatted <- paste(months, years, sep = "_")

restaurants %>% 
  select(Name, `Inspection Date`, Inspection_Date_Formatted) %>%
  head(5)
```

## Activity 2: HW 8

Let's examine the coffee shops of King County!

1. Filter your data to only include rows in which the `Name` includes the word "coffee" (in any case!)

2.. Create a new variable in your data which includes the length of the business name, after removing beginning/trailing whitespace.

3. Create a new variable in your data for the inspection year, *using a `stringr` function!*

4. Create side-by-side boxplots for the length of business name vs. year.

5. Calculate the maximum `Inspection Score` by business and year.

6. Create a line plot of maximum score ("MaxScore") over time ("Year"), by business ("Name"). That is, you should have a single line for each business. (Don't try to label them, as there are far too many!)

## Activity: Solutions

1\. Filter your data to only include rows in which the `Name` includes the word "coffee" (in any case!)

```{r}
coffee <- restaurants
coffee$Name <- str_to_lower(coffee$Name)
coffee <- coffee %>% 
  filter(str_detect(Name, "coffee"))
coffee |> 
  head(5)
```

## Activity: Solutions

2\.Create a new variable in your data which includes the length of the business name, after removing beginning/trailing whitespace.

```{r}
coffee$NameLength <- str_length(str_trim(coffee$Name))
coffee |> 
  select(Name, NameLength) |> 
  slice(1:10)
```

## Activity: Solutions

3\. Create a new variable in your data for the inspection year.

```{r}
coffee$Year <- str_sub(coffee$`Inspection Date`,-4,-1)
coffee$Year |> 
  head(5)
```

## Activity: Solutions

4\.  Create side-by-side boxplots for the length of business name vs. year.

```{r}
#| fig-height: 6
#| fig-width: 12
#| fig-align: center
library(ggplot2)
ggplot(coffee, aes(Year, NameLength)) + 
  geom_boxplot()
```

## Activity: Solutions

5\. Calculate the maximum `Inspection Score` by business and year.

```{r}
coffee_summary <- coffee %>% 
  group_by(Name, Year) %>% 
  summarize(MaxScore = max(`Inspection Score`))
coffee_summary |> 
  head(5)
```

## Activity: Solutions

6\. Create a line plot of maximum score ("MaxScore") over time ("Year"), by business ("Name"). That is, you should have a single line for each business. (Don't try to label them, as there are far too many!)
```{r}
#| fig-height: 6
#| fig-width: 12
#| fig-align: center
ggplot(coffee_summary, aes(Year, MaxScore, group = Name)) +
  geom_line(alpha = .2)
```

# Homework{.section-title background-color="#99a486"}

## Homework 7

## Due dates

```{r}
#| echo: false
#| message: false
#| warning: false

# reading in base due date schedule
source("../due_dates_schedule.R")

make_due_date_table(7)
```
