---
execute: 
  echo: true
  message: false
  warning: false
  fig-format: "svg"
format: 
  revealjs:
    highlight-style:  a11y-dark
    reference-location: margin
    theme: lecture_styles.scss
    slide-number: true
    code-link: true
    chalkboard: true
    incremental: false 
    smaller: true
    preview-links: true
    code-line-numbers: true
    history: false
    progress: true
    link-external-icon: true
    code-annotations: hover
    pointer:
      color: "#b18eb1"
revealjs-plugins:
  - pointer
---

```{r}
#| echo: false
#| cache: false
require(downlit)
require(xml2)
require(tidyverse)
```

## {#title-slide data-menu-title="Working with Text Data" background="#1e4655" background-image="../../images/csss-logo.png" background-position="center top 5%" background-size="50%"}

```{r}
#| echo: false
#| cache: false
require(downlit)
require(xml2)
require(tidyverse)

knitr::opts_chunk$set(comment = ">")
```

[Working with Text Data]{.custom-title}

[CS&SS 508 â€¢ Lecture 7]{.custom-subtitle}

[14 November 2023]{.custom-subtitle2}

[Victoria Sass]{.custom-subtitle3}

# Roadmap{.section-title background-color="#99a486"}

---

:::: {.columns}

::: {.column width="50%"}

<br>

### Last time, we learned:

* Types of Data
  * Numbers
  * Missing Values
* Data Structures
  * Vectors
  * Matrices
  * Lists
:::

::: {.column width="50%"}

<br> 

::: {.fragment}
### Today, we will cover:

* Types of Data
  * Strings
* String Manipulation
* Regular Expressions

:::

:::

::::


# Strings{.section-title background-color="#99a486"}

# {data-menu-title="`stringr``" background-image="images/stringr.png" background-size="contain" background-position="center" .section-title background-color="#1e4655"}

## Basics of Strings

::: {.incremental}
* A general programming term for a unit of character data is a **string**
  + Strings are a *sequence of characters*
  + In R, "strings" and "character data" are mostly interchangeable.
  + Some languages have more precise distinctions, but we won't worry about that here!
:::

::: {.incremental}
* We can create strings by surrounding text, numbers, spaces, or symbols with quotes!
  + Examples: `"Hello! My name is Vic"` or `"%*$#01234"`
* You can create a string using either single quotes (`' '`) or double quotes (`" "`)
  * In the interests of consistency, the tidyverse style guide recommends using `" "`, unless the string contains multiple `" "`
:::

## Escaping with Strings

We use a lot of different symbols in our code that we might actually want to represent *within* a string itself. To do that, we need to escape that particular character. We can do that using `\`.

. . .

For instance, if we want to include a literal single or double quote in our string, we'd escape it by writing:

```{r}
#| eval: false
"\'" # <1>
'\"' # <2>
```
1. Double quote.
2. Single quote.

. . . 

Similarly, if we want to represent a `\` we'll need to escape it as well...

```{r}
#| eval: false
"\\" # <3>
```
3. Backslash.

. . . 

**Note**: When you print these objects you'll see the escape characters. To actually view the string's contents ( and not the syntax needed to construct it), use `str_view()`. 

. . . 

```{r}
str_view(c('\"', "\"", "\\")) # <4>
```
4. All `stringr` functions begin with the prefix `str_` which is useful due to R Studio's auto-complete feature.

## Other Special Characters

There are other things you may want to represent inside a character string, such as a new line, or a tab space. 

. . . 

```{r} 
#| output-location: fragment
str_view("Sometimes you need\nto create another line.") # <5>
str_view("\tOther times you just need to indent somewhere.") # <6>
```
5. Use `\n` to create a new line. Helpful when plotting if you have variable names or values that are wordy!
6. Use `\t` to add a tab. `str_view` will highlight tabs in blue in your console to make it stand out from other random whitespace. 

. . . 

Additionally, you can represent [Unicode](https://en.wikipedia.org/wiki/List_of_Unicode_characters) characters which will be written with the `\u` or `\U` escape. 

```{r}
str_view(c("\U1F00F", "\u2866", "\U1F192"))
```

## Creating Strings



## Base `R` Equivalents

:::: {.columns}

::: {.column width="50%"}
#### Base `R`
[paste0(x, sep, collapse)]{.custom-code}


:::

::: {.column width="50%"}
#### `stringr`
[str_c(x, sep, collapse)]{.custom-code}

:::

::::




```{r}
mutate(religion = factor(religion), 
       income = fct(income))
```







