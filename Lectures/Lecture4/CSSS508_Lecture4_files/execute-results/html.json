{
  "hash": "f2a5dff88200254fcb2cb63ebb825d64",
  "result": {
    "engine": "knitr",
    "markdown": "---\nexecute: \n  echo: true\n  message: false\n  warning: false\n  fig-format: \"svg\"\nformat: \n  revealjs:\n    highlight-style: a11y-dark\n    reference-location: margin\n    theme: lecture_styles.scss\n    slide-number: true\n    code-link: true\n    chalkboard: true\n    incremental: false \n    smaller: true\n    preview-links: true\n    code-line-numbers: true\n    history: false\n    progress: true\n    link-external-icon: true\n    code-annotations: hover\n    pointer:\n      color: \"#b18eb1\"\nrevealjs-plugins:\n  - pointer\n---\n\n::: {.cell}\n\n:::\n\n\n## {#title-slide data-menu-title=\"Manipulating and Summarizing Data\" background=\"#1e4655\" background-image=\"../../images/csss-logo.png\" background-position=\"center top 5%\" background-size=\"50%\"}\n\n[Manipulating and Summarizing Data]{.custom-title}\n\n[CS&SS 508 • Lecture 4]{.custom-subtitle}\n\n[{{< var lectures.four >}}]{.custom-subtitle2}\n\n[Victoria Sass]{.custom-subtitle3}\n\n# Roadmap{.section-title background-color=\"#99a486\"}\n\n---\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\n<br>\n\n### Last time, we learned:\n\n* Best Practices\n  * Code Style\n  * Workflow\n* Reproducible Research\n* Indexing vectors & dataframes in Base `R`\n:::\n\n::: {.column width=\"50%\"}\n\n<br> \n\n::: {.fragment}\n### Today, we will cover:\n\n* Types of Data\n  * Logical Operators\n* Subsetting data\n* Modifying data \n* Summarizing data\n* Merging data\n:::\n\n:::\n\n::::\n\n. . . \n\n![](images/transform.png){fig-align=\"center\"}\n\n## Death to Spreadsheets\n\nTools like *Excel* or *Google Sheets* let you manipulate spreadsheets using functions.\n\n::: {.incremental}\n* Spreadsheets are *not reproducible*: It's hard to know how someone changed the raw data!\n* It's hard to catch mistakes when you use spreadsheets^[Don't be the next sad Research Assistant who makes headlines with an Excel error! ([Reinhart & Rogoff, 2010](http://www.bloomberg.com/news/articles/2013-04-18/faq-reinhart-rogoff-and-the-excel-error-that-changed-history))].\n:::\n \n. . .  \n \nToday, we'll use `R` to manipulate data more *transparently* and *reproducibly*.\n\n## How is data stored in `R`?\n\nUnder the hood, R stores different types of data in different ways.\n\n. . . \n\n* e.g., R knows that `4.0` is a number, and that `\"Vic\"` is not a number.\n\n. . . \n\nSo what exactly are the common data types, and how do we know what R is doing?\n\n. . . \n\n<br>\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n* Logicals (`logical`)\n* Factors (`factor`)\n* Date/Date-time (`Date`, `POSIXct`, `POSIXt`)\n* Numbers (`integer`, `double`)\n* Missing Values (`NA`, `NaN`, `Inf`)\n* Character Strings (`character`)\n:::\n\n::: {.column width=\"50%\"}\n\n::: {.fragment}\n* `c(FALSE, TRUE, TRUE)`\n* `factor(c(\"red\", \"blue\"))`\n* `as_Date(c(\"2018-10-04\"))`\n* `c(1, 10*3, 4, -3.14)`\n* `c(NA, NA, NA, NaN, NaN, NA)`\n* `c(\"red\", \"blue\", \"blue\")`\n:::\n:::\n\n::::\n\n# Logical Operators{.section-title background-color=\"#99a486\"}\n\n## Booleans\n\nThe simplest data type is a Boolean, or binary, variable: `TRUE` or `FALSE`^[or `NA`]. \n\n. . . \n\nMore often than not our data don't actually have a variable with this data type, but they are definitely created and evaluated in the data manipulation and summarizing process. \n\n. . . \n\nLogical operators refer to base functions which allow us to **test if a condition** is present between two objects. \n\n. . . \n\nFor example, we may test\n\n+ Is A equal to B?\n+ Is A greater than B?\n+ Is A within B?\n\n. . . \n\nNaturally, these types of expressions produce a binary outcome of `T` or `F` which enables us to transform our data in a variety of ways!\n\n## Logical Operators in `R`\n  \n#### Comparing objects\n:::: {.columns}\n\n::: {.column width=\"19%\"}\n::: {.fragment}\n* `==`: \n* `!=`: \n* `>`, `>=`, `<`, `<=`: \n* `%in%`: \n:::\n:::\n\n::: {.column width=\"81%\"}\n\n::: {.fragment}\n* is equal to^[Note: there are TWO equal signs here!]\n* not equal to\n* less than, less than or equal to, etc.\n* used when checking if equal to one of several values\n:::\n:::\n\n::::\n\n:::{.fragment}\n#### Combining comparisons\n:::\n\n:::: {.columns}\n\n::: {.column width=\"19%\"}\n::: {.fragment}\n* `&`: \n* `|`: \n* `!`: \n* `xor()`:\n:::\n:::\n\n::: {.column width=\"81%\"}\n\n::: {.fragment .bullet-spacing}\n* **both** conditions need to hold (AND)\\\n* **at least one** condition needs to hold (OR)\\\n* **inverts** a logical condition (`TRUE` becomes `FALSE`, vice versa)\\\n* **exclusive OR** (i.e. x or y but NOT both)\n:::\n:::\n\n::::\n\n::: aside\nYou may also see `&&` and `||` but they are what's known as short-circuiting operators and are not to be used in `dplyr` functions (used for programming not data manipulation); they'll only ever return a single `TRUE` or `FALSE`.\n:::\n\n## Unexpected Behavior\n\nBe careful using `==` with numbers: \n\n. . . \n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- c(1 / 49 * 49, sqrt(2) ^ 2)\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 2\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nx == c(1, 2)# <1>\nprint(x, digits = 16) # <2>\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE FALSE\n[1] 0.9999999999999999 2.0000000000000004\n```\n\n\n:::\n:::\n\n\n1. Computers store numbers with a fixed number of decimal places so there’s no way to *precisely* represent decimals.\n2. `dplyr::near()` is a useful alternative which ignores small differences. \n\n. . . \n\nSimilarly mysterious, missing values (`NA`) represent the unknown. Almost anything conditional involving `NA`s will also be unknown:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nNA > 5\n10 == NA\nNA == NA # <3> \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] NA\n[1] NA\n[1] NA\n```\n\n\n:::\n:::\n\n\n3. The logic here: if you have one unknown and a second unknown, you don't actually know if they equal one another!\n\n. . .  \n\nThis is the reason we use `is.na()` to check for missingness. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nis.na(c(NA, 5))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  TRUE FALSE\n```\n\n\n:::\n:::\n\n\n## Examples of Logical Operators\n\nLet's create two objects, `A` and `B`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nA <- c(5, 10, 15)\nB <- c(5, 15, 25)\n```\n:::\n\n\n. . . \n\nComparisons:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nA == B\nA > B\nA %in% B # <4>\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  TRUE FALSE FALSE\n[1] FALSE FALSE FALSE\n[1]  TRUE FALSE  TRUE\n```\n\n\n:::\n:::\n\n\n4. Will return a vector the length of `A` that is `TRUE` whenever a value in `A` is anywhere in `B`. <br> **Note**: You CAN use `%in%` to search for `NA`s.\n\n. . . \n\nCombinations: \n\n\n::: {.cell}\n\n```{.r .cell-code}\nA > 5 & A <= B \nB < 10 | B > 20 # <5>\n!(A == 10)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE  TRUE  TRUE\n[1]  TRUE FALSE  TRUE\n[1]  TRUE FALSE  TRUE\n```\n\n\n:::\n:::\n\n5. Be sure not to cut corners (i.e. writing <br> `B < 10 | > 20`). The code won't technically error but it won't evaluate the way you expect it to. Read more about the confusing logic behind this [here](https://r4ds.hadley.nz/logicals#order-of-operations). \n\n## Logical Summaries\n\n:::: {.columns}\n\n::: {.column width=\"19%\"}\n::: {.fragment}\n* `any()`: \n* `all()`: \n:::\n:::\n\n::: {.column width=\"81%\"}\n\n::: {.fragment}\n* the equivalent of `|`; it’ll return `TRUE` if there are any `TRUE`’s in x\n* the equivalent of `&`; it’ll return `TRUE` only if all values of x are `TRUE`’s\n:::\n:::\n\n::::\n\n. . .\n\n\n::: {.cell}\n\n```{.r .cell-code}\nC <- c(5, 10, NA, 10, 20, NA)\nany(C <= 10) # <6> \nall(C <= 20)\nall(C <= 20, na.rm = TRUE) # <7>\nmean(C, na.rm = TRUE) # <8> \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n[1] NA\n[1] TRUE\n[1] 11.25\n```\n\n\n:::\n:::\n\n\n6. Like other summary functions, they'll return `NA` if there are any missing values present and it's `FALSE`. \n7. Use `na.rm = TRUE` to remove `NA`s prior to evaluation. \n8. When you evaluate a logical vector numerically, `TRUE` = 1 and `FALSE` = 0. This makes `sum()` and `mean()` useful when summarizing logical functions (sum gives number of `TRUE`s and mean gives the proportion). \n\n## Conditional transformations\n\n<ins>**`if_else()`**</ins>\n\nIf you want to use one value when a condition is `TRUE` and another value when it’s `FALSE`.\n\n. . . \n\n\n::: {.cell}\n\n```{.r .cell-code}\nif_else(condition = \"A logical vector\", \n        true = \"Output when condition is true\", \n        false = \"Output when condition is false\")\n```\n:::\n\n\n. . . \n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- c(-3:3, NA)\nif_else(x > 0, \"+ve\", \"-ve\", \"???\") # <9> \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"-ve\" \"-ve\" \"-ve\" \"-ve\" \"+ve\" \"+ve\" \"+ve\" \"???\"\n```\n\n\n:::\n:::\n\n9. There’s an optional fourth argument, `missing` which will be used if the input is `NA`.\n\n. . . \n\n<ins>**`case_when()`**</ins>\n\nA very useful extension of `if_else()` for multiple conditions^[Note that if multiple conditions match in `case_when()`, only the first will be used. \n]. \n\n. . . \n\n\n::: {.cell}\n\n```{.r .cell-code}\ncase_when(\n  x == 0   ~ \"0\",\n  x < 0    ~ \"-ve\", \n  x > 0    ~ \"+ve\",\n  is.na(x) ~ \"???\" # <10>\n) # <11> \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"-ve\" \"-ve\" \"-ve\" \"0\"   \"+ve\" \"+ve\" \"+ve\" \"???\"\n```\n\n\n:::\n:::\n\n\n10. Use `.default` if you want to create a “default”/catch all value. \n11. Both functions require compatible types: i.e. numerical and logical, strings and factors, dates and datetimes, `NA` and everything. \n\n# {data-menu-title=\"`dplyr`\" background-image=\"images/dplyr.png\" background-size=\"contain\" background-position=\"center\" .section-title background-color=\"#1e4655\"}\n\n## `dplyr`\n\nToday, we'll use tools from the `dplyr` package to manipulate data! \n\n* Like `ggplot2`, `dplyr` is part of the *Tidyverse*, and included in the `tidyverse` package. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n:::\n\n\n. . . \n\nTo demonstrate data transformations we're going to use the `nycflights13` dataset, which you'll need to download and load into `R`\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Download and load data\n# install.packages(\"nycflights13\") # <12>\nlibrary(nycflights13) # <13>\n```\n:::\n\n\n12. Run in console. \n13. Load into `R` session. \n\n. . . \n\n`nycflights13` includes five data frames^[Note these are separate data frames, each needing to be loaded separately:], some of which contain missing data (`NA`):\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata(flights) # <14> \ndata(airlines) # <15>\ndata(airports) # <16>\ndata(planes) # <17>\ndata(weather) # <18>\n```\n:::\n\n\n14. flights leaving JFK, LGA, or EWR in 2013\n15. airline abbreviations\n16. airport metadata\n17. airplane metadata\n18. hourly weather data for JFK, LGA, and EWR\n\n## `dplyr` Basics\n\nAll `dplyr` functions have the following in common: \n\n::: {.incremental}\n1. The first argument is always a data frame.\n2. The subsequent arguments typically describe which columns to operate on, using the variable names (without quotes).\n3. The output is always a new data frame.\n:::\n\n. . . \n\nEach function operates either on rows, columns, groups, or entire tables.\n\n. . . \n\nTo save the transformations you've made to a data frame you'll need to save the output to a new object. \n\n# Subsetting data{.section-title background-color=\"#99a486\"}\n\n## Subset Rows: `filter()`\n\nWe often get *big* datasets, and we only want some of the entries. We can subset rows using `filter()`.\n\n. . . \n\n\n::: {.cell}\n\n```{.r .cell-code}\ndelay_2hr <- flights |> \n  filter(dep_delay > 120) # <1>\ndelay_2hr # <2>\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 9,723 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   <int> <int> <int>    <int>          <int>     <dbl>    <int>          <int>\n 1  2013     1     1      848           1835       853     1001           1950\n 2  2013     1     1      957            733       144     1056            853\n 3  2013     1     1     1114            900       134     1447           1222\n 4  2013     1     1     1540           1338       122     2020           1825\n 5  2013     1     1     1815           1325       290     2120           1542\n 6  2013     1     1     1842           1422       260     1958           1535\n 7  2013     1     1     1856           1645       131     2212           2005\n 8  2013     1     1     1934           1725       129     2126           1855\n 9  2013     1     1     1938           1703       155     2109           1823\n10  2013     1     1     1942           1705       157     2124           1830\n# ℹ 9,713 more rows\n# ℹ 11 more variables: arr_delay <dbl>, carrier <chr>, flight <int>,\n#   tailnum <chr>, origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>,\n#   hour <dbl>, minute <dbl>, time_hour <dttm>\n```\n\n\n:::\n:::\n\n\n1. Here's where all your new knowledge about logical operators comes in handy! Make sure to use `==` not `=` to test the logical condition. \n2. Now, `delay_2hr` is an object in our environment which contains rows corresponding to flights that experienced at least a 2 hour delay.\n\n## Subset Columns: `select()`\n\nWhat if we want to keep every observation, but only use certain variables? Use `select()`!\n\n. . . \n\nWe can select columns by name: \n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |> \n  select(year, month, day) # <3>\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 336,776 × 3\n    year month   day\n   <int> <int> <int>\n 1  2013     1     1\n 2  2013     1     1\n 3  2013     1     1\n 4  2013     1     1\n 5  2013     1     1\n 6  2013     1     1\n 7  2013     1     1\n 8  2013     1     1\n 9  2013     1     1\n10  2013     1     1\n# ℹ 336,766 more rows\n```\n\n\n:::\n:::\n\n\n3. You can use a `-` before a variable name or a vector of variables to drop them from the data (i.e. <br> `select(-c(year, month, day))`).\n\n## Subset Columns: `select()`\n\nWhat if we want to keep every observation, but only use certain variables? Use `select()`!\n\n\nWe can select columns between variables (inclusive): \n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |> \n  select(year:day) # <4>\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 336,776 × 3\n    year month   day\n   <int> <int> <int>\n 1  2013     1     1\n 2  2013     1     1\n 3  2013     1     1\n 4  2013     1     1\n 5  2013     1     1\n 6  2013     1     1\n 7  2013     1     1\n 8  2013     1     1\n 9  2013     1     1\n10  2013     1     1\n# ℹ 336,766 more rows\n```\n\n\n:::\n:::\n\n\n4. Add a `!` before `year` and you'll drop this group of variables from the data. \n\n## Subset Columns: `select()`\n\nWhat if we want to keep every observation, but only use certain variables? Use `select()`!\n\nWe can select columns based on a condition: \n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |> \n  select(where(is.character)) # <5>\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 336,776 × 4\n   carrier tailnum origin dest \n   <chr>   <chr>   <chr>  <chr>\n 1 UA      N14228  EWR    IAH  \n 2 UA      N24211  LGA    IAH  \n 3 AA      N619AA  JFK    MIA  \n 4 B6      N804JB  JFK    BQN  \n 5 DL      N668DN  LGA    ATL  \n 6 UA      N39463  EWR    ORD  \n 7 B6      N516JB  EWR    FLL  \n 8 EV      N829AS  LGA    IAD  \n 9 B6      N593JB  JFK    MCO  \n10 AA      N3ALAA  LGA    ORD  \n# ℹ 336,766 more rows\n```\n\n\n:::\n:::\n\n\n5. There are a number of helper functions you can use with `select()` including `starts_with()`, `ends_with()`, `contains()` and `num_range()`. Read more about these and more [here](https://tidyselect.r-lib.org/reference/index.html). \n\n## Finding Unique Rows: `distinct()`\n\nYou may want to find the unique combinations of variables in a dataset.  Use `distinct()`\n\n. . . \n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |> \n  distinct(origin, dest) # <6>\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 224 × 2\n   origin dest \n   <chr>  <chr>\n 1 EWR    IAH  \n 2 LGA    IAH  \n 3 JFK    MIA  \n 4 JFK    BQN  \n 5 LGA    ATL  \n 6 EWR    ORD  \n 7 EWR    FLL  \n 8 LGA    IAD  \n 9 JFK    MCO  \n10 LGA    ORD  \n# ℹ 214 more rows\n```\n\n\n:::\n:::\n\n\n6. Find all unique origin and destination pairs.\n\n## `distinct()` drops variables!\n\nBy default, `distinct()` drops unused variables. If you don't want to drop them, add the argument `.keep_all = TRUE`:\n\n. . . \n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |> \n  distinct(origin, dest, .keep_all = TRUE) # <7> \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 224 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   <int> <int> <int>    <int>          <int>     <dbl>    <int>          <int>\n 1  2013     1     1      517            515         2      830            819\n 2  2013     1     1      533            529         4      850            830\n 3  2013     1     1      542            540         2      923            850\n 4  2013     1     1      544            545        -1     1004           1022\n 5  2013     1     1      554            600        -6      812            837\n 6  2013     1     1      554            558        -4      740            728\n 7  2013     1     1      555            600        -5      913            854\n 8  2013     1     1      557            600        -3      709            723\n 9  2013     1     1      557            600        -3      838            846\n10  2013     1     1      558            600        -2      753            745\n# ℹ 214 more rows\n# ℹ 11 more variables: arr_delay <dbl>, carrier <chr>, flight <int>,\n#   tailnum <chr>, origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>,\n#   hour <dbl>, minute <dbl>, time_hour <dttm>\n```\n\n\n:::\n:::\n\n\n7. It’s not a coincidence that all of these distinct flights are on January 1: `distinct()` will find the first occurrence of a unique row in the dataset and discard the rest. Use `count()` if you're looking for the number of occurrences. \n\n## Count Unique Rows: `count()` \n\n. . . \n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |>\n  count(origin, dest, sort = TRUE) # <8>\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 224 × 3\n   origin dest      n\n   <chr>  <chr> <int>\n 1 JFK    LAX   11262\n 2 LGA    ATL   10263\n 3 LGA    ORD    8857\n 4 JFK    SFO    8204\n 5 LGA    CLT    6168\n 6 EWR    ORD    6100\n 7 JFK    BOS    5898\n 8 LGA    MIA    5781\n 9 JFK    MCO    5464\n10 EWR    BOS    5327\n# ℹ 214 more rows\n```\n\n\n:::\n:::\n\n\n8. `sort = TRUE` arranges them in descending order of number of occurrences. \n\n# Modifying data{.section-title background-color=\"#99a486\"}\n\n## Sorting Data by Rows: `arrange()`\n\nSometimes it's useful to sort rows in your data, in ascending (low to high) or descending (high to low) order. We do that with `arrange()`.\n\n. . . \n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |> \n  arrange(year, month, day, dep_time) # <1> \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 336,776 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   <int> <int> <int>    <int>          <int>     <dbl>    <int>          <int>\n 1  2013     1     1      517            515         2      830            819\n 2  2013     1     1      533            529         4      850            830\n 3  2013     1     1      542            540         2      923            850\n 4  2013     1     1      544            545        -1     1004           1022\n 5  2013     1     1      554            600        -6      812            837\n 6  2013     1     1      554            558        -4      740            728\n 7  2013     1     1      555            600        -5      913            854\n 8  2013     1     1      557            600        -3      709            723\n 9  2013     1     1      557            600        -3      838            846\n10  2013     1     1      558            600        -2      753            745\n# ℹ 336,766 more rows\n# ℹ 11 more variables: arr_delay <dbl>, carrier <chr>, flight <int>,\n#   tailnum <chr>, origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>,\n#   hour <dbl>, minute <dbl>, time_hour <dttm>\n```\n\n\n:::\n:::\n\n\n1. If you provide more than one column name, each additional column will be used to break ties in the values of preceding columns.\n\n## Sorting Data by Rows: `arrange()`\n\nTo sort in descending order, using `desc()` within `arrange()`\n\n. . . \n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |> \n  arrange(desc(dep_delay))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 336,776 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   <int> <int> <int>    <int>          <int>     <dbl>    <int>          <int>\n 1  2013     1     9      641            900      1301     1242           1530\n 2  2013     6    15     1432           1935      1137     1607           2120\n 3  2013     1    10     1121           1635      1126     1239           1810\n 4  2013     9    20     1139           1845      1014     1457           2210\n 5  2013     7    22      845           1600      1005     1044           1815\n 6  2013     4    10     1100           1900       960     1342           2211\n 7  2013     3    17     2321            810       911      135           1020\n 8  2013     6    27      959           1900       899     1236           2226\n 9  2013     7    22     2257            759       898      121           1026\n10  2013    12     5      756           1700       896     1058           2020\n# ℹ 336,766 more rows\n# ℹ 11 more variables: arr_delay <dbl>, carrier <chr>, flight <int>,\n#   tailnum <chr>, origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>,\n#   hour <dbl>, minute <dbl>, time_hour <dttm>\n```\n\n\n:::\n:::\n\n\n## Rename Variables: `rename()`\n\nYou may receive data with unintuitive variable names. Change them using `rename()`.\n\n. . . \n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |> \n  rename(tail_num = tailnum) # <2>\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 336,776 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   <int> <int> <int>    <int>          <int>     <dbl>    <int>          <int>\n 1  2013     1     1      517            515         2      830            819\n 2  2013     1     1      533            529         4      850            830\n 3  2013     1     1      542            540         2      923            850\n 4  2013     1     1      544            545        -1     1004           1022\n 5  2013     1     1      554            600        -6      812            837\n 6  2013     1     1      554            558        -4      740            728\n 7  2013     1     1      555            600        -5      913            854\n 8  2013     1     1      557            600        -3      709            723\n 9  2013     1     1      557            600        -3      838            846\n10  2013     1     1      558            600        -2      753            745\n# ℹ 336,766 more rows\n# ℹ 11 more variables: arr_delay <dbl>, carrier <chr>, flight <int>,\n#   tail_num <chr>, origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>,\n#   hour <dbl>, minute <dbl>, time_hour <dttm>\n```\n\n\n:::\n:::\n\n\n2. `rename(new_name = old_name)` is the format. Reminder to use `janitor::clean_names()` if you want to automate this process for a lot of variables. \n\n. . . \n\n::: {.callout-caution icon=false}\n## <span style=\"color:tomato\">{{< fa exclamation-triangle >}}</span> Variable Syntax\nI recommend **against** using spaces in a name! It makes things *really hard* sometimes!!\n:::\n\n## Create New Columns: `mutate()`\n\nYou can add new columns to a data frame using `mutate()`. \n\n. . . \n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |> \n  mutate(\n    gain = dep_delay - arr_delay,\n    speed = distance / air_time * 60,\n    .before = 1 # <3> \n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 336,776 × 21\n    gain speed  year month   day dep_time sched_dep_time dep_delay arr_time\n   <dbl> <dbl> <int> <int> <int>    <int>          <int>     <dbl>    <int>\n 1    -9  370.  2013     1     1      517            515         2      830\n 2   -16  374.  2013     1     1      533            529         4      850\n 3   -31  408.  2013     1     1      542            540         2      923\n 4    17  517.  2013     1     1      544            545        -1     1004\n 5    19  394.  2013     1     1      554            600        -6      812\n 6   -16  288.  2013     1     1      554            558        -4      740\n 7   -24  404.  2013     1     1      555            600        -5      913\n 8    11  259.  2013     1     1      557            600        -3      709\n 9     5  405.  2013     1     1      557            600        -3      838\n10   -10  319.  2013     1     1      558            600        -2      753\n# ℹ 336,766 more rows\n# ℹ 12 more variables: sched_arr_time <int>, arr_delay <dbl>, carrier <chr>,\n#   flight <int>, tailnum <chr>, origin <chr>, dest <chr>, air_time <dbl>,\n#   distance <dbl>, hour <dbl>, minute <dbl>, time_hour <dttm>\n```\n\n\n:::\n:::\n\n\n3. By default, `mutate()` adds new columns on the right hand side of your dataset, which makes it difficult to see if anything happened. You can use the `.before` argument to specify which numeric index (or variable name) to move the newly created variable to. `.after` is an alternative argument for this.   \n\n## Specifying Variables to Keep: `mutate()`\n\nYou can specify which columns to keep with the `.keep` argument:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |> \n  mutate(\n    gain = dep_delay - arr_delay,\n    hours = air_time / 60,\n    gain_per_hour = gain / hours,\n    .keep = \"used\" # <4> \n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 336,776 × 6\n   dep_delay arr_delay air_time  gain hours gain_per_hour\n       <dbl>     <dbl>    <dbl> <dbl> <dbl>         <dbl>\n 1         2        11      227    -9 3.78          -2.38\n 2         4        20      227   -16 3.78          -4.23\n 3         2        33      160   -31 2.67         -11.6 \n 4        -1       -18      183    17 3.05           5.57\n 5        -6       -25      116    19 1.93           9.83\n 6        -4        12      150   -16 2.5           -6.4 \n 7        -5        19      158   -24 2.63          -9.11\n 8        -3       -14       53    11 0.883         12.5 \n 9        -3        -8      140     5 2.33           2.14\n10        -2         8      138   -10 2.3           -4.35\n# ℹ 336,766 more rows\n```\n\n\n:::\n:::\n\n\n4. \"used\" retains only the variables used to create the new variables, which is useful for checking your work. Other options include: \"all,\" \"unused,\" and \"none.\"\n\n## Move Variables Around: `relocate()`\n\nYou might want to collect related variables together or move important variables to the front. Use `relocate()`!\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |> \n  relocate(time_hour, air_time) # <5>\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 336,776 × 19\n   time_hour           air_time  year month   day dep_time sched_dep_time\n   <dttm>                 <dbl> <int> <int> <int>    <int>          <int>\n 1 2013-01-01 05:00:00      227  2013     1     1      517            515\n 2 2013-01-01 05:00:00      227  2013     1     1      533            529\n 3 2013-01-01 05:00:00      160  2013     1     1      542            540\n 4 2013-01-01 05:00:00      183  2013     1     1      544            545\n 5 2013-01-01 06:00:00      116  2013     1     1      554            600\n 6 2013-01-01 05:00:00      150  2013     1     1      554            558\n 7 2013-01-01 06:00:00      158  2013     1     1      555            600\n 8 2013-01-01 06:00:00       53  2013     1     1      557            600\n 9 2013-01-01 06:00:00      140  2013     1     1      557            600\n10 2013-01-01 06:00:00      138  2013     1     1      558            600\n# ℹ 336,766 more rows\n# ℹ 12 more variables: dep_delay <dbl>, arr_time <int>, sched_arr_time <int>,\n#   arr_delay <dbl>, carrier <chr>, flight <int>, tailnum <chr>, origin <chr>,\n#   dest <chr>, distance <dbl>, hour <dbl>, minute <dbl>\n```\n\n\n:::\n:::\n\n\n5. By default `relocate()` moves variables to the front but you can also specify where to put them using the `.before` and `.after` arguments, just like in `mutate()`.\n\n# Summarizing data{.section-title background-color=\"#99a486\"}\n\n## Grouping Data: `group_by()`\n\nIf you want to analyze your data by specific groupings, use `group_by()`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |> \n  group_by(month) # <1>\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 336,776 × 19\n# Groups:   month [12]\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   <int> <int> <int>    <int>          <int>     <dbl>    <int>          <int>\n 1  2013     1     1      517            515         2      830            819\n 2  2013     1     1      533            529         4      850            830\n 3  2013     1     1      542            540         2      923            850\n 4  2013     1     1      544            545        -1     1004           1022\n 5  2013     1     1      554            600        -6      812            837\n 6  2013     1     1      554            558        -4      740            728\n 7  2013     1     1      555            600        -5      913            854\n 8  2013     1     1      557            600        -3      709            723\n 9  2013     1     1      557            600        -3      838            846\n10  2013     1     1      558            600        -2      753            745\n# ℹ 336,766 more rows\n# ℹ 11 more variables: arr_delay <dbl>, carrier <chr>, flight <int>,\n#   tailnum <chr>, origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>,\n#   hour <dbl>, minute <dbl>, time_hour <dttm>\n```\n\n\n:::\n:::\n\n\n1. `group_by()` doesn’t change the data but you’ll notice that the output indicates that it is “grouped by” month `(Groups: month [12])`. This means subsequent operations will now work “by month”.\n\n## Summarizing Data: `summarize()`\n\n**`summarize()`** calculates summaries of variables in your data:\n\n::: {.incremental}\n* Count the number of rows\n* Calculate the mean\n* Calculate the sum\n* Find the minimum or maximum value\n:::\n\n. . . \n\nYou can use any function inside `summarize()` that aggregates *multiple values* into a *single value* (like `sd()`, `mean()`, or `max()`).\n\n## `summarize()` Example\n\nLet's see what this looks like in our flights dataset:\n\n. . . \n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |> \n  summarize(\n    avg_delay = mean(dep_delay) # <2> \n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 1\n  avg_delay\n      <dbl>\n1        NA\n```\n\n\n:::\n:::\n\n\n2. The `NA` produced here is a result of calling `mean` on `dep_delay`. Any summarizing function will return `NA` if **any** of the values are `NA`. We can set `na.rm = TRUE` to change this behavior. \n\n## `summarize()` Example\n\nLet's see what this looks like in our flights dataset:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |> \n  summarize(\n    avg_delay = mean(dep_delay, na.rm = TRUE) \n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 1\n  avg_delay\n      <dbl>\n1      12.6\n```\n\n\n:::\n:::\n\n\n## Summarizing Data by Groups\n\nWhat if we want to summarize data by our groups? Use `group_by()` **and** `summarize()`\n\n. . . \n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |> \n  group_by(month) |> \n  summarize(\n    delay = mean(dep_delay, na.rm = TRUE)\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 12 × 2\n   month delay\n   <int> <dbl>\n 1     1 10.0 \n 2     2 10.8 \n 3     3 13.2 \n 4     4 13.9 \n 5     5 13.0 \n 6     6 20.8 \n 7     7 21.7 \n 8     8 12.6 \n 9     9  6.72\n10    10  6.24\n11    11  5.44\n12    12 16.6 \n```\n\n\n:::\n:::\n\n\n. . . \n\nBecause we did `group_by()` with `month`, then used `summarize()`, we get *one row per value of `month`*!\n\n## Summarizing Data by Groups\n\nYou can create any number of summaries in a single call to summarize().\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |> \n  group_by(month) |> \n  summarize(\n    delay = mean(dep_delay, na.rm = TRUE), \n    n = n() # <3>\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 12 × 3\n   month delay     n\n   <int> <dbl> <int>\n 1     1 10.0  27004\n 2     2 10.8  24951\n 3     3 13.2  28834\n 4     4 13.9  28330\n 5     5 13.0  28796\n 6     6 20.8  28243\n 7     7 21.7  29425\n 8     8 12.6  29327\n 9     9  6.72 27574\n10    10  6.24 28889\n11    11  5.44 27268\n12    12 16.6  28135\n```\n\n\n:::\n:::\n\n\n3. `n()` returns the number of rows in each group. \n\n## Grouping by Multiple Variables <span style=\"color:#99a486\">{{< fa scroll >}}</span> {.scrollable} \n\n\n::: {.cell}\n\n```{.r .cell-code}\ndaily <- flights |> \n  group_by(year, month, day)  \ndaily\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 336,776 × 19\n# Groups:   year, month, day [365]\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   <int> <int> <int>    <int>          <int>     <dbl>    <int>          <int>\n 1  2013     1     1      517            515         2      830            819\n 2  2013     1     1      533            529         4      850            830\n 3  2013     1     1      542            540         2      923            850\n 4  2013     1     1      544            545        -1     1004           1022\n 5  2013     1     1      554            600        -6      812            837\n 6  2013     1     1      554            558        -4      740            728\n 7  2013     1     1      555            600        -5      913            854\n 8  2013     1     1      557            600        -3      709            723\n 9  2013     1     1      557            600        -3      838            846\n10  2013     1     1      558            600        -2      753            745\n# ℹ 336,766 more rows\n# ℹ 11 more variables: arr_delay <dbl>, carrier <chr>, flight <int>,\n#   tailnum <chr>, origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>,\n#   hour <dbl>, minute <dbl>, time_hour <dttm>\n```\n\n\n:::\n:::\n\n\n. . . \n\n::: {.callout-tip icon=false}\n## <span style=\"color:green\">{{< fa info-circle >}}</span> Summary & Grouping Behavior\nWhen you summarize a tibble grouped by more than one variable, each summary peels off the last group. You can change the default behavior by setting the `.groups` argument to a different value, e.g., \"drop\" to drop all grouping or \"keep\" to preserve the same groups. The default is \"drop_last\". \n:::\n\n## Remove Grouping: `ungroup()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndaily |> \n  ungroup() \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 336,776 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   <int> <int> <int>    <int>          <int>     <dbl>    <int>          <int>\n 1  2013     1     1      517            515         2      830            819\n 2  2013     1     1      533            529         4      850            830\n 3  2013     1     1      542            540         2      923            850\n 4  2013     1     1      544            545        -1     1004           1022\n 5  2013     1     1      554            600        -6      812            837\n 6  2013     1     1      554            558        -4      740            728\n 7  2013     1     1      555            600        -5      913            854\n 8  2013     1     1      557            600        -3      709            723\n 9  2013     1     1      557            600        -3      838            846\n10  2013     1     1      558            600        -2      753            745\n# ℹ 336,766 more rows\n# ℹ 11 more variables: arr_delay <dbl>, carrier <chr>, flight <int>,\n#   tailnum <chr>, origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>,\n#   hour <dbl>, minute <dbl>, time_hour <dttm>\n```\n\n\n:::\n:::\n\n\n## New Alternative for Grouping: `.by`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |> \n  summarize(\n    delay = mean(dep_delay, na.rm = TRUE), \n    n = n(),\n    .by = month # <4>\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 12 × 3\n   month delay     n\n   <int> <dbl> <int>\n 1     1 10.0  27004\n 2    10  6.24 28889\n 3    11  5.44 27268\n 4    12 16.6  28135\n 5     2 10.8  24951\n 6     3 13.2  28834\n 7     4 13.9  28330\n 8     5 13.0  28796\n 9     6 20.8  28243\n10     7 21.7  29425\n11     8 12.6  29327\n12     9  6.72 27574\n```\n\n\n:::\n:::\n\n\n4. `.by` works with all verbs and has the advantage that you don’t need to use the `.groups` argument to suppress the grouping message or `ungroup()` when you’re done.\n\n## Select Specific Rows Per Group: `slice_*`\n\nThere are five handy functions that allow you extract specific rows within each group:\n\n::: {.incremental}\n* `df |> slice_head(n = 1)` takes the first row from each group.\n* `df |> slice_tail(n = 1)` takes the last row in each group.\n* `df |> slice_min(x, n = 1)` takes the row with the smallest value of column x.\n* `df |> slice_max(x, n = 1)` takes the row with the largest value of column x.\n* `df |> slice_sample(n = 1)` takes one random row.\n:::\n\n. . . \n\nLet's find the flights that are most delayed upon arrival at each destination. \n\n\n## Select Specific Rows Per Group: `slice_*` \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |> \n  group_by(dest) |> \n  slice_max(arr_delay, n = 1) |> # <5>\n  relocate(dest, arr_delay) \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 108 × 19\n# Groups:   dest [105]\n   dest  arr_delay  year month   day dep_time sched_dep_time dep_delay arr_time\n   <chr>     <dbl> <int> <int> <int>    <int>          <int>     <dbl>    <int>\n 1 ABQ         153  2013     7    22     2145           2007        98      132\n 2 ACK         221  2013     7    23     1139            800       219     1250\n 3 ALB         328  2013     1    25      123           2000       323      229\n 4 ANC          39  2013     8    17     1740           1625        75     2042\n 5 ATL         895  2013     7    22     2257            759       898      121\n 6 AUS         349  2013     7    10     2056           1505       351     2347\n 7 AVL         228  2013     8    13     1156            832       204     1417\n 8 BDL         266  2013     2    21     1728           1316       252     1839\n 9 BGR         238  2013    12     1     1504           1056       248     1628\n10 BHM         291  2013     4    10       25           1900       325      136\n# ℹ 98 more rows\n# ℹ 10 more variables: sched_arr_time <int>, carrier <chr>, flight <int>,\n#   tailnum <chr>, origin <chr>, air_time <dbl>, distance <dbl>, hour <dbl>,\n#   minute <dbl>, time_hour <dttm>\n```\n\n\n:::\n:::\n\n\n5. You can vary `n` to select more than one row, or instead of `n =`, you can use `prop = 0.1` to select (e.g.) 10% of the rows in each group.\n\n::: aside\nThere are 105 groups but 108 rows! Why? `slice_min()` and `slice_max()` keep tied values so `n = 1` means \"give us all rows with the highest value.\" If you want exactly one row per group you can set `with_ties = FALSE`.\n:::\n\n# Merging Data {.section-title background-color=\"#99a486\"}\n\n## Why Merge Data?\n\nIn practice, we often collect data from different sources. To analyze the data, we usually must first combine (merge) them.\n\n. . . \n\nFor example, imagine you would like to study county-level patterns with respect to age and grocery spending. However, you can only find,\n\n* County level age data from the US Census, and \n* County level grocery spending data from the US Department of Agriculture\n\n. . . \n\nMerge the data!!\n\n. . . \n\nTo do this we'll be using the various **join** functions from the `dplyr` package. \n\n## Joining in Concept\n\nWe need to think about the following when we want to merge data frames A and B:\n\n::: {.fragment}\n* Which rows are we keeping from each data frame?\n:::\n\n::: {.fragment}\n* Which columns are we keeping from each data frame?\n:::\n\n::: {.fragment .fade-in}\n::: {.fragment .highlight-red}\n* Which variables determine whether rows match?\n:::\n:::\n\n## Keys\n\nKeys are the way that two datasets are connected to one another. The two types of keys are: \n\n::: {.incremental}\n1. **Primary**: a variable or set of variables that uniquely identifies each observation.\n    i) When more than one variable makes up the primary key it's called a **compound key**\n2. **Foreign**: a variable (or set of variables) that corresponds to a primary key in another table.\n:::\n\n## Primary Keys <span style=\"color:#99a486\">{{< fa scroll >}}</span> {.scrollable} \n\nLet's look at our data to gain a better sense of what this all means. \n\n::: {.panel-tabset}\n\n### `airlines` \n\n::: {.smaller-font}\n`airlines` records two pieces of data about each airline: its carrier code and its full name. You can identify an airline with its two letter carrier code, making `carrier` the primary key.\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nairlines \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 16 × 2\n   carrier name                       \n   <chr>   <chr>                      \n 1 9E      Endeavor Air Inc.          \n 2 AA      American Airlines Inc.     \n 3 AS      Alaska Airlines Inc.       \n 4 B6      JetBlue Airways            \n 5 DL      Delta Air Lines Inc.       \n 6 EV      ExpressJet Airlines Inc.   \n 7 F9      Frontier Airlines Inc.     \n 8 FL      AirTran Airways Corporation\n 9 HA      Hawaiian Airlines Inc.     \n10 MQ      Envoy Air                  \n11 OO      SkyWest Airlines Inc.      \n12 UA      United Air Lines Inc.      \n13 US      US Airways Inc.            \n14 VX      Virgin America             \n15 WN      Southwest Airlines Co.     \n16 YV      Mesa Airlines Inc.         \n```\n\n\n:::\n:::\n\n\n### `airports`\n\n::: {.smaller-font}\n`airports` records data about each airport. You can identify each airport by its three letter airport code, making `faa` the primary key.\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nairports\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1,458 × 8\n   faa   name                             lat    lon   alt    tz dst   tzone    \n   <chr> <chr>                          <dbl>  <dbl> <dbl> <dbl> <chr> <chr>    \n 1 04G   Lansdowne Airport               41.1  -80.6  1044    -5 A     America/…\n 2 06A   Moton Field Municipal Airport   32.5  -85.7   264    -6 A     America/…\n 3 06C   Schaumburg Regional             42.0  -88.1   801    -6 A     America/…\n 4 06N   Randall Airport                 41.4  -74.4   523    -5 A     America/…\n 5 09J   Jekyll Island Airport           31.1  -81.4    11    -5 A     America/…\n 6 0A9   Elizabethton Municipal Airport  36.4  -82.2  1593    -5 A     America/…\n 7 0G6   Williams County Airport         41.5  -84.5   730    -5 A     America/…\n 8 0G7   Finger Lakes Regional Airport   42.9  -76.8   492    -5 A     America/…\n 9 0P2   Shoestring Aviation Airfield    39.8  -76.6  1000    -5 U     America/…\n10 0S9   Jefferson County Intl           48.1 -123.    108    -8 A     America/…\n# ℹ 1,448 more rows\n```\n\n\n:::\n:::\n\n\n\n### `planes`\n\n::: {.smaller-font}\n`planes` records data about each plane. You can identify a plane by its tail number, making `tailnum` the primary key.\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplanes\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3,322 × 9\n   tailnum  year type              manufacturer model engines seats speed engine\n   <chr>   <int> <chr>             <chr>        <chr>   <int> <int> <int> <chr> \n 1 N10156   2004 Fixed wing multi… EMBRAER      EMB-…       2    55    NA Turbo…\n 2 N102UW   1998 Fixed wing multi… AIRBUS INDU… A320…       2   182    NA Turbo…\n 3 N103US   1999 Fixed wing multi… AIRBUS INDU… A320…       2   182    NA Turbo…\n 4 N104UW   1999 Fixed wing multi… AIRBUS INDU… A320…       2   182    NA Turbo…\n 5 N10575   2002 Fixed wing multi… EMBRAER      EMB-…       2    55    NA Turbo…\n 6 N105UW   1999 Fixed wing multi… AIRBUS INDU… A320…       2   182    NA Turbo…\n 7 N107US   1999 Fixed wing multi… AIRBUS INDU… A320…       2   182    NA Turbo…\n 8 N108UW   1999 Fixed wing multi… AIRBUS INDU… A320…       2   182    NA Turbo…\n 9 N109UW   1999 Fixed wing multi… AIRBUS INDU… A320…       2   182    NA Turbo…\n10 N110UW   1999 Fixed wing multi… AIRBUS INDU… A320…       2   182    NA Turbo…\n# ℹ 3,312 more rows\n```\n\n\n:::\n:::\n\n\n\n### `weather`\n\n::: {.smaller-font}\n`weather` records data about the weather at the origin airports. You can identify each observation by the combination of location and time, making `origin` and `time_hour` the compound primary key.\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nweather\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 26,115 × 15\n   origin  year month   day  hour  temp  dewp humid wind_dir wind_speed\n   <chr>  <int> <int> <int> <int> <dbl> <dbl> <dbl>    <dbl>      <dbl>\n 1 EWR     2013     1     1     1  39.0  26.1  59.4      270      10.4 \n 2 EWR     2013     1     1     2  39.0  27.0  61.6      250       8.06\n 3 EWR     2013     1     1     3  39.0  28.0  64.4      240      11.5 \n 4 EWR     2013     1     1     4  39.9  28.0  62.2      250      12.7 \n 5 EWR     2013     1     1     5  39.0  28.0  64.4      260      12.7 \n 6 EWR     2013     1     1     6  37.9  28.0  67.2      240      11.5 \n 7 EWR     2013     1     1     7  39.0  28.0  64.4      240      15.0 \n 8 EWR     2013     1     1     8  39.9  28.0  62.2      250      10.4 \n 9 EWR     2013     1     1     9  39.9  28.0  62.2      260      15.0 \n10 EWR     2013     1     1    10  41    28.0  59.6      260      13.8 \n# ℹ 26,105 more rows\n# ℹ 5 more variables: wind_gust <dbl>, precip <dbl>, pressure <dbl>,\n#   visib <dbl>, time_hour <dttm>\n```\n\n\n:::\n:::\n\n\n### `flights`\n\n::: {.smaller-font}\n`flights` has three variables (`time_hour`, `flight`, `carrier`) that uniquely identify an observation. More significantly, however, it contains **foreign keys** that correspond to the primary keys of the other datasets.\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 336,776 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   <int> <int> <int>    <int>          <int>     <dbl>    <int>          <int>\n 1  2013     1     1      517            515         2      830            819\n 2  2013     1     1      533            529         4      850            830\n 3  2013     1     1      542            540         2      923            850\n 4  2013     1     1      544            545        -1     1004           1022\n 5  2013     1     1      554            600        -6      812            837\n 6  2013     1     1      554            558        -4      740            728\n 7  2013     1     1      555            600        -5      913            854\n 8  2013     1     1      557            600        -3      709            723\n 9  2013     1     1      557            600        -3      838            846\n10  2013     1     1      558            600        -2      753            745\n# ℹ 336,766 more rows\n# ℹ 11 more variables: arr_delay <dbl>, carrier <chr>, flight <int>,\n#   tailnum <chr>, origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>,\n#   hour <dbl>, minute <dbl>, time_hour <dttm>\n```\n\n\n:::\n:::\n\n\n:::\n\n\n## Foreign Keys\n\n![Note: grey shading indicates the primary key for that particular dataset.](images/relational.png){fig-align=\"center\"}\n\n::: {.incremental}\n* `flights$origin` --> `airports$faa`\n* `flights$dest` --> `airports$faa`\n* `flights$origin`-`flights$time_hour` --> `weather$origin`-`weather$time_hour`.\n* `flights$tailnum` --> `planes$tailnum`\n* `flights$carrier` --> `airlines$carrier`\n:::\n\n## Checking Keys\n\nA nice feature of these data are that the primary and foreign keys have the same name and almost every variable name used across multiple tables has the same meaning.^[With the exception of `year`: it means year of departure in `flights` and year of manufacture in `planes`. ] This isn't always the case!^[We'll cover how to handle this shortly.]\n\n. . . \n\nIt is good practice to make sure your primary keys actually uniquely identify an observation and that they don't have any missing values. \n\n. . . \n\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code}\nplanes |> \n  count(tailnum) |> # <1>\n  filter(n > 1) # <1> \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 0 × 2\n# ℹ 2 variables: tailnum <chr>, n <int>\n```\n\n\n:::\n:::\n\n\n1. If your primary keys uniquely identify each observation you'll get an empty tibble in return. \n\n. . . \n\n\n::: {.cell}\n\n```{.r .cell-code}\nplanes |> \n  filter(is.na(tailnum)) # <2>\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 0 × 9\n# ℹ 9 variables: tailnum <chr>, year <int>, type <chr>, manufacturer <chr>,\n#   model <chr>, engines <int>, seats <int>, speed <int>, engine <chr>\n```\n\n\n:::\n:::\n\n\n2. If none of your primary keys are missing you'll get an empty tibble in return here too. \n\n## Surrogate Keys\n\nSometimes you'll want to create an index of your observations to serve as a surrogate key because the compound primary key is not particularly easy to reference. \n\n. . . \n\nFor example, our `flights` dataset has three variables that uniquely identify each observation: `time_hour`, `carrier`, `flight`.\n\n. . . \n\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code}\nflights2 <- flights |> \n  mutate(id = row_number(), .before = 1) # <3> \nflights2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 336,776 × 20\n      id  year month   day dep_time sched_dep_time dep_delay arr_time\n   <int> <int> <int> <int>    <int>          <int>     <dbl>    <int>\n 1     1  2013     1     1      517            515         2      830\n 2     2  2013     1     1      533            529         4      850\n 3     3  2013     1     1      542            540         2      923\n 4     4  2013     1     1      544            545        -1     1004\n 5     5  2013     1     1      554            600        -6      812\n 6     6  2013     1     1      554            558        -4      740\n 7     7  2013     1     1      555            600        -5      913\n 8     8  2013     1     1      557            600        -3      709\n 9     9  2013     1     1      557            600        -3      838\n10    10  2013     1     1      558            600        -2      753\n# ℹ 336,766 more rows\n# ℹ 12 more variables: sched_arr_time <int>, arr_delay <dbl>, carrier <chr>,\n#   flight <int>, tailnum <chr>, origin <chr>, dest <chr>, air_time <dbl>,\n#   distance <dbl>, hour <dbl>, minute <dbl>, time_hour <dttm>\n```\n\n\n:::\n:::\n\n\n3. `row_number()` simply specifies the row number of the data frame. \n\n## Basic (Equi-) Joins\n\nAll join functions have the same basic interface: they take a **pair** of data frames and return **one** data frame. \n\n. . . \n\nThe order of the rows and columns is primarily going to be determined by the first data frame. \n\n. . . \n\n`dplyr` has two types of joins: *mutating* and *filtering.* \n\n<br>\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\n::: {.fragment}\n#### Mutating Joins \nAdd new variables to one data frame from matching observations from another data frame. \n\n* `left_join()`\n* `right_join()`\n* `inner_join()`\n* `full_join()`\n:::\n\n:::\n\n::: {.column width=\"50%\"}\n\n::: {.fragment}\n#### Filtering Joins \nFilter observations from one data frame based on whether or not they match an observation in another data frame. \n\n* `semi_join()`\n* `anti-join()`\n:::\n\n:::\n\n::::\n\n## `Mutating Joins`\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\n<br>\n\n::: {.fragment}\n![](images/joins_setup.png)\n:::\n:::\n\n::: {.column width=\"50%\"}\n\n<br>\n\n::: {.fragment}\n![](images/joins_setup2.png)\n:::\n:::\n\n::::\n\n## `left_join()` <span style=\"color:#99a486\">{{< fa scroll >}}</span> {.scrollable} \n\n![](images/joins_left.png){fig-align=\"center\"}\n\n::: aside\n::: {.incremental}\n* The most common type of join\n* Appends columns from `y` to `x` by the rows in `x`\n    + `NA` added if there is nothing from `y`\n* Natural join: when all variables that appear in both datasets are used as the join key\n    + If the join_by() argument is not specified, `left_join()` will automatically join by all columns that have names and values in common. \n:::\n:::\n\n## `left_join` in `nycflights13`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights2 <- flights |> \n  select(year, time_hour, origin, dest, tailnum, carrier)\n```\n:::\n\n\nWith only the pertinent variables from the `flights` dataset, we can see how a `left_join` works with the `airlines` dataset. \n\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code}\nflights2 |>\n  left_join(airlines)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nJoining with `by = join_by(carrier)`\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 336,776 × 7\n    year time_hour           origin dest  tailnum carrier name                  \n   <int> <dttm>              <chr>  <chr> <chr>   <chr>   <chr>                 \n 1  2013 2013-01-01 05:00:00 EWR    IAH   N14228  UA      United Air Lines Inc. \n 2  2013 2013-01-01 05:00:00 LGA    IAH   N24211  UA      United Air Lines Inc. \n 3  2013 2013-01-01 05:00:00 JFK    MIA   N619AA  AA      American Airlines Inc.\n 4  2013 2013-01-01 05:00:00 JFK    BQN   N804JB  B6      JetBlue Airways       \n 5  2013 2013-01-01 06:00:00 LGA    ATL   N668DN  DL      Delta Air Lines Inc.  \n 6  2013 2013-01-01 05:00:00 EWR    ORD   N39463  UA      United Air Lines Inc. \n 7  2013 2013-01-01 06:00:00 EWR    FLL   N516JB  B6      JetBlue Airways       \n 8  2013 2013-01-01 06:00:00 LGA    IAD   N829AS  EV      ExpressJet Airlines I…\n 9  2013 2013-01-01 06:00:00 JFK    MCO   N593JB  B6      JetBlue Airways       \n10  2013 2013-01-01 06:00:00 LGA    ORD   N3ALAA  AA      American Airlines Inc.\n# ℹ 336,766 more rows\n```\n\n\n:::\n:::\n\n\n## Different variable meanings\n\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code}\nflights2 |> \n  left_join(planes)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nJoining with `by = join_by(year, tailnum)`\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 336,776 × 13\n    year time_hour           origin dest  tailnum carrier type  manufacturer\n   <int> <dttm>              <chr>  <chr> <chr>   <chr>   <chr> <chr>       \n 1  2013 2013-01-01 05:00:00 EWR    IAH   N14228  UA      <NA>  <NA>        \n 2  2013 2013-01-01 05:00:00 LGA    IAH   N24211  UA      <NA>  <NA>        \n 3  2013 2013-01-01 05:00:00 JFK    MIA   N619AA  AA      <NA>  <NA>        \n 4  2013 2013-01-01 05:00:00 JFK    BQN   N804JB  B6      <NA>  <NA>        \n 5  2013 2013-01-01 06:00:00 LGA    ATL   N668DN  DL      <NA>  <NA>        \n 6  2013 2013-01-01 05:00:00 EWR    ORD   N39463  UA      <NA>  <NA>        \n 7  2013 2013-01-01 06:00:00 EWR    FLL   N516JB  B6      <NA>  <NA>        \n 8  2013 2013-01-01 06:00:00 LGA    IAD   N829AS  EV      <NA>  <NA>        \n 9  2013 2013-01-01 06:00:00 JFK    MCO   N593JB  B6      <NA>  <NA>        \n10  2013 2013-01-01 06:00:00 LGA    ORD   N3ALAA  AA      <NA>  <NA>        \n# ℹ 336,766 more rows\n# ℹ 5 more variables: model <chr>, engines <int>, seats <int>, speed <int>,\n#   engine <chr>\n```\n\n\n:::\n:::\n\n\n. . . \n\nWhen we try to do this, however, we get a bunch of `NA`s. Why? \n\n## Different variable meanings\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights2 |> \n  left_join(planes)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nJoining with `by = join_by(year, tailnum)`\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 336,776 × 13\n    year time_hour           origin dest  tailnum carrier type  manufacturer\n   <int> <dttm>              <chr>  <chr> <chr>   <chr>   <chr> <chr>       \n 1  2013 2013-01-01 05:00:00 EWR    IAH   N14228  UA      <NA>  <NA>        \n 2  2013 2013-01-01 05:00:00 LGA    IAH   N24211  UA      <NA>  <NA>        \n 3  2013 2013-01-01 05:00:00 JFK    MIA   N619AA  AA      <NA>  <NA>        \n 4  2013 2013-01-01 05:00:00 JFK    BQN   N804JB  B6      <NA>  <NA>        \n 5  2013 2013-01-01 06:00:00 LGA    ATL   N668DN  DL      <NA>  <NA>        \n 6  2013 2013-01-01 05:00:00 EWR    ORD   N39463  UA      <NA>  <NA>        \n 7  2013 2013-01-01 06:00:00 EWR    FLL   N516JB  B6      <NA>  <NA>        \n 8  2013 2013-01-01 06:00:00 LGA    IAD   N829AS  EV      <NA>  <NA>        \n 9  2013 2013-01-01 06:00:00 JFK    MCO   N593JB  B6      <NA>  <NA>        \n10  2013 2013-01-01 06:00:00 LGA    ORD   N3ALAA  AA      <NA>  <NA>        \n# ℹ 336,766 more rows\n# ℹ 5 more variables: model <chr>, engines <int>, seats <int>, speed <int>,\n#   engine <chr>\n```\n\n\n:::\n:::\n\n\n*Join is trying to use tailnum and year as a compound key.* While both datasets have `year` as a variable, they mean different things. Therefore, we need to be explicit here about what to join by. \n\n## Different variable meanings\n\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code}\nflights2 |> \n  left_join(planes, join_by(tailnum)) # <4>\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 336,776 × 14\n   year.x time_hour           origin dest  tailnum carrier year.y type          \n    <int> <dttm>              <chr>  <chr> <chr>   <chr>    <int> <chr>         \n 1   2013 2013-01-01 05:00:00 EWR    IAH   N14228  UA        1999 Fixed wing mu…\n 2   2013 2013-01-01 05:00:00 LGA    IAH   N24211  UA        1998 Fixed wing mu…\n 3   2013 2013-01-01 05:00:00 JFK    MIA   N619AA  AA        1990 Fixed wing mu…\n 4   2013 2013-01-01 05:00:00 JFK    BQN   N804JB  B6        2012 Fixed wing mu…\n 5   2013 2013-01-01 06:00:00 LGA    ATL   N668DN  DL        1991 Fixed wing mu…\n 6   2013 2013-01-01 05:00:00 EWR    ORD   N39463  UA        2012 Fixed wing mu…\n 7   2013 2013-01-01 06:00:00 EWR    FLL   N516JB  B6        2000 Fixed wing mu…\n 8   2013 2013-01-01 06:00:00 LGA    IAD   N829AS  EV        1998 Fixed wing mu…\n 9   2013 2013-01-01 06:00:00 JFK    MCO   N593JB  B6        2004 Fixed wing mu…\n10   2013 2013-01-01 06:00:00 LGA    ORD   N3ALAA  AA          NA <NA>          \n# ℹ 336,766 more rows\n# ℹ 6 more variables: manufacturer <chr>, model <chr>, engines <int>,\n#   seats <int>, speed <int>, engine <chr>\n```\n\n\n:::\n:::\n\n\n4. `join_by(tailnum)` is short for `join_by(tailnum == tailnum)` making these types of basic joins equi joins. \n\n::: aside\nWhen you have the same variable name but they mean different things you can specify a particular suffix with the `suffix` argument.\n:::\n\n## Different variable names\n\nIf you have keys that have the same meaning (values) but are named different things in their respective datasets you'd also specify that with `join_by()`\n\n. . . \n\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code}\nflights2 |> \n  left_join(airports, join_by(dest == faa)) # <5>\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 336,776 × 13\n    year time_hour           origin dest  tailnum carrier name         lat   lon\n   <int> <dttm>              <chr>  <chr> <chr>   <chr>   <chr>      <dbl> <dbl>\n 1  2013 2013-01-01 05:00:00 EWR    IAH   N14228  UA      George Bu…  30.0 -95.3\n 2  2013 2013-01-01 05:00:00 LGA    IAH   N24211  UA      George Bu…  30.0 -95.3\n 3  2013 2013-01-01 05:00:00 JFK    MIA   N619AA  AA      Miami Intl  25.8 -80.3\n 4  2013 2013-01-01 05:00:00 JFK    BQN   N804JB  B6      <NA>        NA    NA  \n 5  2013 2013-01-01 06:00:00 LGA    ATL   N668DN  DL      Hartsfiel…  33.6 -84.4\n 6  2013 2013-01-01 05:00:00 EWR    ORD   N39463  UA      Chicago O…  42.0 -87.9\n 7  2013 2013-01-01 06:00:00 EWR    FLL   N516JB  B6      Fort Laud…  26.1 -80.2\n 8  2013 2013-01-01 06:00:00 LGA    IAD   N829AS  EV      Washingto…  38.9 -77.5\n 9  2013 2013-01-01 06:00:00 JFK    MCO   N593JB  B6      Orlando I…  28.4 -81.3\n10  2013 2013-01-01 06:00:00 LGA    ORD   N3ALAA  AA      Chicago O…  42.0 -87.9\n# ℹ 336,766 more rows\n# ℹ 4 more variables: alt <dbl>, tz <dbl>, dst <chr>, tzone <chr>\n```\n\n\n:::\n:::\n\n\n5. `by = c(\"dest\" = \"faa\")` was the former syntax for this and you still might see that in older code. \n\n. . . \n\nThis will match `dest` to `faa` for the join and then drop `faa`. \n\n## Different variable names\n\nYou can request `dplyr` to keep both keys with `keep = TRUE` argument. \n\n. . . \n\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code}\nflights2 |> \n  left_join(airports, join_by(dest == faa), keep = TRUE) \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 336,776 × 14\n    year time_hour           origin dest  tailnum carrier faa   name         lat\n   <int> <dttm>              <chr>  <chr> <chr>   <chr>   <chr> <chr>      <dbl>\n 1  2013 2013-01-01 05:00:00 EWR    IAH   N14228  UA      IAH   George Bu…  30.0\n 2  2013 2013-01-01 05:00:00 LGA    IAH   N24211  UA      IAH   George Bu…  30.0\n 3  2013 2013-01-01 05:00:00 JFK    MIA   N619AA  AA      MIA   Miami Intl  25.8\n 4  2013 2013-01-01 05:00:00 JFK    BQN   N804JB  B6      <NA>  <NA>        NA  \n 5  2013 2013-01-01 06:00:00 LGA    ATL   N668DN  DL      ATL   Hartsfiel…  33.6\n 6  2013 2013-01-01 05:00:00 EWR    ORD   N39463  UA      ORD   Chicago O…  42.0\n 7  2013 2013-01-01 06:00:00 EWR    FLL   N516JB  B6      FLL   Fort Laud…  26.1\n 8  2013 2013-01-01 06:00:00 LGA    IAD   N829AS  EV      IAD   Washingto…  38.9\n 9  2013 2013-01-01 06:00:00 JFK    MCO   N593JB  B6      MCO   Orlando I…  28.4\n10  2013 2013-01-01 06:00:00 LGA    ORD   N3ALAA  AA      ORD   Chicago O…  42.0\n# ℹ 336,766 more rows\n# ℹ 5 more variables: lon <dbl>, alt <dbl>, tz <dbl>, dst <chr>, tzone <chr>\n```\n\n\n:::\n:::\n\n\n## `right_join()`\n\n![Has the same interface as a left_join but keeps all rows in `y` instead of `x`](images/joins_right.png){fig-align=\"center\"}\n\n## `inner_join()`\n\n![Has the same interface as a left_join but only keeps rows that occur in both x and y](images/joins_inner.png){fig-align=\"center\"}\n\n## `full_join()`\n\n![Has the same interface as a left_join but keeps all rows in either x or y](images/joins_full.png){fig-align=\"center\"}\n\n## `Filtering Joins`\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\n<br>\n\n::: {.fragment}\n![](images/joins_setup.png)\n:::\n:::\n\n::: {.column width=\"50%\"}\n\n<br>\n\n::: {.fragment}\n![](images/joins_setup2.png)\n:::\n:::\n\n::::\n\n## `semi_join()`\n\n![Keeps all rows in x that have a match in y](images/joins_semi.png){fig-align=\"center\"}\n\n\n## `semi_join()` in `nycflights13`\n\nWe could use a semi-join to filter the airports dataset to show just the origin airports.\n\n. . . \n\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code}\nairports |> \n  semi_join(flights2, join_by(faa == origin))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 8\n  faa   name                  lat   lon   alt    tz dst   tzone           \n  <chr> <chr>               <dbl> <dbl> <dbl> <dbl> <chr> <chr>           \n1 EWR   Newark Liberty Intl  40.7 -74.2    18    -5 A     America/New_York\n2 JFK   John F Kennedy Intl  40.6 -73.8    13    -5 A     America/New_York\n3 LGA   La Guardia           40.8 -73.9    22    -5 A     America/New_York\n```\n\n\n:::\n:::\n\n\n\n## `anti_join()`\n\n![Returns all rows in x that don’t have a match in y](images/joins_anti.png){fig-align=\"center\"}\n\n## `anti_join()` in `nycflights13`\n\nWe can find rows that are missing from airports by looking for flights that don’t have a matching destination airport.\n\n. . . \n\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code}\nairports |> \n  anti_join(flights2, join_by(faa == origin))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1,455 × 8\n   faa   name                             lat    lon   alt    tz dst   tzone    \n   <chr> <chr>                          <dbl>  <dbl> <dbl> <dbl> <chr> <chr>    \n 1 04G   Lansdowne Airport               41.1  -80.6  1044    -5 A     America/…\n 2 06A   Moton Field Municipal Airport   32.5  -85.7   264    -6 A     America/…\n 3 06C   Schaumburg Regional             42.0  -88.1   801    -6 A     America/…\n 4 06N   Randall Airport                 41.4  -74.4   523    -5 A     America/…\n 5 09J   Jekyll Island Airport           31.1  -81.4    11    -5 A     America/…\n 6 0A9   Elizabethton Municipal Airport  36.4  -82.2  1593    -5 A     America/…\n 7 0G6   Williams County Airport         41.5  -84.5   730    -5 A     America/…\n 8 0G7   Finger Lakes Regional Airport   42.9  -76.8   492    -5 A     America/…\n 9 0P2   Shoestring Aviation Airfield    39.8  -76.6  1000    -5 U     America/…\n10 0S9   Jefferson County Intl           48.1 -123.    108    -8 A     America/…\n# ℹ 1,445 more rows\n```\n\n\n:::\n:::\n\n\n::: aside\nThis type of join is useful for finding missing values that are implicit in the data (i.e. `NA`s that don't show up in the data but only exist as an absence.)\n:::\n\n## More Than One Match\n\n![](images/joins_match-types.png){fig-align=\"center\"}\n\n. . . \n\nThere are three possible outcomes for a row in x:\n\n::: {.incremental}\n* If it doesn’t match anything, it’s dropped.\n* If it matches 1 row in y, it’s preserved.\n* If it matches more than 1 row in y, it’s duplicated once for each match.\n:::\n\n. . . \n\nWhat happens if we match on more than one row? \n\n## More Than One Match\n\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code}\ndf1 <- tibble(key = c(1, 2, 2), val_x = c(\"x1\", \"x2\", \"x3\"))\ndf2 <- tibble(key = c(1, 2, 2), val_y = c(\"y1\", \"y2\", \"y3\"))\n\ndf1 |> \n  inner_join(df2, join_by(key))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 3\n    key val_x val_y\n  <dbl> <chr> <chr>\n1     1 x1    y1   \n2     2 x2    y2   \n3     2 x2    y3   \n4     2 x3    y2   \n5     2 x3    y3   \n```\n\n\n:::\n:::\n\n\n\n. . . \n\nIf you are doing this deliberately, you can set relationship = \"many-to-many\", as the warning suggests.\n\n::: aside\nGiven their nature, filtering joins never duplicate rows like mutating joins do. They will only ever return a subset of the datasets.\n:::\n\n## Non-Equi Joins\n\nThe joins we've discussed thus far have all been equi-joins, where the rows match if the x key equals the y key. But you can also specify other types of relationships. \n\n. . . \n\n`dplyr` has four different types of non-equi joins: \n\n. . . \n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\n* **Cross joins** match every pair of rows.\n:::\n\n::: {.column width=\"50%\"}\n\n![](images/joins_cross.png){width=25% .absolute top=150 right=150}\n\n:::\n::::\n\n::: aside\nCross joins, aka self-joins, are useful when generating permutations (e.g. creating every possible combination of values). This comes in handy when creating datasets of predicted probabilities for plotting in ggplot. \n:::\n\n## Non-Equi Joins\n\nThe joins we've discussed thus far have all been equi-joins, where the rows match if the x key equals the y key. But you can also specify other types of relationships. \n\n`dplyr` has four different types of non-equi joins: \n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\n* **Cross joins** match every pair of rows.\n* **Inequality joins** use <, <=, >, and >= instead of ==.\n    * **Overlap joins** are a special type of inequality join designed to work with ranges^[Overlap joins provide three helpers that use inequality joins to make it easier to work with intervals: `between()`, `within()`, `overlaps()`. Read more about their functionality and specifications [here](https://dplyr.tidyverse.org/reference/join_by.html?q=within#overlap-joins).].\n\n:::\n\n::: {.column width=\"50%\"}\n![](images/joins_inequality.png){width=30% .absolute top=158 right=120}\n:::\n::::\n\n::: aside\nInequality joins can be used to restrict the cross join so that instead of generating all permutations, we generate all combinations.\n:::\n\n## Non-Equi Joins\n\nThe joins we've discussed thus far have all been equi-joins, where the rows match if the x key equals the y key. But you can also specify other types of relationships. \n\n`dplyr` has four different types of non-equi joins: \n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\n* **Cross joins** match every pair of rows.\n* **Inequality joins** use <, <=, >, and >= instead of ==.\n    * **Overlap joins** are a special type of inequality join designed to work with ranges.\n* **Rolling joins** are similar to inequality joins but only find the closest match.\n\n:::\n\n::: {.column width=\"50%\"}\n![](images/joins_rolling.png){width=42% .absolute top=155 right=35}\n:::\n::::\n\n::: aside\nRolling joins are a special type of inequality join where instead of getting every row that satisfies the inequality, you get just the closest row. You can turn any inequality join into a rolling join by adding closest().\n:::\n\n# Lab{.section-title background-color=\"#99a486\"}\n\n## Manipulating Data\n\n1. Create a new object that contains `gapminder`^[From the `gapminder` package] (1) observations from China, India, and United States after 1980, and (2) variables corresponding to country, year, population, and life expectancy. \n1. How many rows and columns does the object contain?\n1. Sort the rows by year (ascending order) and population (descending order) and save that over the object created for answer 1. Print the first 6 rows.\n1. Add a new variable that contains population in billions.\n1. By year, calculate the total population (in billions) across these three countries\n1. In `ggplot`, create a line plot showing life expectancy over time by country. Make the plot visually appealing!\n\n\n\n## Answers \n\nQuestion 1:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsubset_gapminder <- gapminder |> \n  filter(country %in% c(\"China\",\"India\",\"United States\"),  year > 1980 ) |>\n  select(country, year, pop, lifeExp)\nsubset_gapminder\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 18 × 4\n   country        year        pop lifeExp\n   <fct>         <int>      <int>   <dbl>\n 1 China          1982 1000281000    65.5\n 2 China          1987 1084035000    67.3\n 3 China          1992 1164970000    68.7\n 4 China          1997 1230075000    70.4\n 5 China          2002 1280400000    72.0\n 6 China          2007 1318683096    73.0\n 7 India          1982  708000000    56.6\n 8 India          1987  788000000    58.6\n 9 India          1992  872000000    60.2\n10 India          1997  959000000    61.8\n11 India          2002 1034172547    62.9\n12 India          2007 1110396331    64.7\n13 United States  1982  232187835    74.6\n14 United States  1987  242803533    75.0\n15 United States  1992  256894189    76.1\n16 United States  1997  272911760    76.8\n17 United States  2002  287675526    77.3\n18 United States  2007  301139947    78.2\n```\n\n\n:::\n:::\n\n\n## Answers \n\nQuestion 2: \n\n::: {.cell}\n\n```{.r .cell-code}\n# Option 1\nc(nrow(subset_gapminder), ncol(subset_gapminder))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 18  4\n```\n\n\n:::\n\n```{.r .cell-code}\n# Option 2\nglimpse(subset_gapminder)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 18\nColumns: 4\n$ country <fct> \"China\", \"China\", \"China\", \"China\", \"China\", \"China\", \"India\",…\n$ year    <int> 1982, 1987, 1992, 1997, 2002, 2007, 1982, 1987, 1992, 1997, 20…\n$ pop     <int> 1000281000, 1084035000, 1164970000, 1230075000, 1280400000, 13…\n$ lifeExp <dbl> 65.525, 67.274, 68.690, 70.426, 72.028, 72.961, 56.596, 58.553…\n```\n\n\n:::\n\n```{.r .cell-code}\n# Option 3\ndim(subset_gapminder)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 18  4\n```\n\n\n:::\n:::\n\n\n. . . \n\n## Answers \n\nQuestion 3:\n\n::: {.cell}\n\n```{.r .cell-code}\nsubset_gapminder <- subset_gapminder |> \n  arrange(year, desc(pop))\n```\n:::\n\n\n<br>\n\n. . . \n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\nsubset_gapminder |> head(6)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 4\n  country        year        pop lifeExp\n  <fct>         <int>      <int>   <dbl>\n1 China          1982 1000281000    65.5\n2 India          1982  708000000    56.6\n3 United States  1982  232187835    74.6\n4 China          1987 1084035000    67.3\n5 India          1987  788000000    58.6\n6 United States  1987  242803533    75.0\n```\n\n\n:::\n:::\n\n\n:::\n\n::: {.column width=\"50%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\nprint(subset_gapminder[1:6, ])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 4\n  country        year        pop lifeExp\n  <fct>         <int>      <int>   <dbl>\n1 China          1982 1000281000    65.5\n2 India          1982  708000000    56.6\n3 United States  1982  232187835    74.6\n4 China          1987 1084035000    67.3\n5 India          1987  788000000    58.6\n6 United States  1987  242803533    75.0\n```\n\n\n:::\n:::\n\n:::\n\n::::\n\n## Answers\n\nQuestion 4:\n\n::: {.cell}\n\n```{.r .cell-code}\nsubset_gapminder <- subset_gapminder |> \n  mutate(pop_billions = pop/1000000000)\n\nsubset_gapminder\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 18 × 5\n   country        year        pop lifeExp pop_billions\n   <fct>         <int>      <int>   <dbl>        <dbl>\n 1 China          1982 1000281000    65.5        1.00 \n 2 India          1982  708000000    56.6        0.708\n 3 United States  1982  232187835    74.6        0.232\n 4 China          1987 1084035000    67.3        1.08 \n 5 India          1987  788000000    58.6        0.788\n 6 United States  1987  242803533    75.0        0.243\n 7 China          1992 1164970000    68.7        1.16 \n 8 India          1992  872000000    60.2        0.872\n 9 United States  1992  256894189    76.1        0.257\n10 China          1997 1230075000    70.4        1.23 \n11 India          1997  959000000    61.8        0.959\n12 United States  1997  272911760    76.8        0.273\n13 China          2002 1280400000    72.0        1.28 \n14 India          2002 1034172547    62.9        1.03 \n15 United States  2002  287675526    77.3        0.288\n16 China          2007 1318683096    73.0        1.32 \n17 India          2007 1110396331    64.7        1.11 \n18 United States  2007  301139947    78.2        0.301\n```\n\n\n:::\n:::\n\n\n## Answers \n\nQuestion 5:\n\n::: {.panel-tabset}\n\n### Classic syntax\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsubset_gapminder |> \n  group_by(year) |> \n  summarize(TotalPop_Billions = sum(pop_billions))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 2\n   year TotalPop_Billions\n  <int>             <dbl>\n1  1982              1.94\n2  1987              2.11\n3  1992              2.29\n4  1997              2.46\n5  2002              2.60\n6  2007              2.73\n```\n\n\n:::\n:::\n\n\n### New syntax (dplyr 1.1.0)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsubset_gapminder |> \n  summarize(TotalPop_Billions = sum(pop_billions), \n            .by = year) # <1>\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 2\n   year TotalPop_Billions\n  <int>             <dbl>\n1  1982              1.94\n2  1987              2.11\n3  1992              2.29\n4  1997              2.46\n5  2002              2.60\n6  2007              2.73\n```\n\n\n:::\n:::\n\n\n1. This new syntax allows for per-operation grouping which means it is only active within a single verb at a time (as opposed to being applied to the entire tibble until `ungroup()` is called). Learn more about this new feature [here](https://www.tidyverse.org/blog/2023/02/dplyr-1-1-0-per-operation-grouping/))\n\n:::\n\n## Answers \n\nQuestion 6:\n\n::: {.panel-tabset}\n\n### Code\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2) \nlibrary(ggthemes)\nlibrary(geomtextpath)\nggplot(subset_gapminder, aes(year, lifeExp, color = country)) +\n  geom_point() + \n  geom_textpath(aes(label = country), show.legend = FALSE) +\n  xlab(\"Year\") + \n  ylab(\"Life Expectancy (years)\") +\n  ggtitle(\"Life Expectancy (1982-2007)\",\"China, India, and United States\") +\n  scale_x_continuous(breaks = c(1982, 1987, 1992, 1997, 2002, 2007), minor_breaks = c()) +\n  ylim(c(50, 80)) + \n  scale_color_discrete(name = \"Country\") + \n  theme_tufte(base_size = 20) + \n  theme(legend.position = \"bottom\")\n```\n:::\n\n\n\n### Plot\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](CSSS508_Lecture4_files/figure-revealjs/unnamed-chunk-65-1.svg){fig-align='center'}\n:::\n:::\n\n\n:::\n\n# Homework{.section-title background-color=\"#1e4655\"}\n\n## {data-menu-title=\"Homework 4\" background-iframe=\"https://vsass.github.io/CSSS508/Homework/HW4/homework4.html\" background-interactive=TRUE}",
    "supporting": [
      "CSSS508_Lecture4_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}