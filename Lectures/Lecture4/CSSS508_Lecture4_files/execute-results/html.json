{
  "hash": "e050cfcf3eab5ce62630131768e763a4",
  "result": {
    "markdown": "---\nhighlight-style:  a11y-dark\nfootnotes-hover: true\nreference-location: margin\nexecute: \n  echo: true\n  message: false\n  warning: false\n  fig-format: \"svg\"\nformat: \n  revealjs:\n    theme: lecture_styles.scss\n    slide-number: true\n    code-link: true\n    chalkboard: true\n    incremental: false \n    smaller: true\n    preview-links: true\n    code-line-numbers: true\n    history: false\n    progress: true\n    link-external-icon: true\n---\n\n::: {.cell}\n\n:::\n\n\n## {#title-slide data-menu-title=\"Importing, Exporting, and Cleaning Data\" background=\"#1e4655\" background-image=\"../../images/csss-logo.png\" background-position=\"center top 5%\" background-size=\"50%\"}\n\n\n[Importing, Exporting, and Cleaning Data]{.custom-title}\n\n[CS&SS 508 • Lecture 4]{.custom-subtitle}\n\n[24 October 2023]{.custom-subtitle2}\n\n[Victoria Sass]{.custom-subtitle3}\n\n# Roadmap{.section-title background-color=\"#99a486\"}\n\n---\n\n<br>\n\nLast time, we learned about,\n\n* Types of Data\n* Vectors\n* Matrices\n* Lists\n\n. . . \n\nToday, we will cover,\n\n* Importing and exporting data\n* Reshaping data\n* Dates and times\n\n# Importing and Exporting Data{.section-title background-color=\"#99a486\"}\n\n* Data packages\n* Imporing data with code\n* Importing data by \"point-and-click\"\n\n## Data Packages\n\nR has a *big* user base.  If you are working with a popular data source, it will often have a devoted R package on *CRAN* or *Github*. \n\n. . . \n\nExamples:\n\n* `WDI`: World Development Indicators (World Bank)\n* `WHO`: World Health Organization API\n* `tidycensus`: Census and American Community Survey\n* `quantmod`: financial data from Yahoo, FRED, Google\n\n. . . \n\nIf you have an actual data file, you'll have to import it yourself...\n\n## Delimited Text Files\n\nBesides a package, it's easiest when data is stored in a text file. \n\n. . . \n\nAn example of a comma-separated values (**.csv**) file is below:\n\n```\n\"Subject\",\"Depression\",\"Sex\",\"Week\",\"HamD\",\"Imipramine\"\n101,\"Non-endogenous\",\"Second\",0,26,NA\n101,\"Non-endogenous\",\"Second\",1,22,NA\n101,\"Non-endogenous\",\"Second\",2,18,4.04305\n101,\"Non-endogenous\",\"Second\",3,7,3.93183\n101,\"Non-endogenous\",\"Second\",4,4,4.33073\n101,\"Non-endogenous\",\"Second\",5,3,4.36945\n103,\"Non-endogenous\",\"First\",0,33,NA\n103,\"Non-endogenous\",\"First\",1,24,NA\n103,\"Non-endogenous\",\"First\",2,15,2.77259\n```\n\n## `readr`\n\nR has some built-in functions for importing data, such as `read.table()` and `read.csv()`. \n\n. . . \n\nThe `readr` package provides similar functions, like `read_csv()`, that have slightly better features:\n\n* Faster!\n* Better defaults (e.g. doesn't convert characters to factors)\n* A *little* smarter about dates and times\n* Loading bars for large files\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(readr)\n```\n:::\n\n\n## `readr` Importing Example\n\nLet's import some data about song ranks on the Billboard Hot 100 in 2000:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbillboard_2000_raw <- read_csv(file = \"https://raw.githubusercontent.com/vsass/CSSS508/main/Lectures/Lecture5/data/billboard.csv\")\n```\n:::\n\n\n## Did It Load?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\ndim(billboard_2000_raw)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 317  81\n```\n:::\n\n```{.r .cell-code}\nnames(billboard_2000_raw) %>% \n  head(20)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"year\"         \"artist\"       \"track\"        \"time\"         \"date.entered\"\n [6] \"wk1\"          \"wk2\"          \"wk3\"          \"wk4\"          \"wk5\"         \n[11] \"wk6\"          \"wk7\"          \"wk8\"          \"wk9\"          \"wk10\"        \n[16] \"wk11\"         \"wk12\"         \"wk13\"         \"wk14\"         \"wk15\"        \n```\n:::\n:::\n\n\n## Alternate Solution\n\nImport the data manually!\n\nIn the upper right-hand pane of RStudio (make sure you're in the Environment tab), select:\n\n`Import Dataset > From Text (readr)`\n\n. . . \n\n**Once you've imported the data, you can `copy/paste` the import code from the console into your file!!**\n\nThis makes the process *reproducible!*\n\n## Importing Other Data Types\n\n* For Excel files (`.xls` or `.xlsx`), use package `readxl`\n* For Google Docs Spreadsheets, use package `googlesheets4`\n* For Stata, SPSS, and SAS files, use package `haven` (`tidyverse`)\n* For Stata, SPSS, and Minitab, use package `foreign`\n\n::: aside\nNote: You **won't** keep text formatting, color, comments, or merged cells!!\n:::\n\n## Writing Delimited Files\n\nGetting data out of R into a delimited file is very similar to getting it into R:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_csv(billboard_2000_raw, path = \"billboard_data.csv\")\n```\n:::\n\n\nThis saved the data we pulled off the web in a file called `billboard_data.csv` in my working directory.\n\n# Reshaping Data {background-image=\"images/tidyr.png\" background-size=\"contain\" background-opacity=\"0.25\" background-position=\"center\" .section-title background-color=\"#99a486\"}\n\n## Initial Spot Checks\n\n\nFirst things to check after loading new data:\n\n::: {.incremental}\n* Did all the rows/columns from the original file make it in?\n    + Check using `dim()` or `str()`\n* Are the column names in good shape?\n    + Use `names()` to check; fix with `rename()`\n* Are there \"decorative\" blank rows or columns to remove?\n    + `filter()` or `select()` out those rows/columns\n:::\n\n## Tidy Data\n\n**Tidy data** (aka \"long data\") are such that:\n\n::: {.incremental}\n1. The values for a single observation are in their own row.\n2. The values for a single variable are in their own column.\n3. There is only one value per cell.\n:::\n\n. . . \n\nWhy do we want tidy data?\n\n* **Easier to understand** many rows than many columns\n* Required for **plotting** in `ggplot2`\n* Required for many types of **statistical procedures** (e.g. hierarchical or mixed effects models)\n* Fewer issues with **missing values and \"imbalanced\"** repeated measures data\n\n## Slightly \"Messy\" Data\n\n::::{.columns}\n:::{.column width=\"60%\"}\n\n| **Program**     | **First Year** | **Second Year** |\n|-----------------|-----------:|---------:|\n| Evans School    |     10     |    6    |\n| Arts & Sciences |      5     |    6    |\n| Public Health   |      2     |    3    |\n| Other           |      5     |    1    |\n\n:::\n:::{.column width=\"40%\"}\n\n* What is an **observation**?\n    + A group of students from a program of a given year\n    \n\n* What are the **variables**?\n    + Program, Year\n\n\n* What are the **values**?\n    + Program: Evans School, Arts & Sciences, Public Health, Other\n    + Year: First, Second -- **in column headings. Bad!**\n    + Count: **spread over two columns!**\n:::\n::::\n\n## Tidy Version\n\n::::{.columns}\n:::{.column width=\"50%\"}\n\n| **Program**     | **Year** | **Count** |\n|-----------------|-----------:|---------:|\n| Evans School    |     First |    10   |\n| Evans School    |     Second   |    6    |\n| Arts & Sciences |     First |    5    |\n| Arts & Sciences |     Second   |    6    |\n| Public Health   |     First |    2    |\n| Public Health   |     Second   |    3    |\n| Other           |     First |    5    |\n| Other           |     Second   |    1    |\n:::\n:::{.column width=\"50%\"}\n* Each variable is a column.\n\n* Each observation is a row.\n\n* Each cell has a single value.\n:::\n::::\n\n## Billboard is Just Ugly-Messy\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 10 × 81\n    year artist     track time  date.entered   wk1   wk2   wk3   wk4   wk5   wk6\n   <dbl> <chr>      <chr> <tim> <date>       <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>\n 1  2000 2 Pac      Baby… 04:22 2000-02-26      87    82    72    77    87    94\n 2  2000 2Ge+her    The … 03:15 2000-09-02      91    87    92    NA    NA    NA\n 3  2000 3 Doors D… Kryp… 03:53 2000-04-08      81    70    68    67    66    57\n 4  2000 3 Doors D… Loser 04:24 2000-10-21      76    76    72    69    67    65\n 5  2000 504 Boyz   Wobb… 03:35 2000-04-15      57    34    25    17    17    31\n 6  2000 98^0       Give… 03:24 2000-08-19      51    39    34    26    26    19\n 7  2000 A*Teens    Danc… 03:44 2000-07-08      97    97    96    95   100    NA\n 8  2000 Aaliyah    I Do… 04:15 2000-01-29      84    62    51    41    38    35\n 9  2000 Aaliyah    Try … 04:03 2000-03-18      59    53    38    28    21    18\n10  2000 Adams, Yo… Open… 05:30 2000-08-26      76    76    74    69    68    67\n# ℹ 70 more variables: wk7 <dbl>, wk8 <dbl>, wk9 <dbl>, wk10 <dbl>, wk11 <dbl>,\n#   wk12 <dbl>, wk13 <dbl>, wk14 <dbl>, wk15 <dbl>, wk16 <dbl>, wk17 <dbl>,\n#   wk18 <dbl>, wk19 <dbl>, wk20 <dbl>, wk21 <dbl>, wk22 <dbl>, wk23 <dbl>,\n#   wk24 <dbl>, wk25 <dbl>, wk26 <dbl>, wk27 <dbl>, wk28 <dbl>, wk29 <dbl>,\n#   wk30 <dbl>, wk31 <dbl>, wk32 <dbl>, wk33 <dbl>, wk34 <dbl>, wk35 <dbl>,\n#   wk36 <dbl>, wk37 <dbl>, wk38 <dbl>, wk39 <dbl>, wk40 <dbl>, wk41 <dbl>,\n#   wk42 <dbl>, wk43 <dbl>, wk44 <dbl>, wk45 <dbl>, wk46 <dbl>, wk47 <dbl>, …\n```\n:::\n:::\n\n\n::: aside\nWeek columns continue up to `wk76`!\n:::\n\n## Billboard\n\n::: {.incremental}\n* What are the **observations** in the data?\n    + Song on the Billboard chart each week\n* What are the **variables** in the data?\n    + Year, artist, track, song length, date entered Hot 100, week since first entered Hot 100 (**spread over many columns**), rank during week (**spread over many columns**)\n* What are the **values** in the data?\n    + e.g. 2000; 3 Doors Down; Kryptonite; 3 minutes 53 seconds; April 8, 2000; Week 3 (**stuck in column headings**); rank 68 (**spread over many columns**)\n:::\n\n## `tidyr`\n\nThe `tidyr` package provides functions to tidy up data. \n\n. . . \n\nKey functions:\n\n* **`pivot_longer()`**: takes a set of columns and pivots them down (\"longer\") to make two new columns (which you can name yourself): \n    * A `name` column that stores the original column names\n    * A `value` with the values in those original columns\n\n. . . \n\n* **`pivot_wider()`**: inverts `pivot_longer()` by taking two columns and pivoting them up and across (\"wider\") into multiple columns\n\n. . . \n\nWe're going to focus only on `pivot_longer` here, but know that it can be reversed!\n\n## `pivot_longer()`\n\nThis function usually takes three arguments:\n\n1. **cols**: The columns we want to modify\n1. **names_to**: New variable name to store original columns\n1. **values_to**: New variable name to store original values\n\n## Example of `pivot_longer()`\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"|3-5\"}\nlibrary(tidyr)\nbillboard_2000 <- billboard_2000_raw %>%\n  pivot_longer(cols=wk1:wk76,\n               names_to =\"week\",\n               values_to = \"rank\")\nbillboard_2000 %>% \n  head(5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 7\n   year artist track                   time   date.entered week   rank\n  <dbl> <chr>  <chr>                   <time> <date>       <chr> <dbl>\n1  2000 2 Pac  Baby Don't Cry (Keep... 04:22  2000-02-26   wk1      87\n2  2000 2 Pac  Baby Don't Cry (Keep... 04:22  2000-02-26   wk2      82\n3  2000 2 Pac  Baby Don't Cry (Keep... 04:22  2000-02-26   wk3      72\n4  2000 2 Pac  Baby Don't Cry (Keep... 04:22  2000-02-26   wk4      77\n5  2000 2 Pac  Baby Don't Cry (Keep... 04:22  2000-02-26   wk5      87\n```\n:::\n:::\n\n\nNow we have a single week column!\n\n## Lots of missing values?!\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(billboard_2000$rank)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n   1.00   26.00   51.00   51.05   76.00  100.00   18785 \n```\n:::\n:::\n\n\nWe don't want to keep the 18785 rows with missing ranks.\n\n## Pivoting Better: `values_drop_na`\n\nAdding the argument `values_drop_na = TRUE` to `pivot_longer()` will remove rows with missing ranks.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"|5\"}\nbillboard_2000 <- billboard_2000_raw %>%\n  pivot_longer(cols = wk1:wk76, \n               names_to = \"week\", \n               values_to = \"rank\", \n               values_drop_na = TRUE)\nsummary(billboard_2000$rank)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   1.00   26.00   51.00   51.05   76.00  100.00 \n```\n:::\n:::\n\n\n. . . \n\nNo more `NA` values!\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndim(billboard_2000)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5307    7\n```\n:::\n:::\n\n\nAnd way fewer rows!\n\n## `parse_number()`\n\nThe week column is of they type character, but it should be numeric.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(billboard_2000$week)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"wk1\" \"wk2\" \"wk3\" \"wk4\" \"wk5\" \"wk6\"\n```\n:::\n:::\n\n\n. . . \n\n`parse_number()` grabs just the numeric information from a character string:\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"|2\"}\nbillboard_2000 <- billboard_2000 %>%\n    mutate(week = parse_number(week))\nsummary(billboard_2000$week)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   1.00    5.00   10.00   11.47   16.00   65.00 \n```\n:::\n:::\n\n\nMore sophisticated tools for character strings will be covered later in this course!\n\n# Dates and Times {background-image=\"images/lubridate.png\" background-size=\"contain\" background-opacity=\"0.25\" background-position=\"center\" .section-title background-color=\"#99a486\"}\n\n## `lubridate`\n\nThe package `lubridate` (part of the tidyverse!) has a *very large* number of functions you can use!\n\n. . . \n\n* Converting dates/times between formats (DD-MM-YY to YY-MM-DD)\n* Extracting dates/times (day of week, month, leap years, etc.)\n* Math with dates/times (time zone conversions, etc.)\n\n. . . \n\nThere's too much to cover all of it, but I'll run through a few examples.\n\n## Dates in `billboard_2000` \n\n\n::: {.cell}\n\n```{.r .cell-code}\nbillboard_2000 %>% \n  select(date.entered) %>% \n  head(10)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 10 × 1\n   date.entered\n   <date>      \n 1 2000-02-26  \n 2 2000-02-26  \n 3 2000-02-26  \n 4 2000-02-26  \n 5 2000-02-26  \n 6 2000-02-26  \n 7 2000-02-26  \n 8 2000-09-02  \n 9 2000-09-02  \n10 2000-09-02  \n```\n:::\n:::\n\n\n## Extracting Year, Month, or Day\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(lubridate)\nhead(billboard_2000$date.entered, 5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2000-02-26\" \"2000-02-26\" \"2000-02-26\" \"2000-02-26\" \"2000-02-26\"\n```\n:::\n\n```{.r .cell-code}\nyear(billboard_2000$date.entered) %>% \n  head(5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2000 2000 2000 2000 2000\n```\n:::\n\n```{.r .cell-code}\nmonth(billboard_2000$date.entered) %>% \n  head(5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2 2 2 2 2\n```\n:::\n\n```{.r .cell-code}\nday(billboard_2000$date.entered) %>% \n  head(5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 26 26 26 26 26\n```\n:::\n:::\n\n\n## Extracting Weekday, Quarter, and Leap Year Boolean\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwday(billboard_2000$date.entered) %>% \n  head(5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 7 7 7 7 7\n```\n:::\n\n```{.r .cell-code}\nquarter(billboard_2000$date.entered) %>% \n  head(5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1 1 1 1 1\n```\n:::\n\n```{.r .cell-code}\nleap_year(billboard_2000$date.entered) %>% \n   head(5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE TRUE TRUE TRUE TRUE\n```\n:::\n:::\n\n\n## Summary\n\n* Importing/Exporting Data: `readr`\n* Reshaping data: `tidyr`\n* Dates and times `lubridate`\n\n*Let's take a 10 minute break, then reconvene for an activity!*\n\n## Activity!\n\nIn groups of 2-3, you will use the [Billboard data](https://raw.githubusercontent.com/vsass/CSSS508/main/Lectures/Lecture5/data/billboard.csv) to investigate a question:\n\n1. Write down a question of interest that could be studied with this data\n     * *Which/how many artists had #1 hits?*\n     * *How does rank for each song change over time?*\n     * *Is there a relationship between highest rank and length of song?*\n2. Make the Billboard data *tidy*, perhaps using the code from this lecture.\n\n3. Perform additional steps (if necessary) to help answer your question:\n    * Perhaps using `filter`, `select`, `group_by`, `mutate`, `summarize`, etc.\n\n4. Make a plot or table that answers your question and write down your answer in a sentence.\n\n5. Send me your question, plot/table, and written answer on Canvas\n\n## Example: Question\n\n**Question:** Do songs that hit #1 have a different trajectory than those that don't?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbillboard_2000_question <- billboard_2000 %>%\n    group_by(artist, track) %>%\n    mutate(`Weeks at #1` = sum(rank == 1),\n           `Peak Rank`   = ifelse(any(rank == 1),\n                                  \"Hit #1\",\n                                  \"Didn't hit #1\")) \n```\n:::\n\n\n::: aside\nNote: `any(rank==1)` checks to see if *any* value of `rank` is equal to one for the given `artist` and `track`\n:::\n\n## Example Visualization\n\n::: {.panel-tabset}\n\n### Code\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nlibrary(ggthemes)\nbillboard_trajectories <- \n  ggplot(data = billboard_2000_question,\n         aes(x = week, y = rank, group = track,\n             color = `Peak Rank`)) +\n  geom_line(aes(size = `Peak Rank`), alpha = 0.4) +\n  theme_tufte() +\n  xlab(\"Week\") + ylab(\"Rank\") +\n  scale_color_manual(values = c(\"black\", \"red\")) +\n  scale_size_manual(values = c(0.25, 1)) +\n  theme(legend.position = c(0.90, 0.75),\n        legend.background = element_rect(fill = \"transparent\"))\n```\n:::\n\n\n### Charts of 2000: Beauty!\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbillboard_trajectories\n```\n\n::: {.cell-output-display}\n![](CSSS508_Lecture4_files/figure-revealjs/unnamed-chunk-18-1.svg)\n:::\n:::\n\n:::\n\n::: aside\nSongs that reach #1 on the Billboard charts appear to last >20 weeks on the charts, while other songs very rarely make it past that point.\n:::\n\n# Homework\n\n## Homework 4\n\n*On [Course Website!*](https://vsass.github.io/CSSS508/Homework/HW5/homework4.html)\n\n## Due dates\n\n\n::: {.cell}\n::: {.cell-output-display}\n```{=html}\n<div id=\"flhwqkgzns\" style=\"padding-left:0px;padding-right:0px;padding-top:10px;padding-bottom:10px;overflow-x:auto;overflow-y:auto;width:auto;height:auto;\">\n<style>#flhwqkgzns table {\n  font-family: Quattrocento, Raleway;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\n#flhwqkgzns thead, #flhwqkgzns tbody, #flhwqkgzns tfoot, #flhwqkgzns tr, #flhwqkgzns td, #flhwqkgzns th {\n  border-style: none;\n}\n\n#flhwqkgzns p {\n  margin: 0;\n  padding: 0;\n}\n\n#flhwqkgzns .gt_table {\n  display: table;\n  border-collapse: collapse;\n  line-height: normal;\n  margin-left: auto;\n  margin-right: auto;\n  color: #333333;\n  font-size: 100%;\n  font-weight: normal;\n  font-style: normal;\n  background-color: #FFFFFF;\n  width: auto;\n  border-top-style: hidden;\n  border-top-width: 2px;\n  border-top-color: #A8A8A8;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #A8A8A8;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n}\n\n#flhwqkgzns .gt_caption {\n  padding-top: 4px;\n  padding-bottom: 4px;\n}\n\n#flhwqkgzns .gt_title {\n  color: #333333;\n  font-size: 125%;\n  font-weight: initial;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-color: #FFFFFF;\n  border-bottom-width: 0;\n}\n\n#flhwqkgzns .gt_subtitle {\n  color: #333333;\n  font-size: 85%;\n  font-weight: initial;\n  padding-top: 3px;\n  padding-bottom: 5px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-color: #FFFFFF;\n  border-top-width: 0;\n}\n\n#flhwqkgzns .gt_heading {\n  background-color: #FFFFFF;\n  text-align: center;\n  border-bottom-color: #FFFFFF;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#flhwqkgzns .gt_bottom_border {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#flhwqkgzns .gt_col_headings {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#flhwqkgzns .gt_col_heading {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 6px;\n  padding-left: 5px;\n  padding-right: 5px;\n  overflow-x: hidden;\n}\n\n#flhwqkgzns .gt_column_spanner_outer {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  padding-top: 0;\n  padding-bottom: 0;\n  padding-left: 4px;\n  padding-right: 4px;\n}\n\n#flhwqkgzns .gt_column_spanner_outer:first-child {\n  padding-left: 0;\n}\n\n#flhwqkgzns .gt_column_spanner_outer:last-child {\n  padding-right: 0;\n}\n\n#flhwqkgzns .gt_column_spanner {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 5px;\n  overflow-x: hidden;\n  display: inline-block;\n  width: 100%;\n}\n\n#flhwqkgzns .gt_spanner_row {\n  border-bottom-style: hidden;\n}\n\n#flhwqkgzns .gt_group_heading {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  text-align: left;\n}\n\n#flhwqkgzns .gt_empty_group_heading {\n  padding: 0.5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: middle;\n}\n\n#flhwqkgzns .gt_from_md > :first-child {\n  margin-top: 0;\n}\n\n#flhwqkgzns .gt_from_md > :last-child {\n  margin-bottom: 0;\n}\n\n#flhwqkgzns .gt_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  margin: 10px;\n  border-top-style: solid;\n  border-top-width: 1px;\n  border-top-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  overflow-x: hidden;\n}\n\n#flhwqkgzns .gt_stub {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#flhwqkgzns .gt_stub_row_group {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n  vertical-align: top;\n}\n\n#flhwqkgzns .gt_row_group_first td {\n  border-top-width: 2px;\n}\n\n#flhwqkgzns .gt_row_group_first th {\n  border-top-width: 2px;\n}\n\n#flhwqkgzns .gt_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#flhwqkgzns .gt_first_summary_row {\n  border-top-style: solid;\n  border-top-color: #D3D3D3;\n}\n\n#flhwqkgzns .gt_first_summary_row.thick {\n  border-top-width: 2px;\n}\n\n#flhwqkgzns .gt_last_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#flhwqkgzns .gt_grand_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#flhwqkgzns .gt_first_grand_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-style: double;\n  border-top-width: 6px;\n  border-top-color: #D3D3D3;\n}\n\n#flhwqkgzns .gt_last_grand_summary_row_top {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: double;\n  border-bottom-width: 6px;\n  border-bottom-color: #D3D3D3;\n}\n\n#flhwqkgzns .gt_striped {\n  background-color: rgba(128, 128, 128, 0.05);\n}\n\n#flhwqkgzns .gt_table_body {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#flhwqkgzns .gt_footnotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#flhwqkgzns .gt_footnote {\n  margin: 0px;\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#flhwqkgzns .gt_sourcenotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#flhwqkgzns .gt_sourcenote {\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#flhwqkgzns .gt_left {\n  text-align: left;\n}\n\n#flhwqkgzns .gt_center {\n  text-align: center;\n}\n\n#flhwqkgzns .gt_right {\n  text-align: right;\n  font-variant-numeric: tabular-nums;\n}\n\n#flhwqkgzns .gt_font_normal {\n  font-weight: normal;\n}\n\n#flhwqkgzns .gt_font_bold {\n  font-weight: bold;\n}\n\n#flhwqkgzns .gt_font_italic {\n  font-style: italic;\n}\n\n#flhwqkgzns .gt_super {\n  font-size: 65%;\n}\n\n#flhwqkgzns .gt_footnote_marks {\n  font-size: 75%;\n  vertical-align: 0.4em;\n  position: initial;\n}\n\n#flhwqkgzns .gt_asterisk {\n  font-size: 100%;\n  vertical-align: 0;\n}\n\n#flhwqkgzns .gt_indent_1 {\n  text-indent: 5px;\n}\n\n#flhwqkgzns .gt_indent_2 {\n  text-indent: 10px;\n}\n\n#flhwqkgzns .gt_indent_3 {\n  text-indent: 15px;\n}\n\n#flhwqkgzns .gt_indent_4 {\n  text-indent: 20px;\n}\n\n#flhwqkgzns .gt_indent_5 {\n  text-indent: 25px;\n}\n</style>\n<table class=\"gt_table\" data-quarto-disable-processing=\"false\" data-quarto-bootstrap=\"false\">\n  <thead>\n    \n    <tr class=\"gt_col_headings gt_spanner_row\">\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_center\" rowspan=\"2\" colspan=\"1\" scope=\"col\" id=\"#\">#</th>\n      <th class=\"gt_center gt_columns_top_border gt_column_spanner_outer\" rowspan=\"1\" colspan=\"2\" scope=\"colgroup\" id=\"&lt;strong&gt;Section AA&lt;/strong&gt;\">\n        <span class=\"gt_column_spanner\"><strong>Section AA</strong></span>\n      </th>\n      <th class=\"gt_center gt_columns_top_border gt_column_spanner_outer\" rowspan=\"1\" colspan=\"2\" scope=\"colgroup\" id=\"&lt;strong&gt;Section AB&lt;/strong&gt;\">\n        <span class=\"gt_column_spanner\"><strong>Section AB</strong></span>\n      </th>\n    </tr>\n    <tr class=\"gt_col_headings\">\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_center\" rowspan=\"1\" colspan=\"1\" style=\"background-color: #C7CDAC;\" scope=\"col\" id=\"Homework Due\">Homework Due</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_center\" rowspan=\"1\" colspan=\"1\" style=\"background-color: #99A486;\" scope=\"col\" id=\"Peer Review Due\">Peer Review Due</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_center\" rowspan=\"1\" colspan=\"1\" style=\"background-color: #C7CDAC;\" scope=\"col\" id=\"Homework Due\">Homework Due</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_center\" rowspan=\"1\" colspan=\"1\" style=\"background-color: #99A486;\" scope=\"col\" id=\"Peer Review Due\">Peer Review Due</th>\n    </tr>\n  </thead>\n  <tbody class=\"gt_table_body\">\n    <tr><td headers=\"Homework\" class=\"gt_row gt_center\">1</td>\n<td headers=\"Due_Date_AA\" class=\"gt_row gt_center\">10 October</td>\n<td headers=\"Peer_Due_Date_AA\" class=\"gt_row gt_center\">15 October</td>\n<td headers=\"Due_Date_AB\" class=\"gt_row gt_center\">12 October</td>\n<td headers=\"Peer_Due_Date_AB\" class=\"gt_row gt_center\">17 October</td></tr>\n    <tr><td headers=\"Homework\" class=\"gt_row gt_center\">2</td>\n<td headers=\"Due_Date_AA\" class=\"gt_row gt_center\">17 October</td>\n<td headers=\"Peer_Due_Date_AA\" class=\"gt_row gt_center\">22 October</td>\n<td headers=\"Due_Date_AB\" class=\"gt_row gt_center\">19 October</td>\n<td headers=\"Peer_Due_Date_AB\" class=\"gt_row gt_center\">24 October</td></tr>\n    <tr><td headers=\"Homework\" class=\"gt_row gt_center\">3</td>\n<td headers=\"Due_Date_AA\" class=\"gt_row gt_center\">24 October</td>\n<td headers=\"Peer_Due_Date_AA\" class=\"gt_row gt_center\">29 October</td>\n<td headers=\"Due_Date_AB\" class=\"gt_row gt_center\">26 October</td>\n<td headers=\"Peer_Due_Date_AB\" class=\"gt_row gt_center\">31 October</td></tr>\n    <tr><td headers=\"Homework\" class=\"gt_row gt_center\" style=\"border-bottom-width: 3px; border-bottom-style: solid; border-bottom-color: #1e4655; border-top-width: 3px; border-top-style: solid; border-top-color: #1e4655; border-left-width: 3px; border-left-style: solid; border-left-color: #1e4655;\">4</td>\n<td headers=\"Due_Date_AA\" class=\"gt_row gt_center\" style=\"background-color: #C7CDAC; border-bottom-width: 3px; border-bottom-style: solid; border-bottom-color: #1e4655; border-top-width: 3px; border-top-style: solid; border-top-color: #1e4655;\">31 October</td>\n<td headers=\"Peer_Due_Date_AA\" class=\"gt_row gt_center\" style=\"background-color: #99A486; border-bottom-width: 3px; border-bottom-style: solid; border-bottom-color: #1e4655; border-top-width: 3px; border-top-style: solid; border-top-color: #1e4655;\">5 November</td>\n<td headers=\"Due_Date_AB\" class=\"gt_row gt_center\" style=\"background-color: #C7CDAC; border-bottom-width: 3px; border-bottom-style: solid; border-bottom-color: #1e4655; border-top-width: 3px; border-top-style: solid; border-top-color: #1e4655;\">2 November</td>\n<td headers=\"Peer_Due_Date_AB\" class=\"gt_row gt_center\" style=\"background-color: #99A486; border-bottom-width: 3px; border-bottom-style: solid; border-bottom-color: #1e4655; border-top-width: 3px; border-top-style: solid; border-top-color: #1e4655; border-right-width: 3px; border-right-style: solid; border-right-color: #1e4655;\">7 November</td></tr>\n    <tr><td headers=\"Homework\" class=\"gt_row gt_center\">5</td>\n<td headers=\"Due_Date_AA\" class=\"gt_row gt_center\">7 November</td>\n<td headers=\"Peer_Due_Date_AA\" class=\"gt_row gt_center\">12 November</td>\n<td headers=\"Due_Date_AB\" class=\"gt_row gt_center\">9 November</td>\n<td headers=\"Peer_Due_Date_AB\" class=\"gt_row gt_center\">14 November</td></tr>\n    <tr><td headers=\"Homework\" class=\"gt_row gt_center\">6</td>\n<td headers=\"Due_Date_AA\" class=\"gt_row gt_center\">14 November</td>\n<td headers=\"Peer_Due_Date_AA\" class=\"gt_row gt_center\">19 November</td>\n<td headers=\"Due_Date_AB\" class=\"gt_row gt_center\">16 November</td>\n<td headers=\"Peer_Due_Date_AB\" class=\"gt_row gt_center\">21 November</td></tr>\n    <tr><td headers=\"Homework\" class=\"gt_row gt_center\">7</td>\n<td headers=\"Due_Date_AA\" class=\"gt_row gt_center\">21 November</td>\n<td headers=\"Peer_Due_Date_AA\" class=\"gt_row gt_center\">26 November</td>\n<td headers=\"Due_Date_AB\" class=\"gt_row gt_center\">23 November</td>\n<td headers=\"Peer_Due_Date_AB\" class=\"gt_row gt_center\">28 November</td></tr>\n    <tr><td headers=\"Homework\" class=\"gt_row gt_center\">8</td>\n<td headers=\"Due_Date_AA\" class=\"gt_row gt_center\">28 November</td>\n<td headers=\"Peer_Due_Date_AA\" class=\"gt_row gt_center\">3 November</td>\n<td headers=\"Due_Date_AB\" class=\"gt_row gt_center\">30 November</td>\n<td headers=\"Peer_Due_Date_AB\" class=\"gt_row gt_center\">5 November</td></tr>\n    <tr><td headers=\"Homework\" class=\"gt_row gt_center\">9</td>\n<td headers=\"Due_Date_AA\" class=\"gt_row gt_center\">5 December</td>\n<td headers=\"Peer_Due_Date_AA\" class=\"gt_row gt_center\">10 December</td>\n<td headers=\"Due_Date_AB\" class=\"gt_row gt_center\">7 December</td>\n<td headers=\"Peer_Due_Date_AB\" class=\"gt_row gt_center\">12 December</td></tr>\n  </tbody>\n  \n  \n</table>\n</div>\n```\n:::\n:::",
    "supporting": [
      "CSSS508_Lecture4_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}