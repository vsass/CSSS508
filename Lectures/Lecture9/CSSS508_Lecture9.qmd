---
execute: 
  echo: true
  message: false
  warning: false
  fig-format: "svg"
format: 
  revealjs:
    theme: lecture_styles.scss
    highlight-style:  a11y-dark
    reference-location: margin
    slide-number: true
    code-link: true
    chalkboard: true
    incremental: false 
    smaller: true
    preview-links: true
    code-line-numbers: true
    history: false
    progress: true
    link-external-icon: true
    code-annotations: hover
    pointer:
      color: "#b18eb1"
revealjs-plugins:
  - pointer
---

```{r}
#| echo: false
#| cache: false
require(downlit)
require(xml2)
require(tidyverse)

knitr::opts_chunk$set(comment = ">")
```

## {#title-slide data-menu-title="Iteration" background="#1e4655" background-image="../../images/csss-logo.png" background-position="center top 5%" background-size="50%"}


[Iteration]{.custom-title}

[CS&SS 508 â€¢ Lecture 9]{.custom-subtitle}

[28 November 2023]{.custom-subtitle2}

[Victoria Sass]{.custom-subtitle3}

# Roadmap {.section-title background-color="#99a486"}

------------------------------------------------------------------------

::: columns
::: {.column width="50%"}
<br>

### Last time, we learned:

- Function Basics
- Types of Functions
  - Vector Functions
  - Dataframe Functions
  - Plot Functions
- Function Style Guide
:::

::: {.column width="50%"}
<br>

::: fragment
### Today, we will cover:
- Introduction to Iteration
- Common Iteration Tasks
  - Modifying Multiple Columns
  - Reading in Multiple Files
  - Saving Multiple Outputs
- Base `R` Equivalents
  - Apply Family
  - `for` loops
:::
:::
:::

# Introduction to Iteration {.section-title background-color="#99a486"}

## Bad Repetition

If someone doesn't know better, they might find the means of variables in the `swiss` data by typing a line of code for each column:

<br>

```{r}
#| eval: false
mean1 <- mean(swiss$Fertility)
mean2 <- mean(swiss$Agriculture)
mean3 <- mean(swissExamination)
mean4 <- mean(swiss$Fertility)
mean5 <- mean(swiss$Catholic)
mean5 <- mean(swiss$Infant.Mortality)
c(mean1, mean2 mean3, mean4, mean5, man6)
```

<br>

Can you spot the problems?

. . . 

<br>

How upset would they be if the `swiss` data had 200 columns instead of `r ncol(swiss)`?

## Good Repetition

```{r}
#| include: false
options(digits = 4)
```

Today you'll learn a better way to calculate column means using functions from the `purrr` package. 

<br>

```{r}
#| output-location: fragment
swiss |> summarize(
  across(Fertility:Infant.Mortality, mean)
  )
```

::: aside
Don't worry about the details yet! 
:::

## Goal: Don't Repeat Yourself (DRY)!

The **DRY** idea: Computers are much better at doing the same thing over and over again than we are.

::: {incremental}
* Writing code to repeat tasks for us reduces the most common human coding mistakes.
* It also *substantially* reduces the time and effort involved in processing large volumes of data.
* Lastly, compact code is more readable and easier to troubleshoot.
:::

## Method: Iteration!

Iteration involves repeatedly performing the same action on different objects. 

. . . 

<br>

We've already done some iteration, both because it's built into `R` in certain ways, and because many of the tidyverse packages we've used have functions that are iterative. 

. . . 

<br>

#### Some examples we've seen:

::: {.incremental}
- Multiplying a vector x by any integer 
  - *Other languages require explicit looping but `R` iterates automatically with its recycling rules*
- Facetting ggplots
- Summarizing a grouped dataset
:::

<br>

::: {.fragment}
We're now going to learn what makes `R` a functional programming language. That is, we'll learn some functions that themselves take functions as arguments.
:::

# {data-menu-title="`purrr``" background-image="images/purrr.png" background-size="contain" background-position="center" .section-title background-color="#1e4655"}


# Modifying Multiple Columns {.section-title background-color="#99a486"}

## Motivating Example

```{r}
df <- tibble(
  a = rnorm(10),
  b = rnorm(10),
  c = rnorm(10),
  d = rnorm(10)
)
```


# Reading in Multiple Files {.section-title background-color="#99a486"}

# Saving Multiple Outputs {.section-title background-color="#99a486"}

# Apply Family {.section-title background-color="#99a486"}

# `for` loops {.section-title background-color="#99a486"}